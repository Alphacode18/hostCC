diff --git a/doc/netperf.html b/doc/netperf.html
deleted file mode 100644
index a261f97..0000000
--- a/doc/netperf.html
+++ /dev/null
@@ -1,4359 +0,0 @@
-<html lang="en">
-<head>
-<title>Care and Feeding of Netperf 2.7.X</title>
-<meta http-equiv="Content-Type" content="text/html">
-<meta name="description" content="Care and Feeding of Netperf 2.7.X">
-<meta name="generator" content="makeinfo 4.13">
-<link title="Top" rel="top" href="#Top">
-<link href="http://www.gnu.org/software/texinfo/" rel="generator-home" title="Texinfo Homepage">
-<!--
-This is Rick Jones' feeble attempt at a Texinfo-based manual for the
-netperf benchmark.
-
-Copyright (C) 2005-2015 Hewlett-Packard Company
-
-     Permission is granted to copy, distribute and/or modify this
-     document per the terms of the netperf source license, a copy of
-     which can be found in the file `COPYING' of the basic netperf
-     distribution.
-   -->
-<meta http-equiv="Content-Style-Type" content="text/css">
-<style type="text/css"><!--
-  pre.display { font-family:inherit }
-  pre.format  { font-family:inherit }
-  pre.smalldisplay { font-family:inherit; font-size:smaller }
-  pre.smallformat  { font-family:inherit; font-size:smaller }
-  pre.smallexample { font-size:smaller }
-  pre.smalllisp    { font-size:smaller }
-  span.sc    { font-variant:small-caps }
-  span.roman { font-family:serif; font-weight:normal; }
-  span.sansserif { font-family:sans-serif; font-weight:normal; }
---></style>
-</head>
-<body>
-<h1 class="settitle">Care and Feeding of Netperf 2.7.X</h1>
-<div class="contents">
-<h2>Table of Contents</h2>
-<ul>
-<li><a name="toc_Top" href="#Top">Netperf Manual</a>
-<li><a name="toc_Introduction" href="#Introduction">1 Introduction</a>
-<ul>
-<li><a href="#Conventions">1.1 Conventions</a>
-</li></ul>
-<li><a name="toc_Installing-Netperf" href="#Installing-Netperf">2 Installing Netperf</a>
-<ul>
-<li><a href="#Getting-Netperf-Bits">2.1 Getting Netperf Bits</a>
-<li><a href="#Installing-Netperf-Bits">2.2 Installing Netperf</a>
-<li><a href="#Verifying-Installation">2.3 Verifying Installation</a>
-</li></ul>
-<li><a name="toc_The-Design-of-Netperf" href="#The-Design-of-Netperf">3 The Design of Netperf</a>
-<ul>
-<li><a href="#CPU-Utilization">3.1 CPU Utilization</a>
-<ul>
-<li><a href="#CPU-Utilization-in-a-Virtual-Guest">3.1.1 CPU Utilization in a Virtual Guest</a>
-</li></ul>
-</li></ul>
-<li><a name="toc_Global-Command_002dline-Options" href="#Global-Command_002dline-Options">4 Global Command-line Options</a>
-<ul>
-<li><a href="#Command_002dline-Options-Syntax">4.1 Command-line Options Syntax</a>
-<li><a href="#Global-Options">4.2 Global Options</a>
-</li></ul>
-<li><a name="toc_Using-Netperf-to-Measure-Bulk-Data-Transfer" href="#Using-Netperf-to-Measure-Bulk-Data-Transfer">5 Using Netperf to Measure Bulk Data Transfer</a>
-<ul>
-<li><a href="#Issues-in-Bulk-Transfer">5.1 Issues in Bulk Transfer</a>
-<li><a href="#Options-common-to-TCP-UDP-and-SCTP-tests">5.2 Options common to TCP UDP and SCTP tests</a>
-<ul>
-<li><a href="#TCP_005fSTREAM">5.2.1 TCP_STREAM</a>
-<li><a href="#TCP_005fMAERTS">5.2.2 TCP_MAERTS</a>
-<li><a href="#TCP_005fSENDFILE">5.2.3 TCP_SENDFILE</a>
-<li><a href="#UDP_005fSTREAM">5.2.4 UDP_STREAM</a>
-<li><a href="#XTI_005fTCP_005fSTREAM">5.2.5 XTI_TCP_STREAM</a>
-<li><a href="#XTI_005fUDP_005fSTREAM">5.2.6 XTI_UDP_STREAM</a>
-<li><a href="#SCTP_005fSTREAM">5.2.7 SCTP_STREAM</a>
-<li><a href="#DLCO_005fSTREAM">5.2.8 DLCO_STREAM</a>
-<li><a href="#DLCL_005fSTREAM">5.2.9 DLCL_STREAM</a>
-<li><a href="#STREAM_005fSTREAM">5.2.10 STREAM_STREAM</a>
-<li><a href="#DG_005fSTREAM">5.2.11 DG_STREAM</a>
-</li></ul>
-</li></ul>
-<li><a name="toc_Using-Netperf-to-Measure-Request_002fResponse" href="#Using-Netperf-to-Measure-Request_002fResponse">6 Using Netperf to Measure Request/Response</a>
-<ul>
-<li><a href="#Issues-in-Request_002fResponse">6.1 Issues in Request/Response</a>
-<li><a href="#Options-Common-to-TCP-UDP-and-SCTP-_005fRR-tests">6.2 Options Common to TCP UDP and SCTP _RR tests</a>
-<ul>
-<li><a href="#TCP_005fRR">6.2.1 TCP_RR</a>
-<li><a href="#TCP_005fCC">6.2.2 TCP_CC</a>
-<li><a href="#TCP_005fCRR">6.2.3 TCP_CRR</a>
-<li><a href="#UDP_005fRR">6.2.4 UDP_RR</a>
-<li><a href="#XTI_005fTCP_005fRR">6.2.5 XTI_TCP_RR</a>
-<li><a href="#XTI_005fTCP_005fCC">6.2.6 XTI_TCP_CC</a>
-<li><a href="#XTI_005fTCP_005fCRR">6.2.7 XTI_TCP_CRR</a>
-<li><a href="#XTI_005fUDP_005fRR">6.2.8 XTI_UDP_RR</a>
-<li><a href="#DLCL_005fRR">6.2.9 DLCL_RR</a>
-<li><a href="#DLCO_005fRR">6.2.10 DLCO_RR</a>
-<li><a href="#SCTP_005fRR">6.2.11 SCTP_RR</a>
-</li></ul>
-</li></ul>
-<li><a name="toc_Using-Netperf-to-Measure-Aggregate-Performance" href="#Using-Netperf-to-Measure-Aggregate-Performance">7 Using Netperf to Measure Aggregate Performance</a>
-<ul>
-<li><a href="#Running-Concurrent-Netperf-Tests">7.1 Running Concurrent Netperf Tests</a>
-<ul>
-<li><a href="#Issues-in-Running-Concurrent-Tests">7.1.1 Issues in Running Concurrent Tests</a>
-</li></ul>
-<li><a href="#Using-_002d_002denable_002dburst">7.2 Using - -enable-burst</a>
-<li><a href="#Using-_002d_002denable_002ddemo">7.3 Using - -enable-demo</a>
-</li></ul>
-<li><a name="toc_Using-Netperf-to-Measure-Bidirectional-Transfer" href="#Using-Netperf-to-Measure-Bidirectional-Transfer">8 Using Netperf to Measure Bidirectional Transfer</a>
-<ul>
-<li><a href="#Bidirectional-Transfer-with-Concurrent-Tests">8.1 Bidirectional Transfer with Concurrent Tests</a>
-<li><a href="#Bidirectional-Transfer-with-TCP_005fRR">8.2 Bidirectional Transfer with TCP_RR</a>
-<li><a href="#Implications-of-Concurrent-Tests-vs-Burst-Request_002fResponse">8.3 Implications of Concurrent Tests vs Burst Request/Response</a>
-</li></ul>
-<li><a name="toc_The-Omni-Tests" href="#The-Omni-Tests">9 The Omni Tests</a>
-<ul>
-<li><a href="#Native-Omni-Tests">9.1 Native Omni Tests</a>
-<li><a href="#Migrated-Tests">9.2 Migrated Tests</a>
-<li><a href="#Omni-Output-Selection">9.3 Omni Output Selection</a>
-<ul>
-<li><a href="#Omni-Output-Selectors">9.3.1 Omni Output Selectors</a>
-</li></ul>
-</li></ul>
-<li><a name="toc_Other-Netperf-Tests" href="#Other-Netperf-Tests">10 Other Netperf Tests</a>
-<ul>
-<li><a href="#CPU-rate-calibration">10.1 CPU rate calibration</a>
-<li><a href="#UUID-Generation">10.2 UUID Generation</a>
-</li></ul>
-<li><a name="toc_Address-Resolution" href="#Address-Resolution">11 Address Resolution</a>
-<li><a name="toc_Enhancing-Netperf" href="#Enhancing-Netperf">12 Enhancing Netperf</a>
-<li><a name="toc_Netperf4" href="#Netperf4">13 Netperf4</a>
-<li><a name="toc_Concept-Index" href="#Concept-Index">Concept Index</a>
-<li><a name="toc_Option-Index" href="#Option-Index">Option Index</a>
-</li></ul>
-</div>
-
-
-
-<div class="node">
-<a name="Top"></a>
-<p><hr>
-Next:&nbsp;<a rel="next" accesskey="n" href="#Introduction">Introduction</a>,
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#dir">(dir)</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#dir">(dir)</a>
-
-</div>
-
-<h2 class="unnumbered">Netperf Manual</h2>
-
-<p>This is Rick Jones' feeble attempt at a Texinfo-based manual for the
-netperf benchmark.
-
-   <p>Copyright &copy; 2005-2015 Hewlett-Packard Company
-<blockquote>
-Permission is granted to copy, distribute and/or modify this document
-per the terms of the netperf source license, a copy of which can be
-found in the file <samp><span class="file">COPYING</span></samp> of the basic netperf distribution.
-</blockquote>
-
-<ul class="menu">
-<li><a accesskey="1" href="#Introduction">Introduction</a>:                 An introduction to netperf - what it
-is and what it is not.
-<li><a accesskey="2" href="#Installing-Netperf">Installing Netperf</a>:           How to go about installing netperf.
-<li><a accesskey="3" href="#The-Design-of-Netperf">The Design of Netperf</a>
-<li><a accesskey="4" href="#Global-Command_002dline-Options">Global Command-line Options</a>
-<li><a accesskey="5" href="#Using-Netperf-to-Measure-Bulk-Data-Transfer">Using Netperf to Measure Bulk Data Transfer</a>
-<li><a accesskey="6" href="#Using-Netperf-to-Measure-Request_002fResponse">Using Netperf to Measure Request/Response </a>
-<li><a accesskey="7" href="#Using-Netperf-to-Measure-Aggregate-Performance">Using Netperf to Measure Aggregate Performance</a>
-<li><a accesskey="8" href="#Using-Netperf-to-Measure-Bidirectional-Transfer">Using Netperf to Measure Bidirectional Transfer</a>
-<li><a accesskey="9" href="#The-Omni-Tests">The Omni Tests</a>
-<li><a href="#Other-Netperf-Tests">Other Netperf Tests</a>
-<li><a href="#Address-Resolution">Address Resolution</a>
-<li><a href="#Enhancing-Netperf">Enhancing Netperf</a>
-<li><a href="#Netperf4">Netperf4</a>
-<li><a href="#Concept-Index">Concept Index</a>
-<li><a href="#Option-Index">Option Index</a>
-</ul>
-
-<div class="node">
-<a name="Introduction"></a>
-<p><hr>
-Next:&nbsp;<a rel="next" accesskey="n" href="#Installing-Netperf">Installing Netperf</a>,
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#Top">Top</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Top">Top</a>
-
-</div>
-
-<h2 class="chapter">1 Introduction</h2>
-
-<p><a name="index-Introduction-1"></a>
-Netperf is a benchmark that can be use to measure various aspect of
-networking performance.  The primary foci are bulk (aka
-unidirectional) data transfer and request/response performance using
-either TCP or UDP and the Berkeley Sockets interface.  As of this
-writing, the tests available either unconditionally or conditionally
-include:
-
-     <ul>
-<li>TCP and UDP unidirectional transfer and request/response over IPv4 and
-IPv6 using the Sockets interface.
-<li>TCP and UDP unidirectional transfer and request/response over IPv4
-using the XTI interface.
-<li>Link-level unidirectional transfer and request/response using the DLPI
-interface.
-<li>Unix domain sockets
-<li>SCTP unidirectional transfer and request/response over IPv4 and IPv6
-using the sockets interface.
-</ul>
-
-   <p>While not every revision of netperf will work on every platform
-listed, the intention is that at least some version of netperf will
-work on the following platforms:
-
-     <ul>
-<li>Unix - at least all the major variants.
-<li>Linux
-<li>Windows
-<li>Others
-</ul>
-
-   <p>Netperf is maintained and informally supported primarily by Rick
-Jones, who can perhaps be best described as Netperf Contributing
-Editor.  Non-trivial and very appreciated assistance comes from others
-in the network performance community, who are too numerous to mention
-here. While it is often used by them, netperf is NOT supported via any
-of the formal Hewlett-Packard support channels.  You should feel free
-to make enhancements and modifications to netperf to suit your
-nefarious porpoises, so long as you stay within the guidelines of the
-netperf copyright.  If you feel so inclined, you can send your changes
-to
-<a href="mailto:netperf-feedback@netperf.org">netperf-feedback</a> for possible
-inclusion into subsequent versions of netperf.
-
-   <p>It is the Contributing Editor's belief that the netperf license walks
-like open source and talks like open source. However, the license was
-never submitted for &ldquo;certification&rdquo; as an open source license.  If
-you would prefer to make contributions to a networking benchmark using
-a certified open source license, please consider netperf4, which is
-distributed under the terms of the GPLv2.
-
-   <p>The <a href="mailto:netperf-talk@netperf.org">netperf-talk</a> mailing list is
-available to discuss the care and feeding of netperf with others who
-share your interest in network performance benchmarking. The
-netperf-talk mailing list is a closed list (to deal with spam) and you
-must first subscribe by sending email to
-<a href="mailto:netperf-talk-request@netperf.org">netperf-talk-request</a>.
-
-<ul class="menu">
-<li><a accesskey="1" href="#Conventions">Conventions</a>
-</ul>
-
-<div class="node">
-<a name="Conventions"></a>
-<p><hr>
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#Introduction">Introduction</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Introduction">Introduction</a>
-
-</div>
-
-<h3 class="section">1.1 Conventions</h3>
-
-<p>A <dfn>sizespec</dfn> is a one or two item, comma-separated list used as an
-argument to a command-line option that can set one or two, related
-netperf parameters.  If you wish to set both parameters to separate
-values, items should be separated by a comma:
-
-<pre class="example">     parameter1,parameter2
-</pre>
-   <p>If you wish to set the first parameter without altering the value of
-the second from its default, you should follow the first item with a
-comma:
-
-<pre class="example">     parameter1,
-</pre>
-   <p>Likewise, precede the item with a comma if you wish to set only the
-second parameter:
-
-<pre class="example">     ,parameter2
-</pre>
-   <p>An item with no commas:
-
-<pre class="example">     parameter1and2
-</pre>
-   <p>will set both parameters to the same value.  This last mode is one of
-the most frequently used.
-
-   <p>There is another variant of the comma-separated, two-item list called
-a <dfn>optionspec</dfn> which is like a sizespec with the exception that a
-single item with no comma:
-
-<pre class="example">     parameter1
-</pre>
-   <p>will only set the value of the first parameter and will leave the
-second parameter at its default value.
-
-   <p>Netperf has two types of command-line options.  The first are global
-command line options.  They are essentially any option not tied to a
-particular test or group of tests.  An example of a global
-command-line option is the one which sets the test type - <samp><span class="option">-t</span></samp>.
-
-   <p>The second type of options are test-specific options.  These are
-options which are only applicable to a particular test or set of
-tests.  An example of a test-specific option would be the send socket
-buffer size for a TCP_STREAM test.
-
-   <p>Global command-line options are specified first with test-specific
-options following after a <code>--</code> as in:
-
-<pre class="example">     netperf &lt;global&gt; -- &lt;test-specific&gt;
-</pre>
-   <div class="node">
-<a name="Installing-Netperf"></a>
-<p><hr>
-Next:&nbsp;<a rel="next" accesskey="n" href="#The-Design-of-Netperf">The Design of Netperf</a>,
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#Introduction">Introduction</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Top">Top</a>
-
-</div>
-
-<h2 class="chapter">2 Installing Netperf</h2>
-
-<p><a name="index-Installation-2"></a>
-Netperf's primary form of distribution is source code.  This allows
-installation on systems other than those to which the authors have
-ready access and thus the ability to create binaries.  There are two
-styles of netperf installation.  The first runs the netperf server
-program - netserver - as a child of inetd.  This requires the
-installer to have sufficient privileges to edit the files
-<samp><span class="file">/etc/services</span></samp> and <samp><span class="file">/etc/inetd.conf</span></samp> or their
-platform-specific equivalents.
-
-   <p>The second style is to run netserver as a standalone daemon.  This
-second method does not require edit privileges on <samp><span class="file">/etc/services</span></samp>
-and <samp><span class="file">/etc/inetd.conf</span></samp> but does mean you must remember to run the
-netserver program explicitly after every system reboot.
-
-   <p>This manual assumes that those wishing to measure networking
-performance already know how to use anonymous FTP and/or a web
-browser. It is also expected that you have at least a passing
-familiarity with the networking protocols and interfaces involved. In
-all honesty, if you do not have such familiarity, likely as not you
-have some experience to gain before attempting network performance
-measurements.  The excellent texts by authors such as Stevens, Fenner
-and Rudoff and/or Stallings would be good starting points. There are
-likely other excellent sources out there as well.
-
-<ul class="menu">
-<li><a accesskey="1" href="#Getting-Netperf-Bits">Getting Netperf Bits</a>
-<li><a accesskey="2" href="#Installing-Netperf-Bits">Installing Netperf Bits</a>
-<li><a accesskey="3" href="#Verifying-Installation">Verifying Installation</a>
-</ul>
-
-<div class="node">
-<a name="Getting-Netperf-Bits"></a>
-<p><hr>
-Next:&nbsp;<a rel="next" accesskey="n" href="#Installing-Netperf-Bits">Installing Netperf Bits</a>,
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#Installing-Netperf">Installing Netperf</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Installing-Netperf">Installing Netperf</a>
-
-</div>
-
-<h3 class="section">2.1 Getting Netperf Bits</h3>
-
-<p>Gzipped tar files of netperf sources can be retrieved via
-<a href="ftp://ftp.netperf.org/netperf">anonymous FTP</a>
-for &ldquo;released&rdquo; versions of the bits.  Pre-release versions of the
-bits can be retrieved via anonymous FTP from the
-<a href="ftp://ftp.netperf.org/netperf/experimental">experimental</a> subdirectory.
-
-   <p>For convenience and ease of remembering, a link to the download site
-is provided via the
-<a href="http://www.netperf.org/">NetperfPage</a>
-
-   <p>The bits corresponding to each discrete release of netperf are
-<a href="http://www.netperf.org/svn/netperf2/tags">tagged</a> for retrieval
-via subversion.  For example, there is a tag for the first version
-corresponding to this version of the manual -
-<a href="http://www.netperf.org/svn/netperf2/tags/netperf-2.7.0">netperf 2.7.0</a>.  Those wishing to be on the bleeding edge of netperf
-development can use subversion to grab the
-<a href="http://www.netperf.org/svn/netperf2/trunk">top of trunk</a>.  When
-fixing bugs or making enhancements, patches against the top-of-trunk
-are preferred.
-
-   <p>There are likely other places around the Internet from which one can
-download netperf bits.  These may be simple mirrors of the main
-netperf site, or they may be local variants on netperf.  As with
-anything one downloads from the Internet, take care to make sure it is
-what you really wanted and isn't some malicious Trojan or whatnot.
-Caveat downloader.
-
-   <p>As a general rule, binaries of netperf and netserver are not
-distributed from ftp.netperf.org.  From time to time a kind soul or
-souls has packaged netperf as a Debian package available via the
-apt-get mechanism or as an RPM.  I would be most interested in
-learning how to enhance the makefiles to make that easier for people.
-
-<div class="node">
-<a name="Installing-Netperf-Bits"></a>
-<p><hr>
-Next:&nbsp;<a rel="next" accesskey="n" href="#Verifying-Installation">Verifying Installation</a>,
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#Getting-Netperf-Bits">Getting Netperf Bits</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Installing-Netperf">Installing Netperf</a>
-
-</div>
-
-<h3 class="section">2.2 Installing Netperf</h3>
-
-<p>Once you have downloaded the tar file of netperf sources onto your
-system(s), it is necessary to unpack the tar file, cd to the netperf
-directory, run configure and then make.  Most of the time it should be
-sufficient to just:
-
-<pre class="example">     gzcat netperf-&lt;version&gt;.tar.gz | tar xf -
-     cd netperf-&lt;version&gt;
-     ./configure
-     make
-     make install
-</pre>
-   <p>Most of the &ldquo;usual&rdquo; configure script options should be present
-dealing with where to install binaries and whatnot.
-<pre class="example">     ./configure --help
-</pre>
-   <p>should list all of those and more.  You may find the <code>--prefix</code>
-option helpful in deciding where the binaries and such will be put
-during the <code>make install</code>.
-
-   <p><a name="index-g_t_002d_002denable_002dcpuutil_002c-Configure-3"></a>If the netperf configure script does not know how to automagically
-detect which CPU utilization mechanism to use on your platform you may
-want to add a <code>--enable-cpuutil=mumble</code> option to the configure
-command.   If you have knowledge and/or experience to contribute to
-that area, feel free to contact <a href="mailto:netperf-feedback@netperf.org">netperf-feedback@netperf.org</a>.
-
-   <p><a name="index-g_t_002d_002denable_002dxti_002c-Configure-4"></a><a name="index-g_t_002d_002denable_002dunixdomain_002c-Configure-5"></a><a name="index-g_t_002d_002denable_002ddlpi_002c-Configure-6"></a><a name="index-g_t_002d_002denable_002dsctp_002c-Configure-7"></a>Similarly, if you want tests using the XTI interface, Unix Domain
-Sockets, DLPI or SCTP it will be necessary to add one or more
-<code>--enable-[xti|unixdomain|dlpi|sctp]=yes</code> options to the configure
-command.  As of this writing, the configure script will not include
-those tests automagically.
-
-   <p><a name="index-g_t_002d_002denable_002domni_002c-Configure-8"></a>Starting with version 2.5.0, netperf began migrating most of the
-&ldquo;classic&rdquo; netperf tests found in <samp><span class="file">src/nettest_bsd.c</span></samp> to the
-so-called &ldquo;omni&rdquo; tests (aka &ldquo;two routines to run them all&rdquo;) found
-in <samp><span class="file">src/nettest_omni.c</span></samp>.  This migration enables a number of new
-features such as greater control over what output is included, and new
-things to output.  The &ldquo;omni&rdquo; test is enabled by default in 2.5.0
-and a number of the classic tests are migrated - you can tell if a
-test has been migrated
-from the presence of <code>MIGRATED</code> in the test banner.  If you
-encounter problems with either the omni or migrated tests, please
-first attempt to obtain resolution via
-<a href="mailto:netperf-talk@netperf.org">netperf-talk@netperf.org</a> or
-<a href="mailto:netperf-feedback@netperf.org">netperf-feedback@netperf.org</a>.  If that is unsuccessful, you
-can add a <code>--enable-omni=no</code> to the configure command and the
-omni tests will not be compiled-in and the classic tests will not be
-migrated.
-
-   <p>Starting with version 2.5.0, netperf includes the &ldquo;burst mode&rdquo;
-functionality in a default compilation of the bits.  If you encounter
-problems with this, please first attempt to obtain help via
-<a href="mailto:netperf-talk@netperf.org">netperf-talk@netperf.org</a> or
-<a href="mailto:netperf-feedback@netperf.org">netperf-feedback@netperf.org</a>.  If that is unsuccessful, you
-can add a <code>--enable-burst=no</code> to the configure command and the
-burst mode functionality will not be compiled-in.
-
-   <p>On some platforms, it may be necessary to precede the configure
-command with a CFLAGS and/or LIBS variable as the netperf configure
-script is not yet smart enough to set them itself.  Whenever possible,
-these requirements will be found in <samp><span class="file">README.</span><var>platform</var></samp> files.
-Expertise and assistance in making that more automagic in the
-configure script would be most welcome.
-
-   <p><a name="index-Limiting-Bandwidth-9"></a><a name="index-Bandwidth-Limitation-10"></a><a name="index-g_t_002d_002denable_002dintervals_002c-Configure-11"></a><a name="index-g_t_002d_002denable_002dhistogram_002c-Configure-12"></a>Other optional configure-time settings include
-<code>--enable-intervals=yes</code> to give netperf the ability to &ldquo;pace&rdquo;
-its _STREAM tests and <code>--enable-histogram=yes</code> to have netperf
-keep a histogram of interesting times.  Each of these will have some
-effect on the measured result.  If your system supports
-<code>gethrtime()</code> the effect of the histogram measurement should be
-minimized but probably still measurable.  For example, the histogram
-of a netperf TCP_RR test will be of the individual transaction times:
-<pre class="example">     netperf -t TCP_RR -H lag -v 2
-     TCP REQUEST/RESPONSE TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to lag.hpl.hp.com (15.4.89.214) port 0 AF_INET : histogram
-     Local /Remote
-     Socket Size   Request  Resp.   Elapsed  Trans.
-     Send   Recv   Size     Size    Time     Rate
-     bytes  Bytes  bytes    bytes   secs.    per sec
-
-     16384  87380  1        1       10.00    3538.82
-     32768  32768
-     Alignment      Offset
-     Local  Remote  Local  Remote
-     Send   Recv    Send   Recv
-         8      0       0      0
-     Histogram of request/response times
-     UNIT_USEC     :    0:    0:    0:    0:    0:    0:    0:    0:    0:    0
-     TEN_USEC      :    0:    0:    0:    0:    0:    0:    0:    0:    0:    0
-     HUNDRED_USEC  :    0: 34480:  111:   13:   12:    6:    9:    3:    4:    7
-     UNIT_MSEC     :    0:   60:   50:   51:   44:   44:   72:  119:  100:  101
-     TEN_MSEC      :    0:  105:    0:    0:    0:    0:    0:    0:    0:    0
-     HUNDRED_MSEC  :    0:    0:    0:    0:    0:    0:    0:    0:    0:    0
-     UNIT_SEC      :    0:    0:    0:    0:    0:    0:    0:    0:    0:    0
-     TEN_SEC       :    0:    0:    0:    0:    0:    0:    0:    0:    0:    0
-     &gt;100_SECS: 0
-     HIST_TOTAL:      35391
-</pre>
-   <p>The histogram you see above is basically a base-10 log histogram where
-we can see that most of the transaction times were on the order of one
-hundred to one-hundred, ninety-nine microseconds, but they were
-occasionally as long as ten to nineteen milliseconds
-
-   <p>The <samp><span class="option">--enable-demo=yes</span></samp> configure option will cause code to be
-included to report interim results during a test run.  The rate at
-which interim results are reported can then be controlled via the
-global <samp><span class="option">-D</span></samp> option.  Here is an example of <samp><span class="option">-D</span></samp> output:
-
-<pre class="example">     $ src/netperf -D 1.35 -H tardy.hpl.hp.com -f M
-     MIGRATED TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to tardy.hpl.hp.com (15.9.116.144) port 0 AF_INET : demo
-     Interim result:    5.41 MBytes/s over 1.35 seconds ending at 1308789765.848
-     Interim result:   11.07 MBytes/s over 1.36 seconds ending at 1308789767.206
-     Interim result:   16.00 MBytes/s over 1.36 seconds ending at 1308789768.566
-     Interim result:   20.66 MBytes/s over 1.36 seconds ending at 1308789769.922
-     Interim result:   22.74 MBytes/s over 1.36 seconds ending at 1308789771.285
-     Interim result:   23.07 MBytes/s over 1.36 seconds ending at 1308789772.647
-     Interim result:   23.77 MBytes/s over 1.37 seconds ending at 1308789774.016
-     Recv   Send    Send
-     Socket Socket  Message  Elapsed
-     Size   Size    Size     Time     Throughput
-     bytes  bytes   bytes    secs.    MBytes/sec
-
-      87380  16384  16384    10.06      17.81
-</pre>
-   <p>Notice how the units of the interim result track that requested by the
-<samp><span class="option">-f</span></samp> option.  Also notice that sometimes the interval will be
-longer than the value specified in the <samp><span class="option">-D</span></samp> option.  This is
-normal and stems from how demo mode is implemented not by relying on
-interval timers or frequent calls to get the current time, but by
-calculating how many units of work must be performed to take at least
-the desired interval.
-
-   <p>Those familiar with this option in earlier versions of netperf will
-note the addition of the &ldquo;ending at&rdquo; text.  This is the time as
-reported by a <code>gettimeofday()</code> call (or its emulation) with a
-<code>NULL</code> timezone pointer.  This addition is intended to make it
-easier to insert interim results into an
-<a href="http://oss.oetiker.ch/rrdtool/doc/rrdtool.en.html">rrdtool</a>
-Round-Robin Database (RRD).  A likely bug-riddled example of doing so
-can be found in <samp><span class="file">doc/examples/netperf_interim_to_rrd.sh</span></samp>.  The
-time is reported out to milliseconds rather than microseconds because
-that is the most rrdtool understands as of the time of this writing.
-
-   <p>As of this writing, a <code>make install</code> will not actually update the
-files <samp><span class="file">/etc/services</span></samp> and/or <samp><span class="file">/etc/inetd.conf</span></samp> or their
-platform-specific equivalents.  It remains necessary to perform that
-bit of installation magic by hand.  Patches to the makefile sources to
-effect an automagic editing of the necessary files to have netperf
-installed as a child of inetd would be most welcome.
-
-   <p>Starting the netserver as a standalone daemon should be as easy as:
-<pre class="example">     $ netserver
-     Starting netserver at port 12865
-     Starting netserver at hostname 0.0.0.0 port 12865 and family 0
-</pre>
-   <p>Over time the specifics of the messages netserver prints to the screen
-may change but the gist will remain the same.
-
-   <p>If the compilation of netperf or netserver happens to fail, feel free
-to contact <a href="mailto:netperf-feedback@netperf.org">netperf-feedback@netperf.org</a> or join and ask in
-<a href="mailto:netperf-talk@netperf.org">netperf-talk@netperf.org</a>.  However, it is quite important
-that you include the actual compilation errors and perhaps even the
-configure log in your email.  Otherwise, it will be that much more
-difficult for someone to assist you.
-
-<div class="node">
-<a name="Verifying-Installation"></a>
-<p><hr>
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#Installing-Netperf-Bits">Installing Netperf Bits</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Installing-Netperf">Installing Netperf</a>
-
-</div>
-
-<h3 class="section">2.3 Verifying Installation</h3>
-
-<p>Basically, once netperf is installed and netserver is configured as a
-child of inetd, or launched as a standalone daemon, simply typing:
-<pre class="example">     netperf
-</pre>
-   <p>should result in output similar to the following:
-<pre class="example">     $ netperf
-     TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to localhost.localdomain (127.0.0.1) port 0 AF_INET
-     Recv   Send    Send
-     Socket Socket  Message  Elapsed
-     Size   Size    Size     Time     Throughput
-     bytes  bytes   bytes    secs.    10^6bits/sec
-
-      87380  16384  16384    10.00    2997.84
-</pre>
-   <div class="node">
-<a name="The-Design-of-Netperf"></a>
-<p><hr>
-Next:&nbsp;<a rel="next" accesskey="n" href="#Global-Command_002dline-Options">Global Command-line Options</a>,
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#Installing-Netperf">Installing Netperf</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Top">Top</a>
-
-</div>
-
-<h2 class="chapter">3 The Design of Netperf</h2>
-
-<p><a name="index-Design-of-Netperf-13"></a>
-Netperf is designed around a basic client-server model.  There are
-two executables - netperf and netserver.  Generally you will only
-execute the netperf program, with the netserver program being invoked
-by the remote system's inetd or having been previously started as its
-own standalone daemon.
-
-   <p>When you execute netperf it will establish a &ldquo;control connection&rdquo; to
-the remote system.  This connection will be used to pass test
-configuration information and results to and from the remote system.
-Regardless of the type of test to be run, the control connection will
-be a TCP connection using BSD sockets.  The control connection can use
-either IPv4 or IPv6.
-
-   <p>Once the control connection is up and the configuration information
-has been passed, a separate &ldquo;data&rdquo; connection will be opened for the
-measurement itself using the API's and protocols appropriate for the
-specified test.  When the test is completed, the data connection will
-be torn-down and results from the netserver will be passed-back via the
-control connection and combined with netperf's result for display to
-the user.
-
-   <p>Netperf places no traffic on the control connection while a test is in
-progress.  Certain TCP options, such as SO_KEEPALIVE, if set as your
-systems' default, may put packets out on the control connection while
-a test is in progress.  Generally speaking this will have no effect on
-the results.
-
-<ul class="menu">
-<li><a accesskey="1" href="#CPU-Utilization">CPU Utilization</a>
-</ul>
-
-<div class="node">
-<a name="CPU-Utilization"></a>
-<p><hr>
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#The-Design-of-Netperf">The Design of Netperf</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#The-Design-of-Netperf">The Design of Netperf</a>
-
-</div>
-
-<h3 class="section">3.1 CPU Utilization</h3>
-
-<p><a name="index-CPU-Utilization-14"></a>
-CPU utilization is an important, and alas all-too infrequently
-reported component of networking performance.  Unfortunately, it can
-be one of the most difficult metrics to measure accurately and
-portably.  Netperf will do its level best to report accurate
-CPU utilization figures, but some combinations of processor, OS and
-configuration may make that difficult.
-
-   <p>CPU utilization in netperf is reported as a value between 0 and 100%
-regardless of the number of CPUs involved.  In addition to CPU
-utilization, netperf will report a metric called a <dfn>service
-demand</dfn>.  The service demand is the normalization of CPU utilization
-and work performed.  For a _STREAM test it is the microseconds of CPU
-time consumed to transfer on KB (K == 1024) of data.  For a _RR test
-it is the microseconds of CPU time consumed processing a single
-transaction.   For both CPU utilization and service demand, lower is
-better.
-
-   <p>Service demand can be particularly useful when trying to gauge the
-effect of a performance change.  It is essentially a measure of
-efficiency, with smaller values being more efficient and thus
-&ldquo;better.&rdquo;
-
-   <p>Netperf is coded to be able to use one of several, generally
-platform-specific CPU utilization measurement mechanisms.  Single
-letter codes will be included in the CPU portion of the test banner to
-indicate which mechanism was used on each of the local (netperf) and
-remote (netserver) system.
-
-   <p>As of this writing those codes are:
-
-     <dl>
-<dt><code>U</code><dd>The CPU utilization measurement mechanism was unknown to netperf or
-netperf/netserver was not compiled to include CPU utilization
-measurements. The code for the null CPU utilization mechanism can be
-found in <samp><span class="file">src/netcpu_none.c</span></samp>.
-<br><dt><code>I</code><dd>An HP-UX-specific CPU utilization mechanism whereby the kernel
-incremented a per-CPU counter by one for each trip through the idle
-loop. This mechanism was only available on specially-compiled HP-UX
-kernels prior to HP-UX 10 and is mentioned here only for the sake of
-historical completeness and perhaps as a suggestion to those who might
-be altering other operating systems. While rather simple, perhaps even
-simplistic, this mechanism was quite robust and was not affected by
-the concerns of statistical methods, or methods attempting to track
-time in each of user, kernel, interrupt and idle modes which require
-quite careful accounting.  It can be thought-of as the in-kernel
-version of the looper <code>L</code> mechanism without the context switch
-overhead. This mechanism required calibration.
-<br><dt><code>P</code><dd>An HP-UX-specific CPU utilization mechanism whereby the kernel
-keeps-track of time (in the form of CPU cycles) spent in the kernel
-idle loop (HP-UX 10.0 to 11.31 inclusive), or where the kernel keeps
-track of time spent in idle, user, kernel and interrupt processing
-(HP-UX 11.23 and later).  The former requires calibration, the latter
-does not.  Values in either case are retrieved via one of the pstat(2)
-family of calls, hence the use of the letter <code>P</code>.  The code for
-these mechanisms is found in <samp><span class="file">src/netcpu_pstat.c</span></samp> and
-<samp><span class="file">src/netcpu_pstatnew.c</span></samp> respectively.
-<br><dt><code>K</code><dd>A Solaris-specific CPU utilization mechanism whereby the kernel keeps
-track of ticks (eg HZ) spent in the idle loop.  This method is
-statistical and is known to be inaccurate when the interrupt rate is
-above epsilon as time spent processing interrupts is not subtracted
-from idle.  The value is retrieved via a kstat() call - hence the use
-of the letter <code>K</code>.  Since this mechanism uses units of ticks (HZ)
-the calibration value should invariably match HZ. (Eg 100) The code
-for this mechanism is implemented in <samp><span class="file">src/netcpu_kstat.c</span></samp>.
-<br><dt><code>M</code><dd>A Solaris-specific mechanism available on Solaris 10 and latter which
-uses the new microstate accounting mechanisms.  There are two, alas,
-overlapping, mechanisms.  The first tracks nanoseconds spent in user,
-kernel, and idle modes. The second mechanism tracks nanoseconds spent
-in interrupt.  Since the mechanisms overlap, netperf goes through some
-hand-waving to try to &ldquo;fix&rdquo; the problem.  Since the accuracy of the
-handwaving cannot be completely determined, one must presume that
-while better than the <code>K</code> mechanism, this mechanism too is not
-without issues.  The values are retrieved via kstat() calls, but the
-letter code is set to <code>M</code> to distinguish this mechanism from the
-even less accurate <code>K</code> mechanism.  The code for this mechanism is
-implemented in <samp><span class="file">src/netcpu_kstat10.c</span></samp>.
-<br><dt><code>L</code><dd>A mechanism based on &ldquo;looper&rdquo;or &ldquo;soaker&rdquo; processes which sit in
-tight loops counting as fast as they possibly can. This mechanism
-starts a looper process for each known CPU on the system.  The effect
-of processor hyperthreading on the mechanism is not yet known.  This
-mechanism definitely requires calibration.  The code for the
-&ldquo;looper&rdquo;mechanism can be found in <samp><span class="file">src/netcpu_looper.c</span></samp>
-<br><dt><code>N</code><dd>A Microsoft Windows-specific mechanism, the code for which can be
-found in <samp><span class="file">src/netcpu_ntperf.c</span></samp>.  This mechanism too is based on
-what appears to be a form of micro-state accounting and requires no
-calibration.  On laptops, or other systems which may dynamically alter
-the CPU frequency to minimize power consumption, it has been suggested
-that this mechanism may become slightly confused, in which case using
-BIOS/uEFI settings to disable the power saving would be indicated.
-
-     <br><dt><code>S</code><dd>This mechanism uses <samp><span class="file">/proc/stat</span></samp> on Linux to retrieve time
-(ticks) spent in idle mode.  It is thought but not known to be
-reasonably accurate.  The code for this mechanism can be found in
-<samp><span class="file">src/netcpu_procstat.c</span></samp>.
-<br><dt><code>C</code><dd>A mechanism somewhat similar to <code>S</code> but using the sysctl() call
-on BSD-like Operating systems (*BSD and MacOS X).  The code for this
-mechanism can be found in <samp><span class="file">src/netcpu_sysctl.c</span></samp>.
-<br><dt><code>Others</code><dd>Other mechanisms included in netperf in the past have included using
-the times() and getrusage() calls.  These calls are actually rather
-poorly suited to the task of measuring CPU overhead for networking as
-they tend to be process-specific and much network-related processing
-can happen outside the context of a process, in places where it is not
-a given it will be charged to the correct, or even a process.  They
-are mentioned here as a warning to anyone seeing those mechanisms used
-in other networking benchmarks.  These mechanisms are not available in
-netperf 2.4.0 and later.
-</dl>
-
-   <p>For many platforms, the configure script will chose the best available
-CPU utilization mechanism.  However, some platforms have no
-particularly good mechanisms.  On those platforms, it is probably best
-to use the &ldquo;LOOPER&rdquo; mechanism which is basically some number of
-processes (as many as there are processors) sitting in tight little
-loops counting as fast as they can.  The rate at which the loopers
-count when the system is believed to be idle is compared with the rate
-when the system is running netperf and the ratio is used to compute
-CPU utilization.
-
-   <p>In the past, netperf included some mechanisms that only reported CPU
-time charged to the calling process.  Those mechanisms have been
-removed from netperf versions 2.4.0 and later because they are
-hopelessly inaccurate.  Networking can and often results in CPU time
-being spent in places - such as interrupt contexts - that do not get
-charged to a or the correct process.
-
-   <p>In fact, time spent in the processing of interrupts is a common issue
-for many CPU utilization mechanisms.  In particular, the &ldquo;PSTAT&rdquo;
-mechanism was eventually known to have problems accounting for certain
-interrupt time prior to HP-UX 11.11 (11iv1).  HP-UX 11iv2 and later
-are known/presumed to be good. The &ldquo;KSTAT&rdquo; mechanism is known to
-have problems on all versions of Solaris up to and including Solaris
-10.  Even the microstate accounting available via kstat in Solaris 10
-has issues, though perhaps not as bad as those of prior versions.
-
-   <p>The /proc/stat mechanism under Linux is in what the author would
-consider an &ldquo;uncertain&rdquo; category as it appears to be statistical,
-which may also have issues with time spent processing interrupts.
-
-   <p>In summary, be sure to &ldquo;sanity-check&rdquo; the CPU utilization figures
-with other mechanisms.  However, platform tools such as top, vmstat or
-mpstat are often based on the same mechanisms used by netperf.
-
-<ul class="menu">
-<li><a accesskey="1" href="#CPU-Utilization-in-a-Virtual-Guest">CPU Utilization in a Virtual Guest</a>
-</ul>
-
-<div class="node">
-<a name="CPU-Utilization-in-a-Virtual-Guest"></a>
-<p><hr>
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#CPU-Utilization">CPU Utilization</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#CPU-Utilization">CPU Utilization</a>
-
-</div>
-
-<h4 class="subsection">3.1.1 CPU Utilization in a Virtual Guest</h4>
-
-<p>The CPU utilization mechanisms used by netperf are &ldquo;inline&rdquo; in that
-they are run by the same netperf or netserver process as is running
-the test itself.  This works just fine for &ldquo;bare iron&rdquo; tests but
-runs into a problem when using virtual machines.
-
-   <p>The relationship between virtual guest and hypervisor can be thought
-of as being similar to that between a process and kernel in a bare
-iron system.  As such, (m)any CPU utilization mechanisms used in the
-virtual guest are similar to &ldquo;process-local&rdquo; mechanisms in a bare
-iron situation.  However, just as with bare iron and process-local
-mechanisms, much networking processing happens outside the context of
-the virtual guest.  It takes place in the hypervisor, and is not
-visible to mechanisms running in the guest(s).  For this reason, one
-should not really trust CPU utilization figures reported by netperf or
-netserver when running in a virtual guest.
-
-   <p>If one is looking to measure the added overhead of a virtualization
-mechanism, rather than rely on CPU utilization, one can rely instead
-on netperf _RR tests - path-lengths and overheads can be a significant
-fraction of the latency, so increases in overhead should appear as
-decreases in transaction rate.  Whatever you do, <b>DO NOT</b> rely on
-the throughput of a _STREAM test.  Achieving link-rate can be done via
-a multitude of options that mask overhead rather than eliminate it.
-
-<div class="node">
-<a name="Global-Command-line-Options"></a>
-<a name="Global-Command_002dline-Options"></a>
-<p><hr>
-Next:&nbsp;<a rel="next" accesskey="n" href="#Using-Netperf-to-Measure-Bulk-Data-Transfer">Using Netperf to Measure Bulk Data Transfer</a>,
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#The-Design-of-Netperf">The Design of Netperf</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Top">Top</a>
-
-</div>
-
-<h2 class="chapter">4 Global Command-line Options</h2>
-
-<p>This section describes each of the global command-line options
-available in the netperf and netserver binaries.  Essentially, it is
-an expanded version of the usage information displayed by netperf or
-netserver when invoked with the <samp><span class="option">-h</span></samp> global command-line
-option.
-
-<ul class="menu">
-<li><a accesskey="1" href="#Command_002dline-Options-Syntax">Command-line Options Syntax</a>
-<li><a accesskey="2" href="#Global-Options">Global Options</a>
-</ul>
-
-<div class="node">
-<a name="Command-line-Options-Syntax"></a>
-<a name="Command_002dline-Options-Syntax"></a>
-<p><hr>
-Next:&nbsp;<a rel="next" accesskey="n" href="#Global-Options">Global Options</a>,
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#Global-Command_002dline-Options">Global Command-line Options</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Global-Command_002dline-Options">Global Command-line Options</a>
-
-</div>
-
-<!-- node-name,  next,  previous,  up -->
-<h3 class="section">4.1 Command-line Options Syntax</h3>
-
-<p>Revision 1.8 of netperf introduced enough new functionality to overrun
-the English alphabet for mnemonic command-line option names, and the
-author was not and is not quite ready to switch to the contemporary
-<samp><span class="option">--mumble</span></samp> style of command-line options. (Call him a Luddite
-if you wish :).
-
-   <p>For this reason, the command-line options were split into two parts -
-the first are the global command-line options.  They are options that
-affect nearly any and every test type of netperf.  The second type are
-the test-specific command-line options.  Both are entered on the same
-command line, but they must be separated from one another by a <code>--</code>
-for correct parsing.  Global command-line options come first, followed
-by the <code>--</code> and then test-specific command-line options.  If there
-are no test-specific options to be set, the <code>--</code> may be omitted.  If
-there are no global command-line options to be set, test-specific
-options must still be preceded by a <code>--</code>.  For example:
-<pre class="example">     netperf &lt;global&gt; -- &lt;test-specific&gt;
-</pre>
-   <p>sets both global and test-specific options:
-<pre class="example">     netperf &lt;global&gt;
-</pre>
-   <p>sets just global options and:
-<pre class="example">     netperf -- &lt;test-specific&gt;
-</pre>
-   <p>sets just test-specific options.
-
-<div class="node">
-<a name="Global-Options"></a>
-<p><hr>
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#Command_002dline-Options-Syntax">Command-line Options Syntax</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Global-Command_002dline-Options">Global Command-line Options</a>
-
-</div>
-
-<!-- node-name,  next,  previous,  up -->
-<h3 class="section">4.2 Global Options</h3>
-
-
-<a name="index-g_t_002da_002c-Global-15"></a>
-<dl><dt><code>-a &lt;sizespec&gt;</code><dd>This option allows you to alter the alignment of the buffers used in
-the sending and receiving calls on the local system.. Changing the
-alignment of the buffers can force the system to use different copy
-schemes, which can have a measurable effect on performance.  If the
-page size for the system were 4096 bytes, and you want to pass
-page-aligned buffers beginning on page boundaries, you could use
-&lsquo;<samp><span class="samp">-a 4096</span></samp>&rsquo;.  By default the units are bytes, but suffix of &ldquo;G,&rdquo;
-&ldquo;M,&rdquo; or &ldquo;K&rdquo; will specify the units to be 2^30 (GB), 2^20 (MB) or
-2^10 (KB) respectively. A suffix of &ldquo;g,&rdquo; &ldquo;m&rdquo; or &ldquo;k&rdquo; will specify
-units of 10^9, 10^6 or 10^3 bytes respectively. [Default: 8 bytes]
-
-     <p><a name="index-g_t_002dA_002c-Global-16"></a><br><dt><code>-A &lt;sizespec&gt;</code><dd>This option is identical to the <samp><span class="option">-a</span></samp> option with the difference
-being it affects alignments for the remote system.
-
-     <p><a name="index-g_t_002db_002c-Global-17"></a><br><dt><code>-b &lt;size&gt;</code><dd>This option is only present when netperf has been configure with
-&ndash;enable-intervals=yes prior to compilation.  It sets the size of the
-burst of send calls in a _STREAM test.  When used in conjunction with
-the <samp><span class="option">-w</span></samp> option it can cause the rate at which data is sent to
-be &ldquo;paced.&rdquo;
-
-     <p><a name="index-g_t_002dB_002c-Global-18"></a><br><dt><code>-B &lt;string&gt;</code><dd>This option will cause <samp><span class="option">&lt;string&gt;</span></samp> to be appended to the brief
-(see -P) output of netperf.
-
-     <p><a name="index-g_t_002dc_002c-Global-19"></a><br><dt><code>-c [rate]</code><dd>This option will ask that CPU utilization and service demand be
-calculated for the local system.  For those CPU utilization mechanisms
-requiring calibration, the options rate parameter may be specified to
-preclude running another calibration step, saving 40 seconds of time.
-For those CPU utilization mechanisms requiring no calibration, the
-optional rate parameter will be utterly and completely ignored.
-[Default: no CPU measurements]
-
-     <p><a name="index-g_t_002dC_002c-Global-20"></a><br><dt><code>-C [rate]</code><dd>This option requests CPU utilization and service demand calculations
-for the remote system.  It is otherwise identical to the <samp><span class="option">-c</span></samp>
-option.
-
-     <p><a name="index-g_t_002dd_002c-Global-21"></a><br><dt><code>-d</code><dd>Each instance of this option will increase the quantity of debugging
-output displayed during a test.  If the debugging output level is set
-high enough, it may have a measurable effect on performance.
-Debugging information for the local system is printed to stdout.
-Debugging information for the remote system is sent by default to the
-file <samp><span class="file">/tmp/netperf.debug</span></samp>. [Default: no debugging output]
-
-     <p><a name="index-g_t_002dD_002c-Global-22"></a><br><dt><code>-D [interval,units]</code><dd>This option is only available when netperf is configured with
-&ndash;enable-demo=yes.  When set, it will cause netperf to emit periodic
-reports of performance during the run.  [<var>interval</var>,<var>units</var>]
-follow the semantics of an optionspec. If specified,
-<var>interval</var> gives the minimum interval in real seconds, it does not
-have to be whole seconds.  The <var>units</var> value can be used for the
-first guess as to how many units of work (bytes or transactions) must
-be done to take at least <var>interval</var> seconds. If omitted,
-<var>interval</var> defaults to one second and <var>units</var> to values
-specific to each test type.
-
-     <p><a name="index-g_t_002df_002c-Global-23"></a><br><dt><code>-f G|M|K|g|m|k|x</code><dd>This option can be used to change the reporting units for _STREAM
-tests.  Arguments of &ldquo;G,&rdquo; &ldquo;M,&rdquo; or &ldquo;K&rdquo; will set the units to
-2^30, 2^20 or 2^10 bytes/s respectively (EG power of two GB, MB or
-KB).  Arguments of &ldquo;g,&rdquo; &ldquo;,m&rdquo; or &ldquo;k&rdquo; will set the units to 10^9,
-10^6 or 10^3 bits/s respectively.  An argument of &ldquo;x&rdquo; requests the
-units be transactions per second and is only meaningful for a
-request-response test. [Default: &ldquo;m&rdquo; or 10^6 bits/s]
-
-     <p><a name="index-g_t_002dF_002c-Global-24"></a><br><dt><code>-F &lt;fillfile&gt;</code><dd>This option specified the file from which send which buffers will be
-pre-filled .  While the buffers will contain data from the specified
-file, the file is not fully transferred to the remote system as the
-receiving end of the test will not write the contents of what it
-receives to a file.  This can be used to pre-fill the send buffers
-with data having different compressibility and so is useful when
-measuring performance over mechanisms which perform compression.
-
-     <p>While previously required for a TCP_SENDFILE test, later versions of
-netperf removed that restriction, creating a temporary file as
-needed.  While the author cannot recall exactly when that took place,
-it is known to be unnecessary in version 2.5.0 and later.
-
-     <p><a name="index-g_t_002dh_002c-Global-25"></a><br><dt><code>-h</code><dd>This option causes netperf to display its &ldquo;global&rdquo; usage string and
-exit to the exclusion of all else.
-
-     <p><a name="index-g_t_002dH_002c-Global-26"></a><br><dt><code>-H &lt;optionspec&gt;</code><dd>This option will set the name of the remote system and or the address
-family used for the control connection.  For example:
-     <pre class="example">          -H linger,4
-</pre>
-     <p>will set the name of the remote system to &ldquo;linger&rdquo; and tells netperf to
-use IPv4 addressing only.
-     <pre class="example">          -H ,6
-</pre>
-     <p>will leave the name of the remote system at its default, and request
-that only IPv6 addresses be used for the control connection.
-     <pre class="example">          -H lag
-</pre>
-     <p>will set the name of the remote system to &ldquo;lag&rdquo; and leave the
-address family to AF_UNSPEC which means selection of IPv4 vs IPv6 is
-left to the system's address resolution.
-
-     <p>A value of &ldquo;inet&rdquo; can be used in place of &ldquo;4&rdquo; to request IPv4 only
-addressing.  Similarly, a value of &ldquo;inet6&rdquo; can be used in place of
-&ldquo;6&rdquo; to request IPv6 only addressing.  A value of &ldquo;0&rdquo; can be used
-to request either IPv4 or IPv6 addressing as name resolution dictates.
-
-     <p>By default, the options set with the global <samp><span class="option">-H</span></samp> option are
-inherited by the test for its data connection, unless a test-specific
-<samp><span class="option">-H</span></samp> option is specified.
-
-     <p>If a <samp><span class="option">-H</span></samp> option follows either the <samp><span class="option">-4</span></samp> or <samp><span class="option">-6</span></samp>
-options, the family setting specified with the -H option will override
-the <samp><span class="option">-4</span></samp> or <samp><span class="option">-6</span></samp> options for the remote address
-family. If no address family is specified, settings from a previous
-<samp><span class="option">-4</span></samp> or <samp><span class="option">-6</span></samp> option will remain.  In a nutshell, the
-last explicit global command-line option wins.
-
-     <p>[Default:  &ldquo;localhost&rdquo; for the remote name/IP address and &ldquo;0&rdquo; (eg
-AF_UNSPEC) for the remote address family.]
-
-     <p><a name="index-g_t_002dI_002c-Global-27"></a><br><dt><code>-I &lt;optionspec&gt;</code><dd>This option enables the calculation of confidence intervals and sets
-the confidence and width parameters with the first half of the
-optionspec being either 99 or 95 for 99% or 95% confidence
-respectively.  The second value of the optionspec specifies the width
-of the desired confidence interval.  For example
-     <pre class="example">          -I 99,5
-</pre>
-     <p>asks netperf to be 99% confident that the measured mean values for
-throughput and CPU utilization are within +/- 2.5% of the &ldquo;real&rdquo;
-mean values.  If the <samp><span class="option">-i</span></samp> option is specified and the
-<samp><span class="option">-I</span></samp> option is omitted, the confidence defaults to 99% and the
-width to 5% (giving +/- 2.5%)
-
-     <p>If classic netperf test calculates that the desired confidence
-intervals have not been met, it emits a noticeable warning that cannot
-be suppressed with the <samp><span class="option">-P</span></samp> or <samp><span class="option">-v</span></samp> options:
-
-     <pre class="example">          netperf -H tardy.cup -i 3 -I 99,5
-          TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to tardy.cup.hp.com (15.244.44.58) port 0 AF_INET : +/-2.5%  99% conf.
-          !!! WARNING
-          !!! Desired confidence was not achieved within the specified iterations.
-          !!! This implies that there was variability in the test environment that
-          !!! must be investigated before going further.
-          !!! Confidence intervals: Throughput      :  6.8%
-          !!!                       Local CPU util  :  0.0%
-          !!!                       Remote CPU util :  0.0%
-
-          Recv   Send    Send
-          Socket Socket  Message  Elapsed
-          Size   Size    Size     Time     Throughput
-          bytes  bytes   bytes    secs.    10^6bits/sec
-
-           32768  16384  16384    10.01      40.23
-</pre>
-     <p>In the example above we see that netperf did not meet the desired
-confidence intervals.  Instead of being 99% confident it was within
-+/- 2.5% of the real mean value of throughput it is only confident it
-was within +/-3.4%.  In this example, increasing the <samp><span class="option">-i</span></samp>
-option (described below) and/or increasing the iteration length with
-the <samp><span class="option">-l</span></samp> option might resolve the situation.
-
-     <p>In an explicit &ldquo;omni&rdquo; test, failure to meet the confidence intervals
-will not result in netperf emitting a warning.  To verify the hitting,
-or not, of the confidence intervals one will need to include them as
-part of an <a href="#Omni-Output-Selection">output selection</a> in the
-test-specific <samp><span class="option">-o</span></samp>, <samp><span class="option">-O</span></samp> or <samp><span class="option">k</span></samp> output selection
-options.  The warning about not hitting the confidence intervals will
-remain in a &ldquo;migrated&rdquo; classic netperf test.
-
-     <p><a name="index-g_t_002di_002c-Global-28"></a><br><dt><code>-i &lt;sizespec&gt;</code><dd>This option enables the calculation of confidence intervals and sets
-the minimum and maximum number of iterations to run in attempting to
-achieve the desired confidence interval.  The first value sets the
-maximum number of iterations to run, the second, the minimum.  The
-maximum number of iterations is silently capped at 30 and the minimum
-is silently floored at 3.  Netperf repeats the measurement the minimum
-number of iterations and continues until it reaches either the
-desired confidence interval, or the maximum number of iterations,
-whichever comes first.  A classic or migrated netperf test will not
-display the actual number of iterations run. An <a href="#The-Omni-Tests">omni test</a> will emit the number of iterations run if the
-<code>CONFIDENCE_ITERATION</code> output selector is included in the
-<a href="#Omni-Output-Selection">output selection</a>.
-
-     <p>If the <samp><span class="option">-I</span></samp> option is specified and the <samp><span class="option">-i</span></samp> option
-omitted the maximum number of iterations is set to 10 and the minimum
-to three.
-
-     <p>Output of a warning upon not hitting the desired confidence intervals
-follows the description provided for the <samp><span class="option">-I</span></samp> option.
-
-     <p>The total test time will be somewhere between the minimum and maximum
-number of iterations multiplied by the test length supplied by the
-<samp><span class="option">-l</span></samp> option.
-
-     <p><a name="index-g_t_002dj_002c-Global-29"></a><br><dt><code>-j</code><dd>This option instructs netperf to keep additional timing statistics
-when explicitly running an <a href="#The-Omni-Tests">omni test</a>.  These can
-be output when the test-specific <samp><span class="option">-o</span></samp>, <samp><span class="option">-O</span></samp> or
-<samp><span class="option">-k</span></samp> <a href="#Omni-Output-Selectors">output selectors</a> include one
-or more of:
-
-          <ul>
-<li>MIN_LATENCY
-<li>MAX_LATENCY
-<li>P50_LATENCY
-<li>P90_LATENCY
-<li>P99_LATENCY
-<li>MEAN_LATENCY
-<li>STDDEV_LATENCY
-</ul>
-
-     <p>These statistics will be based on an expanded (100 buckets per row
-rather than 10) histogram of times rather than a terribly long list of
-individual times.  As such, there will be some slight error thanks to
-the bucketing. However, the reduction in storage and processing
-overheads is well worth it.  When running a request/response test, one
-might get some idea of the error by comparing the <a href="#Omni-Output-Selectors"><code>MEAN_LATENCY</code></a> calculated from the histogram with the
-<code>RT_LATENCY</code> calculated from the number of request/response
-transactions and the test run time.
-
-     <p>In the case of a request/response test the latencies will be
-transaction latencies.  In the case of a receive-only test they will
-be time spent in the receive call.  In the case of a send-only test
-they will be time spent in the send call. The units will be
-microseconds. Added in netperf 2.5.0.
-
-     <p><a name="index-g_t_002dl_002c-Global-30"></a><br><dt><code>-l testlen</code><dd>This option controls the length of any <b>one</b> iteration of the requested
-test.  A positive value for <var>testlen</var> will run each iteration of
-the test for at least <var>testlen</var> seconds.  A negative value for
-<var>testlen</var> will run each iteration for the absolute value of
-<var>testlen</var> transactions for a _RR test or bytes for a _STREAM test.
-Certain tests, notably those using UDP can only be timed, they cannot
-be limited by transaction or byte count.  This limitation may be
-relaxed in an <a href="#The-Omni-Tests">omni</a> test.
-
-     <p>In some situations, individual iterations of a test may run for longer
-for the number of seconds specified by the <samp><span class="option">-l</span></samp> option.  In
-particular, this may occur for those tests where the socket buffer
-size(s) are significantly longer than the bandwidthXdelay product of
-the link(s) over which the data connection passes, or those tests
-where there may be non-trivial numbers of retransmissions.
-
-     <p>If confidence intervals are enabled via either <samp><span class="option">-I</span></samp> or
-<samp><span class="option">-i</span></samp> the total length of the netperf test will be somewhere
-between the minimum and maximum iteration count multiplied by
-<var>testlen</var>.
-
-     <p><a name="index-g_t_002dL_002c-Global-31"></a><br><dt><code>-L &lt;optionspec&gt;</code><dd>This option is identical to the <samp><span class="option">-H</span></samp> option with the difference
-being it sets the _local_ hostname/IP and/or address family
-information.  This option is generally unnecessary, but can be useful
-when you wish to make sure that the netperf control and data
-connections go via different paths.  It can also come-in handy if one
-is trying to run netperf through those evil, end-to-end breaking
-things known as firewalls.
-
-     <p>[Default: 0.0.0.0 (eg INADDR_ANY) for IPv4 and ::0 for IPv6 for the
-local name.  AF_UNSPEC for the local address family.]
-
-     <p><a name="index-g_t_002dn_002c-Global-32"></a><br><dt><code>-n numcpus</code><dd>This option tells netperf how many CPUs it should ass-u-me are active
-on the system running netperf.  In particular, this is used for the
-<a href="#CPU-Utilization">CPU utilization</a> and service demand calculations.
-On certain systems, netperf is able to determine the number of CPU's
-automagically. This option will override any number netperf might be
-able to determine on its own.
-
-     <p>Note that this option does _not_ set the number of CPUs on the system
-running netserver.  When netperf/netserver cannot automagically
-determine the number of CPUs that can only be set for netserver via a
-netserver <samp><span class="option">-n</span></samp> command-line option.
-
-     <p>As it is almost universally possible for netperf/netserver to
-determine the number of CPUs on the system automagically, 99 times out
-of 10 this option should not be necessary and may be removed in a
-future release of netperf.
-
-     <p><a name="index-g_t_002dN_002c-Global-33"></a><br><dt><code>-N</code><dd>This option tells netperf to forgo establishing a control
-connection. This makes it is possible to run some limited netperf
-tests without a corresponding netserver on the remote system.
-
-     <p>With this option set, the test to be run is to get all the addressing
-information it needs to establish its data connection from the command
-line or internal defaults.  If not otherwise specified by
-test-specific command line options, the data connection for a
-&ldquo;STREAM&rdquo; or &ldquo;SENDFILE&rdquo; test will be to the &ldquo;discard&rdquo; port, an
-&ldquo;RR&rdquo; test will be to the &ldquo;echo&rdquo; port, and a &ldquo;MEARTS&rdquo; test will
-be to the chargen port.
-
-     <p>The response size of an &ldquo;RR&rdquo; test will be silently set to be the
-same as the request size.  Otherwise the test would hang if the
-response size was larger than the request size, or would report an
-incorrect, inflated transaction rate if the response size was less
-than the request size.
-
-     <p>Since there is no control connection when this option is specified, it
-is not possible to set &ldquo;remote&rdquo; properties such as socket buffer
-size and the like via the netperf command line. Nor is it possible to
-retrieve such interesting remote information as CPU utilization.
-These items will be displayed as values which should make it
-immediately obvious that was the case.
-
-     <p>The only way to change remote characteristics such as socket buffer
-size or to obtain information such as CPU utilization is to employ
-platform-specific methods on the remote system.  Frankly, if one has
-access to the remote system to employ those methods one aught to be
-able to run a netserver there.  However, that ability may not be
-present in certain &ldquo;support&rdquo; situations, hence the addition of this
-option.
-
-     <p>Added in netperf 2.4.3.
-
-     <p><a name="index-g_t_002do_002c-Global-34"></a><br><dt><code>-o &lt;sizespec&gt;</code><dd>The value(s) passed-in with this option will be used as an offset
-added to the alignment specified with the <samp><span class="option">-a</span></samp> option.  For
-example:
-     <pre class="example">          -o 3 -a 4096
-</pre>
-     <p>will cause the buffers passed to the local (netperf) send and receive
-calls to begin three bytes past an address aligned to 4096
-bytes. [Default: 0 bytes]
-
-     <p><a name="index-g_t_002dO_002c-Global-35"></a><br><dt><code>-O &lt;sizespec&gt;</code><dd>This option behaves just as the <samp><span class="option">-o</span></samp> option but on the remote
-(netserver) system and in conjunction with the <samp><span class="option">-A</span></samp>
-option. [Default: 0 bytes]
-
-     <p><a name="index-g_t_002dp_002c-Global-36"></a><br><dt><code>-p &lt;optionspec&gt;</code><dd>The first value of the optionspec passed-in with this option tells
-netperf the port number at which it should expect the remote netserver
-to be listening for control connections.  The second value of the
-optionspec will request netperf to bind to that local port number
-before establishing the control connection.  For example
-     <pre class="example">          -p 12345
-</pre>
-     <p>tells netperf that the remote netserver is listening on port 12345 and
-leaves selection of the local port number for the control connection
-up to the local TCP/IP stack whereas
-     <pre class="example">          -p ,32109
-</pre>
-     <p>leaves the remote netserver port at the default value of 12865 and
-causes netperf to bind to the local port number 32109 before
-connecting to the remote netserver.
-
-     <p>In general, setting the local port number is only necessary when one
-is looking to run netperf through those evil, end-to-end breaking
-things known as firewalls.
-
-     <p><a name="index-g_t_002dP_002c-Global-37"></a><br><dt><code>-P 0|1</code><dd>A value of &ldquo;1&rdquo; for the <samp><span class="option">-P</span></samp> option will enable display of
-the test banner.  A value of &ldquo;0&rdquo; will disable display of the test
-banner. One might want to disable display of the test banner when
-running the same basic test type (eg TCP_STREAM) multiple times in
-succession where the test banners would then simply be redundant and
-unnecessarily clutter the output. [Default: 1 - display test banners]
-
-     <p><a name="index-g_t_002ds_002c-Global-38"></a><br><dt><code>-s &lt;seconds&gt;</code><dd>This option will cause netperf to sleep &lsquo;<samp><span class="samp">&lt;seconds&gt;</span></samp>&rsquo; before
-actually transferring data over the data connection.  This may be
-useful in situations where one wishes to start a great many netperf
-instances and do not want the earlier ones affecting the ability of
-the later ones to get established.
-
-     <p>Added somewhere between versions 2.4.3 and 2.5.0.
-
-     <p><a name="index-g_t_002dS_002c-Global-39"></a><br><dt><code>-S</code><dd>This option will cause an attempt to be made to set SO_KEEPALIVE on
-the data socket of a test using the BSD sockets interface.  The
-attempt will be made on the netperf side of all tests, and will be
-made on the netserver side of an <a href="#The-Omni-Tests">omni</a> or
-<a href="#Migrated-Tests">migrated</a> test.  No indication of failure is given
-unless debug output is enabled with the global <samp><span class="option">-d</span></samp> option.
-
-     <p>Added in version 2.5.0.
-
-     <p><a name="index-g_t_002dt_002c-Global-40"></a><br><dt><code>-t testname</code><dd>This option is used to tell netperf which test you wish to run.  As of
-this writing, valid values for <var>testname</var> include:
-          <ul>
-<li><a href="#TCP_005fSTREAM">TCP_STREAM</a>, <a href="#TCP_005fMAERTS">TCP_MAERTS</a>, <a href="#TCP_005fSENDFILE">TCP_SENDFILE</a>, <a href="#TCP_005fRR">TCP_RR</a>, <a href="#TCP_005fCRR">TCP_CRR</a>, <a href="#TCP_005fCC">TCP_CC</a>
-<li><a href="#UDP_005fSTREAM">UDP_STREAM</a>, <a href="#UDP_005fRR">UDP_RR</a>
-<li><a href="#XTI_005fTCP_005fSTREAM">XTI_TCP_STREAM</a>,  <a href="#XTI_005fTCP_005fRR">XTI_TCP_RR</a>, <a href="#XTI_005fTCP_005fCRR">XTI_TCP_CRR</a>, <a href="#XTI_005fTCP_005fCC">XTI_TCP_CC</a>
-<li><a href="#XTI_005fUDP_005fSTREAM">XTI_UDP_STREAM</a>, <a href="#XTI_005fUDP_005fRR">XTI_UDP_RR</a>
-<li><a href="#SCTP_005fSTREAM">SCTP_STREAM</a>, <a href="#SCTP_005fRR">SCTP_RR</a>
-<li><a href="#DLCO_005fSTREAM">DLCO_STREAM</a>, <a href="#DLCO_005fRR">DLCO_RR</a>,  <a href="#DLCL_005fSTREAM">DLCL_STREAM</a>, <a href="#DLCL_005fRR">DLCL_RR</a>
-<li><a href="#Other-Netperf-Tests">LOC_CPU</a>, <a href="#Other-Netperf-Tests">REM_CPU</a>
-<li><a href="#The-Omni-Tests">OMNI</a>
-</ul>
-     Not all tests are always compiled into netperf.  In particular, the
-&ldquo;XTI,&rdquo; &ldquo;SCTP,&rdquo; &ldquo;UNIXDOMAIN,&rdquo; and &ldquo;DL*&rdquo; tests are only included in
-netperf when configured with
-<samp><span class="option">--enable-[xti|sctp|unixdomain|dlpi]=yes</span></samp>.
-
-     <p>Netperf only runs one type of test no matter how many <samp><span class="option">-t</span></samp>
-options may be present on the command-line.  The last <samp><span class="option">-t</span></samp>
-global command-line option will determine the test to be
-run. [Default: TCP_STREAM]
-
-     <p><a name="index-g_t_002dT_002c-Global-41"></a><br><dt><code>-T &lt;optionspec&gt;</code><dd>This option controls the CPU, and probably by extension memory,
-affinity of netperf and/or netserver.
-     <pre class="example">          netperf -T 1
-</pre>
-     <p>will bind both netperf and netserver to &ldquo;CPU 1&rdquo; on their respective
-systems.
-     <pre class="example">          netperf -T 1,
-</pre>
-     <p>will bind just netperf to &ldquo;CPU 1&rdquo; and will leave netserver unbound.
-     <pre class="example">          netperf -T ,2
-</pre>
-     <p>will leave netperf unbound and will bind netserver to &ldquo;CPU 2.&rdquo;
-     <pre class="example">          netperf -T 1,2
-</pre>
-     <p>will bind netperf to &ldquo;CPU 1&rdquo; and netserver to &ldquo;CPU 2.&rdquo;
-
-     <p>This can be particularly useful when investigating performance issues
-involving where processes run relative to where NIC interrupts are
-processed or where NICs allocate their DMA buffers.
-
-     <p><a name="index-g_t_002dv_002c-Global-42"></a><br><dt><code>-v verbosity</code><dd>This option controls how verbose netperf will be in its output, and is
-often used in conjunction with the <samp><span class="option">-P</span></samp> option. If the
-verbosity is set to a value of &ldquo;0&rdquo; then only the test's SFM (Single
-Figure of Merit) is displayed.  If local <a href="#CPU-Utilization">CPU utilization</a> is requested via the <samp><span class="option">-c</span></samp> option then the SFM is
-the local service demand.  Othersise, if remote CPU utilization is
-requested via the <samp><span class="option">-C</span></samp> option then the SFM is the remote
-service demand.  If neither local nor remote CPU utilization are
-requested the SFM will be the measured throughput or transaction rate
-as implied by the test specified with the <samp><span class="option">-t</span></samp> option.
-
-     <p>If the verbosity level is set to &ldquo;1&rdquo; then the &ldquo;normal&rdquo; netperf
-result output for each test is displayed.
-
-     <p>If the verbosity level is set to &ldquo;2&rdquo; then &ldquo;extra&rdquo; information will
-be displayed.  This may include, but is not limited to the number of
-send or recv calls made and the average number of bytes per send or
-recv call, or a histogram of the time spent in each send() call or for
-each transaction if netperf was configured with
-<samp><span class="option">--enable-histogram=yes</span></samp>. [Default: 1 - normal verbosity]
-
-     <p>In an <a href="#The-Omni-Tests">omni</a> test the verbosity setting is largely
-ignored, save for when asking for the time histogram to be displayed.
-In version 2.5.0 and later there is no <a href="#Omni-Output-Selectors">output selector</a> for the histogram and so it remains displayed only when the
-verbosity level is set to 2.
-
-     <p><a name="index-g_t_002dV_002c-Global-43"></a><br><dt><code>-V</code><dd>This option displays the netperf version and then exits.
-
-     <p>Added in netperf 2.4.4.
-
-     <p><a name="index-g_t_002dw_002c-Global-44"></a><br><dt><code>-w time</code><dd>If netperf was configured with <samp><span class="option">--enable-intervals=yes</span></samp> then
-this value will set the inter-burst time to time milliseconds, and the
-<samp><span class="option">-b</span></samp> option will set the number of sends per burst.  The actual
-inter-burst time may vary depending on the system's timer resolution.
-
-     <p><a name="index-g_t_002dW_002c-Global-45"></a><br><dt><code>-W &lt;sizespec&gt;</code><dd>This option controls the number of buffers in the send (first or only
-value) and or receive (second or only value) buffer rings.  Unlike
-some benchmarks, netperf does not continuously send or receive from a
-single buffer.  Instead it rotates through a ring of
-buffers. [Default: One more than the size of the send or receive
-socket buffer sizes (<samp><span class="option">-s</span></samp> and/or <samp><span class="option">-S</span></samp> options) divided
-by the send <samp><span class="option">-m</span></samp> or receive <samp><span class="option">-M</span></samp> buffer size
-respectively]
-
-     <p><a name="index-g_t_002d4_002c-Global-46"></a><br><dt><code>-4</code><dd>Specifying this option will set both the local and remote address
-families to AF_INET - that is use only IPv4 addresses on the control
-connection.  This can be overridden by a subsequent <samp><span class="option">-6</span></samp>,
-<samp><span class="option">-H</span></samp> or <samp><span class="option">-L</span></samp> option.  Basically, the last option
-explicitly specifying an address family wins.  Unless overridden by a
-test-specific option, this will be inherited for the data connection
-as well.
-
-     <p><a name="index-g_t_002d6_002c-Global-47"></a><br><dt><code>-6</code><dd>Specifying this option will set both local and and remote address
-families to AF_INET6 - that is use only IPv6 addresses on the control
-connection.  This can be overridden by a subsequent <samp><span class="option">-4</span></samp>,
-<samp><span class="option">-H</span></samp> or <samp><span class="option">-L</span></samp> option.  Basically, the last address family
-explicitly specified wins.  Unless overridden by a test-specific
-option, this will be inherited for the data connection as well.
-
-</dl>
-
-<div class="node">
-<a name="Using-Netperf-to-Measure-Bulk-Data-Transfer"></a>
-<p><hr>
-Next:&nbsp;<a rel="next" accesskey="n" href="#Using-Netperf-to-Measure-Request_002fResponse">Using Netperf to Measure Request/Response</a>,
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#Global-Command_002dline-Options">Global Command-line Options</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Top">Top</a>
-
-</div>
-
-<h2 class="chapter">5 Using Netperf to Measure Bulk Data Transfer</h2>
-
-<p>The most commonly measured aspect of networked system performance is
-that of bulk or unidirectional transfer performance.  Everyone wants
-to know how many bits or bytes per second they can push across the
-network. The classic netperf convention for a bulk data transfer test
-name is to tack a &ldquo;_STREAM&rdquo; suffix to a test name.
-
-<ul class="menu">
-<li><a accesskey="1" href="#Issues-in-Bulk-Transfer">Issues in Bulk Transfer</a>
-<li><a accesskey="2" href="#Options-common-to-TCP-UDP-and-SCTP-tests">Options common to TCP UDP and SCTP tests</a>
-</ul>
-
-<div class="node">
-<a name="Issues-in-Bulk-Transfer"></a>
-<p><hr>
-Next:&nbsp;<a rel="next" accesskey="n" href="#Options-common-to-TCP-UDP-and-SCTP-tests">Options common to TCP UDP and SCTP tests</a>,
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#Using-Netperf-to-Measure-Bulk-Data-Transfer">Using Netperf to Measure Bulk Data Transfer</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Using-Netperf-to-Measure-Bulk-Data-Transfer">Using Netperf to Measure Bulk Data Transfer</a>
-
-</div>
-
-<!-- node-name,  next,  previous,  up -->
-<h3 class="section">5.1 Issues in Bulk Transfer</h3>
-
-<p>There are any number of things which can affect the performance of a
-bulk transfer test.
-
-   <p>Certainly, absent compression, bulk-transfer tests can be limited by
-the speed of the slowest link in the path from the source to the
-destination.  If testing over a gigabit link, you will not see more
-than a gigabit :) Such situations can be described as being
-<dfn>network-limited</dfn> or <dfn>NIC-limited</dfn>.
-
-   <p>CPU utilization can also affect the results of a bulk-transfer test.
-If the networking stack requires a certain number of instructions or
-CPU cycles per KB of data transferred, and the CPU is limited in the
-number of instructions or cycles it can provide, then the transfer can
-be described as being <dfn>CPU-bound</dfn>.
-
-   <p>A bulk-transfer test can be CPU bound even when netperf reports less
-than 100% CPU utilization.  This can happen on an MP system where one
-or more of the CPUs saturate at 100% but other CPU's remain idle.
-Typically, a single flow of data, such as that from a single instance
-of a netperf _STREAM test cannot make use of much more than the power
-of one CPU. Exceptions to this generally occur when netperf and/or
-netserver run on CPU(s) other than the CPU(s) taking interrupts from
-the NIC(s). In that case, one might see as much as two CPUs' worth of
-processing being used to service the flow of data.
-
-   <p>Distance and the speed-of-light can affect performance for a
-bulk-transfer; often this can be mitigated by using larger windows.
-One common limit to the performance of a transport using window-based
-flow-control is:
-<pre class="example">     Throughput &lt;= WindowSize/RoundTripTime
-</pre>
-   <p>As the sender can only have a window's-worth of data outstanding on
-the network at any one time, and the soonest the sender can receive a
-window update from the receiver is one RoundTripTime (RTT).  TCP and
-SCTP are examples of such protocols.
-
-   <p>Packet losses and their effects can be particularly bad for
-performance.  This is especially true if the packet losses result in
-retransmission timeouts for the protocol(s) involved.  By the time a
-retransmission timeout has happened, the flow or connection has sat
-idle for a considerable length of time.
-
-   <p>On many platforms, some variant on the <samp><span class="command">netstat</span></samp> command can
-be used to retrieve statistics about packet loss and
-retransmission. For example:
-<pre class="example">     netstat -p tcp
-</pre>
-   <p>will retrieve TCP statistics on the HP-UX Operating System.  On other
-platforms, it may not be possible to retrieve statistics for a
-specific protocol and something like:
-<pre class="example">     netstat -s
-</pre>
-   <p>would be used instead.
-
-   <p>Many times, such network statistics are keep since the time the stack
-started, and we are only really interested in statistics from when
-netperf was running.  In such situations something along the lines of:
-<pre class="example">     netstat -p tcp &gt; before
-     netperf -t TCP_mumble...
-     netstat -p tcp &gt; after
-</pre>
-   <p>is indicated.  The
-<a href="ftp://ftp.cup.hp.com/dist/networking/tools/">beforeafter</a> utility
-can be used to subtract the statistics in <samp><span class="file">before</span></samp> from the
-statistics in <samp><span class="file">after</span></samp>:
-<pre class="example">     beforeafter before after &gt; delta
-</pre>
-   <p>and then one can look at the statistics in <samp><span class="file">delta</span></samp>.  Beforeafter
-is distributed in source form so one can compile it on the platform(s)
-of interest.
-
-   <p>If running a version 2.5.0 or later &ldquo;omni&rdquo; test under Linux one can
-include either or both of:
-     <ul>
-<li>LOCAL_TRANSPORT_RETRANS
-<li>REMOTE_TRANSPORT_RETRANS
-</ul>
-
-   <p>in the values provided via a test-specific <samp><span class="option">-o</span></samp>, <samp><span class="option">-O</span></samp>,
-or <samp><span class="option">-k</span></samp> output selction option and netperf will report the
-retransmissions experienced on the data connection, as reported via a
-<code>getsockopt(TCP_INFO)</code> call.  If confidence intervals have been
-requested via the global <samp><span class="option">-I</span></samp> or <samp><span class="option">-i</span></samp> options, the
-reported value(s) will be for the last iteration.  If the test is over
-a protocol other than TCP, or on a platform other than Linux, the
-results are undefined.
-
-   <p>While it was written with HP-UX's netstat in mind, the
-<a href="ftp://ftp.cup.hp.com/dist/networking/briefs/annotated_netstat.txt">annotated netstat</a> writeup may be helpful with other platforms as well.
-
-<div class="node">
-<a name="Options-common-to-TCP-UDP-and-SCTP-tests"></a>
-<p><hr>
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#Issues-in-Bulk-Transfer">Issues in Bulk Transfer</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Using-Netperf-to-Measure-Bulk-Data-Transfer">Using Netperf to Measure Bulk Data Transfer</a>
-
-</div>
-
-<!-- node-name,  next,  previous,  up -->
-<h3 class="section">5.2 Options common to TCP UDP and SCTP tests</h3>
-
-<p>Many &ldquo;test-specific&rdquo; options are actually common across the
-different tests.  For those tests involving TCP, UDP and SCTP, whether
-using the BSD Sockets or the XTI interface those common options
-include:
-
-
-<a name="index-g_t_002dh_002c-Test_002dspecific-48"></a>
-<dl><dt><code>-h</code><dd>Display the test-suite-specific usage string and exit.  For a TCP_ or
-UDP_ test this will be the usage string from the source file
-nettest_bsd.c.  For an XTI_ test, this will be the usage string from
-the source file nettest_xti.c.  For an SCTP test, this will be the
-usage string from the source file nettest_sctp.c.
-
-     <br><dt><code>-H &lt;optionspec&gt;</code><dd>Normally, the remote hostname|IP and address family information is
-inherited from the settings for the control connection (eg global
-command-line <samp><span class="option">-H</span></samp>, <samp><span class="option">-4</span></samp> and/or <samp><span class="option">-6</span></samp> options).
-The test-specific <samp><span class="option">-H</span></samp> will override those settings for the
-data (aka test) connection only.  Settings for the control connection
-are left unchanged.
-
-     <p><a name="index-g_t_002dL_002c-Test_002dspecific-49"></a><br><dt><code>-L &lt;optionspec&gt;</code><dd>The test-specific <samp><span class="option">-L</span></samp> option is identical to the test-specific
-<samp><span class="option">-H</span></samp> option except it affects the local hostname|IP and address
-family information.  As with its global command-line counterpart, this
-is generally only useful when measuring though those evil, end-to-end
-breaking things called firewalls.
-
-     <p><a name="index-g_t_002dm_002c-Test_002dspecific-50"></a><br><dt><code>-m bytes</code><dd>Set the size of the buffer passed-in to the &ldquo;send&rdquo; calls of a
-_STREAM test.  Note that this may have only an indirect effect on the
-size of the packets sent over the network, and certain Layer 4
-protocols do _not_ preserve or enforce message boundaries, so setting
-<samp><span class="option">-m</span></samp> for the send size does not necessarily mean the receiver
-will receive that many bytes at any one time. By default the units are
-bytes, but suffix of &ldquo;G,&rdquo; &ldquo;M,&rdquo; or &ldquo;K&rdquo; will specify the units to
-be 2^30 (GB), 2^20 (MB) or 2^10 (KB) respectively. A suffix of &ldquo;g,&rdquo;
-&ldquo;m&rdquo; or &ldquo;k&rdquo; will specify units of 10^9, 10^6 or 10^3 bytes
-respectively. For example:
-     <pre class="example">          <code>-m 32K</code>
-</pre>
-     <p>will set the size to 32KB or 32768 bytes. [Default: the local send
-socket buffer size for the connection - either the system's default or
-the value set via the <samp><span class="option">-s</span></samp> option.]
-
-     <p><a name="index-g_t_002dM_002c-Test_002dspecific-51"></a><br><dt><code>-M bytes</code><dd>Set the size of the buffer passed-in to the &ldquo;recv&rdquo; calls of a
-_STREAM test.  This will be an upper bound on the number of bytes
-received per receive call. By default the units are bytes, but suffix
-of &ldquo;G,&rdquo; &ldquo;M,&rdquo; or &ldquo;K&rdquo; will specify the units to be 2^30 (GB), 2^20
-(MB) or 2^10 (KB) respectively.  A suffix of &ldquo;g,&rdquo; &ldquo;m&rdquo; or &ldquo;k&rdquo;
-will specify units of 10^9, 10^6 or 10^3 bytes respectively. For
-example:
-     <pre class="example">          <code>-M 32K</code>
-</pre>
-     <p>will set the size to 32KB or 32768 bytes. [Default: the remote receive
-socket buffer size for the data connection - either the system's
-default or the value set via the <samp><span class="option">-S</span></samp> option.]
-
-     <p><a name="index-g_t_002dP_002c-Test_002dspecific-52"></a><br><dt><code>-P &lt;optionspec&gt;</code><dd>Set the local and/or remote port numbers for the data connection.
-
-     <p><a name="index-g_t_002ds_002c-Test_002dspecific-53"></a><br><dt><code>-s &lt;sizespec&gt;</code><dd>This option sets the local (netperf) send and receive socket buffer
-sizes for the data connection to the value(s) specified.  Often, this
-will affect the advertised and/or effective TCP or other window, but
-on some platforms it may not. By default the units are bytes, but
-suffix of &ldquo;G,&rdquo; &ldquo;M,&rdquo; or &ldquo;K&rdquo; will specify the units to be 2^30
-(GB), 2^20 (MB) or 2^10 (KB) respectively.  A suffix of &ldquo;g,&rdquo; &ldquo;m&rdquo;
-or &ldquo;k&rdquo; will specify units of 10^9, 10^6 or 10^3 bytes
-respectively. For example:
-     <pre class="example">          <code>-s 128K</code>
-</pre>
-     <p>Will request the local send and receive socket buffer sizes to be
-128KB or 131072 bytes.
-
-     <p>While the historic expectation is that setting the socket buffer size
-has a direct effect on say the TCP window, today that may not hold
-true for all stacks. Further, while the historic expectation is that
-the value specified in a <code>setsockopt()</code> call will be the value returned
-via a <code>getsockopt()</code> call, at least one stack is known to deliberately
-ignore history.  When running under Windows a value of 0 may be used
-which will be an indication to the stack the user wants to enable a
-form of copy avoidance. [Default: -1 - use the system's default socket
-buffer sizes]
-
-     <p><a name="index-g_t_002dS-Test_002dspecific-54"></a><br><dt><code>-S &lt;sizespec&gt;</code><dd>This option sets the remote (netserver) send and/or receive socket
-buffer sizes for the data connection to the value(s) specified.
-Often, this will affect the advertised and/or effective TCP or other
-window, but on some platforms it may not. By default the units are
-bytes, but suffix of &ldquo;G,&rdquo; &ldquo;M,&rdquo; or &ldquo;K&rdquo; will specify the units to
-be 2^30 (GB), 2^20 (MB) or 2^10 (KB) respectively.  A suffix of &ldquo;g,&rdquo;
-&ldquo;m&rdquo; or &ldquo;k&rdquo; will specify units of 10^9, 10^6 or 10^3 bytes
-respectively.  For example:
-     <pre class="example">          <code>-S 128K</code>
-</pre>
-     <p>Will request the remote send and receive socket buffer sizes to be
-128KB or 131072 bytes.
-
-     <p>While the historic expectation is that setting the socket buffer size
-has a direct effect on say the TCP window, today that may not hold
-true for all stacks.  Further, while the historic expectation is that
-the value specified in a <code>setsockopt()</code> call will be the value returned
-via a <code>getsockopt()</code> call, at least one stack is known to deliberately
-ignore history.  When running under Windows a value of 0 may be used
-which will be an indication to the stack the user wants to enable a
-form of copy avoidance. [Default: -1 - use the system's default socket
-buffer sizes]
-
-     <p><a name="index-g_t_002d4_002c-Test_002dspecific-55"></a><br><dt><code>-4</code><dd>Set the local and remote address family for the data connection to
-AF_INET - ie use IPv4 addressing only.  Just as with their global
-command-line counterparts the last of the <samp><span class="option">-4</span></samp>, <samp><span class="option">-6</span></samp>,
-<samp><span class="option">-H</span></samp> or <samp><span class="option">-L</span></samp> option wins for their respective address
-families.
-
-     <p><a name="index-g_t_002d6_002c-Test_002dspecific-56"></a><br><dt><code>-6</code><dd>This option is identical to its <samp><span class="option">-4</span></samp> cousin, but requests IPv6
-addresses for the local and remote ends of the data connection.
-
-   </dl>
-
-<ul class="menu">
-<li><a accesskey="1" href="#TCP_005fSTREAM">TCP_STREAM</a>
-<li><a accesskey="2" href="#TCP_005fMAERTS">TCP_MAERTS</a>
-<li><a accesskey="3" href="#TCP_005fSENDFILE">TCP_SENDFILE</a>
-<li><a accesskey="4" href="#UDP_005fSTREAM">UDP_STREAM</a>
-<li><a accesskey="5" href="#XTI_005fTCP_005fSTREAM">XTI_TCP_STREAM</a>
-<li><a accesskey="6" href="#XTI_005fUDP_005fSTREAM">XTI_UDP_STREAM</a>
-<li><a accesskey="7" href="#SCTP_005fSTREAM">SCTP_STREAM</a>
-<li><a accesskey="8" href="#DLCO_005fSTREAM">DLCO_STREAM</a>
-<li><a accesskey="9" href="#DLCL_005fSTREAM">DLCL_STREAM</a>
-<li><a href="#STREAM_005fSTREAM">STREAM_STREAM</a>
-<li><a href="#DG_005fSTREAM">DG_STREAM</a>
-</ul>
-
-<div class="node">
-<a name="TCP_STREAM"></a>
-<a name="TCP_005fSTREAM"></a>
-<p><hr>
-Next:&nbsp;<a rel="next" accesskey="n" href="#TCP_005fMAERTS">TCP_MAERTS</a>,
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#Options-common-to-TCP-UDP-and-SCTP-tests">Options common to TCP UDP and SCTP tests</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Options-common-to-TCP-UDP-and-SCTP-tests">Options common to TCP UDP and SCTP tests</a>
-
-</div>
-
-<h4 class="subsection">5.2.1 TCP_STREAM</h4>
-
-<p>The TCP_STREAM test is the default test in netperf.  It is quite
-simple, transferring some quantity of data from the system running
-netperf to the system running netserver.  While time spent
-establishing the connection is not included in the throughput
-calculation, time spent flushing the last of the data to the remote at
-the end of the test is.  This is how netperf knows that all the data
-it sent was received by the remote.  In addition to the <a href="#Options-common-to-TCP-UDP-and-SCTP-tests">options common to STREAM tests</a>, the
-following test-specific options can be included to possibly alter the
-behavior of the test:
-
-     <dl>
-<dt><code>-C</code><dd>This option will set TCP_CORK mode on the data connection on those
-systems where TCP_CORK is defined (typically Linux).  A full
-description of TCP_CORK is beyond the scope of this manual, but in a
-nutshell it forces sub-MSS sends to be buffered so every segment sent
-is Maximum Segment Size (MSS) unless the application performs an
-explicit flush operation or the connection is closed.  At present
-netperf does not perform any explicit flush operations.  Setting
-TCP_CORK may improve the bitrate of tests where the &ldquo;send size&rdquo;
-(<samp><span class="option">-m</span></samp> option) is smaller than the MSS.  It should also improve
-(make smaller) the service demand.
-
-     <p>The Linux tcp(7) manpage states that TCP_CORK cannot be used in
-conjunction with TCP_NODELAY (set via the <samp><span class="option">-d</span></samp> option), however
-netperf does not validate command-line options to enforce that.
-
-     <br><dt><code>-D</code><dd>This option will set TCP_NODELAY on the data connection on those
-systems where TCP_NODELAY is defined.  This disables something known
-as the Nagle Algorithm, which is intended to make the segments TCP
-sends as large as reasonably possible.  Setting TCP_NODELAY for a
-TCP_STREAM test should either have no effect when the send size
-(<samp><span class="option">-m</span></samp> option) is larger than the MSS or will decrease reported
-bitrate and increase service demand when the send size is smaller than
-the MSS.  This stems from TCP_NODELAY causing each sub-MSS send to be
-its own TCP segment rather than being aggregated with other small
-sends.  This means more trips up and down the protocol stack per KB of
-data transferred, which means greater CPU utilization.
-
-     <p>If setting TCP_NODELAY with <samp><span class="option">-D</span></samp> affects throughput and/or
-service demand for tests where the send size (<samp><span class="option">-m</span></samp>) is larger
-than the MSS it suggests the TCP/IP stack's implementation of the
-Nagle Algorithm _may_ be broken, perhaps interpreting the Nagle
-Algorithm on a segment by segment basis rather than the proper user
-send by user send basis.  However, a better test of this can be
-achieved with the <a href="#TCP_005fRR">TCP_RR</a> test.
-
-   </dl>
-
-   <p>Here is an example of a basic TCP_STREAM test, in this case from a
-Debian Linux (2.6 kernel) system to an HP-UX 11iv2 (HP-UX 11.23)
-system:
-
-<pre class="example">     $ netperf -H lag
-     TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to lag.hpl.hp.com (15.4.89.214) port 0 AF_INET
-     Recv   Send    Send
-     Socket Socket  Message  Elapsed
-     Size   Size    Size     Time     Throughput
-     bytes  bytes   bytes    secs.    10^6bits/sec
-
-      32768  16384  16384    10.00      80.42
-</pre>
-   <p>We see that the default receive socket buffer size for the receiver
-(lag - HP-UX 11.23) is 32768 bytes, and the default socket send buffer
-size for the sender (Debian 2.6 kernel) is 16384 bytes, however Linux
-does &ldquo;auto tuning&rdquo; of socket buffer and TCP window sizes, which
-means the send socket buffer size may be different at the end of the
-test than it was at the beginning.  This is addressed in the <a href="#The-Omni-Tests">omni tests</a> added in version 2.5.0 and <a href="#Omni-Output-Selection">output selection</a>.  Throughput is expressed as 10^6 (aka
-Mega) bits per second, and the test ran for 10 seconds.  IPv4
-addresses (AF_INET) were used.
-
-<div class="node">
-<a name="TCP_MAERTS"></a>
-<a name="TCP_005fMAERTS"></a>
-<p><hr>
-Next:&nbsp;<a rel="next" accesskey="n" href="#TCP_005fSENDFILE">TCP_SENDFILE</a>,
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#TCP_005fSTREAM">TCP_STREAM</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Options-common-to-TCP-UDP-and-SCTP-tests">Options common to TCP UDP and SCTP tests</a>
-
-</div>
-
-<!-- node-name,  next,  previous,  up -->
-<h4 class="subsection">5.2.2 TCP_MAERTS</h4>
-
-<p>A TCP_MAERTS (MAERTS is STREAM backwards) test is &ldquo;just like&rdquo; a
-<a href="#TCP_005fSTREAM">TCP_STREAM</a> test except the data flows from the netserver to the
-netperf. The global command-line <samp><span class="option">-F</span></samp> option is ignored for
-this test type.  The test-specific command-line <samp><span class="option">-C</span></samp> option is
-ignored for this test type.
-
-   <p>Here is an example of a TCP_MAERTS test between the same two systems
-as in the example for the <a href="#TCP_005fSTREAM">TCP_STREAM</a> test.  This time we request
-larger socket buffers with <samp><span class="option">-s</span></samp> and <samp><span class="option">-S</span></samp> options:
-
-<pre class="example">     $ netperf -H lag -t TCP_MAERTS -- -s 128K -S 128K
-     TCP MAERTS TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to lag.hpl.hp.com (15.4.89.214) port 0 AF_INET
-     Recv   Send    Send
-     Socket Socket  Message  Elapsed
-     Size   Size    Size     Time     Throughput
-     bytes  bytes   bytes    secs.    10^6bits/sec
-
-     221184 131072 131072    10.03      81.14
-</pre>
-   <p>Where we see that Linux, unlike HP-UX, may not return the same value
-in a <code>getsockopt()</code> as was requested in the prior <code>setsockopt()</code>.
-
-   <p>This test is included more for benchmarking convenience than anything
-else.
-
-<div class="node">
-<a name="TCP_SENDFILE"></a>
-<a name="TCP_005fSENDFILE"></a>
-<p><hr>
-Next:&nbsp;<a rel="next" accesskey="n" href="#UDP_005fSTREAM">UDP_STREAM</a>,
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#TCP_005fMAERTS">TCP_MAERTS</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Options-common-to-TCP-UDP-and-SCTP-tests">Options common to TCP UDP and SCTP tests</a>
-
-</div>
-
-<!-- node-name,  next,  previous,  up -->
-<h4 class="subsection">5.2.3 TCP_SENDFILE</h4>
-
-<p>The TCP_SENDFILE test is &ldquo;just like&rdquo; a <a href="#TCP_005fSTREAM">TCP_STREAM</a> test except
-netperf the platform's <code>sendfile()</code> call instead of calling
-<code>send()</code>.  Often this results in a <dfn>zero-copy</dfn> operation
-where data is sent directly from the filesystem buffer cache.  This
-_should_ result in lower CPU utilization and possibly higher
-throughput.  If it does not, then you may want to contact your
-vendor(s) because they have a problem on their hands.
-
-   <p>Zero-copy mechanisms may also alter the characteristics (size and
-number of buffers per) of packets passed to the NIC.  In many stacks,
-when a copy is performed, the stack can &ldquo;reserve&rdquo; space at the
-beginning of the destination buffer for things like TCP, IP and Link
-headers.  This then has the packet contained in a single buffer which
-can be easier to DMA to the NIC.  When no copy is performed, there is
-no opportunity to reserve space for headers and so a packet will be
-contained in two or more buffers.
-
-   <p>As of some time before version 2.5.0, the <a href="#Global-Options">global <samp><span class="option">-F</span></samp> option</a> is no longer required for this test.  If it is not
-specified, netperf will create a temporary file, which it will delete
-at the end of the test.  If the <samp><span class="option">-F</span></samp> option is specified it
-must reference a file of at least the size of the send ring
-(See <a href="#Global-Options">the global <samp><span class="option">-W</span></samp> option</a>.) multiplied by
-the send size (See <a href="#Options-common-to-TCP-UDP-and-SCTP-tests">the test-specific <samp><span class="option">-m</span></samp> option</a>.).  All other TCP-specific options
-remain available and optional.
-
-   <p>In this first example:
-<pre class="example">     $ netperf -H lag -F ../src/netperf -t TCP_SENDFILE -- -s 128K -S 128K
-     TCP SENDFILE TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to lag.hpl.hp.com (15.4.89.214) port 0 AF_INET
-     alloc_sendfile_buf_ring: specified file too small.
-     file must be larger than send_width * send_size
-</pre>
-   <p>we see what happens when the file is too small.  Here:
-
-<pre class="example">     $ netperf -H lag -F /boot/vmlinuz-2.6.8-1-686 -t TCP_SENDFILE -- -s 128K -S 128K
-     TCP SENDFILE TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to lag.hpl.hp.com (15.4.89.214) port 0 AF_INET
-     Recv   Send    Send
-     Socket Socket  Message  Elapsed
-     Size   Size    Size     Time     Throughput
-     bytes  bytes   bytes    secs.    10^6bits/sec
-
-     131072 221184 221184    10.02      81.83
-</pre>
-   <p>we resolve that issue by selecting a larger file.
-
-<div class="node">
-<a name="UDP_STREAM"></a>
-<a name="UDP_005fSTREAM"></a>
-<p><hr>
-Next:&nbsp;<a rel="next" accesskey="n" href="#XTI_005fTCP_005fSTREAM">XTI_TCP_STREAM</a>,
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#TCP_005fSENDFILE">TCP_SENDFILE</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Options-common-to-TCP-UDP-and-SCTP-tests">Options common to TCP UDP and SCTP tests</a>
-
-</div>
-
-<h4 class="subsection">5.2.4 UDP_STREAM</h4>
-
-<p>A UDP_STREAM test is similar to a <a href="#TCP_005fSTREAM">TCP_STREAM</a> test except UDP is
-used as the transport rather than TCP.
-
-   <p><a name="index-Limiting-Bandwidth-57"></a>A UDP_STREAM test has no end-to-end flow control - UDP provides none
-and neither does netperf.  However, if you wish, you can configure
-netperf with <code>--enable-intervals=yes</code> to enable the global
-command-line <samp><span class="option">-b</span></samp> and <samp><span class="option">-w</span></samp> options to pace bursts of
-traffic onto the network.
-
-   <p>This has a number of implications.
-
-   <p>The biggest of these implications is the data which is sent might not
-be received by the remote.  For this reason, the output of a
-UDP_STREAM test shows both the sending and receiving throughput.  On
-some platforms, it may be possible for the sending throughput to be
-reported as a value greater than the maximum rate of the link.  This
-is common when the CPU(s) are faster than the network and there is no
-<dfn>intra-stack</dfn> flow-control.
-
-   <p>Here is an example of a UDP_STREAM test between two systems connected
-by a 10 Gigabit Ethernet link:
-<pre class="example">     $ netperf -t UDP_STREAM -H 192.168.2.125 -- -m 32768
-     UDP UNIDIRECTIONAL SEND TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 192.168.2.125 (192.168.2.125) port 0 AF_INET
-     Socket  Message  Elapsed      Messages
-     Size    Size     Time         Okay Errors   Throughput
-     bytes   bytes    secs            #      #   10^6bits/sec
-
-     124928   32768   10.00      105672      0    2770.20
-     135168           10.00      104844           2748.50
-
-</pre>
-   <p>The first line of numbers are statistics from the sending (netperf)
-side. The second line of numbers are from the receiving (netserver)
-side.  In this case, 105672 - 104844 or 828 messages did not make it
-all the way to the remote netserver process.
-
-   <p>If the value of the <samp><span class="option">-m</span></samp> option is larger than the local send
-socket buffer size (<samp><span class="option">-s</span></samp> option) netperf will likely abort with
-an error message about how the send call failed:
-
-<pre class="example">     netperf -t UDP_STREAM -H 192.168.2.125
-     UDP UNIDIRECTIONAL SEND TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 192.168.2.125 (192.168.2.125) port 0 AF_INET
-     udp_send: data send error: Message too long
-</pre>
-   <p>If the value of the <samp><span class="option">-m</span></samp> option is larger than the remote
-socket receive buffer, the reported receive throughput will likely be
-zero as the remote UDP will discard the messages as being too large to
-fit into the socket buffer.
-
-<pre class="example">     $ netperf -t UDP_STREAM -H 192.168.2.125 -- -m 65000 -S 32768
-     UDP UNIDIRECTIONAL SEND TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 192.168.2.125 (192.168.2.125) port 0 AF_INET
-     Socket  Message  Elapsed      Messages
-     Size    Size     Time         Okay Errors   Throughput
-     bytes   bytes    secs            #      #   10^6bits/sec
-
-     124928   65000   10.00       53595      0    2786.99
-      65536           10.00           0              0.00
-</pre>
-   <p>The example above was between a pair of systems running a &ldquo;Linux&rdquo;
-kernel. Notice that the remote Linux system returned a value larger
-than that passed-in to the <samp><span class="option">-S</span></samp> option.  In fact, this value
-was larger than the message size set with the <samp><span class="option">-m</span></samp> option.
-That the remote socket buffer size is reported as 65536 bytes would
-suggest to any sane person that a message of 65000 bytes would fit,
-but the socket isn't _really_ 65536 bytes, even though Linux is
-telling us so.  Go figure.
-
-<div class="node">
-<a name="XTI_TCP_STREAM"></a>
-<a name="XTI_005fTCP_005fSTREAM"></a>
-<p><hr>
-Next:&nbsp;<a rel="next" accesskey="n" href="#XTI_005fUDP_005fSTREAM">XTI_UDP_STREAM</a>,
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#UDP_005fSTREAM">UDP_STREAM</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Options-common-to-TCP-UDP-and-SCTP-tests">Options common to TCP UDP and SCTP tests</a>
-
-</div>
-
-<h4 class="subsection">5.2.5 XTI_TCP_STREAM</h4>
-
-<p>An XTI_TCP_STREAM test is simply a <a href="#TCP_005fSTREAM">TCP_STREAM</a> test using the XTI
-rather than BSD Sockets interface.  The test-specific <samp><span class="option">-X
-&lt;devspec&gt;</span></samp> option can be used to specify the name of the local and/or
-remote XTI device files, which is required by the <code>t_open()</code> call
-made by netperf XTI tests.
-
-   <p>The XTI_TCP_STREAM test is only present if netperf was configured with
-<code>--enable-xti=yes</code>.  The remote netserver must have also been
-configured with <code>--enable-xti=yes</code>.
-
-<div class="node">
-<a name="XTI_UDP_STREAM"></a>
-<a name="XTI_005fUDP_005fSTREAM"></a>
-<p><hr>
-Next:&nbsp;<a rel="next" accesskey="n" href="#SCTP_005fSTREAM">SCTP_STREAM</a>,
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#XTI_005fTCP_005fSTREAM">XTI_TCP_STREAM</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Options-common-to-TCP-UDP-and-SCTP-tests">Options common to TCP UDP and SCTP tests</a>
-
-</div>
-
-<h4 class="subsection">5.2.6 XTI_UDP_STREAM</h4>
-
-<p>An XTI_UDP_STREAM test is simply a <a href="#UDP_005fSTREAM">UDP_STREAM</a> test using the XTI
-rather than BSD Sockets Interface.  The test-specific <samp><span class="option">-X
-&lt;devspec&gt;</span></samp> option can be used to specify the name of the local and/or
-remote XTI device files, which is required by the <code>t_open()</code> call
-made by netperf XTI tests.
-
-   <p>The XTI_UDP_STREAM test is only present if netperf was configured with
-<code>--enable-xti=yes</code>. The remote netserver must have also been
-configured with <code>--enable-xti=yes</code>.
-
-<div class="node">
-<a name="SCTP_STREAM"></a>
-<a name="SCTP_005fSTREAM"></a>
-<p><hr>
-Next:&nbsp;<a rel="next" accesskey="n" href="#DLCO_005fSTREAM">DLCO_STREAM</a>,
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#XTI_005fUDP_005fSTREAM">XTI_UDP_STREAM</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Options-common-to-TCP-UDP-and-SCTP-tests">Options common to TCP UDP and SCTP tests</a>
-
-</div>
-
-<h4 class="subsection">5.2.7 SCTP_STREAM</h4>
-
-<p>An SCTP_STREAM test is essentially a <a href="#TCP_005fSTREAM">TCP_STREAM</a> test using the SCTP
-rather than TCP.  The <samp><span class="option">-D</span></samp> option will set SCTP_NODELAY, which
-is much like the TCP_NODELAY option for TCP.  The <samp><span class="option">-C</span></samp> option
-is not applicable to an SCTP test as there is no corresponding
-SCTP_CORK option.  The author is still figuring-out what the
-test-specific <samp><span class="option">-N</span></samp> option does :)
-
-   <p>The SCTP_STREAM test is only present if netperf was configured with
-<code>--enable-sctp=yes</code>. The remote netserver must have also been
-configured with <code>--enable-sctp=yes</code>.
-
-<div class="node">
-<a name="DLCO_STREAM"></a>
-<a name="DLCO_005fSTREAM"></a>
-<p><hr>
-Next:&nbsp;<a rel="next" accesskey="n" href="#DLCL_005fSTREAM">DLCL_STREAM</a>,
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#SCTP_005fSTREAM">SCTP_STREAM</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Options-common-to-TCP-UDP-and-SCTP-tests">Options common to TCP UDP and SCTP tests</a>
-
-</div>
-
-<h4 class="subsection">5.2.8 DLCO_STREAM</h4>
-
-<p>A DLPI Connection Oriented Stream (DLCO_STREAM) test is very similar
-in concept to a <a href="#TCP_005fSTREAM">TCP_STREAM</a> test.  Both use reliable,
-connection-oriented protocols.  The DLPI test differs from the TCP
-test in that its protocol operates only at the link-level and does not
-include TCP-style segmentation and reassembly.  This last difference
-means that the value  passed-in  with the <samp><span class="option">-m</span></samp> option must be
-less than the interface MTU.  Otherwise, the <samp><span class="option">-m</span></samp> and
-<samp><span class="option">-M</span></samp> options are just like their TCP/UDP/SCTP counterparts.
-
-   <p>Other DLPI-specific options include:
-
-     <dl>
-<dt><code>-D &lt;devspec&gt;</code><dd>This option is used to provide the fully-qualified names for the local
-and/or remote DLPI device files.  The syntax is otherwise identical to
-that of a <dfn>sizespec</dfn>.
-<br><dt><code>-p &lt;ppaspec&gt;</code><dd>This option is used to specify the local and/or remote DLPI PPA(s).
-The PPA is used to identify the interface over which traffic is to be
-sent/received. The syntax of a <dfn>ppaspec</dfn> is otherwise the same as
-a <dfn>sizespec</dfn>.
-<br><dt><code>-s sap</code><dd>This option specifies the 802.2 SAP for the test.  A SAP is somewhat
-like either the port field of a TCP or UDP header or the protocol
-field of an IP header.  The specified SAP should not conflict with any
-other active SAPs on the specified PPA's (<samp><span class="option">-p</span></samp> option).
-<br><dt><code>-w &lt;sizespec&gt;</code><dd>This option specifies the local send and receive window sizes in units
-of frames on those platforms which support setting such things.
-<br><dt><code>-W &lt;sizespec&gt;</code><dd>This option specifies the remote send and receive window sizes in
-units of frames on those platforms which support setting such things.
-</dl>
-
-   <p>The DLCO_STREAM test is only present if netperf was configured with
-<code>--enable-dlpi=yes</code>. The remote netserver must have also been
-configured with <code>--enable-dlpi=yes</code>.
-
-<div class="node">
-<a name="DLCL_STREAM"></a>
-<a name="DLCL_005fSTREAM"></a>
-<p><hr>
-Next:&nbsp;<a rel="next" accesskey="n" href="#STREAM_005fSTREAM">STREAM_STREAM</a>,
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#DLCO_005fSTREAM">DLCO_STREAM</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Options-common-to-TCP-UDP-and-SCTP-tests">Options common to TCP UDP and SCTP tests</a>
-
-</div>
-
-<h4 class="subsection">5.2.9 DLCL_STREAM</h4>
-
-<p>A DLPI ConnectionLess Stream (DLCL_STREAM) test is analogous to a
-<a href="#UDP_005fSTREAM">UDP_STREAM</a> test in that both make use of unreliable/best-effort,
-connection-less transports.  The DLCL_STREAM test differs from the
-<a href="#UDP_005fSTREAM">UDP_STREAM</a> test in that the message size (<samp><span class="option">-m</span></samp> option) must
-always be less than the link MTU as there is no IP-like fragmentation
-and reassembly available and netperf does not presume to provide one.
-
-   <p>The test-specific command-line options for a DLCL_STREAM test are the
-same as those for a <a href="#DLCO_005fSTREAM">DLCO_STREAM</a> test.
-
-   <p>The DLCL_STREAM test is only present if netperf was configured with
-<code>--enable-dlpi=yes</code>. The remote netserver must have also been
-configured with <code>--enable-dlpi=yes</code>.
-
-<div class="node">
-<a name="STREAM_STREAM"></a>
-<a name="STREAM_005fSTREAM"></a>
-<p><hr>
-Next:&nbsp;<a rel="next" accesskey="n" href="#DG_005fSTREAM">DG_STREAM</a>,
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#DLCL_005fSTREAM">DLCL_STREAM</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Options-common-to-TCP-UDP-and-SCTP-tests">Options common to TCP UDP and SCTP tests</a>
-
-</div>
-
-<!-- node-name,  next,  previous,  up -->
-<h4 class="subsection">5.2.10 STREAM_STREAM</h4>
-
-<p>A Unix Domain Stream Socket Stream test (STREAM_STREAM) is similar in
-concept to a <a href="#TCP_005fSTREAM">TCP_STREAM</a> test, but using Unix Domain sockets.  It is,
-naturally, limited to intra-machine traffic.  A STREAM_STREAM test
-shares the <samp><span class="option">-m</span></samp>, <samp><span class="option">-M</span></samp>, <samp><span class="option">-s</span></samp> and <samp><span class="option">-S</span></samp>
-options of the other _STREAM tests.  In a STREAM_STREAM test the
-<samp><span class="option">-p</span></samp> option sets the directory in which the pipes will be
-created rather than setting a port number.  The default is to create
-the pipes in the system default for the <code>tempnam()</code> call.
-
-   <p>The STREAM_STREAM test is only present if netperf was configured with
-<code>--enable-unixdomain=yes</code>. The remote netserver must have also been
-configured with <code>--enable-unixdomain=yes</code>.
-
-<div class="node">
-<a name="DG_STREAM"></a>
-<a name="DG_005fSTREAM"></a>
-<p><hr>
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#STREAM_005fSTREAM">STREAM_STREAM</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Options-common-to-TCP-UDP-and-SCTP-tests">Options common to TCP UDP and SCTP tests</a>
-
-</div>
-
-<!-- node-name,  next,  previous,  up -->
-<h4 class="subsection">5.2.11 DG_STREAM</h4>
-
-<p>A Unix Domain Datagram Socket Stream test (SG_STREAM) is very much
-like a <a href="#TCP_005fSTREAM">TCP_STREAM</a> test except that message boundaries are preserved.
-In this way, it may also be considered similar to certain flavors of
-SCTP test which can also preserve message boundaries.
-
-   <p>All the options of a <a href="#STREAM_005fSTREAM">STREAM_STREAM</a> test are applicable to a DG_STREAM
-test.
-
-   <p>The DG_STREAM test is only present if netperf was configured with
-<code>--enable-unixdomain=yes</code>. The remote netserver must have also been
-configured with <code>--enable-unixdomain=yes</code>.
-
-<div class="node">
-<a name="Using-Netperf-to-Measure-Request%2fResponse"></a>
-<a name="Using-Netperf-to-Measure-Request_002fResponse"></a>
-<p><hr>
-Next:&nbsp;<a rel="next" accesskey="n" href="#Using-Netperf-to-Measure-Aggregate-Performance">Using Netperf to Measure Aggregate Performance</a>,
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#Using-Netperf-to-Measure-Bulk-Data-Transfer">Using Netperf to Measure Bulk Data Transfer</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Top">Top</a>
-
-</div>
-
-<h2 class="chapter">6 Using Netperf to Measure Request/Response</h2>
-
-<p>Request/response performance is often overlooked, yet it is just as
-important as bulk-transfer performance.  While things like larger
-socket buffers and TCP windows, and stateless offloads like TSO and
-LRO can cover a multitude of latency and even path-length sins, those
-sins cannot easily hide from a request/response test.  The convention
-for a request/response test is to have a _RR suffix.  There are
-however a few &ldquo;request/response&rdquo; tests that have other suffixes.
-
-   <p>A request/response test, particularly synchronous, one transaction at
-a time test such as those found by default in netperf, is particularly
-sensitive to the path-length of the networking stack.  An _RR test can
-also uncover those platforms where the NICs are strapped by default
-with overbearing interrupt avoidance settings in an attempt to
-increase the bulk-transfer performance (or rather, decrease the CPU
-utilization of a bulk-transfer test).  This sensitivity is most acute
-for small request and response sizes, such as the single-byte default
-for a netperf _RR test.
-
-   <p>While a bulk-transfer test reports its results in units of bits or
-bytes transferred per second, by default a mumble_RR test reports
-transactions per second where a transaction is defined as the
-completed exchange of a request and a response.  One can invert the
-transaction rate to arrive at the average round-trip latency.  If one
-is confident about the symmetry of the connection, the average one-way
-latency can be taken as one-half the average round-trip latency. As of
-version 2.5.0 (actually slightly before) netperf still does not do the
-latter, but will do the former if one sets the verbosity to 2 for a
-classic netperf test, or includes the appropriate <a href="#Omni-Output-Selectors">output selector</a> in an <a href="#The-Omni-Tests">omni test</a>.  It
-will also allow the user to switch the throughput units from
-transactions per second to bits or bytes per second with the global
-<samp><span class="option">-f</span></samp> option.
-
-<ul class="menu">
-<li><a accesskey="1" href="#Issues-in-Request_002fResponse">Issues in Request/Response</a>
-<li><a accesskey="2" href="#Options-Common-to-TCP-UDP-and-SCTP-_005fRR-tests">Options Common to TCP UDP and SCTP _RR tests</a>
-</ul>
-
-<div class="node">
-<a name="Issues-in-Request%2fResponse"></a>
-<a name="Issues-in-Request_002fResponse"></a>
-<p><hr>
-Next:&nbsp;<a rel="next" accesskey="n" href="#Options-Common-to-TCP-UDP-and-SCTP-_005fRR-tests">Options Common to TCP UDP and SCTP _RR tests</a>,
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#Using-Netperf-to-Measure-Request_002fResponse">Using Netperf to Measure Request/Response</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Using-Netperf-to-Measure-Request_002fResponse">Using Netperf to Measure Request/Response</a>
-
-</div>
-
-<!-- node-name,  next,  previous,  up -->
-<h3 class="section">6.1 Issues in Request/Response</h3>
-
-<p>Most if not all the <a href="#Issues-in-Bulk-Transfer">Issues in Bulk Transfer</a> apply to
-request/response.  The issue of round-trip latency is even more
-important as netperf generally only has one transaction outstanding at
-a time.
-
-   <p>A single instance of a one transaction outstanding _RR test should
-_never_ completely saturate the CPU of a system.  If testing between
-otherwise evenly matched systems, the symmetric nature of a _RR test
-with equal request and response sizes should result in equal CPU
-loading on both systems. However, this may not hold true on MP
-systems, particularly if one CPU binds the netperf and netserver
-differently via the global <samp><span class="option">-T</span></samp> option.
-
-   <p>For smaller request and response sizes packet loss is a bigger issue
-as there is no opportunity for a <dfn>fast retransmit</dfn> or
-retransmission prior to a retransmission timer expiring.
-
-   <p>Virtualization may considerably increase the effective path length of
-a networking stack.  While this may not preclude achieving link-rate
-on a comparatively slow link (eg 1 Gigabit Ethernet) on a _STREAM
-test, it can show-up as measurably fewer transactions per second on an
-_RR test.  However, this may still be masked by interrupt coalescing
-in the NIC/driver.
-
-   <p>Certain NICs have ways to minimize the number of interrupts sent to
-the host.  If these are strapped badly they can significantly reduce
-the performance of something like a single-byte request/response test.
-Such setups are distinguished by seriously low reported CPU utilization
-and what seems like a low (even if in the thousands) transaction per
-second rate.  Also, if you run such an OS/driver combination on faster
-or slower hardware and do not see a corresponding change in the
-transaction rate, chances are good that the driver is strapping the
-NIC with aggressive interrupt avoidance settings.  Good for bulk
-throughput, but bad for latency.
-
-   <p>Some drivers may try to automagically adjust the interrupt avoidance
-settings.  If they are not terribly good at it, you will see
-considerable run-to-run variation in reported transaction rates.
-Particularly if you &ldquo;mix-up&rdquo; _STREAM and _RR tests.
-
-<div class="node">
-<a name="Options-Common-to-TCP-UDP-and-SCTP-_RR-tests"></a>
-<a name="Options-Common-to-TCP-UDP-and-SCTP-_005fRR-tests"></a>
-<p><hr>
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#Issues-in-Request_002fResponse">Issues in Request/Response</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Using-Netperf-to-Measure-Request_002fResponse">Using Netperf to Measure Request/Response</a>
-
-</div>
-
-<!-- node-name,  next,  previous,  up -->
-<h3 class="section">6.2 Options Common to TCP UDP and SCTP _RR tests</h3>
-
-<p>Many &ldquo;test-specific&rdquo; options are actually common across the
-different tests.  For those tests involving TCP, UDP and SCTP, whether
-using the BSD Sockets or the XTI interface those common options
-include:
-
-
-<a name="index-g_t_002dh_002c-Test_002dspecific-58"></a>
-<dl><dt><code>-h</code><dd>Display the test-suite-specific usage string and exit.  For a TCP_ or
-UDP_ test this will be the usage string from the source file
-<samp><span class="file">nettest_bsd.c</span></samp>.  For an XTI_ test, this will be the usage string
-from the source file <samp><span class="file">src/nettest_xti.c</span></samp>.  For an SCTP test, this
-will be the usage string from the source file
-<samp><span class="file">src/nettest_sctp.c</span></samp>.
-
-     <p><a name="index-g_t_002dH_002c-Test_002dspecific-59"></a><br><dt><code>-H &lt;optionspec&gt;</code><dd>Normally, the remote hostname|IP and address family information is
-inherited from the settings for the control connection (eg global
-command-line <samp><span class="option">-H</span></samp>, <samp><span class="option">-4</span></samp> and/or <samp><span class="option">-6</span></samp> options.
-The test-specific <samp><span class="option">-H</span></samp> will override those settings for the
-data (aka test) connection only.  Settings for the control connection
-are left unchanged.  This might be used to cause the control and data
-connections to take different paths through the network.
-
-     <p><a name="index-g_t_002dL_002c-Test_002dspecific-60"></a><br><dt><code>-L &lt;optionspec&gt;</code><dd>The test-specific <samp><span class="option">-L</span></samp> option is identical to the test-specific
-<samp><span class="option">-H</span></samp> option except it affects the local hostname|IP and address
-family information.  As with its global command-line counterpart, this
-is generally only useful when measuring though those evil, end-to-end
-breaking things called firewalls.
-
-     <p><a name="index-g_t_002dP_002c-Test_002dspecific-61"></a><br><dt><code>-P &lt;optionspec&gt;</code><dd>Set the local and/or remote port numbers for the data connection.
-
-     <p><a name="index-g_t_002dr_002c-Test_002dspecific-62"></a><br><dt><code>-r &lt;sizespec&gt;</code><dd>This option sets the request (first value) and/or response (second
-value) sizes for an _RR test. By default the units are bytes, but a
-suffix of &ldquo;G,&rdquo; &ldquo;M,&rdquo; or &ldquo;K&rdquo; will specify the units to be 2^30
-(GB), 2^20 (MB) or 2^10 (KB) respectively.  A suffix of &ldquo;g,&rdquo; &ldquo;m&rdquo;
-or &ldquo;k&rdquo; will specify units of 10^9, 10^6 or 10^3 bytes
-respectively. For example:
-     <pre class="example">          <code>-r 128,16K</code>
-</pre>
-     <p>Will set the request size to 128 bytes and the response size to 16 KB
-or 16384 bytes. [Default: 1 - a single-byte request and response ]
-
-     <p><a name="index-g_t_002ds_002c-Test_002dspecific-63"></a><br><dt><code>-s &lt;sizespec&gt;</code><dd>This option sets the local (netperf) send and receive socket buffer
-sizes for the data connection to the value(s) specified.  Often, this
-will affect the advertised and/or effective TCP or other window, but
-on some platforms it may not. By default the units are bytes, but a
-suffix of &ldquo;G,&rdquo; &ldquo;M,&rdquo; or &ldquo;K&rdquo; will specify the units to be 2^30
-(GB), 2^20 (MB) or 2^10 (KB) respectively.  A suffix of &ldquo;g,&rdquo; &ldquo;m&rdquo;
-or &ldquo;k&rdquo; will specify units of 10^9, 10^6 or 10^3 bytes
-respectively. For example:
-     <pre class="example">          <code>-s 128K</code>
-</pre>
-     <p>Will request the local send (netperf) and receive socket buffer sizes
-to be 128KB or 131072 bytes.
-
-     <p>While the historic expectation is that setting the socket buffer size
-has a direct effect on say the TCP window, today that may not hold
-true for all stacks.  When running under Windows a value of 0 may be
-used which will be an indication to the stack the user wants to enable
-a form of copy avoidance. [Default: -1 - use the system's default
-socket buffer sizes]
-
-     <p><a name="index-g_t_002dS_002c-Test_002dspecific-64"></a><br><dt><code>-S &lt;sizespec&gt;</code><dd>This option sets the remote (netserver) send and/or receive socket
-buffer sizes for the data connection to the value(s) specified.
-Often, this will affect the advertised and/or effective TCP or other
-window, but on some platforms it may not. By default the units are
-bytes, but a suffix of &ldquo;G,&rdquo; &ldquo;M,&rdquo; or &ldquo;K&rdquo; will specify the units
-to be 2^30 (GB), 2^20 (MB) or 2^10 (KB) respectively.  A suffix of
-&ldquo;g,&rdquo; &ldquo;m&rdquo; or &ldquo;k&rdquo; will specify units of 10^9, 10^6 or 10^3 bytes
-respectively.  For example:
-     <pre class="example">          <code>-S 128K</code>
-</pre>
-     <p>Will request the remote (netserver) send and receive socket buffer
-sizes to be 128KB or 131072 bytes.
-
-     <p>While the historic expectation is that setting the socket buffer size
-has a direct effect on say the TCP window, today that may not hold
-true for all stacks.  When running under Windows a value of 0 may be
-used which will be an indication to the stack the user wants to enable
-a form of copy avoidance.  [Default: -1 - use the system's default
-socket buffer sizes]
-
-     <p><a name="index-g_t_002d4_002c-Test_002dspecific-65"></a><br><dt><code>-4</code><dd>Set the local and remote address family for the data connection to
-AF_INET - ie use IPv4 addressing only.  Just as with their global
-command-line counterparts the last of the <samp><span class="option">-4</span></samp>, <samp><span class="option">-6</span></samp>,
-<samp><span class="option">-H</span></samp> or <samp><span class="option">-L</span></samp> option wins for their respective address
-families.
-
-     <p><a name="index-g_t_002d6-Test_002dspecific-66"></a><br><dt><code>-6</code><dd>This option is identical to its <samp><span class="option">-4</span></samp> cousin, but requests IPv6
-addresses for the local and remote ends of the data connection.
-
-   </dl>
-
-<ul class="menu">
-<li><a accesskey="1" href="#TCP_005fRR">TCP_RR</a>
-<li><a accesskey="2" href="#TCP_005fCC">TCP_CC</a>
-<li><a accesskey="3" href="#TCP_005fCRR">TCP_CRR</a>
-<li><a accesskey="4" href="#UDP_005fRR">UDP_RR</a>
-<li><a accesskey="5" href="#XTI_005fTCP_005fRR">XTI_TCP_RR</a>
-<li><a accesskey="6" href="#XTI_005fTCP_005fCC">XTI_TCP_CC</a>
-<li><a accesskey="7" href="#XTI_005fTCP_005fCRR">XTI_TCP_CRR</a>
-<li><a accesskey="8" href="#XTI_005fUDP_005fRR">XTI_UDP_RR</a>
-<li><a accesskey="9" href="#DLCL_005fRR">DLCL_RR</a>
-<li><a href="#DLCO_005fRR">DLCO_RR</a>
-<li><a href="#SCTP_005fRR">SCTP_RR</a>
-</ul>
-
-<div class="node">
-<a name="TCP_RR"></a>
-<a name="TCP_005fRR"></a>
-<p><hr>
-Next:&nbsp;<a rel="next" accesskey="n" href="#TCP_005fCC">TCP_CC</a>,
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#Options-Common-to-TCP-UDP-and-SCTP-_005fRR-tests">Options Common to TCP UDP and SCTP _RR tests</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Options-Common-to-TCP-UDP-and-SCTP-_005fRR-tests">Options Common to TCP UDP and SCTP _RR tests</a>
-
-</div>
-
-<h4 class="subsection">6.2.1 TCP_RR</h4>
-
-<p><a name="index-Measuring-Latency-67"></a><a name="index-Latency_002c-Request_002dResponse-68"></a>
-A TCP_RR (TCP Request/Response) test is requested by passing a value
-of &ldquo;TCP_RR&rdquo; to the global <samp><span class="option">-t</span></samp> command-line option.  A TCP_RR
-test can be thought-of as a user-space to user-space <code>ping</code> with
-no think time - it is by default a synchronous, one transaction at a
-time, request/response test.
-
-   <p>The transaction rate is the number of complete transactions exchanged
-divided by the length of time it took to perform those transactions.
-
-   <p>If the two Systems Under Test are otherwise identical, a TCP_RR test
-with the same request and response size should be symmetric - it
-should not matter which way the test is run, and the CPU utilization
-measured should be virtually the same on each system.  If not, it
-suggests that the CPU utilization mechanism being used may have some,
-well, issues measuring CPU utilization completely and accurately.
-
-   <p>Time to establish the TCP connection is not counted in the result.  If
-you want connection setup overheads included, you should consider the
-<a href="#TCP_005fCC">TPC_CC</a> or <a href="#TCP_005fCRR">TCP_CRR</a> tests.
-
-   <p>If specifying the <samp><span class="option">-D</span></samp> option to set TCP_NODELAY and disable
-the Nagle Algorithm increases the transaction rate reported by a
-TCP_RR test, it implies the stack(s) over which the TCP_RR test is
-running have a broken implementation of the Nagle Algorithm.  Likely
-as not they are interpreting Nagle on a segment by segment basis
-rather than a user send by user send basis.  You should contact your
-stack vendor(s) to report the problem to them.
-
-   <p>Here is an example of two systems running a basic TCP_RR test over a
-10 Gigabit Ethernet link:
-
-<pre class="example">     netperf -t TCP_RR -H 192.168.2.125
-     TCP REQUEST/RESPONSE TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 192.168.2.125 (192.168.2.125) port 0 AF_INET
-     Local /Remote
-     Socket Size   Request  Resp.   Elapsed  Trans.
-     Send   Recv   Size     Size    Time     Rate
-     bytes  Bytes  bytes    bytes   secs.    per sec
-
-     16384  87380  1        1       10.00    29150.15
-     16384  87380
-</pre>
-   <p>In this example the request and response sizes were one byte, the
-socket buffers were left at their defaults, and the test ran for all
-of 10 seconds.  The transaction per second rate was rather good for
-the time :)
-
-<div class="node">
-<a name="TCP_CC"></a>
-<a name="TCP_005fCC"></a>
-<p><hr>
-Next:&nbsp;<a rel="next" accesskey="n" href="#TCP_005fCRR">TCP_CRR</a>,
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#TCP_005fRR">TCP_RR</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Options-Common-to-TCP-UDP-and-SCTP-_005fRR-tests">Options Common to TCP UDP and SCTP _RR tests</a>
-
-</div>
-
-<h4 class="subsection">6.2.2 TCP_CC</h4>
-
-<p><a name="index-Connection-Latency-69"></a><a name="index-Latency_002c-Connection-Establishment-70"></a>
-A TCP_CC (TCP Connect/Close) test is requested by passing a value of
-&ldquo;TCP_CC&rdquo; to the global <samp><span class="option">-t</span></samp> option.  A TCP_CC test simply
-measures how fast the pair of systems can open and close connections
-between one another in a synchronous (one at a time) manner.  While
-this is considered an _RR test, no request or response is exchanged
-over the connection.
-
-   <p><a name="index-Port-Reuse-71"></a><a name="index-TIME_005fWAIT-72"></a>The issue of TIME_WAIT reuse is an important one for a TCP_CC test.
-Basically, TIME_WAIT reuse is when a pair of systems churn through
-connections fast enough that they wrap the 16-bit port number space in
-less time than the length of the TIME_WAIT state.  While it is indeed
-theoretically possible to &ldquo;reuse&rdquo; a connection in TIME_WAIT, the
-conditions under which such reuse is possible are rather rare.  An
-attempt to reuse a connection in TIME_WAIT can result in a non-trivial
-delay in connection establishment.
-
-   <p>Basically, any time the connection churn rate approaches:
-
-   <p>Sizeof(clientportspace) / Lengthof(TIME_WAIT)
-
-   <p>there is the risk of TIME_WAIT reuse.  To minimize the chances of this
-happening, netperf will by default select its own client port numbers
-from the range of 5000 to 65535.  On systems with a 60 second
-TIME_WAIT state, this should allow roughly 1000 transactions per
-second.  The size of the client port space used by netperf can be
-controlled via the test-specific <samp><span class="option">-p</span></samp> option, which takes a
-<dfn>sizespec</dfn> as a value setting the minimum (first value) and
-maximum (second value) port numbers used by netperf at the client end.
-
-   <p>Since no requests or responses are exchanged during a TCP_CC test,
-only the <samp><span class="option">-H</span></samp>, <samp><span class="option">-L</span></samp>, <samp><span class="option">-4</span></samp> and <samp><span class="option">-6</span></samp> of the
-&ldquo;common&rdquo; test-specific options are likely to have an effect, if any,
-on the results.  The <samp><span class="option">-s</span></samp> and <samp><span class="option">-S</span></samp> options _may_ have
-some effect if they alter the number and/or type of options carried in
-the TCP SYNchronize segments, such as Window Scaling or Timestamps.
-The <samp><span class="option">-P</span></samp> and <samp><span class="option">-r</span></samp> options are utterly ignored.
-
-   <p>Since connection establishment and tear-down for TCP is not symmetric,
-a TCP_CC test is not symmetric in its loading of the two systems under
-test.
-
-<div class="node">
-<a name="TCP_CRR"></a>
-<a name="TCP_005fCRR"></a>
-<p><hr>
-Next:&nbsp;<a rel="next" accesskey="n" href="#UDP_005fRR">UDP_RR</a>,
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#TCP_005fCC">TCP_CC</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Options-Common-to-TCP-UDP-and-SCTP-_005fRR-tests">Options Common to TCP UDP and SCTP _RR tests</a>
-
-</div>
-
-<h4 class="subsection">6.2.3 TCP_CRR</h4>
-
-<p><a name="index-Latency_002c-Connection-Establishment-73"></a><a name="index-Latency_002c-Request_002dResponse-74"></a>
-The TCP Connect/Request/Response (TCP_CRR) test is requested by
-passing a value of &ldquo;TCP_CRR&rdquo; to the global <samp><span class="option">-t</span></samp> command-line
-option.  A TCP_CRR test is like a merger of a <a href="#TCP_005fRR">TCP_RR</a> and
-<a href="#TCP_005fCC">TCP_CC</a> test which measures the performance of establishing a
-connection, exchanging a single request/response transaction, and
-tearing-down that connection.  This is very much like what happens in
-an HTTP 1.0 or HTTP 1.1 connection when HTTP Keepalives are not used.
-In fact, the TCP_CRR test was added to netperf to simulate just that.
-
-   <p>Since a request and response are exchanged the <samp><span class="option">-r</span></samp>,
-<samp><span class="option">-s</span></samp> and <samp><span class="option">-S</span></samp> options can have an effect on the
-performance.
-
-   <p>The issue of TIME_WAIT reuse exists for the TCP_CRR test just as it
-does for the TCP_CC test.  Similarly, since connection establishment
-and tear-down is not symmetric, a TCP_CRR test is not symmetric even
-when the request and response sizes are the same.
-
-<div class="node">
-<a name="UDP_RR"></a>
-<a name="UDP_005fRR"></a>
-<p><hr>
-Next:&nbsp;<a rel="next" accesskey="n" href="#XTI_005fTCP_005fRR">XTI_TCP_RR</a>,
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#TCP_005fCRR">TCP_CRR</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Options-Common-to-TCP-UDP-and-SCTP-_005fRR-tests">Options Common to TCP UDP and SCTP _RR tests</a>
-
-</div>
-
-<h4 class="subsection">6.2.4 UDP_RR</h4>
-
-<p><a name="index-Latency_002c-Request_002dResponse-75"></a><a name="index-Packet-Loss-76"></a>
-A UDP Request/Response (UDP_RR) test is requested by passing a value
-of &ldquo;UDP_RR&rdquo; to a global <samp><span class="option">-t</span></samp> option.  It is very much the
-same as a TCP_RR test except UDP is used rather than TCP.
-
-   <p>UDP does not provide for retransmission of lost UDP datagrams, and
-netperf does not add anything for that either.  This means that if
-_any_ request or response is lost, the exchange of requests and
-responses will stop from that point until the test timer expires.
-Netperf will not really &ldquo;know&rdquo; this has happened - the only symptom
-will be a low transaction per second rate.  If <samp><span class="option">--enable-burst</span></samp>
-was included in the <code>configure</code> command and a test-specific
-<samp><span class="option">-b</span></samp> option used, the UDP_RR test will &ldquo;survive&rdquo; the loss of
-requests and responses until the sum is one more than the value passed
-via the <samp><span class="option">-b</span></samp> option. It will though almost certainly run more
-slowly.
-
-   <p>The netperf side of a UDP_RR test will call <code>connect()</code> on its
-data socket and thenceforth use the <code>send()</code> and <code>recv()</code>
-socket calls.  The netserver side of a UDP_RR test will not call
-<code>connect()</code> and will use <code>recvfrom()</code> and <code>sendto()</code>
-calls.  This means that even if the request and response sizes are the
-same, a UDP_RR test is _not_ symmetric in its loading of the two
-systems under test.
-
-   <p>Here is an example of a UDP_RR test between two otherwise
-identical two-CPU systems joined via a 1 Gigabit Ethernet network:
-
-<pre class="example">     $ netperf -T 1 -H 192.168.1.213 -t UDP_RR -c -C
-     UDP REQUEST/RESPONSE TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 192.168.1.213 (192.168.1.213) port 0 AF_INET
-     Local /Remote
-     Socket Size   Request Resp.  Elapsed Trans.   CPU    CPU    S.dem   S.dem
-     Send   Recv   Size    Size   Time    Rate     local  remote local   remote
-     bytes  bytes  bytes   bytes  secs.   per sec  % I    % I    us/Tr   us/Tr
-
-     65535  65535  1       1      10.01   15262.48   13.90  16.11  18.221  21.116
-     65535  65535
-</pre>
-   <p>This example includes the <samp><span class="option">-c</span></samp> and <samp><span class="option">-C</span></samp> options to
-enable CPU utilization reporting and shows the asymmetry in CPU
-loading.  The <samp><span class="option">-T</span></samp> option was used to make sure netperf and
-netserver ran on a given CPU and did not move around during the test.
-
-<div class="node">
-<a name="XTI_TCP_RR"></a>
-<a name="XTI_005fTCP_005fRR"></a>
-<p><hr>
-Next:&nbsp;<a rel="next" accesskey="n" href="#XTI_005fTCP_005fCC">XTI_TCP_CC</a>,
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#UDP_005fRR">UDP_RR</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Options-Common-to-TCP-UDP-and-SCTP-_005fRR-tests">Options Common to TCP UDP and SCTP _RR tests</a>
-
-</div>
-
-<h4 class="subsection">6.2.5 XTI_TCP_RR</h4>
-
-<p><a name="index-Latency_002c-Request_002dResponse-77"></a>
-An XTI_TCP_RR test is essentially the same as a <a href="#TCP_005fRR">TCP_RR</a> test only
-using the XTI rather than BSD Sockets interface. It is requested by
-passing a value of &ldquo;XTI_TCP_RR&rdquo; to the <samp><span class="option">-t</span></samp> global
-command-line option.
-
-   <p>The test-specific options for an XTI_TCP_RR test are the same as those
-for a TCP_RR test with the addition of the <samp><span class="option">-X &lt;devspec&gt;</span></samp> option to
-specify the names of the local and/or remote XTI device file(s).
-
-<div class="node">
-<a name="XTI_TCP_CC"></a>
-<a name="XTI_005fTCP_005fCC"></a>
-<p><hr>
-Next:&nbsp;<a rel="next" accesskey="n" href="#XTI_005fTCP_005fCRR">XTI_TCP_CRR</a>,
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#XTI_005fTCP_005fRR">XTI_TCP_RR</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Options-Common-to-TCP-UDP-and-SCTP-_005fRR-tests">Options Common to TCP UDP and SCTP _RR tests</a>
-
-</div>
-
-<!-- node-name,  next,  previous,  up -->
-<h4 class="subsection">6.2.6 XTI_TCP_CC</h4>
-
-<p><a name="index-Latency_002c-Connection-Establishment-78"></a>
-An XTI_TCP_CC test is essentially the same as a <a href="#TCP_005fCC">TCP_CC</a>
-test, only using the XTI rather than BSD Sockets interface.
-
-   <p>The test-specific options for an XTI_TCP_CC test are the same as those
-for a TCP_CC test with the addition of the <samp><span class="option">-X &lt;devspec&gt;</span></samp> option to
-specify the names of the local and/or remote XTI device file(s).
-
-<div class="node">
-<a name="XTI_TCP_CRR"></a>
-<a name="XTI_005fTCP_005fCRR"></a>
-<p><hr>
-Next:&nbsp;<a rel="next" accesskey="n" href="#XTI_005fUDP_005fRR">XTI_UDP_RR</a>,
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#XTI_005fTCP_005fCC">XTI_TCP_CC</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Options-Common-to-TCP-UDP-and-SCTP-_005fRR-tests">Options Common to TCP UDP and SCTP _RR tests</a>
-
-</div>
-
-<!-- node-name,  next,  previous,  up -->
-<h4 class="subsection">6.2.7 XTI_TCP_CRR</h4>
-
-<p><a name="index-Latency_002c-Connection-Establishment-79"></a><a name="index-Latency_002c-Request_002dResponse-80"></a>
-The XTI_TCP_CRR test is essentially the same as a
-<a href="#TCP_005fCRR">TCP_CRR</a> test, only using the XTI rather than BSD Sockets
-interface.
-
-   <p>The test-specific options for an XTI_TCP_CRR test are the same as those
-for a TCP_RR test with the addition of the <samp><span class="option">-X &lt;devspec&gt;</span></samp> option to
-specify the names of the local and/or remote XTI device file(s).
-
-<div class="node">
-<a name="XTI_UDP_RR"></a>
-<a name="XTI_005fUDP_005fRR"></a>
-<p><hr>
-Next:&nbsp;<a rel="next" accesskey="n" href="#DLCL_005fRR">DLCL_RR</a>,
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#XTI_005fTCP_005fCRR">XTI_TCP_CRR</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Options-Common-to-TCP-UDP-and-SCTP-_005fRR-tests">Options Common to TCP UDP and SCTP _RR tests</a>
-
-</div>
-
-<h4 class="subsection">6.2.8 XTI_UDP_RR</h4>
-
-<p><a name="index-Latency_002c-Request_002dResponse-81"></a>
-An XTI_UDP_RR test is essentially the same as a UDP_RR test only using
-the XTI rather than BSD Sockets interface.  It is requested by passing
-a value of &ldquo;XTI_UDP_RR&rdquo; to the <samp><span class="option">-t</span></samp> global command-line
-option.
-
-   <p>The test-specific options for an XTI_UDP_RR test are the same as those
-for a UDP_RR test with the addition of the <samp><span class="option">-X &lt;devspec&gt;</span></samp>
-option to specify the name of the local and/or remote XTI device
-file(s).
-
-<div class="node">
-<a name="DLCL_RR"></a>
-<a name="DLCL_005fRR"></a>
-<p><hr>
-Next:&nbsp;<a rel="next" accesskey="n" href="#DLCO_005fRR">DLCO_RR</a>,
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#XTI_005fUDP_005fRR">XTI_UDP_RR</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Options-Common-to-TCP-UDP-and-SCTP-_005fRR-tests">Options Common to TCP UDP and SCTP _RR tests</a>
-
-</div>
-
-<!-- node-name,  next,  previous,  up -->
-<h4 class="subsection">6.2.9 DLCL_RR</h4>
-
-<p><a name="index-Latency_002c-Request_002dResponse-82"></a>
-<div class="node">
-<a name="DLCO_RR"></a>
-<a name="DLCO_005fRR"></a>
-<p><hr>
-Next:&nbsp;<a rel="next" accesskey="n" href="#SCTP_005fRR">SCTP_RR</a>,
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#DLCL_005fRR">DLCL_RR</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Options-Common-to-TCP-UDP-and-SCTP-_005fRR-tests">Options Common to TCP UDP and SCTP _RR tests</a>
-
-</div>
-
-<!-- node-name,  next,  previous,  up -->
-<h4 class="subsection">6.2.10 DLCO_RR</h4>
-
-<p><a name="index-Latency_002c-Request_002dResponse-83"></a>
-<div class="node">
-<a name="SCTP_RR"></a>
-<a name="SCTP_005fRR"></a>
-<p><hr>
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#DLCO_005fRR">DLCO_RR</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Options-Common-to-TCP-UDP-and-SCTP-_005fRR-tests">Options Common to TCP UDP and SCTP _RR tests</a>
-
-</div>
-
-<!-- node-name,  next,  previous,  up -->
-<h4 class="subsection">6.2.11 SCTP_RR</h4>
-
-<p><a name="index-Latency_002c-Request_002dResponse-84"></a>
-<div class="node">
-<a name="Using-Netperf-to-Measure-Aggregate-Performance"></a>
-<p><hr>
-Next:&nbsp;<a rel="next" accesskey="n" href="#Using-Netperf-to-Measure-Bidirectional-Transfer">Using Netperf to Measure Bidirectional Transfer</a>,
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#Using-Netperf-to-Measure-Request_002fResponse">Using Netperf to Measure Request/Response</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Top">Top</a>
-
-</div>
-
-<!-- node-name,  next,  previous,  up -->
-<h2 class="chapter">7 Using Netperf to Measure Aggregate Performance</h2>
-
-<p><a name="index-Aggregate-Performance-85"></a><a name="index-g_t_002d_002denable_002dburst_002c-Configure-86"></a>
-Ultimately, <a href="#Netperf4">Netperf4</a> will be the preferred benchmark to
-use when one wants to measure aggregate performance because netperf
-has no support for explicit synchronization of concurrent tests. Until
-netperf4 is ready for prime time, one can make use of the heuristics
-and procedures mentioned here for the 85% solution.
-
-   <p>There are a few ways to measure aggregate performance with netperf.
-The first is to run multiple, concurrent netperf tests and can be
-applied to any of the netperf tests.  The second is to configure
-netperf with <code>--enable-burst</code> and is applicable to the TCP_RR
-test. The third is a variation on the first.
-
-<ul class="menu">
-<li><a accesskey="1" href="#Running-Concurrent-Netperf-Tests">Running Concurrent Netperf Tests</a>
-<li><a accesskey="2" href="#Using-_002d_002denable_002dburst">Using --enable-burst</a>
-<li><a accesskey="3" href="#Using-_002d_002denable_002ddemo">Using --enable-demo</a>
-</ul>
-
-<div class="node">
-<a name="Running-Concurrent-Netperf-Tests"></a>
-<p><hr>
-Next:&nbsp;<a rel="next" accesskey="n" href="#Using-_002d_002denable_002dburst">Using --enable-burst</a>,
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#Using-Netperf-to-Measure-Aggregate-Performance">Using Netperf to Measure Aggregate Performance</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Using-Netperf-to-Measure-Aggregate-Performance">Using Netperf to Measure Aggregate Performance</a>
-
-</div>
-
-<!-- node-name,  next,  previous,  up -->
-<h3 class="section">7.1 Running Concurrent Netperf Tests</h3>
-
-<p><a href="#Netperf4">Netperf4</a> is the preferred benchmark to use when one
-wants to measure aggregate performance because netperf has no support
-for explicit synchronization of concurrent tests.  This leaves
-netperf2 results vulnerable to <dfn>skew</dfn> errors.
-
-   <p>However, since there are times when netperf4 is unavailable it may be
-necessary to run netperf. The skew error can be minimized by making
-use of the confidence interval functionality.  Then one simply
-launches multiple tests from the shell using a <code>for</code> loop or the
-like:
-
-<pre class="example">     for i in 1 2 3 4
-     do
-     netperf -t TCP_STREAM -H tardy.cup.hp.com -i 10 -P 0 &amp;
-     done
-</pre>
-   <p>which will run four, concurrent <a href="#TCP_005fSTREAM">TCP_STREAM</a> tests from
-the system on which it is executed to tardy.cup.hp.com.  Each
-concurrent netperf will iterate 10 times thanks to the <samp><span class="option">-i</span></samp>
-option and will omit the test banners (option <samp><span class="option">-P</span></samp>) for
-brevity.  The output looks something like this:
-
-<pre class="example">      87380  16384  16384    10.03     235.15
-      87380  16384  16384    10.03     235.09
-      87380  16384  16384    10.03     235.38
-      87380  16384  16384    10.03     233.96
-</pre>
-   <p>We can take the sum of the results and be reasonably confident that
-the aggregate performance was 940 Mbits/s.  This method does not need
-to be limited to one system speaking to one other system.  It can be
-extended to one system talking to N other systems.  It could be as simple as:
-<pre class="example">     for host in 'foo bar baz bing'
-     do
-     netperf -t TCP_STREAM -H $hosts -i 10 -P 0 &amp;
-     done
-</pre>
-   <p>A more complicated/sophisticated example can be found in
-<samp><span class="file">doc/examples/runemomniagg2.sh</span></samp> where.
-
-   <p>If you see warnings about netperf not achieving the confidence
-intervals, the best thing to do is to increase the number of
-iterations with <samp><span class="option">-i</span></samp> and/or increase the run length of each
-iteration with <samp><span class="option">-l</span></samp>.
-
-   <p>You can also enable local (<samp><span class="option">-c</span></samp>) and/or remote (<samp><span class="option">-C</span></samp>)
-CPU utilization:
-
-<pre class="example">     for i in 1 2 3 4
-     do
-     netperf -t TCP_STREAM -H tardy.cup.hp.com -i 10 -P 0 -c -C &amp;
-     done
-
-     87380  16384  16384    10.03       235.47   3.67     5.09     10.226  14.180
-     87380  16384  16384    10.03       234.73   3.67     5.09     10.260  14.225
-     87380  16384  16384    10.03       234.64   3.67     5.10     10.263  14.231
-     87380  16384  16384    10.03       234.87   3.67     5.09     10.253  14.215
-</pre>
-   <p>If the CPU utilizations reported for the same system are the same or
-very very close you can be reasonably confident that skew error is
-minimized.  Presumably one could then omit <samp><span class="option">-i</span></samp> but that is
-not advised, particularly when/if the CPU utilization approaches 100
-percent.  In the example above we see that the CPU utilization on the
-local system remains the same for all four tests, and is only off by
-0.01 out of 5.09 on the remote system.  As the number of CPUs in the
-system increases, and so too the odds of saturating a single CPU, the
-accuracy of similar CPU utilization implying little skew error is
-diminished.  This is also the case for those increasingly rare single
-CPU systems if the utilization is reported as 100% or very close to
-it.
-
-   <blockquote>
-<b>NOTE: It is very important to remember that netperf is calculating
-system-wide CPU utilization.  When calculating the service demand
-(those last two columns in the output above) each netperf assumes it
-is the only thing running on the system.  This means that for
-concurrent tests the service demands reported by netperf will be
-wrong.  One has to compute service demands for concurrent tests by
-hand.</b>
-</blockquote>
-
-   <p>If you wish you can add a unique, global <samp><span class="option">-B</span></samp> option to each
-command line to append the given string to the output:
-
-<pre class="example">     for i in 1 2 3 4
-     do
-     netperf -t TCP_STREAM -H tardy.cup.hp.com -B "this is test $i" -i 10 -P 0 &amp;
-     done
-
-     87380  16384  16384    10.03     234.90   this is test 4
-     87380  16384  16384    10.03     234.41   this is test 2
-     87380  16384  16384    10.03     235.26   this is test 1
-     87380  16384  16384    10.03     235.09   this is test 3
-</pre>
-   <p>You will notice that the tests completed in an order other than they
-were started from the shell.  This underscores why there is a threat
-of skew error and why netperf4 will eventually be the preferred tool
-for aggregate tests.  Even if you see the Netperf Contributing Editor
-acting to the contrary!-)
-
-<ul class="menu">
-<li><a accesskey="1" href="#Issues-in-Running-Concurrent-Tests">Issues in Running Concurrent Tests</a>
-</ul>
-
-<div class="node">
-<a name="Issues-in-Running-Concurrent-Tests"></a>
-<p><hr>
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#Running-Concurrent-Netperf-Tests">Running Concurrent Netperf Tests</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Running-Concurrent-Netperf-Tests">Running Concurrent Netperf Tests</a>
-
-</div>
-
-<h4 class="subsection">7.1.1 Issues in Running Concurrent Tests</h4>
-
-<p>In addition to the aforementioned issue of skew error, there can be
-other issues to consider when running concurrent netperf tests.
-
-   <p>For example, when running concurrent tests over multiple interfaces,
-one is not always assured that the traffic one thinks went over a
-given interface actually did so.  In particular, the Linux networking
-stack takes a particularly strong stance on its following the so
-called &lsquo;<samp><span class="samp">weak end system model</span></samp>&rsquo;.  As such, it is willing to answer
-ARP requests for any of its local IP addresses on any of its
-interfaces.  If multiple interfaces are connected to the same
-broadcast domain, then even if they are configured into separate IP
-subnets there is no a priori way of knowing which interface was
-actually used for which connection(s).  This can be addressed by
-setting the &lsquo;<samp><span class="samp">arp_ignore</span></samp>&rsquo; sysctl before configuring interfaces.
-
-   <p>As it is quite important, we will repeat that it is very important to
-remember that each concurrent netperf instance is calculating
-system-wide CPU utilization.  When calculating the service demand each
-netperf assumes it is the only thing running on the system.  This
-means that for concurrent tests the service demands reported by
-netperf <b>will be wrong</b>.  One has to compute service demands for
-concurrent tests by hand
-
-   <p>Running concurrent tests can also become difficult when there is no
-one &ldquo;central&rdquo; node.  Running tests between pairs of systems may be
-more difficult, calling for remote shell commands in the for loop
-rather than netperf commands.  This introduces more skew error, which
-the confidence intervals may not be able to sufficiently mitigate.
-One possibility is to actually run three consecutive netperf tests on
-each node - the first being a warm-up, the last being a cool-down.
-The idea then is to ensure that the time it takes to get all the
-netperfs started is less than the length of the first netperf command
-in the sequence of three.  Similarly, it assumes that all &ldquo;middle&rdquo;
-netperfs will complete before the first of the &ldquo;last&rdquo; netperfs
-complete.
-
-<div class="node">
-<a name="Using---enable-burst"></a>
-<a name="Using-_002d_002denable_002dburst"></a>
-<p><hr>
-Next:&nbsp;<a rel="next" accesskey="n" href="#Using-_002d_002denable_002ddemo">Using --enable-demo</a>,
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#Running-Concurrent-Netperf-Tests">Running Concurrent Netperf Tests</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Using-Netperf-to-Measure-Aggregate-Performance">Using Netperf to Measure Aggregate Performance</a>
-
-</div>
-
-<!-- node-name,  next,  previous,  up -->
-<h3 class="section">7.2 Using - -enable-burst</h3>
-
-<p>Starting in version 2.5.0 <code>--enable-burst=yes</code> is the default,
-which means one no longer must:
-
-<pre class="example">     configure --enable-burst
-</pre>
-   <p>To have burst-mode functionality present in netperf.  This enables a
-test-specific <samp><span class="option">-b num</span></samp> option in <a href="#TCP_005fRR">TCP_RR</a>,
-<a href="#UDP_005fRR">UDP_RR</a> and <a href="#The-Omni-Tests">omni</a> tests.
-
-   <p>Normally, netperf will attempt to ramp-up the number of outstanding
-requests to <samp><span class="option">num</span></samp> plus one transactions in flight at one time.
-The ramp-up is to avoid transactions being smashed together into a
-smaller number of segments when the transport's congestion window (if
-any) is smaller at the time than what netperf wants to have
-outstanding at one time. If, however, the user specifies a negative
-value for <samp><span class="option">num</span></samp> this ramp-up is bypassed and the burst of sends
-is made without consideration of transport congestion window.
-
-   <p>This burst-mode is used as an alternative to or even in conjunction
-with multiple-concurrent _RR tests and as a way to implement a
-single-connection, bidirectional bulk-transfer test.  When run with
-just a single instance of netperf, increasing the burst size can
-determine the maximum number of transactions per second which can be
-serviced by a single process:
-
-<pre class="example">     for b in 0 1 2 4 8 16 32
-     do
-      netperf -v 0 -t TCP_RR -B "-b $b" -H hpcpc108 -P 0 -- -b $b
-     done
-
-     9457.59 -b 0
-     9975.37 -b 1
-     10000.61 -b 2
-     20084.47 -b 4
-     29965.31 -b 8
-     71929.27 -b 16
-     109718.17 -b 32
-</pre>
-   <p>The global <samp><span class="option">-v</span></samp> and <samp><span class="option">-P</span></samp> options were used to minimize
-the output to the single figure of merit which in this case the
-transaction rate.  The global <code>-B</code> option was used to more
-clearly label the output, and the test-specific <samp><span class="option">-b</span></samp> option
-enabled by <code>--enable-burst</code> increase the number of transactions
-in flight at one time.
-
-   <p>Now, since the test-specific <samp><span class="option">-D</span></samp> option was not specified to
-set TCP_NODELAY, the stack was free to &ldquo;bundle&rdquo; requests and/or
-responses into TCP segments as it saw fit, and since the default
-request and response size is one byte, there could have been some
-considerable bundling even in the absence of transport congestion
-window issues.  If one wants to try to achieve a closer to
-one-to-one correspondence between a request and response and a TCP
-segment, add the test-specific <samp><span class="option">-D</span></samp> option:
-
-<pre class="example">     for b in 0 1 2 4 8 16 32
-     do
-      netperf -v 0 -t TCP_RR -B "-b $b -D" -H hpcpc108 -P 0 -- -b $b -D
-     done
-
-      8695.12 -b 0 -D
-      19966.48 -b 1 -D
-      20691.07 -b 2 -D
-      49893.58 -b 4 -D
-      62057.31 -b 8 -D
-      108416.88 -b 16 -D
-      114411.66 -b 32 -D
-</pre>
-   <p>You can see that this has a rather large effect on the reported
-transaction rate.  In this particular instance, the author believes it
-relates to interactions between the test and interrupt coalescing
-settings in the driver for the NICs used.
-
-   <blockquote>
-<b>NOTE: Even if you set the </b><samp><span class="option">-D</span></samp><b> option that is still not a
-guarantee that each transaction is in its own TCP segments.  You
-should get into the habit of verifying the relationship between the
-transaction rate and the packet rate via other means.</b>
-</blockquote>
-
-   <p>You can also combine <code>--enable-burst</code> functionality with
-concurrent netperf tests.  This would then be an &ldquo;aggregate of
-aggregates&rdquo; if you like:
-
-<pre class="example">
-     for i in 1 2 3 4
-     do
-      netperf -H hpcpc108 -v 0 -P 0 -i 10 -B "aggregate $i -b 8 -D" -t TCP_RR -- -b 8 -D &amp;
-     done
-
-      46668.38 aggregate 4 -b 8 -D
-      44890.64 aggregate 2 -b 8 -D
-      45702.04 aggregate 1 -b 8 -D
-      46352.48 aggregate 3 -b 8 -D
-
-</pre>
-   <p>Since each netperf did hit the confidence intervals, we can be
-reasonably certain that the aggregate transaction per second rate was
-the sum of all four concurrent tests, or something just shy of 184,000
-transactions per second.  To get some idea if that was also the packet
-per second rate, we could bracket that <code>for</code> loop with something
-to gather statistics and run the results through
-<a href="ftp://ftp.cup.hp.com/dist/networking/tools">beforeafter</a>:
-
-<pre class="example">     /usr/sbin/ethtool -S eth2 &gt; before
-     for i in 1 2 3 4
-     do
-      netperf -H 192.168.2.108 -l 60 -v 0 -P 0 -B "aggregate $i -b 8 -D" -t TCP_RR -- -b 8 -D &amp;
-     done
-     wait
-     /usr/sbin/ethtool -S eth2 &gt; after
-
-      52312.62 aggregate 2 -b 8 -D
-      50105.65 aggregate 4 -b 8 -D
-      50890.82 aggregate 1 -b 8 -D
-      50869.20 aggregate 3 -b 8 -D
-
-     beforeafter before after &gt; delta
-
-     grep packets delta
-          rx_packets: 12251544
-          tx_packets: 12251550
-
-</pre>
-   <p>This example uses <code>ethtool</code> because the system being used is
-running Linux.  Other platforms have other tools - for example HP-UX
-has lanadmin:
-
-<pre class="example">     lanadmin -g mibstats &lt;ppa&gt;
-</pre>
-   <p>and of course one could instead use <code>netstat</code>.
-
-   <p>The <code>wait</code> is important because we are launching concurrent
-netperfs in the background.  Without it, the second ethtool command
-would be run before the tests finished and perhaps even before the
-last of them got started!
-
-   <p>The sum of the reported transaction rates is 204178 over 60 seconds,
-which is a total of 12250680 transactions.  Each transaction is the
-exchange of a request and a response, so we multiply that by 2 to
-arrive at 24501360.
-
-   <p>The sum of the ethtool stats is 24503094 packets which matches what
-netperf was reporting very well.
-
-   <p>Had the request or response size differed, we would need to know how
-it compared with the <dfn>MSS</dfn> for the connection.
-
-   <p>Just for grins, here is the exercise repeated, using <code>netstat</code>
-instead of <code>ethtool</code>
-
-<pre class="example">     netstat -s -t &gt; before
-     for i in 1 2 3 4
-     do
-      netperf -l 60 -H 192.168.2.108 -v 0 -P 0 -B "aggregate $i -b 8 -D" -t TCP_RR -- -b 8 -D &amp; done
-     wait
-     netstat -s -t &gt; after
-
-      51305.88 aggregate 4 -b 8 -D
-      51847.73 aggregate 2 -b 8 -D
-      50648.19 aggregate 3 -b 8 -D
-      53605.86 aggregate 1 -b 8 -D
-
-     beforeafter before after &gt; delta
-
-     grep segments delta
-         12445708 segments received
-         12445730 segments send out
-         1 segments retransmited
-         0 bad segments received.
-</pre>
-   <p>The sums are left as an exercise to the reader :)
-
-   <p>Things become considerably more complicated if there are non-trvial
-packet losses and/or retransmissions.
-
-   <p>Of course all this checking is unnecessary if the test is a UDP_RR
-test because UDP &ldquo;never&rdquo; aggregates multiple sends into the same UDP
-datagram, and there are no ACKnowledgements in UDP.  The loss of a
-single request or response will not bring a &ldquo;burst&rdquo; UDP_RR test to a
-screeching halt, but it will reduce the number of transactions
-outstanding at any one time.  A &ldquo;burst&rdquo; UDP_RR test <b>will</b> come to a
-halt if the sum of the lost requests and responses reaches the value
-specified in the test-specific <samp><span class="option">-b</span></samp> option.
-
-<div class="node">
-<a name="Using---enable-demo"></a>
-<a name="Using-_002d_002denable_002ddemo"></a>
-<p><hr>
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#Using-_002d_002denable_002dburst">Using --enable-burst</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Using-Netperf-to-Measure-Aggregate-Performance">Using Netperf to Measure Aggregate Performance</a>
-
-</div>
-
-<h3 class="section">7.3 Using - -enable-demo</h3>
-
-<p>One can
-<pre class="example">     configure --enable-demo
-</pre>
-   <p>and compile netperf to enable netperf to emit &ldquo;interim results&rdquo; at
-semi-regular intervals.  This enables a global <code>-D</code> option which
-takes a reporting interval as an argument.  With that specified, the
-output of netperf will then look something like
-
-<pre class="example">     $ src/netperf -D 1.25
-     MIGRATED TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to localhost.localdomain () port 0 AF_INET : demo
-     Interim result: 25425.52 10^6bits/s over 1.25 seconds ending at 1327962078.405
-     Interim result: 25486.82 10^6bits/s over 1.25 seconds ending at 1327962079.655
-     Interim result: 25474.96 10^6bits/s over 1.25 seconds ending at 1327962080.905
-     Interim result: 25523.49 10^6bits/s over 1.25 seconds ending at 1327962082.155
-     Interim result: 25053.57 10^6bits/s over 1.27 seconds ending at 1327962083.429
-     Interim result: 25349.64 10^6bits/s over 1.25 seconds ending at 1327962084.679
-     Interim result: 25292.84 10^6bits/s over 1.25 seconds ending at 1327962085.932
-     Recv   Send    Send
-     Socket Socket  Message  Elapsed
-     Size   Size    Size     Time     Throughput
-     bytes  bytes   bytes    secs.    10^6bits/sec
-
-      87380  16384  16384    10.00    25375.66
-</pre>
-   <p>The units of the &ldquo;Interim result&rdquo; lines will follow the units
-selected via the global <code>-f</code> option.  If the test-specific
-<code>-o</code> option is specified on the command line, the format will be
-CSV:
-<pre class="example">     ...
-     2978.81,MBytes/s,1.25,1327962298.035
-     ...
-</pre>
-   <p>If the test-specific <code>-k</code> option is used the format will be
-keyval with each keyval being given an index:
-<pre class="example">     ...
-     NETPERF_INTERIM_RESULT[2]=25.00
-     NETPERF_UNITS[2]=10^9bits/s
-     NETPERF_INTERVAL[2]=1.25
-     NETPERF_ENDING[2]=1327962357.249
-     ...
-</pre>
-   <p>The expectation is it may be easier to utilize the keyvals if they
-have indices.
-
-   <p>But how does this help with aggregate tests?  Well, what one can do is
-start the netperfs via a script, giving each a Very Long (tm) run
-time.  Direct the output to a file per instance.  Then, once all the
-netperfs have been started, take a timestamp and wait for some desired
-test interval.  Once that interval expires take another timestamp and
-then start terminating the netperfs by sending them a SIGALRM signal
-via the likes of the <code>kill</code> or <code>pkill</code> command.  The
-netperfs will terminate and emit the rest of the &ldquo;usual&rdquo; output, and
-you can then bring the files to a central location for post
-processing to find the aggregate performance over the &ldquo;test interval.&rdquo;
-
-   <p>This method has the advantage that it does not require advance
-knowledge of how long it takes to get netperf tests started and/or
-stopped.  It does though require sufficiently synchronized clocks on
-all the test systems.
-
-   <p>While calls to get the current time can be inexpensive, that neither
-has been nor is universally true.  For that reason netperf tries to
-minimize the number of such &ldquo;timestamping&rdquo; calls (eg
-<code>gettimeofday</code>) calls it makes when in demo mode.  Rather than
-take a timestamp after each <code>send</code> or <code>recv</code> call completes
-netperf tries to guess how many units of work will be performed over
-the desired interval.  Only once that many units of work have been
-completed will netperf check the time.  If the reporting interval has
-passed, netperf will emit an &ldquo;interim result.&rdquo;  If the interval has
-not passed, netperf will update its estimate for units and continue.
-
-   <p>After a bit of thought one can see that if things &ldquo;speed-up&rdquo; netperf
-will still honor the interval.  However, if things &ldquo;slow-down&rdquo;
-netperf may be late with an &ldquo;interim result.&rdquo;  Here is an example of
-both of those happening during a test - with the interval being
-honored while throughput increases, and then about half-way through
-when another netperf (not shown) is started we see things slowing down
-and netperf not hitting the interval as desired.
-<pre class="example">     $ src/netperf -D 2 -H tardy.hpl.hp.com -l 20
-     MIGRATED TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to tardy.hpl.hp.com () port 0 AF_INET : demo
-     Interim result:   36.46 10^6bits/s over 2.01 seconds ending at 1327963880.565
-     Interim result:   59.19 10^6bits/s over 2.00 seconds ending at 1327963882.569
-     Interim result:   73.39 10^6bits/s over 2.01 seconds ending at 1327963884.576
-     Interim result:   84.01 10^6bits/s over 2.03 seconds ending at 1327963886.603
-     Interim result:   75.63 10^6bits/s over 2.21 seconds ending at 1327963888.814
-     Interim result:   55.52 10^6bits/s over 2.72 seconds ending at 1327963891.538
-     Interim result:   70.94 10^6bits/s over 2.11 seconds ending at 1327963893.650
-     Interim result:   80.66 10^6bits/s over 2.13 seconds ending at 1327963895.777
-     Interim result:   86.42 10^6bits/s over 2.12 seconds ending at 1327963897.901
-     Recv   Send    Send
-     Socket Socket  Message  Elapsed
-     Size   Size    Size     Time     Throughput
-     bytes  bytes   bytes    secs.    10^6bits/sec
-
-      87380  16384  16384    20.34      68.87
-</pre>
-   <p>So long as your post-processing mechanism can account for that, there
-should be no problem.  As time passes there may be changes to try to
-improve the netperf's honoring the interval but one should not
-ass-u-me it will always do so.  One should not assume the precision
-will remain fixed - future versions may change it - perhaps going
-beyond tenths of seconds in reporting the interval length etc.
-
-<div class="node">
-<a name="Using-Netperf-to-Measure-Bidirectional-Transfer"></a>
-<p><hr>
-Next:&nbsp;<a rel="next" accesskey="n" href="#The-Omni-Tests">The Omni Tests</a>,
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#Using-Netperf-to-Measure-Aggregate-Performance">Using Netperf to Measure Aggregate Performance</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Top">Top</a>
-
-</div>
-
-<!-- node-name,  next,  previous,  up -->
-<h2 class="chapter">8 Using Netperf to Measure Bidirectional Transfer</h2>
-
-<p>There are two ways to use netperf to measure the performance of
-bidirectional transfer.  The first is to run concurrent netperf tests
-from the command line.  The second is to configure netperf with
-<code>--enable-burst</code> and use a single instance of the
-<a href="#TCP_005fRR">TCP_RR</a> test.
-
-   <p>While neither method is more &ldquo;correct&rdquo; than the other, each is doing
-so in different ways, and that has possible implications.  For
-instance, using the concurrent netperf test mechanism means that
-multiple TCP connections and multiple processes are involved, whereas
-using the single instance of TCP_RR there is only one TCP connection
-and one process on each end.  They may behave differently, especially
-on an MP system.
-
-<ul class="menu">
-<li><a accesskey="1" href="#Bidirectional-Transfer-with-Concurrent-Tests">Bidirectional Transfer with Concurrent Tests</a>
-<li><a accesskey="2" href="#Bidirectional-Transfer-with-TCP_005fRR">Bidirectional Transfer with TCP_RR</a>
-<li><a accesskey="3" href="#Implications-of-Concurrent-Tests-vs-Burst-Request_002fResponse">Implications of Concurrent Tests vs Burst Request/Response</a>
-</ul>
-
-<div class="node">
-<a name="Bidirectional-Transfer-with-Concurrent-Tests"></a>
-<p><hr>
-Next:&nbsp;<a rel="next" accesskey="n" href="#Bidirectional-Transfer-with-TCP_005fRR">Bidirectional Transfer with TCP_RR</a>,
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#Using-Netperf-to-Measure-Bidirectional-Transfer">Using Netperf to Measure Bidirectional Transfer</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Using-Netperf-to-Measure-Bidirectional-Transfer">Using Netperf to Measure Bidirectional Transfer</a>
-
-</div>
-
-<!-- node-name,  next,  previous,  up -->
-<h3 class="section">8.1 Bidirectional Transfer with Concurrent Tests</h3>
-
-<p>If we had two hosts Fred and Ethel, we could simply run a netperf
-<a href="#TCP_005fSTREAM">TCP_STREAM</a> test on Fred pointing at Ethel, and a
-concurrent netperf TCP_STREAM test on Ethel pointing at Fred, but
-since there are no mechanisms to synchronize netperf tests and we
-would be starting tests from two different systems, there is a
-considerable risk of skew error.
-
-   <p>Far better would be to run simultaneous TCP_STREAM and
-<a href="#TCP_005fMAERTS">TCP_MAERTS</a> tests from just <b>one</b> system, using the
-concepts and procedures outlined in <a href="#Running-Concurrent-Netperf-Tests">Running Concurrent Netperf Tests</a>. Here then is an example:
-
-<pre class="example">     for i in 1
-     do
-      netperf -H 192.168.2.108 -t TCP_STREAM -B "outbound" -i 10 -P 0 -v 0 \
-        -- -s 256K -S 256K &amp;
-      netperf -H 192.168.2.108 -t TCP_MAERTS -B "inbound"  -i 10 -P 0 -v 0 \
-        -- -s 256K -S 256K &amp;
-     done
-
-      892.66 outbound
-      891.34 inbound
-</pre>
-   <p>We have used a <code>for</code> loop in the shell with just one iteration
-because that will be <b>much</b> easier to get both tests started at more or
-less the same time than doing it by hand.  The global <samp><span class="option">-P</span></samp> and
-<samp><span class="option">-v</span></samp> options are used because we aren't interested in anything
-other than the throughput, and the global <samp><span class="option">-B</span></samp> option is used
-to tag each output so we know which was inbound and which outbound
-relative to the system on which we were running netperf.  Of course
-that sense is switched on the system running netserver :)  The use of
-the global <samp><span class="option">-i</span></samp> option is explained in <a href="#Running-Concurrent-Netperf-Tests">Running Concurrent Netperf Tests</a>.
-
-   <p>Beginning with version 2.5.0 we can accomplish a similar result with
-the <a href="#The-Omni-Tests">the omni tests</a> and <a href="#Omni-Output-Selectors">output selectors</a>:
-
-<pre class="example">     for i in 1
-     do
-       netperf -H 192.168.1.3 -t omni -l 10 -P 0 -- \
-         -d stream -s 256K -S 256K -o throughput,direction &amp;
-       netperf -H 192.168.1.3 -t omni -l 10 -P 0 -- \
-         -d maerts -s 256K -S 256K -o throughput,direction &amp;
-     done
-
-     805.26,Receive
-     828.54,Send
-</pre>
-   <div class="node">
-<a name="Bidirectional-Transfer-with-TCP_RR"></a>
-<a name="Bidirectional-Transfer-with-TCP_005fRR"></a>
-<p><hr>
-Next:&nbsp;<a rel="next" accesskey="n" href="#Implications-of-Concurrent-Tests-vs-Burst-Request_002fResponse">Implications of Concurrent Tests vs Burst Request/Response</a>,
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#Bidirectional-Transfer-with-Concurrent-Tests">Bidirectional Transfer with Concurrent Tests</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Using-Netperf-to-Measure-Bidirectional-Transfer">Using Netperf to Measure Bidirectional Transfer</a>
-
-</div>
-
-<!-- node-name,  next,  previous,  up -->
-<h3 class="section">8.2 Bidirectional Transfer with TCP_RR</h3>
-
-<p>Starting with version 2.5.0 the <code>--enable-burst</code> configure option
-defaults to <code>yes</code>, and starting some time before version 2.5.0
-but after 2.4.0 the global <samp><span class="option">-f</span></samp> option would affect the
-&ldquo;throughput&rdquo; reported by request/response tests.  If one uses the
-test-specific <samp><span class="option">-b</span></samp> option to have several &ldquo;transactions&rdquo; in
-flight at one time and the test-specific <samp><span class="option">-r</span></samp> option to
-increase their size, the test looks more and more like a
-single-connection bidirectional transfer than a simple
-request/response test.
-
-   <p>So, putting it all together one can do something like:
-
-<pre class="example">     netperf -f m -t TCP_RR -H 192.168.1.3 -v 2 -- -b 6 -r 32K -S 256K -S 256K
-     MIGRATED TCP REQUEST/RESPONSE TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 192.168.1.3 (192.168.1.3) port 0 AF_INET : interval : first burst 6
-     Local /Remote
-     Socket Size   Request  Resp.   Elapsed
-     Send   Recv   Size     Size    Time     Throughput
-     bytes  Bytes  bytes    bytes   secs.    10^6bits/sec
-
-     16384  87380  32768    32768   10.00    1821.30
-     524288 524288
-     Alignment      Offset         RoundTrip  Trans    Throughput
-     Local  Remote  Local  Remote  Latency    Rate     10^6bits/s
-     Send   Recv    Send   Recv    usec/Tran  per sec  Outbound   Inbound
-         8      0       0      0   2015.402   3473.252 910.492    910.492
-</pre>
-   <p>to get a bidirectional bulk-throughput result. As one can see, the -v
-2 output will include a number of interesting, related values.
-
-   <blockquote>
-<b>NOTE: The logic behind </b><code>--enable-burst</code><b> is very simple, and there
-are no calls to </b><code>poll()</code><b> or </b><code>select()</code><b> which means we want
-to make sure that the </b><code>send()</code><b> calls will never block, or we run
-the risk of deadlock with each side stuck trying to call </b><code>send()</code><b>
-and neither calling </b><code>recv()</code><b>.</b>
-</blockquote>
-
-   <p>Fortunately, this is easily accomplished by setting a &ldquo;large enough&rdquo;
-socket buffer size with the test-specific <samp><span class="option">-s</span></samp> and <samp><span class="option">-S</span></samp>
-options.  Presently this must be performed by the user.  Future
-versions of netperf might attempt to do this automagically, but there
-are some issues to be worked-out.
-
-<div class="node">
-<a name="Implications-of-Concurrent-Tests-vs-Burst-Request%2fResponse"></a>
-<a name="Implications-of-Concurrent-Tests-vs-Burst-Request_002fResponse"></a>
-<p><hr>
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#Bidirectional-Transfer-with-TCP_005fRR">Bidirectional Transfer with TCP_RR</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Using-Netperf-to-Measure-Bidirectional-Transfer">Using Netperf to Measure Bidirectional Transfer</a>
-
-</div>
-
-<h3 class="section">8.3 Implications of Concurrent Tests vs Burst Request/Response</h3>
-
-<p>There are perhaps subtle but important differences between using
-concurrent unidirectional tests vs a burst-mode request to measure
-bidirectional performance.
-
-   <p>Broadly speaking, a single &ldquo;connection&rdquo; or &ldquo;flow&rdquo; of traffic
-cannot make use of the services of more than one or two CPUs at either
-end.  Whether one or two CPUs will be used processing a flow will
-depend on the specifics of the stack(s) involved and whether or not
-the global <samp><span class="option">-T</span></samp> option has been used to bind netperf/netserver
-to specific CPUs.
-
-   <p>When using concurrent tests there will be two concurrent connections
-or flows, which means that upwards of four CPUs will be employed
-processing the packets (global <samp><span class="option">-T</span></samp> used, no more than two if
-not), however, with just a single, bidirectional request/response test
-no more than two CPUs will be employed (only one if the global
-<samp><span class="option">-T</span></samp> is not used).
-
-   <p>If there is a CPU bottleneck on either system this may result in
-rather different results between the two methods.
-
-   <p>Also, with a bidirectional request/response test there is something of
-a natural balance or synchronization between inbound and outbound - a
-response will not be sent until a request is received, and (once the
-burst level is reached) a subsequent request will not be sent until a
-response is received.  This may mask favoritism in the NIC between
-inbound and outbound processing.
-
-   <p>With two concurrent unidirectional tests there is no such
-synchronization or balance and any favoritism in the NIC may be exposed.
-
-<div class="node">
-<a name="The-Omni-Tests"></a>
-<p><hr>
-Next:&nbsp;<a rel="next" accesskey="n" href="#Other-Netperf-Tests">Other Netperf Tests</a>,
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#Using-Netperf-to-Measure-Bidirectional-Transfer">Using Netperf to Measure Bidirectional Transfer</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Top">Top</a>
-
-</div>
-
-<h2 class="chapter">9 The Omni Tests</h2>
-
-<p>Beginning with version 2.5.0, netperf begins a migration to the
-&lsquo;<samp><span class="samp">omni</span></samp>&rsquo; tests or &ldquo;Two routines to measure them all.&rdquo;  The code for
-the omni tests can be found in <samp><span class="file">src/nettest_omni.c</span></samp> and the goal
-is to make it easier for netperf to support multiple protocols and
-report a great many additional things about the systems under test.
-Additionally, a flexible output selection mechanism is present which
-allows the user to chose specifically what values she wishes to have
-reported and in what format.
-
-   <p>The omni tests are included by default in version 2.5.0.  To disable
-them, one must:
-<pre class="example">     ./configure --enable-omni=no ...
-</pre>
-   <p>and remake netperf.  Remaking netserver is optional because even in
-2.5.0 it has &ldquo;unmigrated&rdquo; netserver side routines for the classic
-(eg <samp><span class="file">src/nettest_bsd.c</span></samp>) tests.
-
-<ul class="menu">
-<li><a accesskey="1" href="#Native-Omni-Tests">Native Omni Tests</a>
-<li><a accesskey="2" href="#Migrated-Tests">Migrated Tests</a>
-<li><a accesskey="3" href="#Omni-Output-Selection">Omni Output Selection</a>
-</ul>
-
-<div class="node">
-<a name="Native-Omni-Tests"></a>
-<p><hr>
-Next:&nbsp;<a rel="next" accesskey="n" href="#Migrated-Tests">Migrated Tests</a>,
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#The-Omni-Tests">The Omni Tests</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#The-Omni-Tests">The Omni Tests</a>
-
-</div>
-
-<h3 class="section">9.1 Native Omni Tests</h3>
-
-<p>One access the omni tests &ldquo;natively&rdquo; by using a value of &ldquo;OMNI&rdquo;
-with the global <samp><span class="option">-t</span></samp> test-selection option.  This will then
-cause netperf to use the code in <samp><span class="file">src/nettest_omni.c</span></samp> and in
-particular the test-specific options parser for the omni tests.  The
-test-specific options for the omni tests are a superset of those for
-&ldquo;classic&rdquo; tests.  The options added by the omni tests are:
-
-
-<a name="index-g_t_002dc_002c-Test_002dspecific-87"></a>
-<dl><dt><code>-c</code><dd>This explicitly declares that the test is to include connection
-establishment and tear-down as in either a TCP_CRR or TCP_CC test.
-
-     <p><a name="index-g_t_002dd_002c-Test_002dspecific-88"></a><br><dt><code>-d &lt;direction&gt;</code><dd>This option sets the direction of the test relative to the netperf
-process.  As of version 2.5.0 one can use the following in a
-case-insensitive manner:
-
-          <dl>
-<dt><code>send, stream, transmit, xmit or 2</code><dd>Any of which will cause netperf to send to the netserver.
-<br><dt><code>recv, receive, maerts or 4</code><dd>Any of which will cause netserver to send to netperf.
-<br><dt><code>rr or 6</code><dd>Either of which will cause a request/response test.
-</dl>
-
-     <p>Additionally, one can specify two directions separated by a '|'
-character and they will be OR'ed together.  In this way one can use
-the &rdquo;Send|Recv&rdquo; that will be emitted by the <a href="#Omni-Output-Selectors">DIRECTION</a> <a href="#Omni-Output-Selection">output selector</a> when
-used with a request/response test.
-
-     <p><a name="index-g_t_002dk_002c-Test_002dspecific-89"></a><br><dt><code>-k [<a href="#Omni-Output-Selection">output selector</a>]</code><dd>This option sets the style of output to &ldquo;keyval&rdquo; where each line of
-output has the form:
-     <pre class="example">          key=value
-</pre>
-     <p>For example:
-     <pre class="example">          $ netperf -t omni -- -d rr -k "THROUGHPUT,THROUGHPUT_UNITS"
-          OMNI TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to localhost.localdomain (127.0.0.1) port 0 AF_INET : demo
-          THROUGHPUT=59092.65
-          THROUGHPUT_UNITS=Trans/s
-</pre>
-     <p>Using the <samp><span class="option">-k</span></samp> option will override any previous, test-specific
-<samp><span class="option">-o</span></samp> or <samp><span class="option">-O</span></samp> option.
-
-     <p><a name="index-g_t_002do_002c-Test_002dspecific-90"></a><br><dt><code>-o [<a href="#Omni-Output-Selection">output selector</a>]</code><dd>This option sets the style of output to &ldquo;CSV&rdquo; where there will be
-one line of comma-separated values, preceded by one line of column
-names unless the global <samp><span class="option">-P</span></samp> option is used with a value of 0:
-     <pre class="example">          $ netperf -t omni -- -d rr -o "THROUGHPUT,THROUGHPUT_UNITS"
-          OMNI TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to localhost.localdomain (127.0.0.1) port 0 AF_INET : demo
-          Throughput,Throughput Units
-          60999.07,Trans/s
-</pre>
-     <p>Using the <samp><span class="option">-o</span></samp> option will override any previous, test-specific
-<samp><span class="option">-k</span></samp> or <samp><span class="option">-O</span></samp> option.
-
-     <p><a name="index-g_t_002dO_002c-Test_002dspecific-91"></a><br><dt><code>-O [<a href="#Omni-Output-Selection">output selector</a>]</code><dd>This option sets the style of output to &ldquo;human readable&rdquo; which will
-look quite similar to classic netperf output:
-     <pre class="example">          $ netperf -t omni -- -d rr -O "THROUGHPUT,THROUGHPUT_UNITS"
-          OMNI TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to localhost.localdomain (127.0.0.1) port 0 AF_INET : demo
-          Throughput Throughput
-                     Units
-
-
-          60492.57   Trans/s
-</pre>
-     <p>Using the <samp><span class="option">-O</span></samp> option will override any previous, test-specific
-<samp><span class="option">-k</span></samp> or <samp><span class="option">-o</span></samp> option.
-
-     <p><a name="index-g_t_002dt_002c-Test_002dspecific-92"></a><br><dt><code>-t</code><dd>This option explicitly sets the socket type for the test's data
-connection. As of version 2.5.0 the known socket types include
-&ldquo;stream&rdquo; and &ldquo;dgram&rdquo; for SOCK_STREAM and SOCK_DGRAM respectively.
-
-     <p><a name="index-g_t_002dT_002c-Test_002dspecific-93"></a><br><dt><code>-T &lt;protocol&gt;</code><dd>This option is used to explicitly set the protocol used for the
-test. It is case-insensitive. As of version 2.5.0 the protocols known
-to netperf include:
-          <dl>
-<dt><code>TCP</code><dd>Select the Transmission Control Protocol
-<br><dt><code>UDP</code><dd>Select the User Datagram Protocol
-<br><dt><code>SDP</code><dd>Select the Sockets Direct Protocol
-<br><dt><code>DCCP</code><dd>Select the Datagram Congestion Control Protocol
-<br><dt><code>SCTP</code><dd>Select the Stream Control Transport Protocol
-<br><dt><code>udplite</code><dd>Select UDP Lite
-</dl>
-
-     <p>The default is implicit based on other settings.
-</dl>
-
-   <p>The omni tests also extend the interpretation of some of the classic,
-test-specific options for the BSD Sockets tests:
-
-     <dl>
-<dt><code>-m &lt;optionspec&gt;</code><dd>This can set the send size for either or both of the netperf and
-netserver sides of the test:
-     <pre class="example">          -m 32K
-</pre>
-     <p>sets only the netperf-side send size to 32768 bytes, and or's-in
-transmit for the direction. This is effectively the same behaviour as
-for the classic tests.
-     <pre class="example">          -m ,32K
-</pre>
-     <p>sets only the netserver side send size to 32768 bytes and or's-in
-receive for the direction.
-     <pre class="example">          -m 16K,32K
-          sets the netperf side send size to 16284 bytes, the netserver side
-          send size to 32768 bytes and the direction will be "Send|Recv."
-</pre>
-     <br><dt><code>-M &lt;optionspec&gt;</code><dd>This can set the receive size for either or both of the netperf and
-netserver sides of the test:
-     <pre class="example">          -M 32K
-</pre>
-     <p>sets only the netserver side receive size to 32768 bytes and or's-in
-send for the test direction.
-     <pre class="example">          -M ,32K
-</pre>
-     <p>sets only the netperf side receive size to 32768 bytes and or's-in
-receive for the test direction.
-     <pre class="example">          -M 16K,32K
-</pre>
-     <p>sets the netserver side receive size to 16384 bytes and the netperf
-side receive size to 32768 bytes and the direction will be "Send|Recv."
-</dl>
-
-<div class="node">
-<a name="Migrated-Tests"></a>
-<p><hr>
-Next:&nbsp;<a rel="next" accesskey="n" href="#Omni-Output-Selection">Omni Output Selection</a>,
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#Native-Omni-Tests">Native Omni Tests</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#The-Omni-Tests">The Omni Tests</a>
-
-</div>
-
-<h3 class="section">9.2 Migrated Tests</h3>
-
-<p>As of version 2.5.0 several tests have been migrated to use the omni
-code in <samp><span class="file">src/nettest_omni.c</span></samp> for the core of their testing.  A
-migrated test retains all its previous output code and so should still
-&ldquo;look and feel&rdquo; just like a pre-2.5.0 test with one exception - the
-first line of the test banners will include the word &ldquo;MIGRATED&rdquo; at
-the beginning as in:
-
-<pre class="example">     $ netperf
-     MIGRATED TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to localhost.localdomain (127.0.0.1) port 0 AF_INET : demo
-     Recv   Send    Send
-     Socket Socket  Message  Elapsed
-     Size   Size    Size     Time     Throughput
-     bytes  bytes   bytes    secs.    10^6bits/sec
-
-      87380  16384  16384    10.00    27175.27
-</pre>
-   <p>The tests migrated in version 2.5.0 are:
-     <ul>
-<li>TCP_STREAM
-<li>TCP_MAERTS
-<li>TCP_RR
-<li>TCP_CRR
-<li>UDP_STREAM
-<li>UDP_RR
-</ul>
-
-   <p>It is expected that future releases will have additional tests
-migrated to use the &ldquo;omni&rdquo; functionality.
-
-   <p>If one uses &ldquo;omni-specific&rdquo; test-specific options in conjunction
-with a migrated test, instead of using the classic output code, the
-new omni output code will be used. For example if one uses the
-<samp><span class="option">-k</span></samp> test-specific option with a value of
-&ldquo;MIN_LATENCY,MAX_LATENCY&rdquo; with a migrated TCP_RR test one will see:
-
-<pre class="example">     $ netperf -t tcp_rr -- -k THROUGHPUT,THROUGHPUT_UNITS
-     MIGRATED TCP REQUEST/RESPONSE TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to localhost.localdomain (127.0.0.1) port 0 AF_INET : demo
-     THROUGHPUT=60074.74
-     THROUGHPUT_UNITS=Trans/s
-</pre>
-   <p>rather than:
-<pre class="example">     $ netperf -t tcp_rr
-     MIGRATED TCP REQUEST/RESPONSE TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to localhost.localdomain (127.0.0.1) port 0 AF_INET : demo
-     Local /Remote
-     Socket Size   Request  Resp.   Elapsed  Trans.
-     Send   Recv   Size     Size    Time     Rate
-     bytes  Bytes  bytes    bytes   secs.    per sec
-
-     16384  87380  1        1       10.00    59421.52
-     16384  87380
-</pre>
-   <div class="node">
-<a name="Omni-Output-Selection"></a>
-<p><hr>
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#Migrated-Tests">Migrated Tests</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#The-Omni-Tests">The Omni Tests</a>
-
-</div>
-
-<h3 class="section">9.3 Omni Output Selection</h3>
-
-<p>The omni test-specific <samp><span class="option">-k</span></samp>, <samp><span class="option">-o</span></samp> and <samp><span class="option">-O</span></samp>
-options take an optional <code>output selector</code> by which the user can
-configure what values are reported.  The output selector can take
-several forms:
-
-     <dl>
-<dt><samp><span class="file">filename</span></samp><dd>The output selections will be read from the named file. Within the
-file there can be up to four lines of comma-separated output
-selectors. This controls how many multi-line blocks of output are emitted
-when the <samp><span class="option">-O</span></samp> option is used.  This output, while not identical to
-&ldquo;classic&rdquo; netperf output, is inspired by it.  Multiple lines have no
-effect for <samp><span class="option">-k</span></samp> and <samp><span class="option">-o</span></samp> options.  Putting output
-selections in a file can be useful when the list of selections is long.
-<br><dt><code>comma and/or semi-colon-separated list</code><dd>The output selections will be parsed from a comma and/or
-semi-colon-separated list of output selectors. When the list is given
-to a <samp><span class="option">-O</span></samp> option a semi-colon specifies a new output block
-should be started.  Semi-colons have the same meaning as commas when
-used with the <samp><span class="option">-k</span></samp> or <samp><span class="option">-o</span></samp> options.  Depending on the
-command interpreter being used, the semi-colon may have to be escaped
-somehow to keep it from being interpreted by the command interpreter.
-This can often be done by enclosing the entire list in quotes.
-<br><dt><code>all</code><dd>If the keyword <b>all</b> is specified it means that all known output
-values should be displayed at the end of the test.  This can be a
-great deal of output.  As of version 2.5.0 there are 157 different
-output selectors.
-<br><dt><code>?</code><dd>If a &ldquo;?&rdquo; is given as the output selection, the list of all known
-output selectors will be displayed and no test actually run.  When
-passed to the <samp><span class="option">-O</span></samp> option they will be listed one per
-line. Otherwise they will be listed as a comma-separated list.  It may
-be necessary to protect the &ldquo;?&rdquo; from the command interpreter by
-escaping it or enclosing it in quotes.
-<br><dt><code>no selector</code><dd>If nothing is given to the <samp><span class="option">-k</span></samp>, <samp><span class="option">-o</span></samp> or <samp><span class="option">-O</span></samp>
-option then the code selects a default set of output selectors
-inspired by classic netperf output. The format will be the &lsquo;<samp><span class="samp">human
-readable</span></samp>&rsquo; format emitted by the test-specific <samp><span class="option">-O</span></samp> option.
-</dl>
-
-   <p>The order of evaluation will first check for an output selection.  If
-none is specified with the <samp><span class="option">-k</span></samp>, <samp><span class="option">-o</span></samp> or <samp><span class="option">-O</span></samp>
-option netperf will select a default based on the characteristics of the
-test.  If there is an output selection, the code will first check for
-&lsquo;<samp><span class="samp">?</span></samp>&rsquo;, then check to see if it is the magic &lsquo;<samp><span class="samp">all</span></samp>&rsquo; keyword.
-After that it will check for either &lsquo;<samp><span class="samp">,</span></samp>&rsquo; or &lsquo;<samp><span class="samp">;</span></samp>&rsquo; in the
-selection and take that to mean it is a comma and/or
-semi-colon-separated list. If none of those checks match, netperf will then
-assume the output specification is a filename and attempt to open and
-parse the file.
-
-<ul class="menu">
-<li><a accesskey="1" href="#Omni-Output-Selectors">Omni Output Selectors</a>
-</ul>
-
-<div class="node">
-<a name="Omni-Output-Selectors"></a>
-<p><hr>
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#Omni-Output-Selection">Omni Output Selection</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Omni-Output-Selection">Omni Output Selection</a>
-
-</div>
-
-<h4 class="subsection">9.3.1 Omni Output Selectors</h4>
-
-<p>As of version 2.5.0 the output selectors are:
-
-     <dl>
-<dt><code>OUTPUT_NONE</code><dd>This is essentially a null output.  For <samp><span class="option">-k</span></samp> output it will
-simply add a line that reads &ldquo;OUTPUT_NONE=&rdquo; to the output. For
-<samp><span class="option">-o</span></samp> it will cause an empty &ldquo;column&rdquo; to be included. For
-<samp><span class="option">-O</span></samp> output it will cause extra spaces to separate &ldquo;real&rdquo; output.
-<br><dt><code>SOCKET_TYPE</code><dd>This will cause the socket type (eg SOCK_STREAM, SOCK_DGRAM) for the
-data connection to be output.
-<br><dt><code>PROTOCOL</code><dd>This will cause the protocol used for the data connection to be displayed.
-<br><dt><code>DIRECTION</code><dd>This will display the data flow direction relative to the netperf
-process. Units: Send or Recv for a unidirectional bulk-transfer test,
-or Send|Recv for a request/response test.
-<br><dt><code>ELAPSED_TIME</code><dd>This will display the elapsed time in seconds for the test.
-<br><dt><code>THROUGHPUT</code><dd>This will display the throughput for the test. Units: As requested via
-the global <samp><span class="option">-f</span></samp> option and displayed by the THROUGHPUT_UNITS
-output selector.
-<br><dt><code>THROUGHPUT_UNITS</code><dd>This will display the units for what is displayed by the
-<code>THROUGHPUT</code> output selector.
-<br><dt><code>LSS_SIZE_REQ</code><dd>This will display the local (netperf) send socket buffer size (aka
-SO_SNDBUF) requested via the command line. Units: Bytes.
-<br><dt><code>LSS_SIZE</code><dd>This will display the local (netperf) send socket buffer size
-(SO_SNDBUF) immediately after the data connection socket was created.
-Peculiarities of different networking stacks may lead to this
-differing from the size requested via the command line. Units: Bytes.
-<br><dt><code>LSS_SIZE_END</code><dd>This will display the local (netperf) send socket buffer size
-(SO_SNDBUF) immediately before the data connection socket is closed.
-Peculiarities of different networking stacks may lead this to differ
-from the size requested via the command line and/or the size
-immediately after the data connection socket was created. Units: Bytes.
-<br><dt><code>LSR_SIZE_REQ</code><dd>This will display the local (netperf) receive socket buffer size (aka
-SO_RCVBUF) requested via the command line. Units: Bytes.
-<br><dt><code>LSR_SIZE</code><dd>This will display the local (netperf) receive socket buffer size
-(SO_RCVBUF) immediately after the data connection socket was created.
-Peculiarities of different networking stacks may lead to this
-differing from the size requested via the command line. Units: Bytes.
-<br><dt><code>LSR_SIZE_END</code><dd>This will display the local (netperf) receive socket buffer size
-(SO_RCVBUF) immediately before the data connection socket is closed.
-Peculiarities of different networking stacks may lead this to differ
-from the size requested via the command line and/or the size
-immediately after the data connection socket was created. Units: Bytes.
-<br><dt><code>RSS_SIZE_REQ</code><dd>This will display the remote (netserver) send socket buffer size (aka
-SO_SNDBUF) requested via the command line. Units: Bytes.
-<br><dt><code>RSS_SIZE</code><dd>This will display the remote (netserver) send socket buffer size
-(SO_SNDBUF) immediately after the data connection socket was created.
-Peculiarities of different networking stacks may lead to this
-differing from the size requested via the command line. Units: Bytes.
-<br><dt><code>RSS_SIZE_END</code><dd>This will display the remote (netserver) send socket buffer size
-(SO_SNDBUF) immediately before the data connection socket is closed.
-Peculiarities of different networking stacks may lead this to differ
-from the size requested via the command line and/or the size
-immediately after the data connection socket was created. Units: Bytes.
-<br><dt><code>RSR_SIZE_REQ</code><dd>This will display the remote (netserver) receive socket buffer size (aka
-SO_RCVBUF) requested via the command line. Units: Bytes.
-<br><dt><code>RSR_SIZE</code><dd>This will display the remote (netserver) receive socket buffer size
-(SO_RCVBUF) immediately after the data connection socket was created.
-Peculiarities of different networking stacks may lead to this
-differing from the size requested via the command line. Units: Bytes.
-<br><dt><code>RSR_SIZE_END</code><dd>This will display the remote (netserver) receive socket buffer size
-(SO_RCVBUF) immediately before the data connection socket is closed.
-Peculiarities of different networking stacks may lead this to differ
-from the size requested via the command line and/or the size
-immediately after the data connection socket was created. Units: Bytes.
-<br><dt><code>LOCAL_SEND_SIZE</code><dd>This will display the size of the buffers netperf passed in any
-&ldquo;send&rdquo; calls it made on the data connection for a
-non-request/response test. Units: Bytes.
-<br><dt><code>LOCAL_RECV_SIZE</code><dd>This will display the size of the buffers netperf passed in any
-&ldquo;receive&rdquo; calls it made on the data connection for a
-non-request/response test. Units: Bytes.
-<br><dt><code>REMOTE_SEND_SIZE</code><dd>This will display the size of the buffers netserver passed in any
-&ldquo;send&rdquo; calls it made on the data connection for a
-non-request/response test. Units: Bytes.
-<br><dt><code>REMOTE_RECV_SIZE</code><dd>This will display the size of the buffers netserver passed in any
-&ldquo;receive&rdquo; calls it made on the data connection for a
-non-request/response test. Units: Bytes.
-<br><dt><code>REQUEST_SIZE</code><dd>This will display the size of the requests netperf sent in a
-request-response test. Units: Bytes.
-<br><dt><code>RESPONSE_SIZE</code><dd>This will display the size of the responses netserver sent in a
-request-response test. Units: Bytes.
-<br><dt><code>LOCAL_CPU_UTIL</code><dd>This will display the overall CPU utilization during the test as
-measured by netperf. Units: 0 to 100 percent.
-<br><dt><code>LOCAL_CPU_PERCENT_USER</code><dd>This will display the CPU fraction spent in user mode during the test
-as measured by netperf. Only supported by netcpu_procstat. Units: 0 to
-100 percent.
-<br><dt><code>LOCAL_CPU_PERCENT_SYSTEM</code><dd>This will display the CPU fraction spent in system mode during the test
-as measured by netperf. Only supported by netcpu_procstat. Units: 0 to
-100 percent.
-<br><dt><code>LOCAL_CPU_PERCENT_IOWAIT</code><dd>This will display the fraction of time waiting for I/O to complete
-during the test as measured by netperf. Only supported by
-netcpu_procstat. Units: 0 to 100 percent.
-<br><dt><code>LOCAL_CPU_PERCENT_IRQ</code><dd>This will display the fraction of time servicing interrupts during the
-test as measured by netperf. Only supported by netcpu_procstat. Units:
-0 to 100 percent.
-<br><dt><code>LOCAL_CPU_PERCENT_SWINTR</code><dd>This will display the fraction of time servicing softirqs during the
-test as measured by netperf. Only supported by netcpu_procstat. Units:
-0 to 100 percent.
-<br><dt><code>LOCAL_CPU_METHOD</code><dd>This will display the method used by netperf to measure CPU
-utilization. Units: single character denoting method.
-<br><dt><code>LOCAL_SD</code><dd>This will display the service demand, or units of CPU consumed per
-unit of work, as measured by netperf. Units: microseconds of CPU
-consumed per either KB (K==1024) of data transferred or request/response
-transaction.
-<br><dt><code>REMOTE_CPU_UTIL</code><dd>This will display the overall CPU utilization during the test as
-measured by netserver. Units 0 to 100 percent.
-<br><dt><code>REMOTE_CPU_PERCENT_USER</code><dd>This will display the CPU fraction spent in user mode during the test
-as measured by netserver. Only supported by netcpu_procstat. Units: 0 to
-100 percent.
-<br><dt><code>REMOTE_CPU_PERCENT_SYSTEM</code><dd>This will display the CPU fraction spent in system mode during the test
-as measured by netserver. Only supported by netcpu_procstat. Units: 0 to
-100 percent.
-<br><dt><code>REMOTE_CPU_PERCENT_IOWAIT</code><dd>This will display the fraction of time waiting for I/O to complete
-during the test as measured by netserver. Only supported by
-netcpu_procstat. Units: 0 to 100 percent.
-<br><dt><code>REMOTE_CPU_PERCENT_IRQ</code><dd>This will display the fraction of time servicing interrupts during the
-test as measured by netserver. Only supported by netcpu_procstat. Units:
-0 to 100 percent.
-<br><dt><code>REMOTE_CPU_PERCENT_SWINTR</code><dd>This will display the fraction of time servicing softirqs during the
-test as measured by netserver. Only supported by netcpu_procstat. Units:
-0 to 100 percent.
-<br><dt><code>REMOTE_CPU_METHOD</code><dd>This will display the method used by netserver to measure CPU
-utilization. Units: single character denoting method.
-<br><dt><code>REMOTE_SD</code><dd>This will display the service demand, or units of CPU consumed per
-unit of work, as measured by netserver. Units: microseconds of CPU
-consumed per either KB (K==1024) of data transferred or
-request/response transaction.
-<br><dt><code>SD_UNITS</code><dd>This will display the units for LOCAL_SD and REMOTE_SD
-<br><dt><code>CONFIDENCE_LEVEL</code><dd>This will display the confidence level requested by the user either
-explicitly via the global <samp><span class="option">-I</span></samp> option, or implicitly via the
-global <samp><span class="option">-i</span></samp> option.  The value will be either 95 or 99 if
-confidence intervals have been requested or 0 if they were not. Units:
-Percent
-<br><dt><code>CONFIDENCE_INTERVAL</code><dd>This will display the width of the confidence interval requested
-either explicitly via the global <samp><span class="option">-I</span></samp> option or implicitly via
-the global <samp><span class="option">-i</span></samp> option.  Units: Width in percent of mean value
-computed. A value of -1.0 means that confidence intervals were not requested.
-<br><dt><code>CONFIDENCE_ITERATION</code><dd>This will display the number of test iterations netperf undertook,
-perhaps while attempting to achieve the requested confidence interval
-and level. If confidence intervals were requested via the command line
-then the value will be between 3 and 30.  If confidence intervals were
-not requested the value will be 1.  Units: Iterations
-<br><dt><code>THROUGHPUT_CONFID</code><dd>This will display the width of the confidence interval actually
-achieved for <code>THROUGHPUT</code> during the test.  Units: Width of
-interval as percentage of reported throughput value.
-<br><dt><code>LOCAL_CPU_CONFID</code><dd>This will display the width of the confidence interval actually
-achieved for overall CPU utilization on the system running netperf
-(<code>LOCAL_CPU_UTIL</code>) during the test, if CPU utilization measurement
-was enabled.  Units: Width of interval as percentage of reported CPU
-utilization.
-<br><dt><code>REMOTE_CPU_CONFID</code><dd>This will display the width of the confidence interval actually
-achieved for overall CPU utilization on the system running netserver
-(<code>REMOTE_CPU_UTIL</code>) during the test, if CPU utilization
-measurement was enabled. Units: Width of interval as percentage of
-reported CPU utilization.
-<br><dt><code>TRANSACTION_RATE</code><dd>This will display the transaction rate in transactions per second for
-a request/response test even if the user has requested a throughput in
-units of bits or bytes per second via the global <samp><span class="option">-f</span></samp>
-option. It is undefined for a non-request/response test. Units:
-Transactions per second.
-<br><dt><code>RT_LATENCY</code><dd>This will display the average round-trip latency for a
-request/response test, accounting for number of transactions in flight
-at one time. It is undefined for a non-request/response test. Units:
-Microseconds per transaction
-<br><dt><code>BURST_SIZE</code><dd>This will display the &ldquo;burst size&rdquo; or added transactions in flight
-in a request/response test as requested via a test-specific
-<samp><span class="option">-b</span></samp> option.  The number of transactions in flight at one time
-will be one greater than this value.  It is undefined for a
-non-request/response test. Units: added Transactions in flight.
-<br><dt><code>LOCAL_TRANSPORT_RETRANS</code><dd>This will display the number of retransmissions experienced on the
-data connection during the test as determined by netperf.  A value of
--1 means the attempt to determine the number of retransmissions failed
-or the concept was not valid for the given protocol or the mechanism
-is not known for the platform. A value of -2 means it was not
-attempted. As of version 2.5.0 the meaning of values are in flux and
-subject to change.  Units: number of retransmissions.
-<br><dt><code>REMOTE_TRANSPORT_RETRANS</code><dd>This will display the number of retransmissions experienced on the
-data connection during the test as determined by netserver.  A value
-of -1 means the attempt to determine the number of retransmissions
-failed or the concept was not valid for the given protocol or the
-mechanism is not known for the platform. A value of -2 means it was
-not attempted. As of version 2.5.0 the meaning of values are in flux
-and subject to change.  Units: number of retransmissions.
-<br><dt><code>TRANSPORT_MSS</code><dd>This will display the Maximum Segment Size (aka MSS) or its equivalent
-for the protocol being used during the test.  A value of -1 means
-either the concept of an MSS did not apply to the protocol being used,
-or there was an error in retrieving it. Units: Bytes.
-<br><dt><code>LOCAL_SEND_THROUGHPUT</code><dd>The throughput as measured by netperf for the successful &ldquo;send&rdquo;
-calls it made on the data connection. Units: as requested via the
-global <samp><span class="option">-f</span></samp> option and displayed via the <code>THROUGHPUT_UNITS</code>
-output selector.
-<br><dt><code>LOCAL_RECV_THROUGHPUT</code><dd>The throughput as measured by netperf for the successful &ldquo;receive&rdquo;
-calls it made on the data connection. Units: as requested via the
-global <samp><span class="option">-f</span></samp> option and displayed via the <code>THROUGHPUT_UNITS</code>
-output selector.
-<br><dt><code>REMOTE_SEND_THROUGHPUT</code><dd>The throughput as measured by netserver for the successful &ldquo;send&rdquo;
-calls it made on the data connection. Units: as requested via the
-global <samp><span class="option">-f</span></samp> option and displayed via the <code>THROUGHPUT_UNITS</code>
-output selector.
-<br><dt><code>REMOTE_RECV_THROUGHPUT</code><dd>The throughput as measured by netserver for the successful &ldquo;receive&rdquo;
-calls it made on the data connection. Units: as requested via the
-global <samp><span class="option">-f</span></samp> option and displayed via the <code>THROUGHPUT_UNITS</code>
-output selector.
-<br><dt><code>LOCAL_CPU_BIND</code><dd>The CPU to which netperf was bound, if at all, during the test. A
-value of -1 means that netperf was not explicitly bound to a CPU
-during the test. Units: CPU ID
-<br><dt><code>LOCAL_CPU_COUNT</code><dd>The number of CPUs (cores, threads) detected by netperf. Units: CPU count.
-<br><dt><code>LOCAL_CPU_PEAK_UTIL</code><dd>The utilization of the CPU most heavily utilized during the test, as
-measured by netperf. This can be used to see if any one CPU of a
-multi-CPU system was saturated even though the overall CPU utilization
-as reported by <code>LOCAL_CPU_UTIL</code> was low. Units: 0 to 100%
-<br><dt><code>LOCAL_CPU_PEAK_ID</code><dd>The id of the CPU most heavily utilized during the test as determined
-by netperf. Units: CPU ID.
-<br><dt><code>LOCAL_CPU_MODEL</code><dd>Model information for the processor(s) present on the system running
-netperf. Assumes all processors in the system (as perceived by
-netperf) on which netperf is running are the same model. Units: Text
-<br><dt><code>LOCAL_CPU_FREQUENCY</code><dd>The frequency of the processor(s) on the system running netperf, at
-the time netperf made the call.  Assumes that all processors present
-in the system running netperf are running at the same
-frequency. Units: MHz
-<br><dt><code>REMOTE_CPU_BIND</code><dd>The CPU to which netserver was bound, if at all, during the test. A
-value of -1 means that netperf was not explicitly bound to a CPU
-during the test. Units: CPU ID
-<br><dt><code>REMOTE_CPU_COUNT</code><dd>The number of CPUs (cores, threads) detected by netserver. Units: CPU
-count.
-<br><dt><code>REMOTE_CPU_PEAK_UTIL</code><dd>The utilization of the CPU most heavily utilized during the test, as
-measured by netserver. This can be used to see if any one CPU of a
-multi-CPU system was saturated even though the overall CPU utilization
-as reported by <code>REMOTE_CPU_UTIL</code> was low. Units: 0 to 100%
-<br><dt><code>REMOTE_CPU_PEAK_ID</code><dd>The id of the CPU most heavily utilized during the test as determined
-by netserver. Units: CPU ID.
-<br><dt><code>REMOTE_CPU_MODEL</code><dd>Model information for the processor(s) present on the system running
-netserver. Assumes all processors in the system (as perceived by
-netserver) on which netserver is running are the same model. Units:
-Text
-<br><dt><code>REMOTE_CPU_FREQUENCY</code><dd>The frequency of the processor(s) on the system running netserver, at
-the time netserver made the call.  Assumes that all processors present
-in the system running netserver are running at the same
-frequency. Units: MHz
-<br><dt><code>SOURCE_PORT</code><dd>The port ID/service name to which the data socket created by netperf
-was bound.  A value of 0 means the data socket was not explicitly
-bound to a port number. Units: ASCII text.
-<br><dt><code>SOURCE_ADDR</code><dd>The name/address to which the data socket created by netperf was
-bound. A value of 0.0.0.0 means the data socket was not explicitly
-bound to an address. Units: ASCII text.
-<br><dt><code>SOURCE_FAMILY</code><dd>The address family to which the data socket created by netperf was
-bound.  A value of 0 means the data socket was not explicitly bound to
-a given address family. Units: ASCII text.
-<br><dt><code>DEST_PORT</code><dd>The port ID to which the data socket created by netserver was bound. A
-value of 0 means the data socket was not explicitly bound to a port
-number.  Units: ASCII text.
-<br><dt><code>DEST_ADDR</code><dd>The name/address of the data socket created by netserver.  Units:
-ASCII text.
-<br><dt><code>DEST_FAMILY</code><dd>The address family to which the data socket created by netserver was
-bound. A value of 0 means the data socket was not explicitly bound to
-a given address family. Units: ASCII text.
-<br><dt><code>LOCAL_SEND_CALLS</code><dd>The number of successful &ldquo;send&rdquo; calls made by netperf against its
-data socket. Units: Calls.
-<br><dt><code>LOCAL_RECV_CALLS</code><dd>The number of successful &ldquo;receive&rdquo; calls made by netperf against its
-data socket. Units: Calls.
-<br><dt><code>LOCAL_BYTES_PER_RECV</code><dd>The average number of bytes per &ldquo;receive&rdquo; call made by netperf
-against its data socket. Units: Bytes.
-<br><dt><code>LOCAL_BYTES_PER_SEND</code><dd>The average number of bytes per &ldquo;send&rdquo; call made by netperf against
-its data socket. Units: Bytes.
-<br><dt><code>LOCAL_BYTES_SENT</code><dd>The number of bytes successfully sent by netperf through its data
-socket. Units: Bytes.
-<br><dt><code>LOCAL_BYTES_RECVD</code><dd>The number of bytes successfully received by netperf through its data
-socket. Units: Bytes.
-<br><dt><code>LOCAL_BYTES_XFERD</code><dd>The sum of bytes sent and received by netperf through its data
-socket. Units: Bytes.
-<br><dt><code>LOCAL_SEND_OFFSET</code><dd>The offset from the alignment of the buffers passed by netperf in its
-&ldquo;send&rdquo; calls. Specified via the global <samp><span class="option">-o</span></samp> option and
-defaults to 0. Units: Bytes.
-<br><dt><code>LOCAL_RECV_OFFSET</code><dd>The offset from the alignment of the buffers passed by netperf in its
-&ldquo;receive&rdquo; calls. Specified via the global <samp><span class="option">-o</span></samp> option and
-defaults to 0. Units: Bytes.
-<br><dt><code>LOCAL_SEND_ALIGN</code><dd>The alignment of the buffers passed by netperf in its &ldquo;send&rdquo; calls
-as specified via the global <samp><span class="option">-a</span></samp> option. Defaults to 8. Units:
-Bytes.
-<br><dt><code>LOCAL_RECV_ALIGN</code><dd>The alignment of the buffers passed by netperf in its &ldquo;receive&rdquo;
-calls as specified via the global <samp><span class="option">-a</span></samp> option. Defaults to
-8. Units: Bytes.
-<br><dt><code>LOCAL_SEND_WIDTH</code><dd>The &ldquo;width&rdquo; of the ring of buffers through which netperf cycles as
-it makes its &ldquo;send&rdquo; calls.  Defaults to one more than the local send
-socket buffer size divided by the send size as determined at the time
-the data socket is created. Can be used to make netperf more processor
-data cache unfriendly. Units: number of buffers.
-<br><dt><code>LOCAL_RECV_WIDTH</code><dd>The &ldquo;width&rdquo; of the ring of buffers through which netperf cycles as
-it makes its &ldquo;receive&rdquo; calls.  Defaults to one more than the local
-receive socket buffer size divided by the receive size as determined
-at the time the data socket is created. Can be used to make netperf
-more processor data cache unfriendly. Units: number of buffers.
-<br><dt><code>LOCAL_SEND_DIRTY_COUNT</code><dd>The number of bytes to &ldquo;dirty&rdquo; (write to) before netperf makes a
-&ldquo;send&rdquo; call. Specified via the global <samp><span class="option">-k</span></samp> option, which
-requires that &ndash;enable-dirty=yes was specified with the configure
-command prior to building netperf. Units: Bytes.
-<br><dt><code>LOCAL_RECV_DIRTY_COUNT</code><dd>The number of bytes to &ldquo;dirty&rdquo; (write to) before netperf makes a
-&ldquo;recv&rdquo; call. Specified via the global <samp><span class="option">-k</span></samp> option which
-requires that &ndash;enable-dirty was specified with the configure command
-prior to building netperf. Units: Bytes.
-<br><dt><code>LOCAL_RECV_CLEAN_COUNT</code><dd>The number of bytes netperf should read &ldquo;cleanly&rdquo; before making a
-&ldquo;receive&rdquo; call. Specified via the global <samp><span class="option">-k</span></samp> option which
-requires that &ndash;enable-dirty was specified with configure command
-prior to building netperf.  Clean reads start were dirty writes ended.
-Units: Bytes.
-<br><dt><code>LOCAL_NODELAY</code><dd>Indicates whether or not setting the test protocol-specific &ldquo;no
-delay&rdquo; (eg TCP_NODELAY) option on the data socket used by netperf was
-requested by the test-specific <samp><span class="option">-D</span></samp> option and
-successful. Units: 0 means no, 1 means yes.
-<br><dt><code>LOCAL_CORK</code><dd>Indicates whether or not TCP_CORK was set on the data socket used by
-netperf as requested via the test-specific <samp><span class="option">-C</span></samp> option. 1 means
-yes, 0 means no/not applicable.
-<br><dt><code>REMOTE_SEND_CALLS</code><br><dt><code>REMOTE_RECV_CALLS</code><br><dt><code>REMOTE_BYTES_PER_RECV</code><br><dt><code>REMOTE_BYTES_PER_SEND</code><br><dt><code>REMOTE_BYTES_SENT</code><br><dt><code>REMOTE_BYTES_RECVD</code><br><dt><code>REMOTE_BYTES_XFERD</code><br><dt><code>REMOTE_SEND_OFFSET</code><br><dt><code>REMOTE_RECV_OFFSET</code><br><dt><code>REMOTE_SEND_ALIGN</code><br><dt><code>REMOTE_RECV_ALIGN</code><br><dt><code>REMOTE_SEND_WIDTH</code><br><dt><code>REMOTE_RECV_WIDTH</code><br><dt><code>REMOTE_SEND_DIRTY_COUNT</code><br><dt><code>REMOTE_RECV_DIRTY_COUNT</code><br><dt><code>REMOTE_RECV_CLEAN_COUNT</code><br><dt><code>REMOTE_NODELAY</code><br><dt><code>REMOTE_CORK</code><dd>These are all like their &ldquo;LOCAL_&rdquo; counterparts only for the
-netserver rather than netperf.
-<br><dt><code>LOCAL_SYSNAME</code><dd>The name of the OS (eg &ldquo;Linux&rdquo;) running on the system on which
-netperf was running. Units: ASCII Text.  Disabled in 2.7.0.
-<br><dt><code>LOCAL_SYSTEM_MODEL</code><dd>The model name of the system on which netperf was running. Units:
-ASCII Text.  Disabled in 2.7.0.
-<br><dt><code>LOCAL_RELEASE</code><dd>The release name/number of the OS running on the system on which
-netperf  was running. Units: ASCII Text.  Disabled in 2.7.0.
-<br><dt><code>LOCAL_VERSION</code><dd>The version number of the OS running on the system on which netperf
-was running. Units: ASCII Text.  Disabled in 2.7.0.
-<br><dt><code>LOCAL_MACHINE</code><dd>The machine architecture of the machine on which netperf was
-running. Units: ASCII Text.  Disabled in 2.7.0.
-<br><dt><code>REMOTE_SYSNAME</code><br><dt><code>REMOTE_SYSTEM_MODEL</code><br><dt><code>REMOTE_RELEASE</code><br><dt><code>REMOTE_VERSION</code><br><dt><code>REMOTE_MACHINE</code><dd>These are all like their &ldquo;LOCAL_&rdquo; counterparts only for the
-netserver rather than netperf.  Disabled in 2.7.0.
-<br><dt><code>LOCAL_INTERFACE_NAME</code><dd>The name of the probable egress interface through which the data
-connection went on the system running netperf. Example: eth0. Units:
-ASCII Text.  Disabled in 2.7.0.
-<br><dt><code>LOCAL_INTERFACE_VENDOR</code><dd>The vendor ID of the probable egress interface through which traffic
-on the data connection went on the system running netperf. Units:
-Hexadecimal IDs as might be found in a <samp><span class="file">pci.ids</span></samp> file or at
-<a href="http://pciids.sourceforge.net/">the PCI ID Repository</a>.  Disabled in 2.7.0.
-<br><dt><code>LOCAL_INTERFACE_DEVICE</code><dd>The device ID of the probable egress interface through which traffic
-on the data connection went on the system running netperf. Units:
-Hexadecimal IDs as might be found in a <samp><span class="file">pci.ids</span></samp> file or at
-<a href="http://pciids.sourceforge.net/">the PCI ID Repository</a>.  Disabled in 2.7.0.
-<br><dt><code>LOCAL_INTERFACE_SUBVENDOR</code><dd>The sub-vendor ID of the probable egress interface through which
-traffic on the data connection went on the system running
-netperf. Units: Hexadecimal IDs as might be found in a <samp><span class="file">pci.ids</span></samp>
-file or at <a href="http://pciids.sourceforge.net/">the PCI ID Repository</a>.  Disabled in 2.7.0.
-<br><dt><code>LOCAL_INTERFACE_SUBDEVICE</code><dd>The sub-device ID of the probable egress interface through which
-traffic on the data connection went on the system running
-netperf. Units: Hexadecimal IDs as might be found in a <samp><span class="file">pci.ids</span></samp>
-file or at <a href="http://pciids.sourceforge.net/">the PCI ID Repository</a>.  Disabled in 2.7.0.
-<br><dt><code>LOCAL_DRIVER_NAME</code><dd>The name of the driver used for the probable egress interface through
-which traffic on the data connection went on the system running
-netperf. Units: ASCII Text.  Disabled in 2.7.0.
-<br><dt><code>LOCAL_DRIVER_VERSION</code><dd>The version string for the driver used for the probable egress
-interface through which traffic on the data connection went on the
-system running netperf. Units: ASCII Text.  Disabled in 2.7.0.
-<br><dt><code>LOCAL_DRIVER_FIRMWARE</code><dd>The firmware version for the driver used for the probable egress
-interface through which traffic on the data connection went on the
-system running netperf. Units: ASCII Text.  Disabled in 2.7.0.
-<br><dt><code>LOCAL_DRIVER_BUS</code><dd>The bus address of the probable egress interface through which traffic
-on the data connection went on the system running netperf. Units:
-ASCII Text.  Disabled in 2.7.0.
-<br><dt><code>LOCAL_INTERFACE_SLOT</code><dd>The slot ID of the probable egress interface through which traffic
-on the data connection went on the system running netperf. Units:
-ASCII Text.  Disabled in 2.7.0.
-<br><dt><code>REMOTE_INTERFACE_NAME</code><br><dt><code>REMOTE_INTERFACE_VENDOR</code><br><dt><code>REMOTE_INTERFACE_DEVICE</code><br><dt><code>REMOTE_INTERFACE_SUBVENDOR</code><br><dt><code>REMOTE_INTERFACE_SUBDEVICE</code><br><dt><code>REMOTE_DRIVER_NAME</code><br><dt><code>REMOTE_DRIVER_VERSION</code><br><dt><code>REMOTE_DRIVER_FIRMWARE</code><br><dt><code>REMOTE_DRIVER_BUS</code><br><dt><code>REMOTE_INTERFACE_SLOT</code><dd>These are all like their &ldquo;LOCAL_&rdquo; counterparts only for the
-netserver rather than netperf.  Disabled in 2.7.0.
-<br><dt><code>LOCAL_INTERVAL_USECS</code><dd>The interval at which bursts of operations (sends, receives,
-transactions) were attempted by netperf.  Specified by the
-global <samp><span class="option">-w</span></samp> option which requires &ndash;enable-intervals to have
-been specified with the configure command prior to building
-netperf. Units: Microseconds (though specified by default in
-milliseconds on the command line)
-<br><dt><code>LOCAL_INTERVAL_BURST</code><dd>The number of operations (sends, receives, transactions depending on
-the test) which were attempted by netperf each LOCAL_INTERVAL_USECS
-units of time. Specified by the global <samp><span class="option">-b</span></samp> option which
-requires &ndash;enable-intervals to have been specified with the configure
-command prior to building netperf.  Units: number of operations per burst.
-<br><dt><code>REMOTE_INTERVAL_USECS</code><dd>The interval at which bursts of operations (sends, receives,
-transactions) were attempted by netserver.  Specified by the
-global <samp><span class="option">-w</span></samp> option which requires &ndash;enable-intervals to have
-been specified with the configure command prior to building
-netperf. Units: Microseconds (though specified by default in
-milliseconds on the command line)
-<br><dt><code>REMOTE_INTERVAL_BURST</code><dd>The number of operations (sends, receives, transactions depending on
-the test) which were attempted by netperf each LOCAL_INTERVAL_USECS
-units of time. Specified by the global <samp><span class="option">-b</span></samp> option which
-requires &ndash;enable-intervals to have been specified with the configure
-command prior to building netperf.  Units: number of operations per burst.
-<br><dt><code>LOCAL_SECURITY_TYPE_ID</code><br><dt><code>LOCAL_SECURITY_TYPE</code><br><dt><code>LOCAL_SECURITY_ENABLED_NUM</code><br><dt><code>LOCAL_SECURITY_ENABLED</code><br><dt><code>LOCAL_SECURITY_SPECIFIC</code><br><dt><code>REMOTE_SECURITY_TYPE_ID</code><br><dt><code>REMOTE_SECURITY_TYPE</code><br><dt><code>REMOTE_SECURITY_ENABLED_NUM</code><br><dt><code>REMOTE_SECURITY_ENABLED</code><br><dt><code>REMOTE_SECURITY_SPECIFIC</code><dd>A bunch of stuff related to what sort of security mechanisms (eg
-SELINUX) were enabled on the systems during the test.  Disabled in 2.7.0.
-<br><dt><code>RESULT_BRAND</code><dd>The string specified by the user with the global <samp><span class="option">-B</span></samp>
-option. Units: ASCII Text.
-<br><dt><code>UUID</code><dd>The universally unique identifier associated with this test, either
-generated automagically by netperf, or passed to netperf via an omni
-test-specific <samp><span class="option">-u</span></samp> option. Note: Future versions may make this
-a global command-line option. Units: ASCII Text.
-<br><dt><code>MIN_LATENCY</code><dd>The minimum &ldquo;latency&rdquo; or operation time (send, receive or
-request/response exchange depending on the test) as measured on the
-netperf side when the global <samp><span class="option">-j</span></samp> option was specified. Units:
-Microseconds.
-<br><dt><code>MAX_LATENCY</code><dd>The maximum &ldquo;latency&rdquo; or operation time (send, receive or
-request/response exchange depending on the test) as measured on the
-netperf side when the global <samp><span class="option">-j</span></samp> option was specified. Units:
-Microseconds.
-<br><dt><code>P50_LATENCY</code><dd>The 50th percentile value of &ldquo;latency&rdquo; or operation time (send, receive or
-request/response exchange depending on the test) as measured on the
-netperf side when the global <samp><span class="option">-j</span></samp> option was specified. Units:
-Microseconds.
-<br><dt><code>P90_LATENCY</code><dd>The 90th percentile value of &ldquo;latency&rdquo; or operation time (send, receive or
-request/response exchange depending on the test) as measured on the
-netperf side when the global <samp><span class="option">-j</span></samp> option was specified. Units:
-Microseconds.
-<br><dt><code>P99_LATENCY</code><dd>The 99th percentile value of &ldquo;latency&rdquo; or operation time (send, receive or
-request/response exchange depending on the test) as measured on the
-netperf side when the global <samp><span class="option">-j</span></samp> option was specified. Units:
-Microseconds.
-<br><dt><code>MEAN_LATENCY</code><dd>The average &ldquo;latency&rdquo; or operation time (send, receive or
-request/response exchange depending on the test) as measured on the
-netperf side when the global <samp><span class="option">-j</span></samp> option was specified. Units:
-Microseconds.
-<br><dt><code>STDDEV_LATENCY</code><dd>The standard deviation of &ldquo;latency&rdquo; or operation time (send, receive or
-request/response exchange depending on the test) as measured on the
-netperf side when the global <samp><span class="option">-j</span></samp> option was specified. Units:
-Microseconds.
-<br><dt><code>COMMAND_LINE</code><dd>The full command line used when invoking netperf. Units: ASCII Text.
-<br><dt><code>OUTPUT_END</code><dd>While emitted with the list of output selectors, it is ignored when
-specified as an output selector.
-</dl>
-
-<div class="node">
-<a name="Other-Netperf-Tests"></a>
-<p><hr>
-Next:&nbsp;<a rel="next" accesskey="n" href="#Address-Resolution">Address Resolution</a>,
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#The-Omni-Tests">The Omni Tests</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Top">Top</a>
-
-</div>
-
-<h2 class="chapter">10 Other Netperf Tests</h2>
-
-<p>Apart from the typical performance tests, netperf contains some tests
-which can be used to streamline measurements and reporting.  These
-include CPU rate calibration (present) and host identification (future
-enhancement).
-
-<ul class="menu">
-<li><a accesskey="1" href="#CPU-rate-calibration">CPU rate calibration</a>
-<li><a accesskey="2" href="#UUID-Generation">UUID Generation</a>
-</ul>
-
-<div class="node">
-<a name="CPU-rate-calibration"></a>
-<p><hr>
-Next:&nbsp;<a rel="next" accesskey="n" href="#UUID-Generation">UUID Generation</a>,
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#Other-Netperf-Tests">Other Netperf Tests</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Other-Netperf-Tests">Other Netperf Tests</a>
-
-</div>
-
-<h3 class="section">10.1 CPU rate calibration</h3>
-
-<p>Some of the CPU utilization measurement mechanisms of netperf work by
-comparing the rate at which some counter increments when the system is
-idle with the rate at which that same counter increments when the
-system is running a netperf test.  The ratio of those rates is used to
-arrive at a CPU utilization percentage.
-
-   <p>This means that netperf must know the rate at which the counter
-increments when the system is presumed to be &ldquo;idle.&rdquo;  If it does not
-know the rate, netperf will measure it before starting a data transfer
-test.  This calibration step takes 40 seconds for each of the local or
-remote systems, and if repeated for each netperf test would make taking
-repeated measurements rather slow.
-
-   <p>Thus, the netperf CPU utilization options <samp><span class="option">-c</span></samp> and and
-<samp><span class="option">-C</span></samp> can take an optional calibration value.  This value is
-used as the &ldquo;idle rate&rdquo; and the calibration step is not
-performed. To determine the idle rate, netperf can be used to run
-special tests which only report the value of the calibration - they
-are the LOC_CPU and REM_CPU tests.  These return the calibration value
-for the local and remote system respectively.  A common way to use
-these tests is to store their results into an environment variable and
-use that in subsequent netperf commands:
-
-<pre class="example">     LOC_RATE=`netperf -t LOC_CPU`
-     REM_RATE=`netperf -H &lt;remote&gt; -t REM_CPU`
-     netperf -H &lt;remote&gt; -c $LOC_RATE -C $REM_RATE ... -- ...
-     ...
-     netperf -H &lt;remote&gt; -c $LOC_RATE -C $REM_RATE ... -- ...
-</pre>
-   <p>If you are going to use netperf to measure aggregate results, it is
-important to use the LOC_CPU and REM_CPU tests to get the calibration
-values first to avoid issues with some of the aggregate netperf tests
-transferring data while others are &ldquo;idle&rdquo; and getting bogus
-calibration values.  When running aggregate tests, it is very
-important to remember that any one instance of netperf does not know
-about the other instances of netperf.  It will report global CPU
-utilization and will calculate service demand believing it was the
-only thing causing that CPU utilization.  So, you can use the CPU
-utilization reported by netperf in an aggregate test, but you have to
-calculate service demands by hand.
-
-<div class="node">
-<a name="UUID-Generation"></a>
-<p><hr>
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#CPU-rate-calibration">CPU rate calibration</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Other-Netperf-Tests">Other Netperf Tests</a>
-
-</div>
-
-<h3 class="section">10.2 UUID Generation</h3>
-
-<p>Beginning with version 2.5.0 netperf can generate Universally Unique
-IDentifiers (UUIDs).  This can be done explicitly via the &ldquo;UUID&rdquo;
-test:
-<pre class="example">     $ netperf -t UUID
-     2c8561ae-9ebd-11e0-a297-0f5bfa0349d0
-</pre>
-   <p>In and of itself, this is not terribly useful, but used in conjunction
-with the test-specific <samp><span class="option">-u</span></samp> option of an &ldquo;omni&rdquo; test to set
-the UUID emitted by the <a href="#Omni-Output-Selectors">UUID</a> output
-selector, it can be used to tie-together the separate instances of an
-aggregate netperf test.  Say, for instance if they were inserted into
-a database of some sort.
-
-<div class="node">
-<a name="Address-Resolution"></a>
-<p><hr>
-Next:&nbsp;<a rel="next" accesskey="n" href="#Enhancing-Netperf">Enhancing Netperf</a>,
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#Other-Netperf-Tests">Other Netperf Tests</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Top">Top</a>
-
-</div>
-
-<!-- node-name,  next,  previous,  up -->
-<h2 class="chapter">11 Address Resolution</h2>
-
-<p>Netperf versions 2.4.0 and later have merged IPv4 and IPv6 tests so
-the functionality of the tests in <samp><span class="file">src/nettest_ipv6.c</span></samp> has been
-subsumed into the tests in <samp><span class="file">src/nettest_bsd.c</span></samp>  This has been
-accomplished in part by switching from <code>gethostbyname()</code>to
-<code>getaddrinfo()</code> exclusively.  While it was theoretically possible
-to get multiple results for a hostname from <code>gethostbyname()</code> it
-was generally unlikely and netperf's ignoring of the second and later
-results was not much of an issue.
-
-   <p>Now with <code>getaddrinfo</code> and particularly with AF_UNSPEC it is
-increasingly likely that a given hostname will have multiple
-associated addresses.  The <code>establish_control()</code> routine of
-<samp><span class="file">src/netlib.c</span></samp> will indeed attempt to chose from among all the
-matching IP addresses when establishing the control connection.
-Netperf does not _really_ care if the control connection is IPv4 or
-IPv6 or even mixed on either end.
-
-   <p>However, the individual tests still ass-u-me that the first result in
-the address list is the one to be used.  Whether or not this will
-turn-out to be an issue has yet to be determined.
-
-   <p>If you do run into problems with this, the easiest workaround is to
-specify IP addresses for the data connection explicitly in the
-test-specific <samp><span class="option">-H</span></samp> and <samp><span class="option">-L</span></samp> options.  At some point, the
-netperf tests _may_ try to be more sophisticated in their parsing of
-returns from <code>getaddrinfo()</code> - straw-man patches to
-<a href="mailto:netperf-feedback@netperf.org">netperf-feedback@netperf.org</a> would of course be most welcome
-:)
-
-   <p>Netperf has leveraged code from other open-source projects with
-amenable licensing to provide a replacement <code>getaddrinfo()</code> call
-on those platforms where the <samp><span class="command">configure</span></samp> script believes there
-is no native getaddrinfo call.  As of this writing, the replacement
-<code>getaddrinfo()</code> as been tested on HP-UX 11.0 and then presumed to
-run elsewhere.
-
-<div class="node">
-<a name="Enhancing-Netperf"></a>
-<p><hr>
-Next:&nbsp;<a rel="next" accesskey="n" href="#Netperf4">Netperf4</a>,
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#Address-Resolution">Address Resolution</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Top">Top</a>
-
-</div>
-
-<!-- node-name,  next,  previous,  up -->
-<h2 class="chapter">12 Enhancing Netperf</h2>
-
-<p>Netperf is constantly evolving.  If you find you want to make
-enhancements to netperf, by all means do so.  If you wish to add a new
-&ldquo;suite&rdquo; of tests to netperf the general idea is to:
-
-     <ol type=1 start=1>
-<li>Add files <samp><span class="file">src/nettest_mumble.c</span></samp> and <samp><span class="file">src/nettest_mumble.h</span></samp>
-where mumble is replaced with something meaningful for the test-suite.
-<li>Add support for an appropriate <samp><span class="option">--enable-mumble</span></samp> option in
-<samp><span class="file">configure.ac</span></samp>.
-<li>Edit <samp><span class="file">src/netperf.c</span></samp>, <samp><span class="file">netsh.c</span></samp>, and <samp><span class="file">netserver.c</span></samp> as
-required, using #ifdef WANT_MUMBLE.
-<li>Compile and test
-        </ol>
-
-   <p>However, with the addition of the &ldquo;omni&rdquo; tests in version 2.5.0 it
-is preferred that one attempt to make the necessary changes to
-<samp><span class="file">src/nettest_omni.c</span></samp> rather than adding new source files, unless
-this would make the omni tests entirely too complicated.
-
-   <p>If you wish to submit your changes for possible inclusion into the
-mainline sources, please try to base your changes on the latest
-available sources. (See <a href="#Getting-Netperf-Bits">Getting Netperf Bits</a>.) and then send email
-describing the changes at a high level to
-<a href="mailto:netperf-feedback@netperf.org">netperf-feedback@netperf.org</a> or perhaps
-<a href="mailto:netperf-talk@netperf.org">netperf-talk@netperf.org</a>.  If the consensus is positive, then
-sending context <samp><span class="command">diff</span></samp> results to
-<a href="mailto:netperf-feedback@netperf.org">netperf-feedback@netperf.org</a> is the next step.  From that
-point, it is a matter of pestering the Netperf Contributing Editor
-until he gets the changes incorporated :)
-
-<div class="node">
-<a name="Netperf4"></a>
-<p><hr>
-Next:&nbsp;<a rel="next" accesskey="n" href="#Concept-Index">Concept Index</a>,
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#Enhancing-Netperf">Enhancing Netperf</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Top">Top</a>
-
-</div>
-
-<!-- node-name,  next,  previous,  up -->
-<h2 class="chapter">13 Netperf4</h2>
-
-<p>Netperf4 is the shorthand name given to version 4.X.X of netperf.
-This is really a separate benchmark more than a newer version of
-netperf, but it is a descendant of netperf so the netperf name is
-kept.  The facetious way to describe netperf4 is to say it is the
-egg-laying-woolly-milk-pig version of netperf :)  The more respectful
-way to describe it is to say it is the version of netperf with support
-for synchronized, multiple-thread, multiple-test, multiple-system,
-network-oriented benchmarking.
-
-   <p>Netperf4 is still undergoing evolution. Those wishing to work with or
-on netperf4 are encouraged to join the
-<a href="http://www.netperf.org/cgi-bin/mailman/listinfo/netperf-dev">netperf-dev</a>
-mailing list and/or peruse the
-<a href="http://www.netperf.org/svn/netperf4/trunk">current sources</a>.
-
-<div class="node">
-<a name="Concept-Index"></a>
-<p><hr>
-Next:&nbsp;<a rel="next" accesskey="n" href="#Option-Index">Option Index</a>,
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#Netperf4">Netperf4</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Top">Top</a>
-
-</div>
-
-<h2 class="unnumbered">Concept Index</h2>
-
-<ul class="index-cp" compact>
-<li><a href="#index-Aggregate-Performance-85">Aggregate Performance</a>: <a href="#Using-Netperf-to-Measure-Aggregate-Performance">Using Netperf to Measure Aggregate Performance</a></li>
-<li><a href="#index-Bandwidth-Limitation-10">Bandwidth Limitation</a>: <a href="#Installing-Netperf-Bits">Installing Netperf Bits</a></li>
-<li><a href="#index-Connection-Latency-69">Connection Latency</a>: <a href="#TCP_005fCC">TCP_CC</a></li>
-<li><a href="#index-CPU-Utilization-14">CPU Utilization</a>: <a href="#CPU-Utilization">CPU Utilization</a></li>
-<li><a href="#index-Design-of-Netperf-13">Design of Netperf</a>: <a href="#The-Design-of-Netperf">The Design of Netperf</a></li>
-<li><a href="#index-Installation-2">Installation</a>: <a href="#Installing-Netperf">Installing Netperf</a></li>
-<li><a href="#index-Introduction-1">Introduction</a>: <a href="#Introduction">Introduction</a></li>
-<li><a href="#index-Latency_002c-Connection-Establishment-79">Latency, Connection Establishment</a>: <a href="#XTI_005fTCP_005fCRR">XTI_TCP_CRR</a></li>
-<li><a href="#index-Latency_002c-Connection-Establishment-78">Latency, Connection Establishment</a>: <a href="#XTI_005fTCP_005fCC">XTI_TCP_CC</a></li>
-<li><a href="#index-Latency_002c-Connection-Establishment-73">Latency, Connection Establishment</a>: <a href="#TCP_005fCRR">TCP_CRR</a></li>
-<li><a href="#index-Latency_002c-Connection-Establishment-70">Latency, Connection Establishment</a>: <a href="#TCP_005fCC">TCP_CC</a></li>
-<li><a href="#index-Latency_002c-Request_002dResponse-84">Latency, Request-Response</a>: <a href="#SCTP_005fRR">SCTP_RR</a></li>
-<li><a href="#index-Latency_002c-Request_002dResponse-83">Latency, Request-Response</a>: <a href="#DLCO_005fRR">DLCO_RR</a></li>
-<li><a href="#index-Latency_002c-Request_002dResponse-82">Latency, Request-Response</a>: <a href="#DLCL_005fRR">DLCL_RR</a></li>
-<li><a href="#index-Latency_002c-Request_002dResponse-81">Latency, Request-Response</a>: <a href="#XTI_005fUDP_005fRR">XTI_UDP_RR</a></li>
-<li><a href="#index-Latency_002c-Request_002dResponse-80">Latency, Request-Response</a>: <a href="#XTI_005fTCP_005fCRR">XTI_TCP_CRR</a></li>
-<li><a href="#index-Latency_002c-Request_002dResponse-77">Latency, Request-Response</a>: <a href="#XTI_005fTCP_005fRR">XTI_TCP_RR</a></li>
-<li><a href="#index-Latency_002c-Request_002dResponse-75">Latency, Request-Response</a>: <a href="#UDP_005fRR">UDP_RR</a></li>
-<li><a href="#index-Latency_002c-Request_002dResponse-74">Latency, Request-Response</a>: <a href="#TCP_005fCRR">TCP_CRR</a></li>
-<li><a href="#index-Latency_002c-Request_002dResponse-68">Latency, Request-Response</a>: <a href="#TCP_005fRR">TCP_RR</a></li>
-<li><a href="#index-Limiting-Bandwidth-57">Limiting Bandwidth</a>: <a href="#UDP_005fSTREAM">UDP_STREAM</a></li>
-<li><a href="#index-Limiting-Bandwidth-9">Limiting Bandwidth</a>: <a href="#Installing-Netperf-Bits">Installing Netperf Bits</a></li>
-<li><a href="#index-Measuring-Latency-67">Measuring Latency</a>: <a href="#TCP_005fRR">TCP_RR</a></li>
-<li><a href="#index-Packet-Loss-76">Packet Loss</a>: <a href="#UDP_005fRR">UDP_RR</a></li>
-<li><a href="#index-Port-Reuse-71">Port Reuse</a>: <a href="#TCP_005fCC">TCP_CC</a></li>
-<li><a href="#index-TIME_005fWAIT-72">TIME_WAIT</a>: <a href="#TCP_005fCC">TCP_CC</a></li>
-   </ul><div class="node">
-<a name="Option-Index"></a>
-<p><hr>
-Previous:&nbsp;<a rel="previous" accesskey="p" href="#Concept-Index">Concept Index</a>,
-Up:&nbsp;<a rel="up" accesskey="u" href="#Top">Top</a>
-
-</div>
-
-<!-- node-name,  next,  previous,  up -->
-<h2 class="unnumbered">Option Index</h2>
-
-
-
-<ul class="index-vr" compact>
-<li><a href="#index-g_t_002d_002denable_002dburst_002c-Configure-86"><code>--enable-burst, Configure</code></a>: <a href="#Using-Netperf-to-Measure-Aggregate-Performance">Using Netperf to Measure Aggregate Performance</a></li>
-<li><a href="#index-g_t_002d_002denable_002dcpuutil_002c-Configure-3"><code>--enable-cpuutil, Configure</code></a>: <a href="#Installing-Netperf-Bits">Installing Netperf Bits</a></li>
-<li><a href="#index-g_t_002d_002denable_002ddlpi_002c-Configure-6"><code>--enable-dlpi, Configure</code></a>: <a href="#Installing-Netperf-Bits">Installing Netperf Bits</a></li>
-<li><a href="#index-g_t_002d_002denable_002dhistogram_002c-Configure-12"><code>--enable-histogram, Configure</code></a>: <a href="#Installing-Netperf-Bits">Installing Netperf Bits</a></li>
-<li><a href="#index-g_t_002d_002denable_002dintervals_002c-Configure-11"><code>--enable-intervals, Configure</code></a>: <a href="#Installing-Netperf-Bits">Installing Netperf Bits</a></li>
-<li><a href="#index-g_t_002d_002denable_002domni_002c-Configure-8"><code>--enable-omni, Configure</code></a>: <a href="#Installing-Netperf-Bits">Installing Netperf Bits</a></li>
-<li><a href="#index-g_t_002d_002denable_002dsctp_002c-Configure-7"><code>--enable-sctp, Configure</code></a>: <a href="#Installing-Netperf-Bits">Installing Netperf Bits</a></li>
-<li><a href="#index-g_t_002d_002denable_002dunixdomain_002c-Configure-5"><code>--enable-unixdomain, Configure</code></a>: <a href="#Installing-Netperf-Bits">Installing Netperf Bits</a></li>
-<li><a href="#index-g_t_002d_002denable_002dxti_002c-Configure-4"><code>--enable-xti, Configure</code></a>: <a href="#Installing-Netperf-Bits">Installing Netperf Bits</a></li>
-<li><a href="#index-g_t_002d4_002c-Global-46"><code>-4, Global</code></a>: <a href="#Global-Options">Global Options</a></li>
-<li><a href="#index-g_t_002d4_002c-Test_002dspecific-65"><code>-4, Test-specific</code></a>: <a href="#Options-Common-to-TCP-UDP-and-SCTP-_005fRR-tests">Options Common to TCP UDP and SCTP _RR tests</a></li>
-<li><a href="#index-g_t_002d4_002c-Test_002dspecific-55"><code>-4, Test-specific</code></a>: <a href="#Options-common-to-TCP-UDP-and-SCTP-tests">Options common to TCP UDP and SCTP tests</a></li>
-<li><a href="#index-g_t_002d6-Test_002dspecific-66"><code>-6 Test-specific</code></a>: <a href="#Options-Common-to-TCP-UDP-and-SCTP-_005fRR-tests">Options Common to TCP UDP and SCTP _RR tests</a></li>
-<li><a href="#index-g_t_002d6_002c-Global-47"><code>-6, Global</code></a>: <a href="#Global-Options">Global Options</a></li>
-<li><a href="#index-g_t_002d6_002c-Test_002dspecific-56"><code>-6, Test-specific</code></a>: <a href="#Options-common-to-TCP-UDP-and-SCTP-tests">Options common to TCP UDP and SCTP tests</a></li>
-<li><a href="#index-g_t_002dA_002c-Global-16"><code>-A, Global</code></a>: <a href="#Global-Options">Global Options</a></li>
-<li><a href="#index-g_t_002da_002c-Global-15"><code>-a, Global</code></a>: <a href="#Global-Options">Global Options</a></li>
-<li><a href="#index-g_t_002dB_002c-Global-18"><code>-B, Global</code></a>: <a href="#Global-Options">Global Options</a></li>
-<li><a href="#index-g_t_002db_002c-Global-17"><code>-b, Global</code></a>: <a href="#Global-Options">Global Options</a></li>
-<li><a href="#index-g_t_002dC_002c-Global-20"><code>-C, Global</code></a>: <a href="#Global-Options">Global Options</a></li>
-<li><a href="#index-g_t_002dc_002c-Global-19"><code>-c, Global</code></a>: <a href="#Global-Options">Global Options</a></li>
-<li><a href="#index-g_t_002dc_002c-Test_002dspecific-87"><code>-c, Test-specific</code></a>: <a href="#Native-Omni-Tests">Native Omni Tests</a></li>
-<li><a href="#index-g_t_002dD_002c-Global-22"><code>-D, Global</code></a>: <a href="#Global-Options">Global Options</a></li>
-<li><a href="#index-g_t_002dd_002c-Global-21"><code>-d, Global</code></a>: <a href="#Global-Options">Global Options</a></li>
-<li><a href="#index-g_t_002dd_002c-Test_002dspecific-88"><code>-d, Test-specific</code></a>: <a href="#Native-Omni-Tests">Native Omni Tests</a></li>
-<li><a href="#index-g_t_002dF_002c-Global-24"><code>-F, Global</code></a>: <a href="#Global-Options">Global Options</a></li>
-<li><a href="#index-g_t_002df_002c-Global-23"><code>-f, Global</code></a>: <a href="#Global-Options">Global Options</a></li>
-<li><a href="#index-g_t_002dH_002c-Global-26"><code>-H, Global</code></a>: <a href="#Global-Options">Global Options</a></li>
-<li><a href="#index-g_t_002dh_002c-Global-25"><code>-h, Global</code></a>: <a href="#Global-Options">Global Options</a></li>
-<li><a href="#index-g_t_002dH_002c-Test_002dspecific-59"><code>-H, Test-specific</code></a>: <a href="#Options-Common-to-TCP-UDP-and-SCTP-_005fRR-tests">Options Common to TCP UDP and SCTP _RR tests</a></li>
-<li><a href="#index-g_t_002dh_002c-Test_002dspecific-58"><code>-h, Test-specific</code></a>: <a href="#Options-Common-to-TCP-UDP-and-SCTP-_005fRR-tests">Options Common to TCP UDP and SCTP _RR tests</a></li>
-<li><a href="#index-g_t_002dh_002c-Test_002dspecific-48"><code>-h, Test-specific</code></a>: <a href="#Options-common-to-TCP-UDP-and-SCTP-tests">Options common to TCP UDP and SCTP tests</a></li>
-<li><a href="#index-g_t_002di_002c-Global-28"><code>-i, Global</code></a>: <a href="#Global-Options">Global Options</a></li>
-<li><a href="#index-g_t_002dI_002c-Global-27"><code>-I, Global</code></a>: <a href="#Global-Options">Global Options</a></li>
-<li><a href="#index-g_t_002dj_002c-Global-29"><code>-j, Global</code></a>: <a href="#Global-Options">Global Options</a></li>
-<li><a href="#index-g_t_002dk_002c-Test_002dspecific-89"><code>-k, Test-specific</code></a>: <a href="#Native-Omni-Tests">Native Omni Tests</a></li>
-<li><a href="#index-g_t_002dL_002c-Global-31"><code>-L, Global</code></a>: <a href="#Global-Options">Global Options</a></li>
-<li><a href="#index-g_t_002dl_002c-Global-30"><code>-l, Global</code></a>: <a href="#Global-Options">Global Options</a></li>
-<li><a href="#index-g_t_002dL_002c-Test_002dspecific-60"><code>-L, Test-specific</code></a>: <a href="#Options-Common-to-TCP-UDP-and-SCTP-_005fRR-tests">Options Common to TCP UDP and SCTP _RR tests</a></li>
-<li><a href="#index-g_t_002dL_002c-Test_002dspecific-49"><code>-L, Test-specific</code></a>: <a href="#Options-common-to-TCP-UDP-and-SCTP-tests">Options common to TCP UDP and SCTP tests</a></li>
-<li><a href="#index-g_t_002dM_002c-Test_002dspecific-51"><code>-M, Test-specific</code></a>: <a href="#Options-common-to-TCP-UDP-and-SCTP-tests">Options common to TCP UDP and SCTP tests</a></li>
-<li><a href="#index-g_t_002dm_002c-Test_002dspecific-50"><code>-m, Test-specific</code></a>: <a href="#Options-common-to-TCP-UDP-and-SCTP-tests">Options common to TCP UDP and SCTP tests</a></li>
-<li><a href="#index-g_t_002dN_002c-Global-33"><code>-N, Global</code></a>: <a href="#Global-Options">Global Options</a></li>
-<li><a href="#index-g_t_002dn_002c-Global-32"><code>-n, Global</code></a>: <a href="#Global-Options">Global Options</a></li>
-<li><a href="#index-g_t_002dO_002c-Global-35"><code>-O, Global</code></a>: <a href="#Global-Options">Global Options</a></li>
-<li><a href="#index-g_t_002do_002c-Global-34"><code>-o, Global</code></a>: <a href="#Global-Options">Global Options</a></li>
-<li><a href="#index-g_t_002dO_002c-Test_002dspecific-91"><code>-O, Test-specific</code></a>: <a href="#Native-Omni-Tests">Native Omni Tests</a></li>
-<li><a href="#index-g_t_002do_002c-Test_002dspecific-90"><code>-o, Test-specific</code></a>: <a href="#Native-Omni-Tests">Native Omni Tests</a></li>
-<li><a href="#index-g_t_002dP_002c-Global-37"><code>-P, Global</code></a>: <a href="#Global-Options">Global Options</a></li>
-<li><a href="#index-g_t_002dp_002c-Global-36"><code>-p, Global</code></a>: <a href="#Global-Options">Global Options</a></li>
-<li><a href="#index-g_t_002dP_002c-Test_002dspecific-61"><code>-P, Test-specific</code></a>: <a href="#Options-Common-to-TCP-UDP-and-SCTP-_005fRR-tests">Options Common to TCP UDP and SCTP _RR tests</a></li>
-<li><a href="#index-g_t_002dP_002c-Test_002dspecific-52"><code>-P, Test-specific</code></a>: <a href="#Options-common-to-TCP-UDP-and-SCTP-tests">Options common to TCP UDP and SCTP tests</a></li>
-<li><a href="#index-g_t_002dr_002c-Test_002dspecific-62"><code>-r, Test-specific</code></a>: <a href="#Options-Common-to-TCP-UDP-and-SCTP-_005fRR-tests">Options Common to TCP UDP and SCTP _RR tests</a></li>
-<li><a href="#index-g_t_002dS-Test_002dspecific-54"><code>-S Test-specific</code></a>: <a href="#Options-common-to-TCP-UDP-and-SCTP-tests">Options common to TCP UDP and SCTP tests</a></li>
-<li><a href="#index-g_t_002dS_002c-Global-39"><code>-S, Global</code></a>: <a href="#Global-Options">Global Options</a></li>
-<li><a href="#index-g_t_002ds_002c-Global-38"><code>-s, Global</code></a>: <a href="#Global-Options">Global Options</a></li>
-<li><a href="#index-g_t_002dS_002c-Test_002dspecific-64"><code>-S, Test-specific</code></a>: <a href="#Options-Common-to-TCP-UDP-and-SCTP-_005fRR-tests">Options Common to TCP UDP and SCTP _RR tests</a></li>
-<li><a href="#index-g_t_002ds_002c-Test_002dspecific-63"><code>-s, Test-specific</code></a>: <a href="#Options-Common-to-TCP-UDP-and-SCTP-_005fRR-tests">Options Common to TCP UDP and SCTP _RR tests</a></li>
-<li><a href="#index-g_t_002ds_002c-Test_002dspecific-53"><code>-s, Test-specific</code></a>: <a href="#Options-common-to-TCP-UDP-and-SCTP-tests">Options common to TCP UDP and SCTP tests</a></li>
-<li><a href="#index-g_t_002dT_002c-Global-41"><code>-T, Global</code></a>: <a href="#Global-Options">Global Options</a></li>
-<li><a href="#index-g_t_002dt_002c-Global-40"><code>-t, Global</code></a>: <a href="#Global-Options">Global Options</a></li>
-<li><a href="#index-g_t_002dT_002c-Test_002dspecific-93"><code>-T, Test-specific</code></a>: <a href="#Native-Omni-Tests">Native Omni Tests</a></li>
-<li><a href="#index-g_t_002dt_002c-Test_002dspecific-92"><code>-t, Test-specific</code></a>: <a href="#Native-Omni-Tests">Native Omni Tests</a></li>
-<li><a href="#index-g_t_002dV_002c-Global-43"><code>-V, Global</code></a>: <a href="#Global-Options">Global Options</a></li>
-<li><a href="#index-g_t_002dv_002c-Global-42"><code>-v, Global</code></a>: <a href="#Global-Options">Global Options</a></li>
-<li><a href="#index-g_t_002dW_002c-Global-45"><code>-W, Global</code></a>: <a href="#Global-Options">Global Options</a></li>
-<li><a href="#index-g_t_002dw_002c-Global-44"><code>-w, Global</code></a>: <a href="#Global-Options">Global Options</a></li>
-   </ul></body></html>
-
diff --git a/doc/netperf.info b/doc/netperf.info
index c570211..6ddf045 100644
--- a/doc/netperf.info
+++ b/doc/netperf.info
@@ -1,32 +1,37 @@
-This is netperf.info, produced by makeinfo version 4.13 from
+This is netperf.info, produced by makeinfo version 6.7 from
 netperf.texi.
 
 This is Rick Jones' feeble attempt at a Texinfo-based manual for the
 netperf benchmark.
 
-   Copyright (C) 2005-2015 Hewlett-Packard Company
-   Copyright 2021 Hewlett Packard Enterprise Development LP
+   Copyright (C) 2005-2015 Hewlett-Packard Company Copyright 2021
+Hewlett Packard Enterprise Development LP
 
-Permission is hereby granted, free of charge, to any person obtaining a
-copy of this software and associated documentation files (the "Software"),
-to deal in the Software without restriction, including without limitation
-the rights to use, copy, modify, merge, publish, distribute, sublicense,
-and/or sell copies of the Software, and to permit persons to whom the
-Software is furnished to do so, subject to the following conditions:
+     Permission is hereby granted, free of charge, to any person
+     obtaining a copy of this software and associated documentation
+     files (the "Software"), to deal in the Software without
+     restriction, including without limitation the rights to use, copy,
+     modify, merge, publish, distribute, sublicense, and/or sell copies
+     of the Software, and to permit persons to whom the Software is
+     furnished to do so, subject to the following conditions:
 
-The above copyright notice and this permission notice shall be included in
-all copies or substantial portions of the Software.
+     The above copyright notice and this permission notice shall be
+     included in all copies or substantial portions of the Software.
 
-THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
-
-IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
-DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
-OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
-USE OR OTHER DEALINGS IN THE SOFTWARE.
+     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+     EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+     MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+     NONINFRINGEMENT.
 
+     IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR
+     ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
+     CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+     WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 
+     Permission is granted to copy, distribute and/or modify this
+     document per the terms of the netperf source license, a copy of
+     which can be found in the file 'COPYING' of the basic netperf
+     distribution.
 
 
 File: netperf.info,  Node: Top,  Next: Introduction,  Prev: (dir),  Up: (dir)
@@ -37,11 +42,33 @@ Netperf Manual
 This is Rick Jones' feeble attempt at a Texinfo-based manual for the
 netperf benchmark.
 
-   Copyright (C) 2005-2015 Hewlett-Packard Company
+   Copyright (C) 2005-2015 Hewlett-Packard Company Copyright 2021
+Hewlett Packard Enterprise Development LP
+
+     Permission is hereby granted, free of charge, to any person
+     obtaining a copy of this software and associated documentation
+     files (the "Software"), to deal in the Software without
+     restriction, including without limitation the rights to use, copy,
+     modify, merge, publish, distribute, sublicense, and/or sell copies
+     of the Software, and to permit persons to whom the Software is
+     furnished to do so, subject to the following conditions:
+
+     The above copyright notice and this permission notice shall be
+     included in all copies or substantial portions of the Software.
+
+     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+     EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+     MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+     NONINFRINGEMENT.
+
+     IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR
+     ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
+     CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+     WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 
      Permission is granted to copy, distribute and/or modify this
      document per the terms of the netperf source license, a copy of
-     which can be found in the file `COPYING' of the basic netperf
+     which can be found in the file 'COPYING' of the basic netperf
      distribution.
 
 * Menu:
@@ -77,54 +104,47 @@ available either unconditionally or conditionally include:
 
    * TCP and UDP unidirectional transfer and request/response over IPv4
      and IPv6 using the Sockets interface.
-
    * TCP and UDP unidirectional transfer and request/response over IPv4
      using the XTI interface.
-
    * Link-level unidirectional transfer and request/response using the
      DLPI interface.
-
    * Unix domain sockets
-
    * SCTP unidirectional transfer and request/response over IPv4 and
      IPv6 using the sockets interface.
 
    While not every revision of netperf will work on every platform
-listed, the intention is that at least some version of netperf will
-work on the following platforms:
+listed, the intention is that at least some version of netperf will work
+on the following platforms:
 
    * Unix - at least all the major variants.
-
    * Linux
-
    * Windows
-
    * Others
 
    Netperf is maintained and informally supported primarily by Rick
-Jones, who can perhaps be best described as Netperf Contributing
-Editor.  Non-trivial and very appreciated assistance comes from others
-in the network performance community, who are too numerous to mention
-here. While it is often used by them, netperf is NOT supported via any
-of the formal Hewlett-Packard support channels.  You should feel free
-to make enhancements and modifications to netperf to suit your
-nefarious porpoises, so long as you stay within the guidelines of the
-netperf copyright.  If you feel so inclined, you can send your changes
-to netperf-feedback <netperf-feedback@netperf.org> for possible
-inclusion into subsequent versions of netperf.
+Jones, who can perhaps be best described as Netperf Contributing Editor.
+Non-trivial and very appreciated assistance comes from others in the
+network performance community, who are too numerous to mention here.
+While it is often used by them, netperf is NOT supported via any of the
+formal Hewlett-Packard support channels.  You should feel free to make
+enhancements and modifications to netperf to suit your nefarious
+porpoises, so long as you stay within the guidelines of the netperf
+copyright.  If you feel so inclined, you can send your changes to
+netperf-feedback <netperf-feedback@netperf.org> for possible inclusion
+into subsequent versions of netperf.
 
    It is the Contributing Editor's belief that the netperf license walks
-like open source and talks like open source. However, the license was
+like open source and talks like open source.  However, the license was
 never submitted for "certification" as an open source license.  If you
 would prefer to make contributions to a networking benchmark using a
 certified open source license, please consider netperf4, which is
 distributed under the terms of the GPLv2.
 
-   The netperf-talk <netperf-talk@netperf.org> mailing list is
-available to discuss the care and feeding of netperf with others who
-share your interest in network performance benchmarking. The
-netperf-talk mailing list is a closed list (to deal with spam) and you
-must first subscribe by sending email to netperf-talk-request
+   The netperf-talk <netperf-talk@netperf.org> mailing list is available
+to discuss the care and feeding of netperf with others who share your
+interest in network performance benchmarking.  The netperf-talk mailing
+list is a closed list (to deal with spam) and you must first subscribe
+by sending email to netperf-talk-request
 <netperf-talk-request@netperf.org>.
 
 * Menu:
@@ -163,8 +183,8 @@ second parameter:
 the most frequently used.
 
    There is another variant of the comma-separated, two-item list called
-a "optionspec" which is like a sizespec with the exception that a
-single item with no comma:
+a "optionspec" which is like a sizespec with the exception that a single
+item with no comma:
 
      parameter1
 
@@ -174,7 +194,7 @@ second parameter at its default value.
    Netperf has two types of command-line options.  The first are global
 command line options.  They are essentially any option not tied to a
 particular test or group of tests.  An example of a global command-line
-option is the one which sets the test type - `-t'.
+option is the one which sets the test type - '-t'.
 
    The second type of options are test-specific options.  These are
 options which are only applicable to a particular test or set of tests.
@@ -182,7 +202,7 @@ An example of a test-specific option would be the send socket buffer
 size for a TCP_STREAM test.
 
    Global command-line options are specified first with test-specific
-options following after a `--' as in:
+options following after a '--' as in:
 
      netperf <global> -- <test-specific>
 
@@ -193,26 +213,26 @@ File: netperf.info,  Node: Installing Netperf,  Next: The Design of Netperf,  Pr
 ********************
 
 Netperf's primary form of distribution is source code.  This allows
-installation on systems other than those to which the authors have
-ready access and thus the ability to create binaries.  There are two
-styles of netperf installation.  The first runs the netperf server
-program - netserver - as a child of inetd.  This requires the installer
-to have sufficient privileges to edit the files `/etc/services' and
-`/etc/inetd.conf' or their platform-specific equivalents.
+installation on systems other than those to which the authors have ready
+access and thus the ability to create binaries.  There are two styles of
+netperf installation.  The first runs the netperf server program -
+netserver - as a child of inetd.  This requires the installer to have
+sufficient privileges to edit the files '/etc/services' and
+'/etc/inetd.conf' or their platform-specific equivalents.
 
    The second style is to run netserver as a standalone daemon.  This
-second method does not require edit privileges on `/etc/services' and
-`/etc/inetd.conf' but does mean you must remember to run the netserver
+second method does not require edit privileges on '/etc/services' and
+'/etc/inetd.conf' but does mean you must remember to run the netserver
 program explicitly after every system reboot.
 
    This manual assumes that those wishing to measure networking
 performance already know how to use anonymous FTP and/or a web browser.
 It is also expected that you have at least a passing familiarity with
-the networking protocols and interfaces involved. In all honesty, if
-you do not have such familiarity, likely as not you have some
-experience to gain before attempting network performance measurements.
-The excellent texts by authors such as Stevens, Fenner and Rudoff
-and/or Stallings would be good starting points. There are likely other
+the networking protocols and interfaces involved.  In all honesty, if
+you do not have such familiarity, likely as not you have some experience
+to gain before attempting network performance measurements.  The
+excellent texts by authors such as Stevens, Fenner and Rudoff and/or
+Stallings would be good starting points.  There are likely other
 excellent sources out there as well.
 
 * Menu:
@@ -229,22 +249,22 @@ File: netperf.info,  Node: Getting Netperf Bits,  Next: Installing Netperf Bits,
 
 Gzipped tar files of netperf sources can be retrieved via anonymous FTP
 (ftp://ftp.netperf.org/netperf) for "released" versions of the bits.
-Pre-release versions of the bits can be retrieved via anonymous FTP
-from the experimental (ftp://ftp.netperf.org/netperf/experimental)
+Pre-release versions of the bits can be retrieved via anonymous FTP from
+the experimental (ftp://ftp.netperf.org/netperf/experimental)
 subdirectory.
 
    For convenience and ease of remembering, a link to the download site
 is provided via the NetperfPage (http://www.netperf.org/)
 
-   The bits corresponding to each discrete release of netperf are
-tagged (http://www.netperf.org/svn/netperf2/tags) for retrieval via
-subversion.  For example, there is a tag for the first version
-corresponding to this version of the manual - netperf 2.7.0
-(http://www.netperf.org/svn/netperf2/tags/netperf-2.7.0).  Those
-wishing to be on the bleeding edge of netperf development can use
-subversion to grab the top of trunk
-(http://www.netperf.org/svn/netperf2/trunk).  When fixing bugs or
-making enhancements, patches against the top-of-trunk are preferred.
+   The bits corresponding to each discrete release of netperf are tagged
+(http://www.netperf.org/svn/netperf2/tags) for retrieval via subversion.
+For example, there is a tag for the first version corresponding to this
+version of the manual - netperf 2.7.0
+(http://www.netperf.org/svn/netperf2/tags/netperf-2.7.0).  Those wishing
+to be on the bleeding edge of netperf development can use subversion to
+grab the top of trunk (http://www.netperf.org/svn/netperf2/trunk).  When
+fixing bugs or making enhancements, patches against the top-of-trunk are
+preferred.
 
    There are likely other places around the Internet from which one can
 download netperf bits.  These may be simple mirrors of the main netperf
@@ -255,9 +275,9 @@ downloader.
 
    As a general rule, binaries of netperf and netserver are not
 distributed from ftp.netperf.org.  From time to time a kind soul or
-souls has packaged netperf as a Debian package available via the
-apt-get mechanism or as an RPM.  I would be most interested in learning
-how to enhance the makefiles to make that easier for people.
+souls has packaged netperf as a Debian package available via the apt-get
+mechanism or as an RPM. I would be most interested in learning how to
+enhance the makefiles to make that easier for people.
 
 
 File: netperf.info,  Node: Installing Netperf Bits,  Next: Verifying Installation,  Prev: Getting Netperf Bits,  Up: Installing Netperf
@@ -279,58 +299,58 @@ sufficient to just:
    Most of the "usual" configure script options should be present
 dealing with where to install binaries and whatnot.
      ./configure --help
-   should list all of those and more.  You may find the `--prefix'
+   should list all of those and more.  You may find the '--prefix'
 option helpful in deciding where the binaries and such will be put
-during the `make install'.
+during the 'make install'.
 
    If the netperf configure script does not know how to automagically
 detect which CPU utilization mechanism to use on your platform you may
-want to add a `--enable-cpuutil=mumble' option to the configure
-command.   If you have knowledge and/or experience to contribute to
-that area, feel free to contact <netperf-feedback@netperf.org>.
+want to add a '--enable-cpuutil=mumble' option to the configure command.
+If you have knowledge and/or experience to contribute to that area, feel
+free to contact <netperf-feedback@netperf.org>.
 
    Similarly, if you want tests using the XTI interface, Unix Domain
 Sockets, DLPI or SCTP it will be necessary to add one or more
-`--enable-[xti|unixdomain|dlpi|sctp]=yes' options to the configure
+'--enable-[xti|unixdomain|dlpi|sctp]=yes' options to the configure
 command.  As of this writing, the configure script will not include
 those tests automagically.
 
    Starting with version 2.5.0, netperf began migrating most of the
-"classic" netperf tests found in `src/nettest_bsd.c' to the so-called
+"classic" netperf tests found in 'src/nettest_bsd.c' to the so-called
 "omni" tests (aka "two routines to run them all") found in
-`src/nettest_omni.c'.  This migration enables a number of new features
+'src/nettest_omni.c'.  This migration enables a number of new features
 such as greater control over what output is included, and new things to
 output.  The "omni" test is enabled by default in 2.5.0 and a number of
 the classic tests are migrated - you can tell if a test has been
-migrated from the presence of `MIGRATED' in the test banner.  If you
+migrated from the presence of 'MIGRATED' in the test banner.  If you
 encounter problems with either the omni or migrated tests, please first
 attempt to obtain resolution via <netperf-talk@netperf.org> or
 <netperf-feedback@netperf.org>.  If that is unsuccessful, you can add a
-`--enable-omni=no' to the configure command and the omni tests will not
+'--enable-omni=no' to the configure command and the omni tests will not
 be compiled-in and the classic tests will not be migrated.
 
    Starting with version 2.5.0, netperf includes the "burst mode"
 functionality in a default compilation of the bits.  If you encounter
 problems with this, please first attempt to obtain help via
 <netperf-talk@netperf.org> or <netperf-feedback@netperf.org>.  If that
-is unsuccessful, you can add a `--enable-burst=no' to the configure
+is unsuccessful, you can add a '--enable-burst=no' to the configure
 command and the burst mode functionality will not be compiled-in.
 
    On some platforms, it may be necessary to precede the configure
 command with a CFLAGS and/or LIBS variable as the netperf configure
 script is not yet smart enough to set them itself.  Whenever possible,
-these requirements will be found in `README.PLATFORM' files.  Expertise
+these requirements will be found in 'README.PLATFORM' files.  Expertise
 and assistance in making that more automagic in the configure script
 would be most welcome.
 
    Other optional configure-time settings include
-`--enable-intervals=yes' to give netperf the ability to "pace" its
-_STREAM tests and `--enable-histogram=yes' to have netperf keep a
+'--enable-intervals=yes' to give netperf the ability to "pace" its
+_STREAM tests and '--enable-histogram=yes' to have netperf keep a
 histogram of interesting times.  Each of these will have some effect on
-the measured result.  If your system supports `gethrtime()' the effect
+the measured result.  If your system supports 'gethrtime()' the effect
 of the histogram measurement should be minimized but probably still
-measurable.  For example, the histogram of a netperf TCP_RR test will
-be of the individual transaction times:
+measurable.  For example, the histogram of a netperf TCP_RR test will be
+of the individual transaction times:
      netperf -t TCP_RR -H lag -v 2
      TCP REQUEST/RESPONSE TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to lag.hpl.hp.com (15.4.89.214) port 0 AF_INET : histogram
      Local /Remote
@@ -357,14 +377,14 @@ be of the individual transaction times:
      HIST_TOTAL:      35391
 
    The histogram you see above is basically a base-10 log histogram
-where we can see that most of the transaction times were on the order
-of one hundred to one-hundred, ninety-nine microseconds, but they were
+where we can see that most of the transaction times were on the order of
+one hundred to one-hundred, ninety-nine microseconds, but they were
 occasionally as long as ten to nineteen milliseconds
 
-   The `--enable-demo=yes' configure option will cause code to be
-included to report interim results during a test run.  The rate at
-which interim results are reported can then be controlled via the
-global `-D' option.  Here is an example of `-D' output:
+   The '--enable-demo=yes' configure option will cause code to be
+included to report interim results during a test run.  The rate at which
+interim results are reported can then be controlled via the global '-D'
+option.  Here is an example of '-D' output:
 
      $ src/netperf -D 1.35 -H tardy.hpl.hp.com -f M
      MIGRATED TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to tardy.hpl.hp.com (15.9.116.144) port 0 AF_INET : demo
@@ -383,28 +403,27 @@ global `-D' option.  Here is an example of `-D' output:
       87380  16384  16384    10.06      17.81
 
    Notice how the units of the interim result track that requested by
-the `-f' option.  Also notice that sometimes the interval will be
-longer than the value specified in the `-D' option.  This is normal and
-stems from how demo mode is implemented not by relying on interval
-timers or frequent calls to get the current time, but by calculating
-how many units of work must be performed to take at least the desired
-interval.
+the '-f' option.  Also notice that sometimes the interval will be longer
+than the value specified in the '-D' option.  This is normal and stems
+from how demo mode is implemented not by relying on interval timers or
+frequent calls to get the current time, but by calculating how many
+units of work must be performed to take at least the desired interval.
 
    Those familiar with this option in earlier versions of netperf will
-note the addition of the "ending at" text.  This is the time as
-reported by a `gettimeofday()' call (or its emulation) with a `NULL'
-timezone pointer.  This addition is intended to make it easier to
-insert interim results into an rrdtool
-(http://oss.oetiker.ch/rrdtool/doc/rrdtool.en.html) Round-Robin
-Database (RRD).  A likely bug-riddled example of doing so can be found
-in `doc/examples/netperf_interim_to_rrd.sh'.  The time is reported out
-to milliseconds rather than microseconds because that is the most
-rrdtool understands as of the time of this writing.
-
-   As of this writing, a `make install' will not actually update the
-files `/etc/services' and/or `/etc/inetd.conf' or their
-platform-specific equivalents.  It remains necessary to perform that
-bit of installation magic by hand.  Patches to the makefile sources to
+note the addition of the "ending at" text.  This is the time as reported
+by a 'gettimeofday()' call (or its emulation) with a 'NULL' timezone
+pointer.  This addition is intended to make it easier to insert interim
+results into an rrdtool
+(http://oss.oetiker.ch/rrdtool/doc/rrdtool.en.html) Round-Robin Database
+(RRD). A likely bug-riddled example of doing so can be found in
+'doc/examples/netperf_interim_to_rrd.sh'.  The time is reported out to
+milliseconds rather than microseconds because that is the most rrdtool
+understands as of the time of this writing.
+
+   As of this writing, a 'make install' will not actually update the
+files '/etc/services' and/or '/etc/inetd.conf' or their
+platform-specific equivalents.  It remains necessary to perform that bit
+of installation magic by hand.  Patches to the makefile sources to
 effect an automagic editing of the necessary files to have netperf
 installed as a child of inetd would be most welcome.
 
@@ -419,8 +438,8 @@ screen may change but the gist will remain the same.
    If the compilation of netperf or netserver happens to fail, feel free
 to contact <netperf-feedback@netperf.org> or join and ask in
 <netperf-talk@netperf.org>.  However, it is quite important that you
-include the actual compilation errors and perhaps even the configure
-log in your email.  Otherwise, it will be that much more difficult for
+include the actual compilation errors and perhaps even the configure log
+in your email.  Otherwise, it will be that much more difficult for
 someone to assist you.
 
 
@@ -457,23 +476,23 @@ standalone daemon.
    When you execute netperf it will establish a "control connection" to
 the remote system.  This connection will be used to pass test
 configuration information and results to and from the remote system.
-Regardless of the type of test to be run, the control connection will
-be a TCP connection using BSD sockets.  The control connection can use
+Regardless of the type of test to be run, the control connection will be
+a TCP connection using BSD sockets.  The control connection can use
 either IPv4 or IPv6.
 
    Once the control connection is up and the configuration information
 has been passed, a separate "data" connection will be opened for the
 measurement itself using the API's and protocols appropriate for the
-specified test.  When the test is completed, the data connection will
-be torn-down and results from the netserver will be passed-back via the
-control connection and combined with netperf's result for display to
-the user.
+specified test.  When the test is completed, the data connection will be
+torn-down and results from the netserver will be passed-back via the
+control connection and combined with netperf's result for display to the
+user.
 
    Netperf places no traffic on the control connection while a test is
 in progress.  Certain TCP options, such as SO_KEEPALIVE, if set as your
 systems' default, may put packets out on the control connection while a
-test is in progress.  Generally speaking this will have no effect on
-the results.
+test is in progress.  Generally speaking this will have no effect on the
+results.
 
 * Menu:
 
@@ -506,82 +525,76 @@ effect of a performance change.  It is essentially a measure of
 efficiency, with smaller values being more efficient and thus "better."
 
    Netperf is coded to be able to use one of several, generally
-platform-specific CPU utilization measurement mechanisms.  Single
-letter codes will be included in the CPU portion of the test banner to
-indicate which mechanism was used on each of the local (netperf) and
-remote (netserver) system.
+platform-specific CPU utilization measurement mechanisms.  Single letter
+codes will be included in the CPU portion of the test banner to indicate
+which mechanism was used on each of the local (netperf) and remote
+(netserver) system.
 
    As of this writing those codes are:
 
-`U'
+'U'
      The CPU utilization measurement mechanism was unknown to netperf or
      netperf/netserver was not compiled to include CPU utilization
-     measurements. The code for the null CPU utilization mechanism can
-     be found in `src/netcpu_none.c'.
-
-`I'
+     measurements.  The code for the null CPU utilization mechanism can
+     be found in 'src/netcpu_none.c'.
+'I'
      An HP-UX-specific CPU utilization mechanism whereby the kernel
      incremented a per-CPU counter by one for each trip through the idle
-     loop. This mechanism was only available on specially-compiled HP-UX
-     kernels prior to HP-UX 10 and is mentioned here only for the sake
-     of historical completeness and perhaps as a suggestion to those
-     who might be altering other operating systems. While rather
+     loop.  This mechanism was only available on specially-compiled
+     HP-UX kernels prior to HP-UX 10 and is mentioned here only for the
+     sake of historical completeness and perhaps as a suggestion to
+     those who might be altering other operating systems.  While rather
      simple, perhaps even simplistic, this mechanism was quite robust
      and was not affected by the concerns of statistical methods, or
-     methods attempting to track time in each of user, kernel,
-     interrupt and idle modes which require quite careful accounting.
-     It can be thought-of as the in-kernel version of the looper `L'
-     mechanism without the context switch overhead. This mechanism
-     required calibration.
-
-`P'
+     methods attempting to track time in each of user, kernel, interrupt
+     and idle modes which require quite careful accounting.  It can be
+     thought-of as the in-kernel version of the looper 'L' mechanism
+     without the context switch overhead.  This mechanism required
+     calibration.
+'P'
      An HP-UX-specific CPU utilization mechanism whereby the kernel
      keeps-track of time (in the form of CPU cycles) spent in the kernel
      idle loop (HP-UX 10.0 to 11.31 inclusive), or where the kernel
      keeps track of time spent in idle, user, kernel and interrupt
      processing (HP-UX 11.23 and later).  The former requires
      calibration, the latter does not.  Values in either case are
-     retrieved via one of the pstat(2) family of calls, hence the use
-     of the letter `P'.  The code for these mechanisms is found in
-     `src/netcpu_pstat.c' and `src/netcpu_pstatnew.c' respectively.
-
-`K'
+     retrieved via one of the pstat(2) family of calls, hence the use of
+     the letter 'P'.  The code for these mechanisms is found in
+     'src/netcpu_pstat.c' and 'src/netcpu_pstatnew.c' respectively.
+'K'
      A Solaris-specific CPU utilization mechanism whereby the kernel
      keeps track of ticks (eg HZ) spent in the idle loop.  This method
      is statistical and is known to be inaccurate when the interrupt
      rate is above epsilon as time spent processing interrupts is not
      subtracted from idle.  The value is retrieved via a kstat() call -
-     hence the use of the letter `K'.  Since this mechanism uses units
-     of ticks (HZ) the calibration value should invariably match HZ.
-     (Eg 100) The code for this mechanism is implemented in
-     `src/netcpu_kstat.c'.
-
-`M'
+     hence the use of the letter 'K'.  Since this mechanism uses units
+     of ticks (HZ) the calibration value should invariably match HZ. (Eg
+     100) The code for this mechanism is implemented in
+     'src/netcpu_kstat.c'.
+'M'
      A Solaris-specific mechanism available on Solaris 10 and latter
      which uses the new microstate accounting mechanisms.  There are
      two, alas, overlapping, mechanisms.  The first tracks nanoseconds
-     spent in user, kernel, and idle modes. The second mechanism tracks
+     spent in user, kernel, and idle modes.  The second mechanism tracks
      nanoseconds spent in interrupt.  Since the mechanisms overlap,
      netperf goes through some hand-waving to try to "fix" the problem.
      Since the accuracy of the handwaving cannot be completely
-     determined, one must presume that while better than the `K'
+     determined, one must presume that while better than the 'K'
      mechanism, this mechanism too is not without issues.  The values
-     are retrieved via kstat() calls, but the letter code is set to `M'
-     to distinguish this mechanism from the even less accurate `K'
+     are retrieved via kstat() calls, but the letter code is set to 'M'
+     to distinguish this mechanism from the even less accurate 'K'
      mechanism.  The code for this mechanism is implemented in
-     `src/netcpu_kstat10.c'.
-
-`L'
+     'src/netcpu_kstat10.c'.
+'L'
      A mechanism based on "looper"or "soaker" processes which sit in
-     tight loops counting as fast as they possibly can. This mechanism
+     tight loops counting as fast as they possibly can.  This mechanism
      starts a looper process for each known CPU on the system.  The
      effect of processor hyperthreading on the mechanism is not yet
      known.  This mechanism definitely requires calibration.  The code
-     for the "looper"mechanism can be found in `src/netcpu_looper.c'
-
-`N'
+     for the "looper"mechanism can be found in 'src/netcpu_looper.c'
+'N'
      A Microsoft Windows-specific mechanism, the code for which can be
-     found in `src/netcpu_ntperf.c'.  This mechanism too is based on
+     found in 'src/netcpu_ntperf.c'.  This mechanism too is based on
      what appears to be a form of micro-state accounting and requires no
      calibration.  On laptops, or other systems which may dynamically
      alter the CPU frequency to minimize power consumption, it has been
@@ -589,18 +602,16 @@ remote (netserver) system.
      which case using BIOS/uEFI settings to disable the power saving
      would be indicated.
 
-`S'
-     This mechanism uses `/proc/stat' on Linux to retrieve time (ticks)
+'S'
+     This mechanism uses '/proc/stat' on Linux to retrieve time (ticks)
      spent in idle mode.  It is thought but not known to be reasonably
      accurate.  The code for this mechanism can be found in
-     `src/netcpu_procstat.c'.
-
-`C'
-     A mechanism somewhat similar to `S' but using the sysctl() call on
-     BSD-like Operating systems (*BSD and MacOS X).  The code for this
-     mechanism can be found in `src/netcpu_sysctl.c'.
-
-`Others'
+     'src/netcpu_procstat.c'.
+'C'
+     A mechanism somewhat similar to 'S' but using the sysctl() call on
+     BSD-like Operating systems (*BSD and MacOS X). The code for this
+     mechanism can be found in 'src/netcpu_sysctl.c'.
+'Others'
      Other mechanisms included in netperf in the past have included
      using the times() and getrusage() calls.  These calls are actually
      rather poorly suited to the task of measuring CPU overhead for
@@ -617,23 +628,23 @@ available CPU utilization mechanism.  However, some platforms have no
 particularly good mechanisms.  On those platforms, it is probably best
 to use the "LOOPER" mechanism which is basically some number of
 processes (as many as there are processors) sitting in tight little
-loops counting as fast as they can.  The rate at which the loopers
-count when the system is believed to be idle is compared with the rate
-when the system is running netperf and the ratio is used to compute CPU
+loops counting as fast as they can.  The rate at which the loopers count
+when the system is believed to be idle is compared with the rate when
+the system is running netperf and the ratio is used to compute CPU
 utilization.
 
    In the past, netperf included some mechanisms that only reported CPU
-time charged to the calling process.  Those mechanisms have been
-removed from netperf versions 2.4.0 and later because they are
-hopelessly inaccurate.  Networking can and often results in CPU time
-being spent in places - such as interrupt contexts - that do not get
-charged to a or the correct process.
+time charged to the calling process.  Those mechanisms have been removed
+from netperf versions 2.4.0 and later because they are hopelessly
+inaccurate.  Networking can and often results in CPU time being spent in
+places - such as interrupt contexts - that do not get charged to a or
+the correct process.
 
    In fact, time spent in the processing of interrupts is a common issue
 for many CPU utilization mechanisms.  In particular, the "PSTAT"
 mechanism was eventually known to have problems accounting for certain
 interrupt time prior to HP-UX 11.11 (11iv1).  HP-UX 11iv2 and later are
-known/presumed to be good. The "KSTAT" mechanism is known to have
+known/presumed to be good.  The "KSTAT" mechanism is known to have
 problems on all versions of Solaris up to and including Solaris 10.
 Even the microstate accounting available via kstat in Solaris 10 has
 issues, though perhaps not as bad as those of prior versions.
@@ -656,10 +667,10 @@ File: netperf.info,  Node: CPU Utilization in a Virtual Guest,  Prev: CPU Utiliz
 3.1.1 CPU Utilization in a Virtual Guest
 ----------------------------------------
 
-The CPU utilization mechanisms used by netperf are "inline" in that
-they are run by the same netperf or netserver process as is running the
-test itself.  This works just fine for "bare iron" tests but runs into
-a problem when using virtual machines.
+The CPU utilization mechanisms used by netperf are "inline" in that they
+are run by the same netperf or netserver process as is running the test
+itself.  This works just fine for "bare iron" tests but runs into a
+problem when using virtual machines.
 
    The relationship between virtual guest and hypervisor can be thought
 of as being similar to that between a process and kernel in a bare iron
@@ -667,10 +678,10 @@ system.  As such, (m)any CPU utilization mechanisms used in the virtual
 guest are similar to "process-local" mechanisms in a bare iron
 situation.  However, just as with bare iron and process-local
 mechanisms, much networking processing happens outside the context of
-the virtual guest.  It takes place in the hypervisor, and is not
-visible to mechanisms running in the guest(s).  For this reason, one
-should not really trust CPU utilization figures reported by netperf or
-netserver when running in a virtual guest.
+the virtual guest.  It takes place in the hypervisor, and is not visible
+to mechanisms running in the guest(s).  For this reason, one should not
+really trust CPU utilization figures reported by netperf or netserver
+when running in a virtual guest.
 
    If one is looking to measure the added overhead of a virtualization
 mechanism, rather than rely on CPU utilization, one can rely instead on
@@ -686,10 +697,10 @@ File: netperf.info,  Node: Global Command-line Options,  Next: Using Netperf to
 4 Global Command-line Options
 *****************************
 
-This section describes each of the global command-line options
-available in the netperf and netserver binaries.  Essentially, it is an
-expanded version of the usage information displayed by netperf or
-netserver when invoked with the `-h' global command-line option.
+This section describes each of the global command-line options available
+in the netperf and netserver binaries.  Essentially, it is an expanded
+version of the usage information displayed by netperf or netserver when
+invoked with the '-h' global command-line option.
 
 * Menu:
 
@@ -705,19 +716,19 @@ File: netperf.info,  Node: Command-line Options Syntax,  Next: Global Options,
 Revision 1.8 of netperf introduced enough new functionality to overrun
 the English alphabet for mnemonic command-line option names, and the
 author was not and is not quite ready to switch to the contemporary
-`--mumble' style of command-line options. (Call him a Luddite if you
+'--mumble' style of command-line options.  (Call him a Luddite if you
 wish :).
 
    For this reason, the command-line options were split into two parts -
 the first are the global command-line options.  They are options that
 affect nearly any and every test type of netperf.  The second type are
 the test-specific command-line options.  Both are entered on the same
-command line, but they must be separated from one another by a `--' for
+command line, but they must be separated from one another by a '--' for
 correct parsing.  Global command-line options come first, followed by
-the `--' and then test-specific command-line options.  If there are no
-test-specific options to be set, the `--' may be omitted.  If there are
+the '--' and then test-specific command-line options.  If there are no
+test-specific options to be set, the '--' may be omitted.  If there are
 no global command-line options to be set, test-specific options must
-still be preceded by a `--'.  For example:
+still be preceded by a '--'.  For example:
      netperf <global> -- <test-specific>
    sets both global and test-specific options:
      netperf <global>
@@ -731,96 +742,96 @@ File: netperf.info,  Node: Global Options,  Prev: Command-line Options Syntax,
 4.2 Global Options
 ==================
 
-`-a <sizespec>'
+'-a <sizespec>'
      This option allows you to alter the alignment of the buffers used
-     in the sending and receiving calls on the local system.. Changing
+     in the sending and receiving calls on the local system..  Changing
      the alignment of the buffers can force the system to use different
      copy schemes, which can have a measurable effect on performance.
      If the page size for the system were 4096 bytes, and you want to
      pass page-aligned buffers beginning on page boundaries, you could
-     use `-a 4096'.  By default the units are bytes, but suffix of "G,"
+     use '-a 4096'.  By default the units are bytes, but suffix of "G,"
      "M," or "K" will specify the units to be 2^30 (GB), 2^20 (MB) or
-     2^10 (KB) respectively. A suffix of "g," "m" or "k" will specify
-     units of 10^9, 10^6 or 10^3 bytes respectively. [Default: 8 bytes]
+     2^10 (KB) respectively.  A suffix of "g," "m" or "k" will specify
+     units of 10^9, 10^6 or 10^3 bytes respectively.  [Default: 8 bytes]
 
-`-A <sizespec>'
-     This option is identical to the `-a' option with the difference
+'-A <sizespec>'
+     This option is identical to the '-a' option with the difference
      being it affects alignments for the remote system.
 
-`-b <size>'
+'-b <size>'
      This option is only present when netperf has been configure with
      -enable-intervals=yes prior to compilation.  It sets the size of
      the burst of send calls in a _STREAM test.  When used in
-     conjunction with the `-w' option it can cause the rate at which
+     conjunction with the '-w' option it can cause the rate at which
      data is sent to be "paced."
 
-`-B <string>'
-     This option will cause `<string>' to be appended to the brief (see
+'-B <string>'
+     This option will cause '<string>' to be appended to the brief (see
      -P) output of netperf.
 
-`-c [rate]'
+'-c [rate]'
      This option will ask that CPU utilization and service demand be
      calculated for the local system.  For those CPU utilization
-     mechanisms requiring calibration, the options rate parameter may
-     be specified to preclude running another calibration step, saving
-     40 seconds of time.  For those CPU utilization mechanisms
-     requiring no calibration, the optional rate parameter will be
-     utterly and completely ignored.  [Default: no CPU measurements]
+     mechanisms requiring calibration, the options rate parameter may be
+     specified to preclude running another calibration step, saving 40
+     seconds of time.  For those CPU utilization mechanisms requiring no
+     calibration, the optional rate parameter will be utterly and
+     completely ignored.  [Default: no CPU measurements]
 
-`-C [rate]'
+'-C [rate]'
      This option requests CPU utilization and service demand
      calculations for the remote system.  It is otherwise identical to
-     the `-c' option.
+     the '-c' option.
 
-`-d'
+'-d'
      Each instance of this option will increase the quantity of
      debugging output displayed during a test.  If the debugging output
      level is set high enough, it may have a measurable effect on
-     performance.  Debugging information for the local system is
-     printed to stdout.  Debugging information for the remote system is
-     sent by default to the file `/tmp/netperf.debug'. [Default: no
-     debugging output]
+     performance.  Debugging information for the local system is printed
+     to stdout.  Debugging information for the remote system is sent by
+     default to the file '/tmp/netperf.debug'.  [Default: no debugging
+     output]
 
-`-D [interval,units]'
+'-D [interval,units]'
      This option is only available when netperf is configured with
      -enable-demo=yes.  When set, it will cause netperf to emit periodic
-     reports of performance during the run.  [INTERVAL,UNITS] follow
-     the semantics of an optionspec. If specified, INTERVAL gives the
+     reports of performance during the run.  [INTERVAL,UNITS] follow the
+     semantics of an optionspec.  If specified, INTERVAL gives the
      minimum interval in real seconds, it does not have to be whole
-     seconds.  The UNITS value can be used for the first guess as to
-     how many units of work (bytes or transactions) must be done to
-     take at least INTERVAL seconds. If omitted, INTERVAL defaults to
-     one second and UNITS to values specific to each test type.
+     seconds.  The UNITS value can be used for the first guess as to how
+     many units of work (bytes or transactions) must be done to take at
+     least INTERVAL seconds.  If omitted, INTERVAL defaults to one
+     second and UNITS to values specific to each test type.
 
-`-f G|M|K|g|m|k|x'
+'-f G|M|K|g|m|k|x'
      This option can be used to change the reporting units for _STREAM
      tests.  Arguments of "G," "M," or "K" will set the units to 2^30,
      2^20 or 2^10 bytes/s respectively (EG power of two GB, MB or KB).
      Arguments of "g," ",m" or "k" will set the units to 10^9, 10^6 or
-     10^3 bits/s respectively.  An argument of "x" requests the units
-     be transactions per second and is only meaningful for a
-     request-response test. [Default: "m" or 10^6 bits/s]
+     10^3 bits/s respectively.  An argument of "x" requests the units be
+     transactions per second and is only meaningful for a
+     request-response test.  [Default: "m" or 10^6 bits/s]
 
-`-F <fillfile>'
+'-F <fillfile>'
      This option specified the file from which send which buffers will
      be pre-filled .  While the buffers will contain data from the
      specified file, the file is not fully transferred to the remote
-     system as the receiving end of the test will not write the
-     contents of what it receives to a file.  This can be used to
-     pre-fill the send buffers with data having different
-     compressibility and so is useful when measuring performance over
-     mechanisms which perform compression.
+     system as the receiving end of the test will not write the contents
+     of what it receives to a file.  This can be used to pre-fill the
+     send buffers with data having different compressibility and so is
+     useful when measuring performance over mechanisms which perform
+     compression.
 
      While previously required for a TCP_SENDFILE test, later versions
      of netperf removed that restriction, creating a temporary file as
      needed.  While the author cannot recall exactly when that took
      place, it is known to be unnecessary in version 2.5.0 and later.
 
-`-h'
+'-h'
      This option causes netperf to display its "global" usage string and
      exit to the exclusion of all else.
 
-`-H <optionspec>'
+'-H <optionspec>'
      This option will set the name of the remote system and or the
      address family used for the control connection.  For example:
           -H linger,4
@@ -837,25 +848,24 @@ File: netperf.info,  Node: Global Options,  Prev: Command-line Options Syntax,
 
      A value of "inet" can be used in place of "4" to request IPv4 only
      addressing.  Similarly, a value of "inet6" can be used in place of
-     "6" to request IPv6 only addressing.  A value of "0" can be used
-     to request either IPv4 or IPv6 addressing as name resolution
-     dictates.
+     "6" to request IPv6 only addressing.  A value of "0" can be used to
+     request either IPv4 or IPv6 addressing as name resolution dictates.
 
-     By default, the options set with the global `-H' option are
+     By default, the options set with the global '-H' option are
      inherited by the test for its data connection, unless a
-     test-specific `-H' option is specified.
+     test-specific '-H' option is specified.
 
-     If a `-H' option follows either the `-4' or `-6' options, the
-     family setting specified with the -H option will override the `-4'
-     or `-6' options for the remote address family. If no address
-     family is specified, settings from a previous `-4' or `-6' option
+     If a '-H' option follows either the '-4' or '-6' options, the
+     family setting specified with the -H option will override the '-4'
+     or '-6' options for the remote address family.  If no address
+     family is specified, settings from a previous '-4' or '-6' option
      will remain.  In a nutshell, the last explicit global command-line
      option wins.
 
-     [Default:  "localhost" for the remote name/IP address and "0" (eg
+     [Default: "localhost" for the remote name/IP address and "0" (eg
      AF_UNSPEC) for the remote address family.]
 
-`-I <optionspec>'
+'-I <optionspec>'
      This option enables the calculation of confidence intervals and
      sets the confidence and width parameters with the first half of the
      optionspec being either 99 or 95 for 99% or 95% confidence
@@ -864,13 +874,13 @@ File: netperf.info,  Node: Global Options,  Prev: Command-line Options Syntax,
           -I 99,5
      asks netperf to be 99% confident that the measured mean values for
      throughput and CPU utilization are within +/- 2.5% of the "real"
-     mean values.  If the `-i' option is specified and the `-I' option
+     mean values.  If the '-i' option is specified and the '-I' option
      is omitted, the confidence defaults to 99% and the width to 5%
      (giving +/- 2.5%)
 
      If classic netperf test calculates that the desired confidence
      intervals have not been met, it emits a noticeable warning that
-     cannot be suppressed with the `-P' or `-v' options:
+     cannot be suppressed with the '-P' or '-v' options:
 
           netperf -H tardy.cup -i 3 -I 99,5
           TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to tardy.cup.hp.com (15.244.44.58) port 0 AF_INET : +/-2.5%  99% conf.
@@ -892,82 +902,76 @@ File: netperf.info,  Node: Global Options,  Prev: Command-line Options Syntax,
      In the example above we see that netperf did not meet the desired
      confidence intervals.  Instead of being 99% confident it was within
      +/- 2.5% of the real mean value of throughput it is only confident
-     it was within +/-3.4%.  In this example, increasing the `-i'
-     option (described below) and/or increasing the iteration length
-     with the `-l' option might resolve the situation.
+     it was within +/-3.4%.  In this example, increasing the '-i' option
+     (described below) and/or increasing the iteration length with the
+     '-l' option might resolve the situation.
 
      In an explicit "omni" test, failure to meet the confidence
-     intervals will not result in netperf emitting a warning.  To
-     verify the hitting, or not, of the confidence intervals one will
-     need to include them as part of an *note output selection: Omni
-     Output Selection. in the test-specific `-o', `-O' or `k' output
-     selection options.  The warning about not hitting the confidence
-     intervals will remain in a "migrated" classic netperf test.
-
-`-i <sizespec>'
+     intervals will not result in netperf emitting a warning.  To verify
+     the hitting, or not, of the confidence intervals one will need to
+     include them as part of an *note output selection: Omni Output
+     Selection. in the test-specific '-o', '-O' or 'k' output selection
+     options.  The warning about not hitting the confidence intervals
+     will remain in a "migrated" classic netperf test.
+
+'-i <sizespec>'
      This option enables the calculation of confidence intervals and
      sets the minimum and maximum number of iterations to run in
      attempting to achieve the desired confidence interval.  The first
-     value sets the maximum number of iterations to run, the second,
-     the minimum.  The maximum number of iterations is silently capped
-     at 30 and the minimum is silently floored at 3.  Netperf repeats
-     the measurement the minimum number of iterations and continues
-     until it reaches either the desired confidence interval, or the
-     maximum number of iterations, whichever comes first.  A classic or
-     migrated netperf test will not display the actual number of
-     iterations run. An *note omni test: The Omni Tests. will emit the
-     number of iterations run if the `CONFIDENCE_ITERATION' output
-     selector is included in the *note output selection: Omni Output
-     Selection.
-
-     If the `-I' option is specified and the `-i' option omitted the
+     value sets the maximum number of iterations to run, the second, the
+     minimum.  The maximum number of iterations is silently capped at 30
+     and the minimum is silently floored at 3.  Netperf repeats the
+     measurement the minimum number of iterations and continues until it
+     reaches either the desired confidence interval, or the maximum
+     number of iterations, whichever comes first.  A classic or migrated
+     netperf test will not display the actual number of iterations run.
+     An *note omni test: The Omni Tests. will emit the number of
+     iterations run if the 'CONFIDENCE_ITERATION' output selector is
+     included in the *note output selection: Omni Output Selection.
+
+     If the '-I' option is specified and the '-i' option omitted the
      maximum number of iterations is set to 10 and the minimum to three.
 
      Output of a warning upon not hitting the desired confidence
-     intervals follows the description provided for the `-I' option.
+     intervals follows the description provided for the '-I' option.
 
      The total test time will be somewhere between the minimum and
-     maximum number of iterations multiplied by the test length
-     supplied by the `-l' option.
+     maximum number of iterations multiplied by the test length supplied
+     by the '-l' option.
 
-`-j'
+'-j'
      This option instructs netperf to keep additional timing statistics
      when explicitly running an *note omni test: The Omni Tests.  These
-     can be output when the test-specific `-o', `-O' or `-k' *note
+     can be output when the test-specific '-o', '-O' or '-k' *note
      output selectors: Omni Output Selectors. include one or more of:
 
         * MIN_LATENCY
-
         * MAX_LATENCY
-
         * P50_LATENCY
-
         * P90_LATENCY
-
         * P99_LATENCY
-
+        * P999_LATENCY
+        * P9999_LATENCY
         * MEAN_LATENCY
-
         * STDDEV_LATENCY
 
      These statistics will be based on an expanded (100 buckets per row
-     rather than 10) histogram of times rather than a terribly long
-     list of individual times.  As such, there will be some slight
-     error thanks to the bucketing. However, the reduction in storage
-     and processing overheads is well worth it.  When running a
+     rather than 10) histogram of times rather than a terribly long list
+     of individual times.  As such, there will be some slight error
+     thanks to the bucketing.  However, the reduction in storage and
+     processing overheads is well worth it.  When running a
      request/response test, one might get some idea of the error by
-     comparing the *note `MEAN_LATENCY': Omni Output Selectors.
-     calculated from the histogram with the `RT_LATENCY' calculated
-     from the number of request/response transactions and the test run
-     time.
+     comparing the *note 'MEAN_LATENCY': Omni Output Selectors.
+     calculated from the histogram with the 'RT_LATENCY' calculated from
+     the number of request/response transactions and the test run time.
 
      In the case of a request/response test the latencies will be
      transaction latencies.  In the case of a receive-only test they
-     will be time spent in the receive call.  In the case of a
-     send-only test they will be time spent in the send call. The units
-     will be microseconds. Added in netperf 2.5.0.
+     will be time spent in the receive call.  In the case of a send-only
+     test they will be time spent in the send call.  The units will be
+     microseconds.  Added in netperf 2.5.0.
 
-`-l testlen'
+'-l testlen'
      This option controls the length of any one iteration of the
      requested test.  A positive value for TESTLEN will run each
      iteration of the test for at least TESTLEN seconds.  A negative
@@ -978,18 +982,18 @@ File: netperf.info,  Node: Global Options,  Prev: Command-line Options Syntax,
      may be relaxed in an *note omni: The Omni Tests. test.
 
      In some situations, individual iterations of a test may run for
-     longer for the number of seconds specified by the `-l' option.  In
+     longer for the number of seconds specified by the '-l' option.  In
      particular, this may occur for those tests where the socket buffer
      size(s) are significantly longer than the bandwidthXdelay product
      of the link(s) over which the data connection passes, or those
      tests where there may be non-trivial numbers of retransmissions.
 
-     If confidence intervals are enabled via either `-I' or `-i' the
+     If confidence intervals are enabled via either '-I' or '-i' the
      total length of the netperf test will be somewhere between the
      minimum and maximum iteration count multiplied by TESTLEN.
 
-`-L <optionspec>'
-     This option is identical to the `-H' option with the difference
+'-L <optionspec>'
+     This option is identical to the '-H' option with the difference
      being it sets the _local_ hostname/IP and/or address family
      information.  This option is generally unnecessary, but can be
      useful when you wish to make sure that the netperf control and data
@@ -1000,27 +1004,27 @@ File: netperf.info,  Node: Global Options,  Prev: Command-line Options Syntax,
      [Default: 0.0.0.0 (eg INADDR_ANY) for IPv4 and ::0 for IPv6 for the
      local name.  AF_UNSPEC for the local address family.]
 
-`-n numcpus'
+'-n numcpus'
      This option tells netperf how many CPUs it should ass-u-me are
      active on the system running netperf.  In particular, this is used
      for the *note CPU utilization: CPU Utilization. and service demand
-     calculations.  On certain systems, netperf is able to determine
-     the number of CPU's automagically. This option will override any
+     calculations.  On certain systems, netperf is able to determine the
+     number of CPU's automagically.  This option will override any
      number netperf might be able to determine on its own.
 
      Note that this option does _not_ set the number of CPUs on the
      system running netserver.  When netperf/netserver cannot
-     automagically determine the number of CPUs that can only be set
-     for netserver via a netserver `-n' command-line option.
+     automagically determine the number of CPUs that can only be set for
+     netserver via a netserver '-n' command-line option.
 
      As it is almost universally possible for netperf/netserver to
      determine the number of CPUs on the system automagically, 99 times
-     out of 10 this option should not be necessary and may be removed
-     in a future release of netperf.
+     out of 10 this option should not be necessary and may be removed in
+     a future release of netperf.
 
-`-N'
+'-N'
      This option tells netperf to forgo establishing a control
-     connection. This makes it is possible to run some limited netperf
+     connection.  This makes it is possible to run some limited netperf
      tests without a corresponding netserver on the remote system.
 
      With this option set, the test to be run is to get all the
@@ -1037,38 +1041,38 @@ File: netperf.info,  Node: Global Options,  Prev: Command-line Options Syntax,
      incorrect, inflated transaction rate if the response size was less
      than the request size.
 
-     Since there is no control connection when this option is
-     specified, it is not possible to set "remote" properties such as
-     socket buffer size and the like via the netperf command line. Nor
-     is it possible to retrieve such interesting remote information as
-     CPU utilization.  These items will be displayed as values which
-     should make it immediately obvious that was the case.
+     Since there is no control connection when this option is specified,
+     it is not possible to set "remote" properties such as socket buffer
+     size and the like via the netperf command line.  Nor is it possible
+     to retrieve such interesting remote information as CPU utilization.
+     These items will be displayed as values which should make it
+     immediately obvious that was the case.
 
      The only way to change remote characteristics such as socket buffer
      size or to obtain information such as CPU utilization is to employ
      platform-specific methods on the remote system.  Frankly, if one
      has access to the remote system to employ those methods one aught
-     to be able to run a netserver there.  However, that ability may
-     not be present in certain "support" situations, hence the addition
-     of this option.
+     to be able to run a netserver there.  However, that ability may not
+     be present in certain "support" situations, hence the addition of
+     this option.
 
      Added in netperf 2.4.3.
 
-`-o <sizespec>'
+'-o <sizespec>'
      The value(s) passed-in with this option will be used as an offset
-     added to the alignment specified with the `-a' option.  For
+     added to the alignment specified with the '-a' option.  For
      example:
           -o 3 -a 4096
      will cause the buffers passed to the local (netperf) send and
      receive calls to begin three bytes past an address aligned to 4096
-     bytes. [Default: 0 bytes]
+     bytes.  [Default: 0 bytes]
 
-`-O <sizespec>'
-     This option behaves just as the `-o' option but on the remote
-     (netserver) system and in conjunction with the `-A' option.
+'-O <sizespec>'
+     This option behaves just as the '-o' option but on the remote
+     (netserver) system and in conjunction with the '-A' option.
      [Default: 0 bytes]
 
-`-p <optionspec>'
+'-p <optionspec>'
      The first value of the optionspec passed-in with this option tells
      netperf the port number at which it should expect the remote
      netserver to be listening for control connections.  The second
@@ -1088,67 +1092,60 @@ File: netperf.info,  Node: Global Options,  Prev: Command-line Options Syntax,
      one is looking to run netperf through those evil, end-to-end
      breaking things known as firewalls.
 
-`-P 0|1'
-     A value of "1" for the `-P' option will enable display of the test
+'-P 0|1'
+     A value of "1" for the '-P' option will enable display of the test
      banner.  A value of "0" will disable display of the test banner.
      One might want to disable display of the test banner when running
      the same basic test type (eg TCP_STREAM) multiple times in
      succession where the test banners would then simply be redundant
-     and unnecessarily clutter the output. [Default: 1 - display test
+     and unnecessarily clutter the output.  [Default: 1 - display test
      banners]
 
-`-s <seconds>'
-     This option will cause netperf to sleep `<seconds>' before
-     actually transferring data over the data connection.  This may be
-     useful in situations where one wishes to start a great many netperf
-     instances and do not want the earlier ones affecting the ability of
-     the later ones to get established.
+'-s <seconds>'
+     This option will cause netperf to sleep '<seconds>' before actually
+     transferring data over the data connection.  This may be useful in
+     situations where one wishes to start a great many netperf instances
+     and do not want the earlier ones affecting the ability of the later
+     ones to get established.
 
      Added somewhere between versions 2.4.3 and 2.5.0.
 
-`-S'
+'-S'
      This option will cause an attempt to be made to set SO_KEEPALIVE on
      the data socket of a test using the BSD sockets interface.  The
      attempt will be made on the netperf side of all tests, and will be
      made on the netserver side of an *note omni: The Omni Tests. or
      *note migrated: Migrated Tests. test.  No indication of failure is
-     given unless debug output is enabled with the global `-d' option.
+     given unless debug output is enabled with the global '-d' option.
 
      Added in version 2.5.0.
 
-`-t testname'
-     This option is used to tell netperf which test you wish to run.
-     As of this writing, valid values for TESTNAME include:
+'-t testname'
+     This option is used to tell netperf which test you wish to run.  As
+     of this writing, valid values for TESTNAME include:
         * *note TCP_STREAM::, *note TCP_MAERTS::, *note TCP_SENDFILE::,
           *note TCP_RR::, *note TCP_CRR::, *note TCP_CC::
-
         * *note UDP_STREAM::, *note UDP_RR::
-
-        * *note XTI_TCP_STREAM::,  *note XTI_TCP_RR::, *note
+        * *note XTI_TCP_STREAM::, *note XTI_TCP_RR::, *note
           XTI_TCP_CRR::, *note XTI_TCP_CC::
-
         * *note XTI_UDP_STREAM::, *note XTI_UDP_RR::
-
         * *note SCTP_STREAM::, *note SCTP_RR::
-
-        * *note DLCO_STREAM::, *note DLCO_RR::,  *note DLCL_STREAM::,
+        * *note DLCO_STREAM::, *note DLCO_RR::, *note DLCL_STREAM::,
           *note DLCL_RR::
-
         * *note LOC_CPU: Other Netperf Tests, *note REM_CPU: Other
           Netperf Tests.
-
         * *note OMNI: The Omni Tests.
      Not all tests are always compiled into netperf.  In particular, the
      "XTI," "SCTP," "UNIXDOMAIN," and "DL*" tests are only included in
      netperf when configured with
-     `--enable-[xti|sctp|unixdomain|dlpi]=yes'.
+     '--enable-[xti|sctp|unixdomain|dlpi]=yes'.
 
-     Netperf only runs one type of test no matter how many `-t' options
-     may be present on the command-line.  The last `-t' global
-     command-line option will determine the test to be run. [Default:
+     Netperf only runs one type of test no matter how many '-t' options
+     may be present on the command-line.  The last '-t' global
+     command-line option will determine the test to be run.  [Default:
      TCP_STREAM]
 
-`-T <optionspec>'
+'-T <optionspec>'
      This option controls the CPU, and probably by extension memory,
      affinity of netperf and/or netserver.
           netperf -T 1
@@ -1165,27 +1162,27 @@ File: netperf.info,  Node: Global Options,  Prev: Command-line Options Syntax,
      issues involving where processes run relative to where NIC
      interrupts are processed or where NICs allocate their DMA buffers.
 
-`-v verbosity'
-     This option controls how verbose netperf will be in its output,
-     and is often used in conjunction with the `-P' option. If the
+'-v verbosity'
+     This option controls how verbose netperf will be in its output, and
+     is often used in conjunction with the '-P' option.  If the
      verbosity is set to a value of "0" then only the test's SFM (Single
-     Figure of Merit) is displayed.  If local *note CPU utilization:
-     CPU Utilization. is requested via the `-c' option then the SFM is
-     the local service demand.  Othersise, if remote CPU utilization is
-     requested via the `-C' option then the SFM is the remote service
+     Figure of Merit) is displayed.  If local *note CPU utilization: CPU
+     Utilization. is requested via the '-c' option then the SFM is the
+     local service demand.  Othersise, if remote CPU utilization is
+     requested via the '-C' option then the SFM is the remote service
      demand.  If neither local nor remote CPU utilization are requested
      the SFM will be the measured throughput or transaction rate as
-     implied by the test specified with the `-t' option.
+     implied by the test specified with the '-t' option.
 
      If the verbosity level is set to "1" then the "normal" netperf
      result output for each test is displayed.
 
      If the verbosity level is set to "2" then "extra" information will
      be displayed.  This may include, but is not limited to the number
-     of send or recv calls made and the average number of bytes per
-     send or recv call, or a histogram of the time spent in each send()
-     call or for each transaction if netperf was configured with
-     `--enable-histogram=yes'. [Default: 1 - normal verbosity]
+     of send or recv calls made and the average number of bytes per send
+     or recv call, or a histogram of the time spent in each send() call
+     or for each transaction if netperf was configured with
+     '--enable-histogram=yes'.  [Default: 1 - normal verbosity]
 
      In an *note omni: The Omni Tests. test the verbosity setting is
      largely ignored, save for when asking for the time histogram to be
@@ -1193,44 +1190,43 @@ File: netperf.info,  Node: Global Options,  Prev: Command-line Options Syntax,
      selector: Omni Output Selectors. for the histogram and so it
      remains displayed only when the verbosity level is set to 2.
 
-`-V'
+'-V'
      This option displays the netperf version and then exits.
 
      Added in netperf 2.4.4.
 
-`-w time'
-     If netperf was configured with `--enable-intervals=yes' then this
+'-w time'
+     If netperf was configured with '--enable-intervals=yes' then this
      value will set the inter-burst time to time milliseconds, and the
-     `-b' option will set the number of sends per burst.  The actual
+     '-b' option will set the number of sends per burst.  The actual
      inter-burst time may vary depending on the system's timer
      resolution.
 
-`-W <sizespec>'
+'-W <sizespec>'
      This option controls the number of buffers in the send (first or
      only value) and or receive (second or only value) buffer rings.
      Unlike some benchmarks, netperf does not continuously send or
      receive from a single buffer.  Instead it rotates through a ring of
-     buffers. [Default: One more than the size of the send or receive
-     socket buffer sizes (`-s' and/or `-S' options) divided by the send
-     `-m' or receive `-M' buffer size respectively]
+     buffers.  [Default: One more than the size of the send or receive
+     socket buffer sizes ('-s' and/or '-S' options) divided by the send
+     '-m' or receive '-M' buffer size respectively]
 
-`-4'
+'-4'
      Specifying this option will set both the local and remote address
      families to AF_INET - that is use only IPv4 addresses on the
-     control connection.  This can be overridden by a subsequent `-6',
-     `-H' or `-L' option.  Basically, the last option explicitly
+     control connection.  This can be overridden by a subsequent '-6',
+     '-H' or '-L' option.  Basically, the last option explicitly
      specifying an address family wins.  Unless overridden by a
      test-specific option, this will be inherited for the data
      connection as well.
 
-`-6'
+'-6'
      Specifying this option will set both local and and remote address
      families to AF_INET6 - that is use only IPv6 addresses on the
-     control connection.  This can be overridden by a subsequent `-4',
-     `-H' or `-L' option.  Basically, the last address family
-     explicitly specified wins.  Unless overridden by a test-specific
-     option, this will be inherited for the data connection as well.
-
+     control connection.  This can be overridden by a subsequent '-4',
+     '-H' or '-L' option.  Basically, the last address family explicitly
+     specified wins.  Unless overridden by a test-specific option, this
+     will be inherited for the data connection as well.
 
 
 File: netperf.info,  Node: Using Netperf to Measure Bulk Data Transfer,  Next: Using Netperf to Measure Request/Response,  Prev: Global Command-line Options,  Up: Top
@@ -1240,9 +1236,9 @@ File: netperf.info,  Node: Using Netperf to Measure Bulk Data Transfer,  Next: U
 
 The most commonly measured aspect of networked system performance is
 that of bulk or unidirectional transfer performance.  Everyone wants to
-know how many bits or bytes per second they can push across the
-network. The classic netperf convention for a bulk data transfer test
-name is to tack a "_STREAM" suffix to a test name.
+know how many bits or bytes per second they can push across the network.
+The classic netperf convention for a bulk data transfer test name is to
+tack a "_STREAM" suffix to a test name.
 
 * Menu:
 
@@ -1260,44 +1256,44 @@ bulk transfer test.
 
    Certainly, absent compression, bulk-transfer tests can be limited by
 the speed of the slowest link in the path from the source to the
-destination.  If testing over a gigabit link, you will not see more
-than a gigabit :) Such situations can be described as being
-"network-limited" or "NIC-limited".
+destination.  If testing over a gigabit link, you will not see more than
+a gigabit :) Such situations can be described as being "network-limited"
+or "NIC-limited".
 
    CPU utilization can also affect the results of a bulk-transfer test.
-If the networking stack requires a certain number of instructions or
-CPU cycles per KB of data transferred, and the CPU is limited in the
-number of instructions or cycles it can provide, then the transfer can
-be described as being "CPU-bound".
+If the networking stack requires a certain number of instructions or CPU
+cycles per KB of data transferred, and the CPU is limited in the number
+of instructions or cycles it can provide, then the transfer can be
+described as being "CPU-bound".
 
    A bulk-transfer test can be CPU bound even when netperf reports less
-than 100% CPU utilization.  This can happen on an MP system where one
-or more of the CPUs saturate at 100% but other CPU's remain idle.
-Typically, a single flow of data, such as that from a single instance
-of a netperf _STREAM test cannot make use of much more than the power
-of one CPU. Exceptions to this generally occur when netperf and/or
-netserver run on CPU(s) other than the CPU(s) taking interrupts from
-the NIC(s). In that case, one might see as much as two CPUs' worth of
+than 100% CPU utilization.  This can happen on an MP system where one or
+more of the CPUs saturate at 100% but other CPU's remain idle.
+Typically, a single flow of data, such as that from a single instance of
+a netperf _STREAM test cannot make use of much more than the power of
+one CPU. Exceptions to this generally occur when netperf and/or
+netserver run on CPU(s) other than the CPU(s) taking interrupts from the
+NIC(s).  In that case, one might see as much as two CPUs' worth of
 processing being used to service the flow of data.
 
    Distance and the speed-of-light can affect performance for a
-bulk-transfer; often this can be mitigated by using larger windows.
-One common limit to the performance of a transport using window-based
+bulk-transfer; often this can be mitigated by using larger windows.  One
+common limit to the performance of a transport using window-based
 flow-control is:
      Throughput <= WindowSize/RoundTripTime
    As the sender can only have a window's-worth of data outstanding on
 the network at any one time, and the soonest the sender can receive a
-window update from the receiver is one RoundTripTime (RTT).  TCP and
-SCTP are examples of such protocols.
+window update from the receiver is one RoundTripTime (RTT). TCP and SCTP
+are examples of such protocols.
 
    Packet losses and their effects can be particularly bad for
 performance.  This is especially true if the packet losses result in
 retransmission timeouts for the protocol(s) involved.  By the time a
-retransmission timeout has happened, the flow or connection has sat
-idle for a considerable length of time.
+retransmission timeout has happened, the flow or connection has sat idle
+for a considerable length of time.
 
-   On many platforms, some variant on the `netstat' command can be used
-to retrieve statistics about packet loss and retransmission. For
+   On many platforms, some variant on the 'netstat' command can be used
+to retrieve statistics about packet loss and retransmission.  For
 example:
      netstat -p tcp
    will retrieve TCP statistics on the HP-UX Operating System.  On other
@@ -1314,25 +1310,24 @@ netperf was running.  In such situations something along the lines of:
      netstat -p tcp > after
    is indicated.  The beforeafter
 (ftp://ftp.cup.hp.com/dist/networking/tools/) utility can be used to
-subtract the statistics in `before' from the statistics in `after':
+subtract the statistics in 'before' from the statistics in 'after':
      beforeafter before after > delta
-   and then one can look at the statistics in `delta'.  Beforeafter is
+   and then one can look at the statistics in 'delta'.  Beforeafter is
 distributed in source form so one can compile it on the platform(s) of
 interest.
 
    If running a version 2.5.0 or later "omni" test under Linux one can
 include either or both of:
    * LOCAL_TRANSPORT_RETRANS
-
    * REMOTE_TRANSPORT_RETRANS
 
-   in the values provided via a test-specific `-o', `-O', or `-k'
-output selction option and netperf will report the retransmissions
-experienced on the data connection, as reported via a
-`getsockopt(TCP_INFO)' call.  If confidence intervals have been
-requested via the global `-I' or `-i' options, the reported value(s)
-will be for the last iteration.  If the test is over a protocol other
-than TCP, or on a platform other than Linux, the results are undefined.
+   in the values provided via a test-specific '-o', '-O', or '-k' output
+selction option and netperf will report the retransmissions experienced
+on the data connection, as reported via a 'getsockopt(TCP_INFO)' call.
+If confidence intervals have been requested via the global '-I' or '-i'
+options, the reported value(s) will be for the last iteration.  If the
+test is over a protocol other than TCP, or on a platform other than
+Linux, the results are undefined.
 
    While it was written with HP-UX's netstat in mind, the annotated
 netstat
@@ -1349,117 +1344,116 @@ Many "test-specific" options are actually common across the different
 tests.  For those tests involving TCP, UDP and SCTP, whether using the
 BSD Sockets or the XTI interface those common options include:
 
-`-h'
+'-h'
      Display the test-suite-specific usage string and exit.  For a TCP_
      or UDP_ test this will be the usage string from the source file
      nettest_bsd.c.  For an XTI_ test, this will be the usage string
-     from the source file nettest_xti.c.  For an SCTP test, this will
-     be the usage string from the source file nettest_sctp.c.
+     from the source file nettest_xti.c.  For an SCTP test, this will be
+     the usage string from the source file nettest_sctp.c.
 
-`-H <optionspec>'
+'-H <optionspec>'
      Normally, the remote hostname|IP and address family information is
      inherited from the settings for the control connection (eg global
-     command-line `-H', `-4' and/or `-6' options).  The test-specific
-     `-H' will override those settings for the data (aka test)
+     command-line '-H', '-4' and/or '-6' options).  The test-specific
+     '-H' will override those settings for the data (aka test)
      connection only.  Settings for the control connection are left
      unchanged.
 
-`-L <optionspec>'
-     The test-specific `-L' option is identical to the test-specific
-     `-H' option except it affects the local hostname|IP and address
+'-L <optionspec>'
+     The test-specific '-L' option is identical to the test-specific
+     '-H' option except it affects the local hostname|IP and address
      family information.  As with its global command-line counterpart,
      this is generally only useful when measuring though those evil,
      end-to-end breaking things called firewalls.
 
-`-m bytes'
+'-m bytes'
      Set the size of the buffer passed-in to the "send" calls of a
      _STREAM test.  Note that this may have only an indirect effect on
      the size of the packets sent over the network, and certain Layer 4
      protocols do _not_ preserve or enforce message boundaries, so
-     setting `-m' for the send size does not necessarily mean the
-     receiver will receive that many bytes at any one time. By default
+     setting '-m' for the send size does not necessarily mean the
+     receiver will receive that many bytes at any one time.  By default
      the units are bytes, but suffix of "G," "M," or "K" will specify
-     the units to be 2^30 (GB), 2^20 (MB) or 2^10 (KB) respectively. A
+     the units to be 2^30 (GB), 2^20 (MB) or 2^10 (KB) respectively.  A
      suffix of "g," "m" or "k" will specify units of 10^9, 10^6 or 10^3
-     bytes respectively. For example:
-          `-m 32K'
-     will set the size to 32KB or 32768 bytes. [Default: the local send
-     socket buffer size for the connection - either the system's
-     default or the value set via the `-s' option.]
+     bytes respectively.  For example:
+          -m 32K
+     will set the size to 32KB or 32768 bytes.  [Default: the local send
+     socket buffer size for the connection - either the system's default
+     or the value set via the '-s' option.]
 
-`-M bytes'
+'-M bytes'
      Set the size of the buffer passed-in to the "recv" calls of a
      _STREAM test.  This will be an upper bound on the number of bytes
-     received per receive call. By default the units are bytes, but
+     received per receive call.  By default the units are bytes, but
      suffix of "G," "M," or "K" will specify the units to be 2^30 (GB),
      2^20 (MB) or 2^10 (KB) respectively.  A suffix of "g," "m" or "k"
-     will specify units of 10^9, 10^6 or 10^3 bytes respectively. For
+     will specify units of 10^9, 10^6 or 10^3 bytes respectively.  For
      example:
-          `-M 32K'
-     will set the size to 32KB or 32768 bytes. [Default: the remote
+          -M 32K
+     will set the size to 32KB or 32768 bytes.  [Default: the remote
      receive socket buffer size for the data connection - either the
-     system's default or the value set via the `-S' option.]
+     system's default or the value set via the '-S' option.]
 
-`-P <optionspec>'
+'-P <optionspec>'
      Set the local and/or remote port numbers for the data connection.
 
-`-s <sizespec>'
+'-s <sizespec>'
      This option sets the local (netperf) send and receive socket buffer
      sizes for the data connection to the value(s) specified.  Often,
      this will affect the advertised and/or effective TCP or other
-     window, but on some platforms it may not. By default the units are
+     window, but on some platforms it may not.  By default the units are
      bytes, but suffix of "G," "M," or "K" will specify the units to be
      2^30 (GB), 2^20 (MB) or 2^10 (KB) respectively.  A suffix of "g,"
      "m" or "k" will specify units of 10^9, 10^6 or 10^3 bytes
-     respectively. For example:
-          `-s 128K'
+     respectively.  For example:
+          -s 128K
      Will request the local send and receive socket buffer sizes to be
      128KB or 131072 bytes.
 
      While the historic expectation is that setting the socket buffer
      size has a direct effect on say the TCP window, today that may not
-     hold true for all stacks. Further, while the historic expectation
-     is that the value specified in a `setsockopt()' call will be the
-     value returned via a `getsockopt()' call, at least one stack is
-     known to deliberately ignore history.  When running under Windows
-     a value of 0 may be used which will be an indication to the stack
-     the user wants to enable a form of copy avoidance. [Default: -1 -
-     use the system's default socket buffer sizes]
-
-`-S <sizespec>'
+     hold true for all stacks.  Further, while the historic expectation
+     is that the value specified in a 'setsockopt()' call will be the
+     value returned via a 'getsockopt()' call, at least one stack is
+     known to deliberately ignore history.  When running under Windows a
+     value of 0 may be used which will be an indication to the stack the
+     user wants to enable a form of copy avoidance.  [Default: -1 - use
+     the system's default socket buffer sizes]
+
+'-S <sizespec>'
      This option sets the remote (netserver) send and/or receive socket
      buffer sizes for the data connection to the value(s) specified.
      Often, this will affect the advertised and/or effective TCP or
-     other window, but on some platforms it may not. By default the
+     other window, but on some platforms it may not.  By default the
      units are bytes, but suffix of "G," "M," or "K" will specify the
      units to be 2^30 (GB), 2^20 (MB) or 2^10 (KB) respectively.  A
      suffix of "g," "m" or "k" will specify units of 10^9, 10^6 or 10^3
      bytes respectively.  For example:
-          `-S 128K'
+          -S 128K
      Will request the remote send and receive socket buffer sizes to be
      128KB or 131072 bytes.
 
      While the historic expectation is that setting the socket buffer
      size has a direct effect on say the TCP window, today that may not
      hold true for all stacks.  Further, while the historic expectation
-     is that the value specified in a `setsockopt()' call will be the
-     value returned via a `getsockopt()' call, at least one stack is
-     known to deliberately ignore history.  When running under Windows
-     a value of 0 may be used which will be an indication to the stack
-     the user wants to enable a form of copy avoidance. [Default: -1 -
-     use the system's default socket buffer sizes]
-
-`-4'
+     is that the value specified in a 'setsockopt()' call will be the
+     value returned via a 'getsockopt()' call, at least one stack is
+     known to deliberately ignore history.  When running under Windows a
+     value of 0 may be used which will be an indication to the stack the
+     user wants to enable a form of copy avoidance.  [Default: -1 - use
+     the system's default socket buffer sizes]
+
+'-4'
      Set the local and remote address family for the data connection to
      AF_INET - ie use IPv4 addressing only.  Just as with their global
-     command-line counterparts the last of the `-4', `-6', `-H' or `-L'
+     command-line counterparts the last of the '-4', '-6', '-H' or '-L'
      option wins for their respective address families.
 
-`-6'
-     This option is identical to its `-4' cousin, but requests IPv6
+'-6'
+     This option is identical to its '-4' cousin, but requests IPv6
      addresses for the local and remote ends of the data connection.
 
-
 * Menu:
 
 * TCP_STREAM::
@@ -1480,18 +1474,17 @@ File: netperf.info,  Node: TCP_STREAM,  Next: TCP_MAERTS,  Prev: Options common
 5.2.1 TCP_STREAM
 ----------------
 
-The TCP_STREAM test is the default test in netperf.  It is quite
-simple, transferring some quantity of data from the system running
-netperf to the system running netserver.  While time spent establishing
-the connection is not included in the throughput calculation, time
-spent flushing the last of the data to the remote at the end of the
-test is.  This is how netperf knows that all the data it sent was
-received by the remote.  In addition to the *note options common to
-STREAM tests: Options common to TCP UDP and SCTP tests, the following
-test-specific options can be included to possibly alter the behavior of
-the test:
-
-`-C'
+The TCP_STREAM test is the default test in netperf.  It is quite simple,
+transferring some quantity of data from the system running netperf to
+the system running netserver.  While time spent establishing the
+connection is not included in the throughput calculation, time spent
+flushing the last of the data to the remote at the end of the test is.
+This is how netperf knows that all the data it sent was received by the
+remote.  In addition to the *note options common to STREAM tests:
+Options common to TCP UDP and SCTP tests, the following test-specific
+options can be included to possibly alter the behavior of the test:
+
+'-C'
      This option will set TCP_CORK mode on the data connection on those
      systems where TCP_CORK is defined (typically Linux).  A full
      description of TCP_CORK is beyond the scope of this manual, but in
@@ -1500,35 +1493,34 @@ the test:
      an explicit flush operation or the connection is closed.  At
      present netperf does not perform any explicit flush operations.
      Setting TCP_CORK may improve the bitrate of tests where the "send
-     size" (`-m' option) is smaller than the MSS.  It should also
-     improve (make smaller) the service demand.
+     size" ('-m' option) is smaller than the MSS. It should also improve
+     (make smaller) the service demand.
 
      The Linux tcp(7) manpage states that TCP_CORK cannot be used in
-     conjunction with TCP_NODELAY (set via the `-d' option), however
+     conjunction with TCP_NODELAY (set via the '-d' option), however
      netperf does not validate command-line options to enforce that.
 
-`-D'
+'-D'
      This option will set TCP_NODELAY on the data connection on those
      systems where TCP_NODELAY is defined.  This disables something
      known as the Nagle Algorithm, which is intended to make the
      segments TCP sends as large as reasonably possible.  Setting
-     TCP_NODELAY for a TCP_STREAM test should either have no effect
-     when the send size (`-m' option) is larger than the MSS or will
-     decrease reported bitrate and increase service demand when the
-     send size is smaller than the MSS.  This stems from TCP_NODELAY
-     causing each sub-MSS send to be its own TCP segment rather than
-     being aggregated with other small sends.  This means more trips up
-     and down the protocol stack per KB of data transferred, which
-     means greater CPU utilization.
-
-     If setting TCP_NODELAY with `-D' affects throughput and/or service
-     demand for tests where the send size (`-m') is larger than the MSS
+     TCP_NODELAY for a TCP_STREAM test should either have no effect when
+     the send size ('-m' option) is larger than the MSS or will decrease
+     reported bitrate and increase service demand when the send size is
+     smaller than the MSS. This stems from TCP_NODELAY causing each
+     sub-MSS send to be its own TCP segment rather than being aggregated
+     with other small sends.  This means more trips up and down the
+     protocol stack per KB of data transferred, which means greater CPU
+     utilization.
+
+     If setting TCP_NODELAY with '-D' affects throughput and/or service
+     demand for tests where the send size ('-m') is larger than the MSS
      it suggests the TCP/IP stack's implementation of the Nagle
-     Algorithm _may_ be broken, perhaps interpreting the Nagle
-     Algorithm on a segment by segment basis rather than the proper user
-     send by user send basis.  However, a better test of this can be
-     achieved with the *note TCP_RR:: test.
-
+     Algorithm _may_ be broken, perhaps interpreting the Nagle Algorithm
+     on a segment by segment basis rather than the proper user send by
+     user send basis.  However, a better test of this can be achieved
+     with the *note TCP_RR:: test.
 
    Here is an example of a basic TCP_STREAM test, in this case from a
 Debian Linux (2.6 kernel) system to an HP-UX 11iv2 (HP-UX 11.23) system:
@@ -1546,12 +1538,12 @@ Debian Linux (2.6 kernel) system to an HP-UX 11iv2 (HP-UX 11.23) system:
 (lag - HP-UX 11.23) is 32768 bytes, and the default socket send buffer
 size for the sender (Debian 2.6 kernel) is 16384 bytes, however Linux
 does "auto tuning" of socket buffer and TCP window sizes, which means
-the send socket buffer size may be different at the end of the test
-than it was at the beginning.  This is addressed in the *note omni
-tests: The Omni Tests. added in version 2.5.0 and *note output
-selection: Omni Output Selection.  Throughput is expressed as 10^6 (aka
-Mega) bits per second, and the test ran for 10 seconds.  IPv4 addresses
-(AF_INET) were used.
+the send socket buffer size may be different at the end of the test than
+it was at the beginning.  This is addressed in the *note omni tests: The
+Omni Tests. added in version 2.5.0 and *note output selection: Omni
+Output Selection.  Throughput is expressed as 10^6 (aka Mega) bits per
+second, and the test ran for 10 seconds.  IPv4 addresses (AF_INET) were
+used.
 
 
 File: netperf.info,  Node: TCP_MAERTS,  Next: TCP_SENDFILE,  Prev: TCP_STREAM,  Up: Options common to TCP UDP and SCTP tests
@@ -1561,13 +1553,13 @@ File: netperf.info,  Node: TCP_MAERTS,  Next: TCP_SENDFILE,  Prev: TCP_STREAM,
 
 A TCP_MAERTS (MAERTS is STREAM backwards) test is "just like" a *note
 TCP_STREAM:: test except the data flows from the netserver to the
-netperf. The global command-line `-F' option is ignored for this test
-type.  The test-specific command-line `-C' option is ignored for this
+netperf.  The global command-line '-F' option is ignored for this test
+type.  The test-specific command-line '-C' option is ignored for this
 test type.
 
    Here is an example of a TCP_MAERTS test between the same two systems
 as in the example for the *note TCP_STREAM:: test.  This time we request
-larger socket buffers with `-s' and `-S' options:
+larger socket buffers with '-s' and '-S' options:
 
      $ netperf -H lag -t TCP_MAERTS -- -s 128K -S 128K
      TCP MAERTS TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to lag.hpl.hp.com (15.4.89.214) port 0 AF_INET
@@ -1579,7 +1571,7 @@ larger socket buffers with `-s' and `-S' options:
      221184 131072 131072    10.03      81.14
 
    Where we see that Linux, unlike HP-UX, may not return the same value
-in a `getsockopt()' as was requested in the prior `setsockopt()'.
+in a 'getsockopt()' as was requested in the prior 'setsockopt()'.
 
    This test is included more for benchmarking convenience than anything
 else.
@@ -1591,7 +1583,7 @@ File: netperf.info,  Node: TCP_SENDFILE,  Next: UDP_STREAM,  Prev: TCP_MAERTS,
 ------------------
 
 The TCP_SENDFILE test is "just like" a *note TCP_STREAM:: test except
-netperf the platform's `sendfile()' call instead of calling `send()'.
+netperf the platform's 'sendfile()' call instead of calling 'send()'.
 Often this results in a "zero-copy" operation where data is sent
 directly from the filesystem buffer cache.  This _should_ result in
 lower CPU utilization and possibly higher throughput.  If it does not,
@@ -1599,22 +1591,22 @@ then you may want to contact your vendor(s) because they have a problem
 on their hands.
 
    Zero-copy mechanisms may also alter the characteristics (size and
-number of buffers per) of packets passed to the NIC.  In many stacks,
-when a copy is performed, the stack can "reserve" space at the
-beginning of the destination buffer for things like TCP, IP and Link
-headers.  This then has the packet contained in a single buffer which
-can be easier to DMA to the NIC.  When no copy is performed, there is
-no opportunity to reserve space for headers and so a packet will be
+number of buffers per) of packets passed to the NIC. In many stacks,
+when a copy is performed, the stack can "reserve" space at the beginning
+of the destination buffer for things like TCP, IP and Link headers.
+This then has the packet contained in a single buffer which can be
+easier to DMA to the NIC. When no copy is performed, there is no
+opportunity to reserve space for headers and so a packet will be
 contained in two or more buffers.
 
-   As of some time before version 2.5.0, the *note global `-F' option:
+   As of some time before version 2.5.0, the *note global '-F' option:
 Global Options. is no longer required for this test.  If it is not
-specified, netperf will create a temporary file, which it will delete
-at the end of the test.  If the `-F' option is specified it must
-reference a file of at least the size of the send ring (*Note the
-global `-W' option: Global Options.) multiplied by the send size (*Note
-the test-specific `-m' option: Options common to TCP UDP and SCTP
-tests.).  All other TCP-specific options remain available and optional.
+specified, netperf will create a temporary file, which it will delete at
+the end of the test.  If the '-F' option is specified it must reference
+a file of at least the size of the send ring (*Note the global '-W'
+option: Global Options.)  multiplied by the send size (*Note the
+test-specific '-m' option: Options common to TCP UDP and SCTP tests.).
+All other TCP-specific options remain available and optional.
 
    In this first example:
      $ netperf -H lag -F ../src/netperf -t TCP_SENDFILE -- -s 128K -S 128K
@@ -1646,8 +1638,8 @@ used as the transport rather than TCP.
 
    A UDP_STREAM test has no end-to-end flow control - UDP provides none
 and neither does netperf.  However, if you wish, you can configure
-netperf with `--enable-intervals=yes' to enable the global command-line
-`-b' and `-w' options to pace bursts of traffic onto the network.
+netperf with '--enable-intervals=yes' to enable the global command-line
+'-b' and '-w' options to pace bursts of traffic onto the network.
 
    This has a number of implications.
 
@@ -1670,20 +1662,21 @@ by a 10 Gigabit Ethernet link:
      124928   32768   10.00      105672      0    2770.20
      135168           10.00      104844           2748.50
 
+
    The first line of numbers are statistics from the sending (netperf)
-side. The second line of numbers are from the receiving (netserver)
-side.  In this case, 105672 - 104844 or 828 messages did not make it
-all the way to the remote netserver process.
+side.  The second line of numbers are from the receiving (netserver)
+side.  In this case, 105672 - 104844 or 828 messages did not make it all
+the way to the remote netserver process.
 
-   If the value of the `-m' option is larger than the local send socket
-buffer size (`-s' option) netperf will likely abort with an error
+   If the value of the '-m' option is larger than the local send socket
+buffer size ('-s' option) netperf will likely abort with an error
 message about how the send call failed:
 
      netperf -t UDP_STREAM -H 192.168.2.125
      UDP UNIDIRECTIONAL SEND TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 192.168.2.125 (192.168.2.125) port 0 AF_INET
      udp_send: data send error: Message too long
 
-   If the value of the `-m' option is larger than the remote socket
+   If the value of the '-m' option is larger than the remote socket
 receive buffer, the reported receive throughput will likely be zero as
 the remote UDP will discard the messages as being too large to fit into
 the socket buffer.
@@ -1698,9 +1691,9 @@ the socket buffer.
       65536           10.00           0              0.00
 
    The example above was between a pair of systems running a "Linux"
-kernel. Notice that the remote Linux system returned a value larger
-than that passed-in to the `-S' option.  In fact, this value was larger
-than the message size set with the `-m' option.  That the remote socket
+kernel.  Notice that the remote Linux system returned a value larger
+than that passed-in to the '-S' option.  In fact, this value was larger
+than the message size set with the '-m' option.  That the remote socket
 buffer size is reported as 65536 bytes would suggest to any sane person
 that a message of 65000 bytes would fit, but the socket isn't _really_
 65536 bytes, even though Linux is telling us so.  Go figure.
@@ -1712,14 +1705,14 @@ File: netperf.info,  Node: XTI_TCP_STREAM,  Next: XTI_UDP_STREAM,  Prev: UDP_STR
 --------------------
 
 An XTI_TCP_STREAM test is simply a *note TCP_STREAM:: test using the XTI
-rather than BSD Sockets interface.  The test-specific `-X <devspec>'
+rather than BSD Sockets interface.  The test-specific '-X <devspec>'
 option can be used to specify the name of the local and/or remote XTI
-device files, which is required by the `t_open()' call made by netperf
+device files, which is required by the 't_open()' call made by netperf
 XTI tests.
 
    The XTI_TCP_STREAM test is only present if netperf was configured
-with `--enable-xti=yes'.  The remote netserver must have also been
-configured with `--enable-xti=yes'.
+with '--enable-xti=yes'.  The remote netserver must have also been
+configured with '--enable-xti=yes'.
 
 
 File: netperf.info,  Node: XTI_UDP_STREAM,  Next: SCTP_STREAM,  Prev: XTI_TCP_STREAM,  Up: Options common to TCP UDP and SCTP tests
@@ -1728,14 +1721,14 @@ File: netperf.info,  Node: XTI_UDP_STREAM,  Next: SCTP_STREAM,  Prev: XTI_TCP_ST
 --------------------
 
 An XTI_UDP_STREAM test is simply a *note UDP_STREAM:: test using the XTI
-rather than BSD Sockets Interface.  The test-specific `-X <devspec>'
+rather than BSD Sockets Interface.  The test-specific '-X <devspec>'
 option can be used to specify the name of the local and/or remote XTI
-device files, which is required by the `t_open()' call made by netperf
+device files, which is required by the 't_open()' call made by netperf
 XTI tests.
 
    The XTI_UDP_STREAM test is only present if netperf was configured
-with `--enable-xti=yes'. The remote netserver must have also been
-configured with `--enable-xti=yes'.
+with '--enable-xti=yes'.  The remote netserver must have also been
+configured with '--enable-xti=yes'.
 
 
 File: netperf.info,  Node: SCTP_STREAM,  Next: DLCO_STREAM,  Prev: XTI_UDP_STREAM,  Up: Options common to TCP UDP and SCTP tests
@@ -1744,15 +1737,15 @@ File: netperf.info,  Node: SCTP_STREAM,  Next: DLCO_STREAM,  Prev: XTI_UDP_STREA
 -----------------
 
 An SCTP_STREAM test is essentially a *note TCP_STREAM:: test using the
-SCTP rather than TCP.  The `-D' option will set SCTP_NODELAY, which is
-much like the TCP_NODELAY option for TCP.  The `-C' option is not
+SCTP rather than TCP. The '-D' option will set SCTP_NODELAY, which is
+much like the TCP_NODELAY option for TCP. The '-C' option is not
 applicable to an SCTP test as there is no corresponding SCTP_CORK
-option.  The author is still figuring-out what the test-specific `-N'
+option.  The author is still figuring-out what the test-specific '-N'
 option does :)
 
    The SCTP_STREAM test is only present if netperf was configured with
-`--enable-sctp=yes'. The remote netserver must have also been
-configured with `--enable-sctp=yes'.
+'--enable-sctp=yes'.  The remote netserver must have also been
+configured with '--enable-sctp=yes'.
 
 
 File: netperf.info,  Node: DLCO_STREAM,  Next: DLCL_STREAM,  Prev: SCTP_STREAM,  Up: Options common to TCP UDP and SCTP tests
@@ -1765,43 +1758,39 @@ concept to a *note TCP_STREAM:: test.  Both use reliable,
 connection-oriented protocols.  The DLPI test differs from the TCP test
 in that its protocol operates only at the link-level and does not
 include TCP-style segmentation and reassembly.  This last difference
-means that the value  passed-in  with the `-m' option must be less than
-the interface MTU.  Otherwise, the `-m' and `-M' options are just like
+means that the value passed-in with the '-m' option must be less than
+the interface MTU. Otherwise, the '-m' and '-M' options are just like
 their TCP/UDP/SCTP counterparts.
 
    Other DLPI-specific options include:
 
-`-D <devspec>'
+'-D <devspec>'
      This option is used to provide the fully-qualified names for the
      local and/or remote DLPI device files.  The syntax is otherwise
      identical to that of a "sizespec".
-
-`-p <ppaspec>'
+'-p <ppaspec>'
      This option is used to specify the local and/or remote DLPI PPA(s).
      The PPA is used to identify the interface over which traffic is to
-     be sent/received. The syntax of a "ppaspec" is otherwise the same
+     be sent/received.  The syntax of a "ppaspec" is otherwise the same
      as a "sizespec".
-
-`-s sap'
+'-s sap'
      This option specifies the 802.2 SAP for the test.  A SAP is
      somewhat like either the port field of a TCP or UDP header or the
      protocol field of an IP header.  The specified SAP should not
-     conflict with any other active SAPs on the specified PPA's (`-p'
+     conflict with any other active SAPs on the specified PPA's ('-p'
      option).
-
-`-w <sizespec>'
+'-w <sizespec>'
      This option specifies the local send and receive window sizes in
      units of frames on those platforms which support setting such
      things.
-
-`-W <sizespec>'
+'-W <sizespec>'
      This option specifies the remote send and receive window sizes in
      units of frames on those platforms which support setting such
      things.
 
    The DLCO_STREAM test is only present if netperf was configured with
-`--enable-dlpi=yes'. The remote netserver must have also been
-configured with `--enable-dlpi=yes'.
+'--enable-dlpi=yes'.  The remote netserver must have also been
+configured with '--enable-dlpi=yes'.
 
 
 File: netperf.info,  Node: DLCL_STREAM,  Next: STREAM_STREAM,  Prev: DLCO_STREAM,  Up: Options common to TCP UDP and SCTP tests
@@ -1811,17 +1800,17 @@ File: netperf.info,  Node: DLCL_STREAM,  Next: STREAM_STREAM,  Prev: DLCO_STREAM
 
 A DLPI ConnectionLess Stream (DLCL_STREAM) test is analogous to a *note
 UDP_STREAM:: test in that both make use of unreliable/best-effort,
-connection-less transports.  The DLCL_STREAM test differs from the
-*note UDP_STREAM:: test in that the message size (`-m' option) must
-always be less than the link MTU as there is no IP-like fragmentation
-and reassembly available and netperf does not presume to provide one.
+connection-less transports.  The DLCL_STREAM test differs from the *note
+UDP_STREAM:: test in that the message size ('-m' option) must always be
+less than the link MTU as there is no IP-like fragmentation and
+reassembly available and netperf does not presume to provide one.
 
    The test-specific command-line options for a DLCL_STREAM test are the
 same as those for a *note DLCO_STREAM:: test.
 
    The DLCL_STREAM test is only present if netperf was configured with
-`--enable-dlpi=yes'. The remote netserver must have also been
-configured with `--enable-dlpi=yes'.
+'--enable-dlpi=yes'.  The remote netserver must have also been
+configured with '--enable-dlpi=yes'.
 
 
 File: netperf.info,  Node: STREAM_STREAM,  Next: DG_STREAM,  Prev: DLCL_STREAM,  Up: Options common to TCP UDP and SCTP tests
@@ -1830,17 +1819,16 @@ File: netperf.info,  Node: STREAM_STREAM,  Next: DG_STREAM,  Prev: DLCL_STREAM,
 --------------------
 
 A Unix Domain Stream Socket Stream test (STREAM_STREAM) is similar in
-concept to a *note TCP_STREAM:: test, but using Unix Domain sockets.
-It is, naturally, limited to intra-machine traffic.  A STREAM_STREAM
-test shares the `-m', `-M', `-s' and `-S' options of the other _STREAM
-tests.  In a STREAM_STREAM test the `-p' option sets the directory in
-which the pipes will be created rather than setting a port number.  The
-default is to create the pipes in the system default for the
-`tempnam()' call.
+concept to a *note TCP_STREAM:: test, but using Unix Domain sockets.  It
+is, naturally, limited to intra-machine traffic.  A STREAM_STREAM test
+shares the '-m', '-M', '-s' and '-S' options of the other _STREAM tests.
+In a STREAM_STREAM test the '-p' option sets the directory in which the
+pipes will be created rather than setting a port number.  The default is
+to create the pipes in the system default for the 'tempnam()' call.
 
    The STREAM_STREAM test is only present if netperf was configured with
-`--enable-unixdomain=yes'. The remote netserver must have also been
-configured with `--enable-unixdomain=yes'.
+'--enable-unixdomain=yes'.  The remote netserver must have also been
+configured with '--enable-unixdomain=yes'.
 
 
 File: netperf.info,  Node: DG_STREAM,  Prev: STREAM_STREAM,  Up: Options common to TCP UDP and SCTP tests
@@ -1857,8 +1845,8 @@ SCTP test which can also preserve message boundaries.
 DG_STREAM test.
 
    The DG_STREAM test is only present if netperf was configured with
-`--enable-unixdomain=yes'. The remote netserver must have also been
-configured with `--enable-unixdomain=yes'.
+'--enable-unixdomain=yes'.  The remote netserver must have also been
+configured with '--enable-unixdomain=yes'.
 
 
 File: netperf.info,  Node: Using Netperf to Measure Request/Response,  Next: Using Netperf to Measure Aggregate Performance,  Prev: Using Netperf to Measure Bulk Data Transfer,  Up: Top
@@ -1867,9 +1855,9 @@ File: netperf.info,  Node: Using Netperf to Measure Request/Response,  Next: Usi
 *******************************************
 
 Request/response performance is often overlooked, yet it is just as
-important as bulk-transfer performance.  While things like larger
-socket buffers and TCP windows, and stateless offloads like TSO and LRO
-can cover a multitude of latency and even path-length sins, those sins
+important as bulk-transfer performance.  While things like larger socket
+buffers and TCP windows, and stateless offloads like TSO and LRO can
+cover a multitude of latency and even path-length sins, those sins
 cannot easily hide from a request/response test.  The convention for a
 request/response test is to have a _RR suffix.  There are however a few
 "request/response" tests that have other suffixes.
@@ -1877,26 +1865,26 @@ request/response test is to have a _RR suffix.  There are however a few
    A request/response test, particularly synchronous, one transaction at
 a time test such as those found by default in netperf, is particularly
 sensitive to the path-length of the networking stack.  An _RR test can
-also uncover those platforms where the NICs are strapped by default
-with overbearing interrupt avoidance settings in an attempt to increase
-the bulk-transfer performance (or rather, decrease the CPU utilization
-of a bulk-transfer test).  This sensitivity is most acute for small
-request and response sizes, such as the single-byte default for a
-netperf _RR test.
+also uncover those platforms where the NICs are strapped by default with
+overbearing interrupt avoidance settings in an attempt to increase the
+bulk-transfer performance (or rather, decrease the CPU utilization of a
+bulk-transfer test).  This sensitivity is most acute for small request
+and response sizes, such as the single-byte default for a netperf _RR
+test.
 
    While a bulk-transfer test reports its results in units of bits or
 bytes transferred per second, by default a mumble_RR test reports
 transactions per second where a transaction is defined as the completed
 exchange of a request and a response.  One can invert the transaction
 rate to arrive at the average round-trip latency.  If one is confident
-about the symmetry of the connection, the average one-way latency can
-be taken as one-half the average round-trip latency. As of version
-2.5.0 (actually slightly before) netperf still does not do the latter,
-but will do the former if one sets the verbosity to 2 for a classic
-netperf test, or includes the appropriate *note output selector: Omni
-Output Selectors. in an *note omni test: The Omni Tests.  It will also
-allow the user to switch the throughput units from transactions per
-second to bits or bytes per second with the global `-f' option.
+about the symmetry of the connection, the average one-way latency can be
+taken as one-half the average round-trip latency.  As of version 2.5.0
+(actually slightly before) netperf still does not do the latter, but
+will do the former if one sets the verbosity to 2 for a classic netperf
+test, or includes the appropriate *note output selector: Omni Output
+Selectors. in an *note omni test: The Omni Tests.  It will also allow
+the user to switch the throughput units from transactions per second to
+bits or bytes per second with the global '-f' option.
 
 * Menu:
 
@@ -1911,16 +1899,16 @@ File: netperf.info,  Node: Issues in Request/Response,  Next: Options Common to
 
 Most if not all the *note Issues in Bulk Transfer:: apply to
 request/response.  The issue of round-trip latency is even more
-important as netperf generally only has one transaction outstanding at
-a time.
+important as netperf generally only has one transaction outstanding at a
+time.
 
    A single instance of a one transaction outstanding _RR test should
 _never_ completely saturate the CPU of a system.  If testing between
 otherwise evenly matched systems, the symmetric nature of a _RR test
-with equal request and response sizes should result in equal CPU
-loading on both systems. However, this may not hold true on MP systems,
+with equal request and response sizes should result in equal CPU loading
+on both systems.  However, this may not hold true on MP systems,
 particularly if one CPU binds the netperf and netserver differently via
-the global `-T' option.
+the global '-T' option.
 
    For smaller request and response sizes packet loss is a bigger issue
 as there is no opportunity for a "fast retransmit" or retransmission
@@ -1934,15 +1922,15 @@ However, this may still be masked by interrupt coalescing in the
 NIC/driver.
 
    Certain NICs have ways to minimize the number of interrupts sent to
-the host.  If these are strapped badly they can significantly reduce
-the performance of something like a single-byte request/response test.
-Such setups are distinguished by seriously low reported CPU utilization
-and what seems like a low (even if in the thousands) transaction per
-second rate.  Also, if you run such an OS/driver combination on faster
-or slower hardware and do not see a corresponding change in the
-transaction rate, chances are good that the driver is strapping the NIC
-with aggressive interrupt avoidance settings.  Good for bulk
-throughput, but bad for latency.
+the host.  If these are strapped badly they can significantly reduce the
+performance of something like a single-byte request/response test.  Such
+setups are distinguished by seriously low reported CPU utilization and
+what seems like a low (even if in the thousands) transaction per second
+rate.  Also, if you run such an OS/driver combination on faster or
+slower hardware and do not see a corresponding change in the transaction
+rate, chances are good that the driver is strapping the NIC with
+aggressive interrupt avoidance settings.  Good for bulk throughput, but
+bad for latency.
 
    Some drivers may try to automagically adjust the interrupt avoidance
 settings.  If they are not terribly good at it, you will see
@@ -1959,95 +1947,94 @@ Many "test-specific" options are actually common across the different
 tests.  For those tests involving TCP, UDP and SCTP, whether using the
 BSD Sockets or the XTI interface those common options include:
 
-`-h'
+'-h'
      Display the test-suite-specific usage string and exit.  For a TCP_
      or UDP_ test this will be the usage string from the source file
-     `nettest_bsd.c'.  For an XTI_ test, this will be the usage string
-     from the source file `src/nettest_xti.c'.  For an SCTP test, this
-     will be the usage string from the source file `src/nettest_sctp.c'.
+     'nettest_bsd.c'.  For an XTI_ test, this will be the usage string
+     from the source file 'src/nettest_xti.c'.  For an SCTP test, this
+     will be the usage string from the source file 'src/nettest_sctp.c'.
 
-`-H <optionspec>'
+'-H <optionspec>'
      Normally, the remote hostname|IP and address family information is
      inherited from the settings for the control connection (eg global
-     command-line `-H', `-4' and/or `-6' options.  The test-specific
-     `-H' will override those settings for the data (aka test)
+     command-line '-H', '-4' and/or '-6' options.  The test-specific
+     '-H' will override those settings for the data (aka test)
      connection only.  Settings for the control connection are left
      unchanged.  This might be used to cause the control and data
      connections to take different paths through the network.
 
-`-L <optionspec>'
-     The test-specific `-L' option is identical to the test-specific
-     `-H' option except it affects the local hostname|IP and address
+'-L <optionspec>'
+     The test-specific '-L' option is identical to the test-specific
+     '-H' option except it affects the local hostname|IP and address
      family information.  As with its global command-line counterpart,
      this is generally only useful when measuring though those evil,
      end-to-end breaking things called firewalls.
 
-`-P <optionspec>'
+'-P <optionspec>'
      Set the local and/or remote port numbers for the data connection.
 
-`-r <sizespec>'
+'-r <sizespec>'
      This option sets the request (first value) and/or response (second
-     value) sizes for an _RR test. By default the units are bytes, but a
-     suffix of "G," "M," or "K" will specify the units to be 2^30 (GB),
-     2^20 (MB) or 2^10 (KB) respectively.  A suffix of "g," "m" or "k"
-     will specify units of 10^9, 10^6 or 10^3 bytes respectively. For
-     example:
-          `-r 128,16K'
+     value) sizes for an _RR test.  By default the units are bytes, but
+     a suffix of "G," "M," or "K" will specify the units to be 2^30
+     (GB), 2^20 (MB) or 2^10 (KB) respectively.  A suffix of "g," "m" or
+     "k" will specify units of 10^9, 10^6 or 10^3 bytes respectively.
+     For example:
+          -r 128,16K
      Will set the request size to 128 bytes and the response size to 16
-     KB or 16384 bytes. [Default: 1 - a single-byte request and
+     KB or 16384 bytes.  [Default: 1 - a single-byte request and
      response ]
 
-`-s <sizespec>'
+'-s <sizespec>'
      This option sets the local (netperf) send and receive socket buffer
      sizes for the data connection to the value(s) specified.  Often,
      this will affect the advertised and/or effective TCP or other
-     window, but on some platforms it may not. By default the units are
+     window, but on some platforms it may not.  By default the units are
      bytes, but a suffix of "G," "M," or "K" will specify the units to
      be 2^30 (GB), 2^20 (MB) or 2^10 (KB) respectively.  A suffix of
      "g," "m" or "k" will specify units of 10^9, 10^6 or 10^3 bytes
-     respectively. For example:
-          `-s 128K'
+     respectively.  For example:
+          -s 128K
      Will request the local send (netperf) and receive socket buffer
      sizes to be 128KB or 131072 bytes.
 
      While the historic expectation is that setting the socket buffer
      size has a direct effect on say the TCP window, today that may not
      hold true for all stacks.  When running under Windows a value of 0
-     may be used which will be an indication to the stack the user
-     wants to enable a form of copy avoidance. [Default: -1 - use the
+     may be used which will be an indication to the stack the user wants
+     to enable a form of copy avoidance.  [Default: -1 - use the
      system's default socket buffer sizes]
 
-`-S <sizespec>'
+'-S <sizespec>'
      This option sets the remote (netserver) send and/or receive socket
      buffer sizes for the data connection to the value(s) specified.
      Often, this will affect the advertised and/or effective TCP or
-     other window, but on some platforms it may not. By default the
+     other window, but on some platforms it may not.  By default the
      units are bytes, but a suffix of "G," "M," or "K" will specify the
      units to be 2^30 (GB), 2^20 (MB) or 2^10 (KB) respectively.  A
      suffix of "g," "m" or "k" will specify units of 10^9, 10^6 or 10^3
      bytes respectively.  For example:
-          `-S 128K'
+          -S 128K
      Will request the remote (netserver) send and receive socket buffer
      sizes to be 128KB or 131072 bytes.
 
      While the historic expectation is that setting the socket buffer
      size has a direct effect on say the TCP window, today that may not
      hold true for all stacks.  When running under Windows a value of 0
-     may be used which will be an indication to the stack the user
-     wants to enable a form of copy avoidance.  [Default: -1 - use the
+     may be used which will be an indication to the stack the user wants
+     to enable a form of copy avoidance.  [Default: -1 - use the
      system's default socket buffer sizes]
 
-`-4'
+'-4'
      Set the local and remote address family for the data connection to
      AF_INET - ie use IPv4 addressing only.  Just as with their global
-     command-line counterparts the last of the `-4', `-6', `-H' or `-L'
+     command-line counterparts the last of the '-4', '-6', '-H' or '-L'
      option wins for their respective address families.
 
-`-6'
-     This option is identical to its `-4' cousin, but requests IPv6
+'-6'
+     This option is identical to its '-4' cousin, but requests IPv6
      addresses for the local and remote ends of the data connection.
 
-
 * Menu:
 
 * TCP_RR::
@@ -2069,10 +2056,10 @@ File: netperf.info,  Node: TCP_RR,  Next: TCP_CC,  Prev: Options Common to TCP U
 ------------
 
 A TCP_RR (TCP Request/Response) test is requested by passing a value of
-"TCP_RR" to the global `-t' command-line option.  A TCP_RR test can be
-thought-of as a user-space to user-space `ping' with no think time - it
-is by default a synchronous, one transaction at a time,
-request/response test.
+"TCP_RR" to the global '-t' command-line option.  A TCP_RR test can be
+thought-of as a user-space to user-space 'ping' with no think time - it
+is by default a synchronous, one transaction at a time, request/response
+test.
 
    The transaction rate is the number of complete transactions exchanged
 divided by the length of time it took to perform those transactions.
@@ -2088,13 +2075,13 @@ measuring CPU utilization completely and accurately.
 If you want connection setup overheads included, you should consider the
 *note TPC_CC: TCP_CC. or *note TCP_CRR: TCP_CRR. tests.
 
-   If specifying the `-D' option to set TCP_NODELAY and disable the
+   If specifying the '-D' option to set TCP_NODELAY and disable the
 Nagle Algorithm increases the transaction rate reported by a TCP_RR
-test, it implies the stack(s) over which the TCP_RR test is running
-have a broken implementation of the Nagle Algorithm.  Likely as not
-they are interpreting Nagle on a segment by segment basis rather than a
-user send by user send basis.  You should contact your stack vendor(s)
-to report the problem to them.
+test, it implies the stack(s) over which the TCP_RR test is running have
+a broken implementation of the Nagle Algorithm.  Likely as not they are
+interpreting Nagle on a segment by segment basis rather than a user send
+by user send basis.  You should contact your stack vendor(s) to report
+the problem to them.
 
    Here is an example of two systems running a basic TCP_RR test over a
 10 Gigabit Ethernet link:
@@ -2121,7 +2108,7 @@ File: netperf.info,  Node: TCP_CC,  Next: TCP_CRR,  Prev: TCP_RR,  Up: Options C
 ------------
 
 A TCP_CC (TCP Connect/Close) test is requested by passing a value of
-"TCP_CC" to the global `-t' option.  A TCP_CC test simply measures how
+"TCP_CC" to the global '-t' option.  A TCP_CC test simply measures how
 fast the pair of systems can open and close connections between one
 another in a synchronous (one at a time) manner.  While this is
 considered an _RR test, no request or response is exchanged over the
@@ -2143,18 +2130,18 @@ delay in connection establishment.
    there is the risk of TIME_WAIT reuse.  To minimize the chances of
 this happening, netperf will by default select its own client port
 numbers from the range of 5000 to 65535.  On systems with a 60 second
-TIME_WAIT state, this should allow roughly 1000 transactions per
-second.  The size of the client port space used by netperf can be
-controlled via the test-specific `-p' option, which takes a "sizespec"
-as a value setting the minimum (first value) and maximum (second value)
-port numbers used by netperf at the client end.
+TIME_WAIT state, this should allow roughly 1000 transactions per second.
+The size of the client port space used by netperf can be controlled via
+the test-specific '-p' option, which takes a "sizespec" as a value
+setting the minimum (first value) and maximum (second value) port
+numbers used by netperf at the client end.
 
    Since no requests or responses are exchanged during a TCP_CC test,
-only the `-H', `-L', `-4' and `-6' of the "common" test-specific
-options are likely to have an effect, if any, on the results.  The `-s'
-and `-S' options _may_ have some effect if they alter the number and/or
-type of options carried in the TCP SYNchronize segments, such as Window
-Scaling or Timestamps.  The `-P' and `-r' options are utterly ignored.
+only the '-H', '-L', '-4' and '-6' of the "common" test-specific options
+are likely to have an effect, if any, on the results.  The '-s' and '-S'
+options _may_ have some effect if they alter the number and/or type of
+options carried in the TCP SYNchronize segments, such as Window Scaling
+or Timestamps.  The '-P' and '-r' options are utterly ignored.
 
    Since connection establishment and tear-down for TCP is not
 symmetric, a TCP_CC test is not symmetric in its loading of the two
@@ -2167,21 +2154,21 @@ File: netperf.info,  Node: TCP_CRR,  Next: UDP_RR,  Prev: TCP_CC,  Up: Options C
 -------------
 
 The TCP Connect/Request/Response (TCP_CRR) test is requested by passing
-a value of "TCP_CRR" to the global `-t' command-line option.  A TCP_CRR
+a value of "TCP_CRR" to the global '-t' command-line option.  A TCP_CRR
 test is like a merger of a *note TCP_RR:: and *note TCP_CC:: test which
 measures the performance of establishing a connection, exchanging a
 single request/response transaction, and tearing-down that connection.
 This is very much like what happens in an HTTP 1.0 or HTTP 1.1
-connection when HTTP Keepalives are not used.  In fact, the TCP_CRR
-test was added to netperf to simulate just that.
+connection when HTTP Keepalives are not used.  In fact, the TCP_CRR test
+was added to netperf to simulate just that.
 
-   Since a request and response are exchanged the `-r', `-s' and `-S'
+   Since a request and response are exchanged the '-r', '-s' and '-S'
 options can have an effect on the performance.
 
    The issue of TIME_WAIT reuse exists for the TCP_CRR test just as it
-does for the TCP_CC test.  Similarly, since connection establishment
-and tear-down is not symmetric, a TCP_CRR test is not symmetric even
-when the request and response sizes are the same.
+does for the TCP_CC test.  Similarly, since connection establishment and
+tear-down is not symmetric, a TCP_CRR test is not symmetric even when
+the request and response sizes are the same.
 
 
 File: netperf.info,  Node: UDP_RR,  Next: XTI_TCP_RR,  Prev: TCP_CRR,  Up: Options Common to TCP UDP and SCTP _RR tests
@@ -2190,26 +2177,26 @@ File: netperf.info,  Node: UDP_RR,  Next: XTI_TCP_RR,  Prev: TCP_CRR,  Up: Optio
 ------------
 
 A UDP Request/Response (UDP_RR) test is requested by passing a value of
-"UDP_RR" to a global `-t' option.  It is very much the same as a TCP_RR
+"UDP_RR" to a global '-t' option.  It is very much the same as a TCP_RR
 test except UDP is used rather than TCP.
 
    UDP does not provide for retransmission of lost UDP datagrams, and
-netperf does not add anything for that either.  This means that if
-_any_ request or response is lost, the exchange of requests and
-responses will stop from that point until the test timer expires.
-Netperf will not really "know" this has happened - the only symptom
-will be a low transaction per second rate.  If `--enable-burst' was
-included in the `configure' command and a test-specific `-b' option
-used, the UDP_RR test will "survive" the loss of requests and responses
-until the sum is one more than the value passed via the `-b' option. It
-will though almost certainly run more slowly.
-
-   The netperf side of a UDP_RR test will call `connect()' on its data
-socket and thenceforth use the `send()' and `recv()' socket calls.  The
-netserver side of a UDP_RR test will not call `connect()' and will use
-`recvfrom()' and `sendto()' calls.  This means that even if the request
-and response sizes are the same, a UDP_RR test is _not_ symmetric in
-its loading of the two systems under test.
+netperf does not add anything for that either.  This means that if _any_
+request or response is lost, the exchange of requests and responses will
+stop from that point until the test timer expires.  Netperf will not
+really "know" this has happened - the only symptom will be a low
+transaction per second rate.  If '--enable-burst' was included in the
+'configure' command and a test-specific '-b' option used, the UDP_RR
+test will "survive" the loss of requests and responses until the sum is
+one more than the value passed via the '-b' option.  It will though
+almost certainly run more slowly.
+
+   The netperf side of a UDP_RR test will call 'connect()' on its data
+socket and thenceforth use the 'send()' and 'recv()' socket calls.  The
+netserver side of a UDP_RR test will not call 'connect()' and will use
+'recvfrom()' and 'sendto()' calls.  This means that even if the request
+and response sizes are the same, a UDP_RR test is _not_ symmetric in its
+loading of the two systems under test.
 
    Here is an example of a UDP_RR test between two otherwise identical
 two-CPU systems joined via a 1 Gigabit Ethernet network:
@@ -2224,8 +2211,8 @@ two-CPU systems joined via a 1 Gigabit Ethernet network:
      65535  65535  1       1      10.01   15262.48   13.90  16.11  18.221  21.116
      65535  65535
 
-   This example includes the `-c' and `-C' options to enable CPU
-utilization reporting and shows the asymmetry in CPU loading.  The `-T'
+   This example includes the '-c' and '-C' options to enable CPU
+utilization reporting and shows the asymmetry in CPU loading.  The '-T'
 option was used to make sure netperf and netserver ran on a given CPU
 and did not move around during the test.
 
@@ -2236,11 +2223,11 @@ File: netperf.info,  Node: XTI_TCP_RR,  Next: XTI_TCP_CC,  Prev: UDP_RR,  Up: Op
 ----------------
 
 An XTI_TCP_RR test is essentially the same as a *note TCP_RR:: test only
-using the XTI rather than BSD Sockets interface. It is requested by
-passing a value of "XTI_TCP_RR" to the `-t' global command-line option.
+using the XTI rather than BSD Sockets interface.  It is requested by
+passing a value of "XTI_TCP_RR" to the '-t' global command-line option.
 
    The test-specific options for an XTI_TCP_RR test are the same as
-those for a TCP_RR test with the addition of the `-X <devspec>' option
+those for a TCP_RR test with the addition of the '-X <devspec>' option
 to specify the names of the local and/or remote XTI device file(s).
 
 
@@ -2253,7 +2240,7 @@ An XTI_TCP_CC test is essentially the same as a *note TCP_CC: TCP_CC.
 test, only using the XTI rather than BSD Sockets interface.
 
    The test-specific options for an XTI_TCP_CC test are the same as
-those for a TCP_CC test with the addition of the `-X <devspec>' option
+those for a TCP_CC test with the addition of the '-X <devspec>' option
 to specify the names of the local and/or remote XTI device file(s).
 
 
@@ -2266,7 +2253,7 @@ The XTI_TCP_CRR test is essentially the same as a *note TCP_CRR:
 TCP_CRR. test, only using the XTI rather than BSD Sockets interface.
 
    The test-specific options for an XTI_TCP_CRR test are the same as
-those for a TCP_RR test with the addition of the `-X <devspec>' option
+those for a TCP_RR test with the addition of the '-X <devspec>' option
 to specify the names of the local and/or remote XTI device file(s).
 
 
@@ -2276,11 +2263,11 @@ File: netperf.info,  Node: XTI_UDP_RR,  Next: DLCL_RR,  Prev: XTI_TCP_CRR,  Up:
 ----------------
 
 An XTI_UDP_RR test is essentially the same as a UDP_RR test only using
-the XTI rather than BSD Sockets interface.  It is requested by passing
-a value of "XTI_UDP_RR" to the `-t' global command-line option.
+the XTI rather than BSD Sockets interface.  It is requested by passing a
+value of "XTI_UDP_RR" to the '-t' global command-line option.
 
    The test-specific options for an XTI_UDP_RR test are the same as
-those for a UDP_RR test with the addition of the `-X <devspec>' option
+those for a UDP_RR test with the addition of the '-X <devspec>' option
 to specify the name of the local and/or remote XTI device file(s).
 
 
@@ -2309,15 +2296,15 @@ File: netperf.info,  Node: Using Netperf to Measure Aggregate Performance,  Next
 
 Ultimately, *note Netperf4: Netperf4. will be the preferred benchmark to
 use when one wants to measure aggregate performance because netperf has
-no support for explicit synchronization of concurrent tests. Until
-netperf4 is ready for prime time, one can make use of the heuristics
-and procedures mentioned here for the 85% solution.
+no support for explicit synchronization of concurrent tests.  Until
+netperf4 is ready for prime time, one can make use of the heuristics and
+procedures mentioned here for the 85% solution.
 
    There are a few ways to measure aggregate performance with netperf.
 The first is to run multiple, concurrent netperf tests and can be
-applied to any of the netperf tests.  The second is to configure
-netperf with `--enable-burst' and is applicable to the TCP_RR test. The
-third is a variation on the first.
+applied to any of the netperf tests.  The second is to configure netperf
+with '--enable-burst' and is applicable to the TCP_RR test.  The third
+is a variation on the first.
 
 * Menu:
 
@@ -2337,9 +2324,9 @@ for explicit synchronization of concurrent tests.  This leaves netperf2
 results vulnerable to "skew" errors.
 
    However, since there are times when netperf4 is unavailable it may be
-necessary to run netperf. The skew error can be minimized by making use
+necessary to run netperf.  The skew error can be minimized by making use
 of the confidence interval functionality.  Then one simply launches
-multiple tests from the shell using a `for' loop or the like:
+multiple tests from the shell using a 'for' loop or the like:
 
      for i in 1 2 3 4
      do
@@ -2348,8 +2335,8 @@ multiple tests from the shell using a `for' loop or the like:
 
    which will run four, concurrent *note TCP_STREAM: TCP_STREAM. tests
 from the system on which it is executed to tardy.cup.hp.com.  Each
-concurrent netperf will iterate 10 times thanks to the `-i' option and
-will omit the test banners (option `-P') for brevity.  The output looks
+concurrent netperf will iterate 10 times thanks to the '-i' option and
+will omit the test banners (option '-P') for brevity.  The output looks
 something like this:
 
       87380  16384  16384    10.03     235.15
@@ -2358,8 +2345,8 @@ something like this:
       87380  16384  16384    10.03     233.96
 
    We can take the sum of the results and be reasonably confident that
-the aggregate performance was 940 Mbits/s.  This method does not need
-to be limited to one system speaking to one other system.  It can be
+the aggregate performance was 940 Mbits/s.  This method does not need to
+be limited to one system speaking to one other system.  It can be
 extended to one system talking to N other systems.  It could be as
 simple as:
      for host in 'foo bar baz bing'
@@ -2367,13 +2354,13 @@ simple as:
      netperf -t TCP_STREAM -H $hosts -i 10 -P 0 &
      done
    A more complicated/sophisticated example can be found in
-`doc/examples/runemomniagg2.sh' where.
+'doc/examples/runemomniagg2.sh' where.
 
    If you see warnings about netperf not achieving the confidence
 intervals, the best thing to do is to increase the number of iterations
-with `-i' and/or increase the run length of each iteration with `-l'.
+with '-i' and/or increase the run length of each iteration with '-l'.
 
-   You can also enable local (`-c') and/or remote (`-C') CPU
+   You can also enable local ('-c') and/or remote ('-C') CPU
 utilization:
 
      for i in 1 2 3 4
@@ -2388,15 +2375,15 @@ utilization:
 
    If the CPU utilizations reported for the same system are the same or
 very very close you can be reasonably confident that skew error is
-minimized.  Presumably one could then omit `-i' but that is not
-advised, particularly when/if the CPU utilization approaches 100
-percent.  In the example above we see that the CPU utilization on the
-local system remains the same for all four tests, and is only off by
-0.01 out of 5.09 on the remote system.  As the number of CPUs in the
-system increases, and so too the odds of saturating a single CPU, the
-accuracy of similar CPU utilization implying little skew error is
-diminished.  This is also the case for those increasingly rare single
-CPU systems if the utilization is reported as 100% or very close to it.
+minimized.  Presumably one could then omit '-i' but that is not advised,
+particularly when/if the CPU utilization approaches 100 percent.  In the
+example above we see that the CPU utilization on the local system
+remains the same for all four tests, and is only off by 0.01 out of 5.09
+on the remote system.  As the number of CPUs in the system increases,
+and so too the odds of saturating a single CPU, the accuracy of similar
+CPU utilization implying little skew error is diminished.  This is also
+the case for those increasingly rare single CPU systems if the
+utilization is reported as 100% or very close to it.
 
      NOTE: It is very important to remember that netperf is calculating
      system-wide CPU utilization.  When calculating the service demand
@@ -2406,7 +2393,7 @@ CPU systems if the utilization is reported as 100% or very close to it.
      wrong.  One has to compute service demands for concurrent tests by
      hand.
 
-   If you wish you can add a unique, global `-B' option to each command
+   If you wish you can add a unique, global '-B' option to each command
 line to append the given string to the output:
 
      for i in 1 2 3 4
@@ -2422,8 +2409,8 @@ line to append the given string to the output:
    You will notice that the tests completed in an order other than they
 were started from the shell.  This underscores why there is a threat of
 skew error and why netperf4 will eventually be the preferred tool for
-aggregate tests.  Even if you see the Netperf Contributing Editor
-acting to the contrary!-)
+aggregate tests.  Even if you see the Netperf Contributing Editor acting
+to the contrary!-)
 
 * Menu:
 
@@ -2441,14 +2428,14 @@ other issues to consider when running concurrent netperf tests.
    For example, when running concurrent tests over multiple interfaces,
 one is not always assured that the traffic one thinks went over a given
 interface actually did so.  In particular, the Linux networking stack
-takes a particularly strong stance on its following the so called `weak
+takes a particularly strong stance on its following the so called 'weak
 end system model'.  As such, it is willing to answer ARP requests for
 any of its local IP addresses on any of its interfaces.  If multiple
-interfaces are connected to the same broadcast domain, then even if
-they are configured into separate IP subnets there is no a priori way
-of knowing which interface was actually used for which connection(s).
-This can be addressed by setting the `arp_ignore' sysctl before
-configuring interfaces.
+interfaces are connected to the same broadcast domain, then even if they
+are configured into separate IP subnets there is no a priori way of
+knowing which interface was actually used for which connection(s).  This
+can be addressed by setting the 'arp_ignore' sysctl before configuring
+interfaces.
 
    As it is quite important, we will repeat that it is very important to
 remember that each concurrent netperf instance is calculating
@@ -2460,15 +2447,15 @@ hand
 
    Running concurrent tests can also become difficult when there is no
 one "central" node.  Running tests between pairs of systems may be more
-difficult, calling for remote shell commands in the for loop rather
-than netperf commands.  This introduces more skew error, which the
-confidence intervals may not be able to sufficiently mitigate.  One
-possibility is to actually run three consecutive netperf tests on each
-node - the first being a warm-up, the last being a cool-down.  The idea
-then is to ensure that the time it takes to get all the netperfs
-started is less than the length of the first netperf command in the
-sequence of three.  Similarly, it assumes that all "middle" netperfs
-will complete before the first of the "last" netperfs complete.
+difficult, calling for remote shell commands in the for loop rather than
+netperf commands.  This introduces more skew error, which the confidence
+intervals may not be able to sufficiently mitigate.  One possibility is
+to actually run three consecutive netperf tests on each node - the first
+being a warm-up, the last being a cool-down.  The idea then is to ensure
+that the time it takes to get all the netperfs started is less than the
+length of the first netperf command in the sequence of three.
+Similarly, it assumes that all "middle" netperfs will complete before
+the first of the "last" netperfs complete.
 
 
 File: netperf.info,  Node: Using --enable-burst,  Next: Using --enable-demo,  Prev: Running Concurrent Netperf Tests,  Up: Using Netperf to Measure Aggregate Performance
@@ -2476,30 +2463,30 @@ File: netperf.info,  Node: Using --enable-burst,  Next: Using --enable-demo,  Pr
 7.2 Using - -enable-burst
 =========================
 
-Starting in version 2.5.0 `--enable-burst=yes' is the default, which
+Starting in version 2.5.0 '--enable-burst=yes' is the default, which
 means one no longer must:
 
      configure --enable-burst
 
    To have burst-mode functionality present in netperf.  This enables a
-test-specific `-b num' option in *note TCP_RR: TCP_RR, *note UDP_RR:
+test-specific '-b num' option in *note TCP_RR: TCP_RR, *note UDP_RR:
 UDP_RR. and *note omni: The Omni Tests. tests.
 
    Normally, netperf will attempt to ramp-up the number of outstanding
-requests to `num' plus one transactions in flight at one time.  The
+requests to 'num' plus one transactions in flight at one time.  The
 ramp-up is to avoid transactions being smashed together into a smaller
 number of segments when the transport's congestion window (if any) is
 smaller at the time than what netperf wants to have outstanding at one
-time. If, however, the user specifies a negative value for `num' this
-ramp-up is bypassed and the burst of sends is made without
-consideration of transport congestion window.
+time.  If, however, the user specifies a negative value for 'num' this
+ramp-up is bypassed and the burst of sends is made without consideration
+of transport congestion window.
 
    This burst-mode is used as an alternative to or even in conjunction
 with multiple-concurrent _RR tests and as a way to implement a
-single-connection, bidirectional bulk-transfer test.  When run with
-just a single instance of netperf, increasing the burst size can
-determine the maximum number of transactions per second which can be
-serviced by a single process:
+single-connection, bidirectional bulk-transfer test.  When run with just
+a single instance of netperf, increasing the burst size can determine
+the maximum number of transactions per second which can be serviced by a
+single process:
 
      for b in 0 1 2 4 8 16 32
      do
@@ -2514,20 +2501,20 @@ serviced by a single process:
      71929.27 -b 16
      109718.17 -b 32
 
-   The global `-v' and `-P' options were used to minimize the output to
-the single figure of merit which in this case the transaction rate.
-The global `-B' option was used to more clearly label the output, and
-the test-specific `-b' option enabled by `--enable-burst' increase the
+   The global '-v' and '-P' options were used to minimize the output to
+the single figure of merit which in this case the transaction rate.  The
+global '-B' option was used to more clearly label the output, and the
+test-specific '-b' option enabled by '--enable-burst' increase the
 number of transactions in flight at one time.
 
-   Now, since the test-specific `-D' option was not specified to set
+   Now, since the test-specific '-D' option was not specified to set
 TCP_NODELAY, the stack was free to "bundle" requests and/or responses
 into TCP segments as it saw fit, and since the default request and
 response size is one byte, there could have been some considerable
 bundling even in the absence of transport congestion window issues.  If
 one wants to try to achieve a closer to one-to-one correspondence
 between a request and response and a TCP segment, add the test-specific
-`-D' option:
+'-D' option:
 
      for b in 0 1 2 4 8 16 32
      do
@@ -2547,12 +2534,12 @@ transaction rate.  In this particular instance, the author believes it
 relates to interactions between the test and interrupt coalescing
 settings in the driver for the NICs used.
 
-     NOTE: Even if you set the `-D' option that is still not a
-     guarantee that each transaction is in its own TCP segments.  You
-     should get into the habit of verifying the relationship between the
+     NOTE: Even if you set the '-D' option that is still not a guarantee
+     that each transaction is in its own TCP segments.  You should get
+     into the habit of verifying the relationship between the
      transaction rate and the packet rate via other means.
 
-   You can also combine `--enable-burst' functionality with concurrent
+   You can also combine '--enable-burst' functionality with concurrent
 netperf tests.  This would then be an "aggregate of aggregates" if you
 like:
 
@@ -2567,11 +2554,12 @@ like:
       45702.04 aggregate 1 -b 8 -D
       46352.48 aggregate 3 -b 8 -D
 
+
    Since each netperf did hit the confidence intervals, we can be
 reasonably certain that the aggregate transaction per second rate was
 the sum of all four concurrent tests, or something just shy of 184,000
 transactions per second.  To get some idea if that was also the packet
-per second rate, we could bracket that `for' loop with something to
+per second rate, we could bracket that 'for' loop with something to
 gather statistics and run the results through beforeafter
 (ftp://ftp.cup.hp.com/dist/networking/tools):
 
@@ -2594,23 +2582,24 @@ gather statistics and run the results through beforeafter
           rx_packets: 12251544
           tx_packets: 12251550
 
-   This example uses `ethtool' because the system being used is running
+
+   This example uses 'ethtool' because the system being used is running
 Linux.  Other platforms have other tools - for example HP-UX has
 lanadmin:
 
      lanadmin -g mibstats <ppa>
 
-   and of course one could instead use `netstat'.
+   and of course one could instead use 'netstat'.
 
-   The `wait' is important because we are launching concurrent netperfs
+   The 'wait' is important because we are launching concurrent netperfs
 in the background.  Without it, the second ethtool command would be run
 before the tests finished and perhaps even before the last of them got
 started!
 
    The sum of the reported transaction rates is 204178 over 60 seconds,
 which is a total of 12250680 transactions.  Each transaction is the
-exchange of a request and a response, so we multiply that by 2 to
-arrive at 24501360.
+exchange of a request and a response, so we multiply that by 2 to arrive
+at 24501360.
 
    The sum of the ethtool stats is 24503094 packets which matches what
 netperf was reporting very well.
@@ -2618,8 +2607,8 @@ netperf was reporting very well.
    Had the request or response size differed, we would need to know how
 it compared with the "MSS" for the connection.
 
-   Just for grins, here is the exercise repeated, using `netstat'
-instead of `ethtool'
+   Just for grins, here is the exercise repeated, using 'netstat'
+instead of 'ethtool'
 
      netstat -s -t > before
      for i in 1 2 3 4
@@ -2648,12 +2637,12 @@ packet losses and/or retransmissions.
 
    Of course all this checking is unnecessary if the test is a UDP_RR
 test because UDP "never" aggregates multiple sends into the same UDP
-datagram, and there are no ACKnowledgements in UDP.  The loss of a
-single request or response will not bring a "burst" UDP_RR test to a
-screeching halt, but it will reduce the number of transactions
-outstanding at any one time.  A "burst" UDP_RR test will come to a halt
-if the sum of the lost requests and responses reaches the value
-specified in the test-specific `-b' option.
+datagram, and there are no ACKnowledgements in UDP. The loss of a single
+request or response will not bring a "burst" UDP_RR test to a screeching
+halt, but it will reduce the number of transactions outstanding at any
+one time.  A "burst" UDP_RR test will come to a halt if the sum of the
+lost requests and responses reaches the value specified in the
+test-specific '-b' option.
 
 
 File: netperf.info,  Node: Using --enable-demo,  Prev: Using --enable-burst,  Up: Using Netperf to Measure Aggregate Performance
@@ -2664,9 +2653,9 @@ File: netperf.info,  Node: Using --enable-demo,  Prev: Using --enable-burst,  Up
 One can
      configure --enable-demo
    and compile netperf to enable netperf to emit "interim results" at
-semi-regular intervals.  This enables a global `-D' option which takes
-a reporting interval as an argument.  With that specified, the output
-of netperf will then look something like
+semi-regular intervals.  This enables a global '-D' option which takes a
+reporting interval as an argument.  With that specified, the output of
+netperf will then look something like
 
      $ src/netperf -D 1.25
      MIGRATED TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to localhost.localdomain () port 0 AF_INET : demo
@@ -2684,12 +2673,12 @@ of netperf will then look something like
 
       87380  16384  16384    10.00    25375.66
    The units of the "Interim result" lines will follow the units
-selected via the global `-f' option.  If the test-specific `-o' option
+selected via the global '-f' option.  If the test-specific '-o' option
 is specified on the command line, the format will be CSV:
      ...
      2978.81,MBytes/s,1.25,1327962298.035
      ...
-   If the test-specific `-k' option is used the format will be keyval
+   If the test-specific '-k' option is used the format will be keyval
 with each keyval being given an index:
      ...
      NETPERF_INTERIM_RESULT[2]=25.00
@@ -2705,27 +2694,27 @@ is start the netperfs via a script, giving each a Very Long (tm) run
 time.  Direct the output to a file per instance.  Then, once all the
 netperfs have been started, take a timestamp and wait for some desired
 test interval.  Once that interval expires take another timestamp and
-then start terminating the netperfs by sending them a SIGALRM signal
-via the likes of the `kill' or `pkill' command.  The netperfs will
-terminate and emit the rest of the "usual" output, and you can then
-bring the files to a central location for post processing to find the
-aggregate performance over the "test interval."
+then start terminating the netperfs by sending them a SIGALRM signal via
+the likes of the 'kill' or 'pkill' command.  The netperfs will terminate
+and emit the rest of the "usual" output, and you can then bring the
+files to a central location for post processing to find the aggregate
+performance over the "test interval."
 
    This method has the advantage that it does not require advance
 knowledge of how long it takes to get netperf tests started and/or
-stopped.  It does though require sufficiently synchronized clocks on
-all the test systems.
+stopped.  It does though require sufficiently synchronized clocks on all
+the test systems.
 
    While calls to get the current time can be inexpensive, that neither
 has been nor is universally true.  For that reason netperf tries to
-minimize the number of such "timestamping" calls (eg `gettimeofday')
+minimize the number of such "timestamping" calls (eg 'gettimeofday')
 calls it makes when in demo mode.  Rather than take a timestamp after
-each `send' or `recv' call completes netperf tries to guess how many
+each 'send' or 'recv' call completes netperf tries to guess how many
 units of work will be performed over the desired interval.  Only once
-that many units of work have been completed will netperf check the
-time.  If the reporting interval has passed, netperf will emit an
-"interim result."  If the interval has not passed, netperf will update
-its estimate for units and continue.
+that many units of work have been completed will netperf check the time.
+If the reporting interval has passed, netperf will emit an "interim
+result."  If the interval has not passed, netperf will update its
+estimate for units and continue.
 
    After a bit of thought one can see that if things "speed-up" netperf
 will still honor the interval.  However, if things "slow-down" netperf
@@ -2767,16 +2756,16 @@ File: netperf.info,  Node: Using Netperf to Measure Bidirectional Transfer,  Nex
 There are two ways to use netperf to measure the performance of
 bidirectional transfer.  The first is to run concurrent netperf tests
 from the command line.  The second is to configure netperf with
-`--enable-burst' and use a single instance of the *note TCP_RR: TCP_RR.
+'--enable-burst' and use a single instance of the *note TCP_RR: TCP_RR.
 test.
 
    While neither method is more "correct" than the other, each is doing
-so in different ways, and that has possible implications.  For
-instance, using the concurrent netperf test mechanism means that
-multiple TCP connections and multiple processes are involved, whereas
-using the single instance of TCP_RR there is only one TCP connection
-and one process on each end.  They may behave differently, especially
-on an MP system.
+so in different ways, and that has possible implications.  For instance,
+using the concurrent netperf test mechanism means that multiple TCP
+connections and multiple processes are involved, whereas using the
+single instance of TCP_RR there is only one TCP connection and one
+process on each end.  They may behave differently, especially on an MP
+system.
 
 * Menu:
 
@@ -2791,16 +2780,16 @@ File: netperf.info,  Node: Bidirectional Transfer with Concurrent Tests,  Next:
 ================================================
 
 If we had two hosts Fred and Ethel, we could simply run a netperf *note
-TCP_STREAM: TCP_STREAM. test on Fred pointing at Ethel, and a
-concurrent netperf TCP_STREAM test on Ethel pointing at Fred, but since
-there are no mechanisms to synchronize netperf tests and we would be
-starting tests from two different systems, there is a considerable risk
-of skew error.
+TCP_STREAM: TCP_STREAM. test on Fred pointing at Ethel, and a concurrent
+netperf TCP_STREAM test on Ethel pointing at Fred, but since there are
+no mechanisms to synchronize netperf tests and we would be starting
+tests from two different systems, there is a considerable risk of skew
+error.
 
    Far better would be to run simultaneous TCP_STREAM and *note
 TCP_MAERTS: TCP_MAERTS. tests from just one system, using the concepts
 and procedures outlined in *note Running Concurrent Netperf Tests:
-Running Concurrent Netperf Tests. Here then is an example:
+Running Concurrent Netperf Tests.  Here then is an example:
 
      for i in 1
      do
@@ -2813,14 +2802,14 @@ Running Concurrent Netperf Tests. Here then is an example:
       892.66 outbound
       891.34 inbound
 
-   We have used a `for' loop in the shell with just one iteration
+   We have used a 'for' loop in the shell with just one iteration
 because that will be much easier to get both tests started at more or
-less the same time than doing it by hand.  The global `-P' and `-v'
-options are used because we aren't interested in anything other than
-the throughput, and the global `-B' option is used to tag each output
-so we know which was inbound and which outbound relative to the system
-on which we were running netperf.  Of course that sense is switched on
-the system running netserver :)  The use of the global `-i' option is
+less the same time than doing it by hand.  The global '-P' and '-v'
+options are used because we aren't interested in anything other than the
+throughput, and the global '-B' option is used to tag each output so we
+know which was inbound and which outbound relative to the system on
+which we were running netperf.  Of course that sense is switched on the
+system running netserver :) The use of the global '-i' option is
 explained in *note Running Concurrent Netperf Tests: Running Concurrent
 Netperf Tests.
 
@@ -2845,14 +2834,14 @@ File: netperf.info,  Node: Bidirectional Transfer with TCP_RR,  Next: Implicatio
 8.2 Bidirectional Transfer with TCP_RR
 ======================================
 
-Starting with version 2.5.0 the `--enable-burst' configure option
-defaults to `yes', and starting some time before version 2.5.0 but
-after 2.4.0 the global `-f' option would affect the "throughput"
-reported by request/response tests.  If one uses the test-specific `-b'
-option to have several "transactions" in flight at one time and the
-test-specific `-r' option to increase their size, the test looks more
-and more like a single-connection bidirectional transfer than a simple
-request/response test.
+Starting with version 2.5.0 the '--enable-burst' configure option
+defaults to 'yes', and starting some time before version 2.5.0 but after
+2.4.0 the global '-f' option would affect the "throughput" reported by
+request/response tests.  If one uses the test-specific '-b' option to
+have several "transactions" in flight at one time and the test-specific
+'-r' option to increase their size, the test looks more and more like a
+single-connection bidirectional transfer than a simple request/response
+test.
 
    So, putting it all together one can do something like:
 
@@ -2870,17 +2859,17 @@ request/response test.
      Send   Recv    Send   Recv    usec/Tran  per sec  Outbound   Inbound
          8      0       0      0   2015.402   3473.252 910.492    910.492
 
-   to get a bidirectional bulk-throughput result. As one can see, the -v
-2 output will include a number of interesting, related values.
+   to get a bidirectional bulk-throughput result.  As one can see, the
+-v 2 output will include a number of interesting, related values.
 
-     NOTE: The logic behind `--enable-burst' is very simple, and there
-     are no calls to `poll()' or `select()' which means we want to make
-     sure that the `send()' calls will never block, or we run the risk
-     of deadlock with each side stuck trying to call `send()' and
-     neither calling `recv()'.
+     NOTE: The logic behind '--enable-burst' is very simple, and there
+     are no calls to 'poll()' or 'select()' which means we want to make
+     sure that the 'send()' calls will never block, or we run the risk
+     of deadlock with each side stuck trying to call 'send()' and
+     neither calling 'recv()'.
 
    Fortunately, this is easily accomplished by setting a "large enough"
-socket buffer size with the test-specific `-s' and `-S' options.
+socket buffer size with the test-specific '-s' and '-S' options.
 Presently this must be performed by the user.  Future versions of
 netperf might attempt to do this automagically, but there are some
 issues to be worked-out.
@@ -2899,13 +2888,13 @@ bidirectional performance.
 make use of the services of more than one or two CPUs at either end.
 Whether one or two CPUs will be used processing a flow will depend on
 the specifics of the stack(s) involved and whether or not the global
-`-T' option has been used to bind netperf/netserver to specific CPUs.
+'-T' option has been used to bind netperf/netserver to specific CPUs.
 
    When using concurrent tests there will be two concurrent connections
 or flows, which means that upwards of four CPUs will be employed
-processing the packets (global `-T' used, no more than two if not),
-however, with just a single, bidirectional request/response test no
-more than two CPUs will be employed (only one if the global `-T' is not
+processing the packets (global '-T' used, no more than two if not),
+however, with just a single, bidirectional request/response test no more
+than two CPUs will be employed (only one if the global '-T' is not
 used).
 
    If there is a CPU bottleneck on either system this may result in
@@ -2927,11 +2916,11 @@ File: netperf.info,  Node: The Omni Tests,  Next: Other Netperf Tests,  Prev: Us
 9 The Omni Tests
 ****************
 
-Beginning with version 2.5.0, netperf begins a migration to the `omni'
+Beginning with version 2.5.0, netperf begins a migration to the 'omni'
 tests or "Two routines to measure them all."  The code for the omni
-tests can be found in `src/nettest_omni.c' and the goal is to make it
-easier for netperf to support multiple protocols and report a great
-many additional things about the systems under test.  Additionally, a
+tests can be found in 'src/nettest_omni.c' and the goal is to make it
+easier for netperf to support multiple protocols and report a great many
+additional things about the systems under test.  Additionally, a
 flexible output selection mechanism is present which allows the user to
 chose specifically what values she wishes to have reported and in what
 format.
@@ -2942,7 +2931,7 @@ them, one must:
 
    and remake netperf.  Remaking netserver is optional because even in
 2.5.0 it has "unmigrated" netserver side routines for the classic (eg
-`src/nettest_bsd.c') tests.
+'src/nettest_bsd.c') tests.
 
 * Menu:
 
@@ -2956,29 +2945,27 @@ File: netperf.info,  Node: Native Omni Tests,  Next: Migrated Tests,  Prev: The
 9.1 Native Omni Tests
 =====================
 
-One access the omni tests "natively" by using a value of "OMNI" with
-the global `-t' test-selection option.  This will then cause netperf to
-use the code in `src/nettest_omni.c' and in particular the
-test-specific options parser for the omni tests.  The test-specific
-options for the omni tests are a superset of those for "classic" tests.
-The options added by the omni tests are:
+One access the omni tests "natively" by using a value of "OMNI" with the
+global '-t' test-selection option.  This will then cause netperf to use
+the code in 'src/nettest_omni.c' and in particular the test-specific
+options parser for the omni tests.  The test-specific options for the
+omni tests are a superset of those for "classic" tests.  The options
+added by the omni tests are:
 
-`-c'
+'-c'
      This explicitly declares that the test is to include connection
      establishment and tear-down as in either a TCP_CRR or TCP_CC test.
 
-`-d <direction>'
+'-d <direction>'
      This option sets the direction of the test relative to the netperf
      process.  As of version 2.5.0 one can use the following in a
      case-insensitive manner:
 
-    `send, stream, transmit, xmit or 2'
+     'send, stream, transmit, xmit or 2'
           Any of which will cause netperf to send to the netserver.
-
-    `recv, receive, maerts or 4'
+     'recv, receive, maerts or 4'
           Any of which will cause netserver to send to netperf.
-
-    `rr or 6'
+     'rr or 6'
           Either of which will cause a request/response test.
 
      Additionally, one can specify two directions separated by a '|'
@@ -2987,7 +2974,7 @@ The options added by the omni tests are:
      Output Selectors. *note output selector: Omni Output Selection.
      when used with a request/response test.
 
-`-k [*note output selector: Omni Output Selection.]'
+'-k [*note output selector: Omni Output Selection.]'
      This option sets the style of output to "keyval" where each line of
      output has the form:
           key=value
@@ -2997,22 +2984,22 @@ The options added by the omni tests are:
           THROUGHPUT=59092.65
           THROUGHPUT_UNITS=Trans/s
 
-     Using the `-k' option will override any previous, test-specific
-     `-o' or `-O' option.
+     Using the '-k' option will override any previous, test-specific
+     '-o' or '-O' option.
 
-`-o [*note output selector: Omni Output Selection.]'
+'-o [*note output selector: Omni Output Selection.]'
      This option sets the style of output to "CSV" where there will be
      one line of comma-separated values, preceded by one line of column
-     names unless the global `-P' option is used with a value of 0:
+     names unless the global '-P' option is used with a value of 0:
           $ netperf -t omni -- -d rr -o "THROUGHPUT,THROUGHPUT_UNITS"
           OMNI TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to localhost.localdomain (127.0.0.1) port 0 AF_INET : demo
           Throughput,Throughput Units
           60999.07,Trans/s
 
-     Using the `-o' option will override any previous, test-specific
-     `-k' or `-O' option.
+     Using the '-o' option will override any previous, test-specific
+     '-k' or '-O' option.
 
-`-O [*note output selector: Omni Output Selection.]'
+'-O [*note output selector: Omni Output Selection.]'
      This option sets the style of output to "human readable" which will
      look quite similar to classic netperf output:
           $ netperf -t omni -- -d rr -O "THROUGHPUT,THROUGHPUT_UNITS"
@@ -3023,34 +3010,29 @@ The options added by the omni tests are:
 
           60492.57   Trans/s
 
-     Using the `-O' option will override any previous, test-specific
-     `-k' or `-o' option.
+     Using the '-O' option will override any previous, test-specific
+     '-k' or '-o' option.
 
-`-t'
+'-t'
      This option explicitly sets the socket type for the test's data
-     connection. As of version 2.5.0 the known socket types include
+     connection.  As of version 2.5.0 the known socket types include
      "stream" and "dgram" for SOCK_STREAM and SOCK_DGRAM respectively.
 
-`-T <protocol>'
+'-T <protocol>'
      This option is used to explicitly set the protocol used for the
-     test. It is case-insensitive. As of version 2.5.0 the protocols
+     test.  It is case-insensitive.  As of version 2.5.0 the protocols
      known to netperf include:
-    `TCP'
+     'TCP'
           Select the Transmission Control Protocol
-
-    `UDP'
+     'UDP'
           Select the User Datagram Protocol
-
-    `SDP'
+     'SDP'
           Select the Sockets Direct Protocol
-
-    `DCCP'
+     'DCCP'
           Select the Datagram Congestion Control Protocol
-
-    `SCTP'
+     'SCTP'
           Select the Stream Control Transport Protocol
-
-    `udplite'
+     'udplite'
           Select UDP Lite
 
      The default is implicit based on other settings.
@@ -3058,12 +3040,12 @@ The options added by the omni tests are:
    The omni tests also extend the interpretation of some of the classic,
 test-specific options for the BSD Sockets tests:
 
-`-m <optionspec>'
+'-m <optionspec>'
      This can set the send size for either or both of the netperf and
      netserver sides of the test:
           -m 32K
      sets only the netperf-side send size to 32768 bytes, and or's-in
-     transmit for the direction. This is effectively the same behaviour
+     transmit for the direction.  This is effectively the same behaviour
      as for the classic tests.
           -m ,32K
      sets only the netserver side send size to 32768 bytes and or's-in
@@ -3071,8 +3053,7 @@ test-specific options for the BSD Sockets tests:
           -m 16K,32K
           sets the netperf side send size to 16284 bytes, the netserver side
           send size to 32768 bytes and the direction will be "Send|Recv."
-
-`-M <optionspec>'
+'-M <optionspec>'
      This can set the receive size for either or both of the netperf and
      netserver sides of the test:
           -M 32K
@@ -3093,7 +3074,7 @@ File: netperf.info,  Node: Migrated Tests,  Next: Omni Output Selection,  Prev:
 ==================
 
 As of version 2.5.0 several tests have been migrated to use the omni
-code in `src/nettest_omni.c' for the core of their testing.  A migrated
+code in 'src/nettest_omni.c' for the core of their testing.  A migrated
 test retains all its previous output code and so should still "look and
 feel" just like a pre-2.5.0 test with one exception - the first line of
 the test banners will include the word "MIGRATED" at the beginning as
@@ -3110,23 +3091,18 @@ in:
 
    The tests migrated in version 2.5.0 are:
    * TCP_STREAM
-
    * TCP_MAERTS
-
    * TCP_RR
-
    * TCP_CRR
-
    * UDP_STREAM
-
    * UDP_RR
 
    It is expected that future releases will have additional tests
 migrated to use the "omni" functionality.
 
-   If one uses "omni-specific" test-specific options in conjunction
-with a migrated test, instead of using the classic output code, the new
-omni output code will be used. For example if one uses the `-k'
+   If one uses "omni-specific" test-specific options in conjunction with
+a migrated test, instead of using the classic output code, the new omni
+output code will be used.  For example if one uses the '-k'
 test-specific option with a value of "MIN_LATENCY,MAX_LATENCY" with a
 migrated TCP_RR test one will see:
 
@@ -3151,60 +3127,56 @@ File: netperf.info,  Node: Omni Output Selection,  Prev: Migrated Tests,  Up: Th
 9.3 Omni Output Selection
 =========================
 
-The omni test-specific `-k', `-o' and `-O' options take an optional
-`output selector' by which the user can configure what values are
+The omni test-specific '-k', '-o' and '-O' options take an optional
+'output selector' by which the user can configure what values are
 reported.  The output selector can take several forms:
 
-``filename''
-     The output selections will be read from the named file. Within the
+'filename'
+     The output selections will be read from the named file.  Within the
      file there can be up to four lines of comma-separated output
-     selectors. This controls how many multi-line blocks of output are
-     emitted when the `-O' option is used.  This output, while not
-     identical to "classic" netperf output, is inspired by it.
-     Multiple lines have no effect for `-k' and `-o' options.  Putting
-     output selections in a file can be useful when the list of
-     selections is long.
-
-`comma and/or semi-colon-separated list'
+     selectors.  This controls how many multi-line blocks of output are
+     emitted when the '-O' option is used.  This output, while not
+     identical to "classic" netperf output, is inspired by it.  Multiple
+     lines have no effect for '-k' and '-o' options.  Putting output
+     selections in a file can be useful when the list of selections is
+     long.
+'comma and/or semi-colon-separated list'
      The output selections will be parsed from a comma and/or
-     semi-colon-separated list of output selectors. When the list is
-     given to a `-O' option a semi-colon specifies a new output block
+     semi-colon-separated list of output selectors.  When the list is
+     given to a '-O' option a semi-colon specifies a new output block
      should be started.  Semi-colons have the same meaning as commas
-     when used with the `-k' or `-o' options.  Depending on the command
+     when used with the '-k' or '-o' options.  Depending on the command
      interpreter being used, the semi-colon may have to be escaped
      somehow to keep it from being interpreted by the command
      interpreter.  This can often be done by enclosing the entire list
      in quotes.
-
-`all'
+'all'
      If the keyword all is specified it means that all known output
      values should be displayed at the end of the test.  This can be a
      great deal of output.  As of version 2.5.0 there are 157 different
      output selectors.
-
-`?'
-     If a "?" is given as the output selection, the list of all known
+'?'
+     If a "?"  is given as the output selection, the list of all known
      output selectors will be displayed and no test actually run.  When
-     passed to the `-O' option they will be listed one per line.
-     Otherwise they will be listed as a comma-separated list.  It may
-     be necessary to protect the "?" from the command interpreter by
+     passed to the '-O' option they will be listed one per line.
+     Otherwise they will be listed as a comma-separated list.  It may be
+     necessary to protect the "?"  from the command interpreter by
      escaping it or enclosing it in quotes.
-
-`no selector'
-     If nothing is given to the `-k', `-o' or `-O' option then the code
+'no selector'
+     If nothing is given to the '-k', '-o' or '-O' option then the code
      selects a default set of output selectors inspired by classic
-     netperf output. The format will be the `human readable' format
-     emitted by the test-specific `-O' option.
+     netperf output.  The format will be the 'human readable' format
+     emitted by the test-specific '-O' option.
 
    The order of evaluation will first check for an output selection.  If
-none is specified with the `-k', `-o' or `-O' option netperf will
-select a default based on the characteristics of the test.  If there is
-an output selection, the code will first check for `?', then check to
-see if it is the magic `all' keyword.  After that it will check for
-either `,' or `;' in the selection and take that to mean it is a comma
-and/or semi-colon-separated list. If none of those checks match,
-netperf will then assume the output specification is a filename and
-attempt to open and parse the file.
+none is specified with the '-k', '-o' or '-O' option netperf will select
+a default based on the characteristics of the test.  If there is an
+output selection, the code will first check for '?', then check to see
+if it is the magic 'all' keyword.  After that it will check for either
+',' or ';' in the selection and take that to mean it is a comma and/or
+semi-colon-separated list.  If none of those checks match, netperf will
+then assume the output specification is a filename and attempt to open
+and parse the file.
 
 * Menu:
 
@@ -3218,781 +3190,624 @@ File: netperf.info,  Node: Omni Output Selectors,  Prev: Omni Output Selection,
 
 As of version 2.5.0 the output selectors are:
 
-`OUTPUT_NONE'
-     This is essentially a null output.  For `-k' output it will simply
-     add a line that reads "OUTPUT_NONE=" to the output. For `-o' it
-     will cause an empty "column" to be included. For `-O' output it
+'OUTPUT_NONE'
+     This is essentially a null output.  For '-k' output it will simply
+     add a line that reads "OUTPUT_NONE=" to the output.  For '-o' it
+     will cause an empty "column" to be included.  For '-O' output it
      will cause extra spaces to separate "real" output.
-
-`SOCKET_TYPE'
+'SOCKET_TYPE'
      This will cause the socket type (eg SOCK_STREAM, SOCK_DGRAM) for
      the data connection to be output.
-
-`PROTOCOL'
+'PROTOCOL'
      This will cause the protocol used for the data connection to be
      displayed.
-
-`DIRECTION'
+'DIRECTION'
      This will display the data flow direction relative to the netperf
-     process. Units: Send or Recv for a unidirectional bulk-transfer
+     process.  Units: Send or Recv for a unidirectional bulk-transfer
      test, or Send|Recv for a request/response test.
-
-`ELAPSED_TIME'
+'ELAPSED_TIME'
      This will display the elapsed time in seconds for the test.
-
-`THROUGHPUT'
-     This will display the throughput for the test. Units: As requested
-     via the global `-f' option and displayed by the THROUGHPUT_UNITS
+'THROUGHPUT'
+     This will display the throughput for the test.  Units: As requested
+     via the global '-f' option and displayed by the THROUGHPUT_UNITS
      output selector.
-
-`THROUGHPUT_UNITS'
+'THROUGHPUT_UNITS'
      This will display the units for what is displayed by the
-     `THROUGHPUT' output selector.
-
-`LSS_SIZE_REQ'
+     'THROUGHPUT' output selector.
+'LSS_SIZE_REQ'
      This will display the local (netperf) send socket buffer size (aka
-     SO_SNDBUF) requested via the command line. Units: Bytes.
-
-`LSS_SIZE'
+     SO_SNDBUF) requested via the command line.  Units: Bytes.
+'LSS_SIZE'
      This will display the local (netperf) send socket buffer size
      (SO_SNDBUF) immediately after the data connection socket was
      created.  Peculiarities of different networking stacks may lead to
      this differing from the size requested via the command line.
      Units: Bytes.
-
-`LSS_SIZE_END'
+'LSS_SIZE_END'
      This will display the local (netperf) send socket buffer size
      (SO_SNDBUF) immediately before the data connection socket is
-     closed.  Peculiarities of different networking stacks may lead
-     this to differ from the size requested via the command line and/or
-     the size immediately after the data connection socket was created.
+     closed.  Peculiarities of different networking stacks may lead this
+     to differ from the size requested via the command line and/or the
+     size immediately after the data connection socket was created.
      Units: Bytes.
-
-`LSR_SIZE_REQ'
+'LSR_SIZE_REQ'
      This will display the local (netperf) receive socket buffer size
-     (aka SO_RCVBUF) requested via the command line. Units: Bytes.
-
-`LSR_SIZE'
+     (aka SO_RCVBUF) requested via the command line.  Units: Bytes.
+'LSR_SIZE'
      This will display the local (netperf) receive socket buffer size
      (SO_RCVBUF) immediately after the data connection socket was
      created.  Peculiarities of different networking stacks may lead to
      this differing from the size requested via the command line.
      Units: Bytes.
-
-`LSR_SIZE_END'
+'LSR_SIZE_END'
      This will display the local (netperf) receive socket buffer size
      (SO_RCVBUF) immediately before the data connection socket is
-     closed.  Peculiarities of different networking stacks may lead
-     this to differ from the size requested via the command line and/or
-     the size immediately after the data connection socket was created.
+     closed.  Peculiarities of different networking stacks may lead this
+     to differ from the size requested via the command line and/or the
+     size immediately after the data connection socket was created.
      Units: Bytes.
-
-`RSS_SIZE_REQ'
+'RSS_SIZE_REQ'
      This will display the remote (netserver) send socket buffer size
-     (aka SO_SNDBUF) requested via the command line. Units: Bytes.
-
-`RSS_SIZE'
+     (aka SO_SNDBUF) requested via the command line.  Units: Bytes.
+'RSS_SIZE'
      This will display the remote (netserver) send socket buffer size
      (SO_SNDBUF) immediately after the data connection socket was
      created.  Peculiarities of different networking stacks may lead to
      this differing from the size requested via the command line.
      Units: Bytes.
-
-`RSS_SIZE_END'
+'RSS_SIZE_END'
      This will display the remote (netserver) send socket buffer size
      (SO_SNDBUF) immediately before the data connection socket is
-     closed.  Peculiarities of different networking stacks may lead
-     this to differ from the size requested via the command line and/or
-     the size immediately after the data connection socket was created.
+     closed.  Peculiarities of different networking stacks may lead this
+     to differ from the size requested via the command line and/or the
+     size immediately after the data connection socket was created.
      Units: Bytes.
-
-`RSR_SIZE_REQ'
-     This will display the remote (netserver) receive socket buffer
-     size (aka SO_RCVBUF) requested via the command line. Units: Bytes.
-
-`RSR_SIZE'
+'RSR_SIZE_REQ'
+     This will display the remote (netserver) receive socket buffer size
+     (aka SO_RCVBUF) requested via the command line.  Units: Bytes.
+'RSR_SIZE'
      This will display the remote (netserver) receive socket buffer size
      (SO_RCVBUF) immediately after the data connection socket was
      created.  Peculiarities of different networking stacks may lead to
      this differing from the size requested via the command line.
      Units: Bytes.
-
-`RSR_SIZE_END'
+'RSR_SIZE_END'
      This will display the remote (netserver) receive socket buffer size
      (SO_RCVBUF) immediately before the data connection socket is
-     closed.  Peculiarities of different networking stacks may lead
-     this to differ from the size requested via the command line and/or
-     the size immediately after the data connection socket was created.
+     closed.  Peculiarities of different networking stacks may lead this
+     to differ from the size requested via the command line and/or the
+     size immediately after the data connection socket was created.
      Units: Bytes.
-
-`LOCAL_SEND_SIZE'
+'LOCAL_SEND_SIZE'
      This will display the size of the buffers netperf passed in any
      "send" calls it made on the data connection for a
-     non-request/response test. Units: Bytes.
-
-`LOCAL_RECV_SIZE'
+     non-request/response test.  Units: Bytes.
+'LOCAL_RECV_SIZE'
      This will display the size of the buffers netperf passed in any
      "receive" calls it made on the data connection for a
-     non-request/response test. Units: Bytes.
-
-`REMOTE_SEND_SIZE'
+     non-request/response test.  Units: Bytes.
+'REMOTE_SEND_SIZE'
      This will display the size of the buffers netserver passed in any
      "send" calls it made on the data connection for a
-     non-request/response test. Units: Bytes.
-
-`REMOTE_RECV_SIZE'
+     non-request/response test.  Units: Bytes.
+'REMOTE_RECV_SIZE'
      This will display the size of the buffers netserver passed in any
      "receive" calls it made on the data connection for a
-     non-request/response test. Units: Bytes.
-
-`REQUEST_SIZE'
+     non-request/response test.  Units: Bytes.
+'REQUEST_SIZE'
      This will display the size of the requests netperf sent in a
-     request-response test. Units: Bytes.
-
-`RESPONSE_SIZE'
+     request-response test.  Units: Bytes.
+'RESPONSE_SIZE'
      This will display the size of the responses netserver sent in a
-     request-response test. Units: Bytes.
-
-`LOCAL_CPU_UTIL'
+     request-response test.  Units: Bytes.
+'LOCAL_CPU_UTIL'
      This will display the overall CPU utilization during the test as
-     measured by netperf. Units: 0 to 100 percent.
-
-`LOCAL_CPU_PERCENT_USER'
+     measured by netperf.  Units: 0 to 100 percent.
+'LOCAL_CPU_PERCENT_USER'
      This will display the CPU fraction spent in user mode during the
-     test as measured by netperf. Only supported by netcpu_procstat.
+     test as measured by netperf.  Only supported by netcpu_procstat.
      Units: 0 to 100 percent.
-
-`LOCAL_CPU_PERCENT_SYSTEM'
+'LOCAL_CPU_PERCENT_SYSTEM'
      This will display the CPU fraction spent in system mode during the
-     test as measured by netperf. Only supported by netcpu_procstat.
+     test as measured by netperf.  Only supported by netcpu_procstat.
      Units: 0 to 100 percent.
-
-`LOCAL_CPU_PERCENT_IOWAIT'
+'LOCAL_CPU_PERCENT_IOWAIT'
      This will display the fraction of time waiting for I/O to complete
-     during the test as measured by netperf. Only supported by
-     netcpu_procstat. Units: 0 to 100 percent.
-
-`LOCAL_CPU_PERCENT_IRQ'
+     during the test as measured by netperf.  Only supported by
+     netcpu_procstat.  Units: 0 to 100 percent.
+'LOCAL_CPU_PERCENT_IRQ'
      This will display the fraction of time servicing interrupts during
-     the test as measured by netperf. Only supported by
-     netcpu_procstat. Units: 0 to 100 percent.
-
-`LOCAL_CPU_PERCENT_SWINTR'
+     the test as measured by netperf.  Only supported by
+     netcpu_procstat.  Units: 0 to 100 percent.
+'LOCAL_CPU_PERCENT_SWINTR'
      This will display the fraction of time servicing softirqs during
-     the test as measured by netperf. Only supported by
-     netcpu_procstat. Units: 0 to 100 percent.
-
-`LOCAL_CPU_METHOD'
+     the test as measured by netperf.  Only supported by
+     netcpu_procstat.  Units: 0 to 100 percent.
+'LOCAL_CPU_METHOD'
      This will display the method used by netperf to measure CPU
-     utilization. Units: single character denoting method.
-
-`LOCAL_SD'
+     utilization.  Units: single character denoting method.
+'LOCAL_SD'
      This will display the service demand, or units of CPU consumed per
-     unit of work, as measured by netperf. Units: microseconds of CPU
+     unit of work, as measured by netperf.  Units: microseconds of CPU
      consumed per either KB (K==1024) of data transferred or
      request/response transaction.
-
-`REMOTE_CPU_UTIL'
+'REMOTE_CPU_UTIL'
      This will display the overall CPU utilization during the test as
-     measured by netserver. Units 0 to 100 percent.
-
-`REMOTE_CPU_PERCENT_USER'
+     measured by netserver.  Units 0 to 100 percent.
+'REMOTE_CPU_PERCENT_USER'
      This will display the CPU fraction spent in user mode during the
-     test as measured by netserver. Only supported by netcpu_procstat.
+     test as measured by netserver.  Only supported by netcpu_procstat.
      Units: 0 to 100 percent.
-
-`REMOTE_CPU_PERCENT_SYSTEM'
+'REMOTE_CPU_PERCENT_SYSTEM'
      This will display the CPU fraction spent in system mode during the
-     test as measured by netserver. Only supported by netcpu_procstat.
+     test as measured by netserver.  Only supported by netcpu_procstat.
      Units: 0 to 100 percent.
-
-`REMOTE_CPU_PERCENT_IOWAIT'
+'REMOTE_CPU_PERCENT_IOWAIT'
      This will display the fraction of time waiting for I/O to complete
-     during the test as measured by netserver. Only supported by
-     netcpu_procstat. Units: 0 to 100 percent.
-
-`REMOTE_CPU_PERCENT_IRQ'
+     during the test as measured by netserver.  Only supported by
+     netcpu_procstat.  Units: 0 to 100 percent.
+'REMOTE_CPU_PERCENT_IRQ'
      This will display the fraction of time servicing interrupts during
-     the test as measured by netserver. Only supported by
-     netcpu_procstat. Units: 0 to 100 percent.
-
-`REMOTE_CPU_PERCENT_SWINTR'
+     the test as measured by netserver.  Only supported by
+     netcpu_procstat.  Units: 0 to 100 percent.
+'REMOTE_CPU_PERCENT_SWINTR'
      This will display the fraction of time servicing softirqs during
-     the test as measured by netserver. Only supported by
-     netcpu_procstat. Units: 0 to 100 percent.
-
-`REMOTE_CPU_METHOD'
+     the test as measured by netserver.  Only supported by
+     netcpu_procstat.  Units: 0 to 100 percent.
+'REMOTE_CPU_METHOD'
      This will display the method used by netserver to measure CPU
-     utilization. Units: single character denoting method.
-
-`REMOTE_SD'
+     utilization.  Units: single character denoting method.
+'REMOTE_SD'
      This will display the service demand, or units of CPU consumed per
-     unit of work, as measured by netserver. Units: microseconds of CPU
+     unit of work, as measured by netserver.  Units: microseconds of CPU
      consumed per either KB (K==1024) of data transferred or
      request/response transaction.
-
-`SD_UNITS'
+'SD_UNITS'
      This will display the units for LOCAL_SD and REMOTE_SD
-
-`CONFIDENCE_LEVEL'
+'CONFIDENCE_LEVEL'
      This will display the confidence level requested by the user either
-     explicitly via the global `-I' option, or implicitly via the
-     global `-i' option.  The value will be either 95 or 99 if
-     confidence intervals have been requested or 0 if they were not.
-     Units: Percent
-
-`CONFIDENCE_INTERVAL'
+     explicitly via the global '-I' option, or implicitly via the global
+     '-i' option.  The value will be either 95 or 99 if confidence
+     intervals have been requested or 0 if they were not.  Units:
+     Percent
+'CONFIDENCE_INTERVAL'
      This will display the width of the confidence interval requested
-     either explicitly via the global `-I' option or implicitly via the
-     global `-i' option.  Units: Width in percent of mean value
-     computed. A value of -1.0 means that confidence intervals were not
+     either explicitly via the global '-I' option or implicitly via the
+     global '-i' option.  Units: Width in percent of mean value
+     computed.  A value of -1.0 means that confidence intervals were not
      requested.
-
-`CONFIDENCE_ITERATION'
+'CONFIDENCE_ITERATION'
      This will display the number of test iterations netperf undertook,
      perhaps while attempting to achieve the requested confidence
-     interval and level. If confidence intervals were requested via the
+     interval and level.  If confidence intervals were requested via the
      command line then the value will be between 3 and 30.  If
      confidence intervals were not requested the value will be 1.
      Units: Iterations
-
-`THROUGHPUT_CONFID'
+'THROUGHPUT_CONFID'
      This will display the width of the confidence interval actually
-     achieved for `THROUGHPUT' during the test.  Units: Width of
+     achieved for 'THROUGHPUT' during the test.  Units: Width of
      interval as percentage of reported throughput value.
-
-`LOCAL_CPU_CONFID'
+'LOCAL_CPU_CONFID'
      This will display the width of the confidence interval actually
      achieved for overall CPU utilization on the system running netperf
-     (`LOCAL_CPU_UTIL') during the test, if CPU utilization measurement
+     ('LOCAL_CPU_UTIL') during the test, if CPU utilization measurement
      was enabled.  Units: Width of interval as percentage of reported
      CPU utilization.
-
-`REMOTE_CPU_CONFID'
+'REMOTE_CPU_CONFID'
      This will display the width of the confidence interval actually
      achieved for overall CPU utilization on the system running
-     netserver (`REMOTE_CPU_UTIL') during the test, if CPU utilization
-     measurement was enabled. Units: Width of interval as percentage of
+     netserver ('REMOTE_CPU_UTIL') during the test, if CPU utilization
+     measurement was enabled.  Units: Width of interval as percentage of
      reported CPU utilization.
-
-`TRANSACTION_RATE'
+'TRANSACTION_RATE'
      This will display the transaction rate in transactions per second
      for a request/response test even if the user has requested a
-     throughput in units of bits or bytes per second via the global `-f'
-     option. It is undefined for a non-request/response test. Units:
+     throughput in units of bits or bytes per second via the global '-f'
+     option.  It is undefined for a non-request/response test.  Units:
      Transactions per second.
-
-`RT_LATENCY'
+'RT_LATENCY'
      This will display the average round-trip latency for a
      request/response test, accounting for number of transactions in
-     flight at one time. It is undefined for a non-request/response
-     test. Units: Microseconds per transaction
-
-`BURST_SIZE'
+     flight at one time.  It is undefined for a non-request/response
+     test.  Units: Microseconds per transaction
+'BURST_SIZE'
      This will display the "burst size" or added transactions in flight
-     in a request/response test as requested via a test-specific `-b'
+     in a request/response test as requested via a test-specific '-b'
      option.  The number of transactions in flight at one time will be
      one greater than this value.  It is undefined for a
-     non-request/response test. Units: added Transactions in flight.
-
-`LOCAL_TRANSPORT_RETRANS'
+     non-request/response test.  Units: added Transactions in flight.
+'LOCAL_TRANSPORT_RETRANS'
      This will display the number of retransmissions experienced on the
      data connection during the test as determined by netperf.  A value
      of -1 means the attempt to determine the number of retransmissions
      failed or the concept was not valid for the given protocol or the
-     mechanism is not known for the platform. A value of -2 means it
-     was not attempted. As of version 2.5.0 the meaning of values are
+     mechanism is not known for the platform.  A value of -2 means it
+     was not attempted.  As of version 2.5.0 the meaning of values are
      in flux and subject to change.  Units: number of retransmissions.
-
-`REMOTE_TRANSPORT_RETRANS'
+'REMOTE_TRANSPORT_RETRANS'
      This will display the number of retransmissions experienced on the
      data connection during the test as determined by netserver.  A
      value of -1 means the attempt to determine the number of
      retransmissions failed or the concept was not valid for the given
-     protocol or the mechanism is not known for the platform. A value
-     of -2 means it was not attempted. As of version 2.5.0 the meaning
+     protocol or the mechanism is not known for the platform.  A value
+     of -2 means it was not attempted.  As of version 2.5.0 the meaning
      of values are in flux and subject to change.  Units: number of
      retransmissions.
-
-`TRANSPORT_MSS'
+'TRANSPORT_MSS'
      This will display the Maximum Segment Size (aka MSS) or its
-     equivalent for the protocol being used during the test.  A value
-     of -1 means either the concept of an MSS did not apply to the
-     protocol being used, or there was an error in retrieving it.
-     Units: Bytes.
-
-`LOCAL_SEND_THROUGHPUT'
+     equivalent for the protocol being used during the test.  A value of
+     -1 means either the concept of an MSS did not apply to the protocol
+     being used, or there was an error in retrieving it.  Units: Bytes.
+'LOCAL_SEND_THROUGHPUT'
      The throughput as measured by netperf for the successful "send"
-     calls it made on the data connection. Units: as requested via the
-     global `-f' option and displayed via the `THROUGHPUT_UNITS' output
+     calls it made on the data connection.  Units: as requested via the
+     global '-f' option and displayed via the 'THROUGHPUT_UNITS' output
      selector.
-
-`LOCAL_RECV_THROUGHPUT'
+'LOCAL_RECV_THROUGHPUT'
      The throughput as measured by netperf for the successful "receive"
-     calls it made on the data connection. Units: as requested via the
-     global `-f' option and displayed via the `THROUGHPUT_UNITS' output
+     calls it made on the data connection.  Units: as requested via the
+     global '-f' option and displayed via the 'THROUGHPUT_UNITS' output
      selector.
-
-`REMOTE_SEND_THROUGHPUT'
+'REMOTE_SEND_THROUGHPUT'
      The throughput as measured by netserver for the successful "send"
-     calls it made on the data connection. Units: as requested via the
-     global `-f' option and displayed via the `THROUGHPUT_UNITS' output
+     calls it made on the data connection.  Units: as requested via the
+     global '-f' option and displayed via the 'THROUGHPUT_UNITS' output
      selector.
-
-`REMOTE_RECV_THROUGHPUT'
+'REMOTE_RECV_THROUGHPUT'
      The throughput as measured by netserver for the successful
-     "receive" calls it made on the data connection. Units: as
-     requested via the global `-f' option and displayed via the
-     `THROUGHPUT_UNITS' output selector.
-
-`LOCAL_CPU_BIND'
-     The CPU to which netperf was bound, if at all, during the test. A
+     "receive" calls it made on the data connection.  Units: as
+     requested via the global '-f' option and displayed via the
+     'THROUGHPUT_UNITS' output selector.
+'LOCAL_CPU_BIND'
+     The CPU to which netperf was bound, if at all, during the test.  A
      value of -1 means that netperf was not explicitly bound to a CPU
-     during the test. Units: CPU ID
-
-`LOCAL_CPU_COUNT'
-     The number of CPUs (cores, threads) detected by netperf. Units:
+     during the test.  Units: CPU ID
+'LOCAL_CPU_COUNT'
+     The number of CPUs (cores, threads) detected by netperf.  Units:
      CPU count.
-
-`LOCAL_CPU_PEAK_UTIL'
+'LOCAL_CPU_PEAK_UTIL'
      The utilization of the CPU most heavily utilized during the test,
-     as measured by netperf. This can be used to see if any one CPU of a
-     multi-CPU system was saturated even though the overall CPU
-     utilization as reported by `LOCAL_CPU_UTIL' was low. Units: 0 to
+     as measured by netperf.  This can be used to see if any one CPU of
+     a multi-CPU system was saturated even though the overall CPU
+     utilization as reported by 'LOCAL_CPU_UTIL' was low.  Units: 0 to
      100%
-
-`LOCAL_CPU_PEAK_ID'
+'LOCAL_CPU_PEAK_ID'
      The id of the CPU most heavily utilized during the test as
-     determined by netperf. Units: CPU ID.
-
-`LOCAL_CPU_MODEL'
+     determined by netperf.  Units: CPU ID.
+'LOCAL_CPU_MODEL'
      Model information for the processor(s) present on the system
-     running netperf. Assumes all processors in the system (as
+     running netperf.  Assumes all processors in the system (as
      perceived by netperf) on which netperf is running are the same
-     model. Units: Text
-
-`LOCAL_CPU_FREQUENCY'
+     model.  Units: Text
+'LOCAL_CPU_FREQUENCY'
      The frequency of the processor(s) on the system running netperf, at
      the time netperf made the call.  Assumes that all processors
      present in the system running netperf are running at the same
-     frequency. Units: MHz
-
-`REMOTE_CPU_BIND'
-     The CPU to which netserver was bound, if at all, during the test. A
-     value of -1 means that netperf was not explicitly bound to a CPU
-     during the test. Units: CPU ID
-
-`REMOTE_CPU_COUNT'
-     The number of CPUs (cores, threads) detected by netserver. Units:
+     frequency.  Units: MHz
+'REMOTE_CPU_BIND'
+     The CPU to which netserver was bound, if at all, during the test.
+     A value of -1 means that netperf was not explicitly bound to a CPU
+     during the test.  Units: CPU ID
+'REMOTE_CPU_COUNT'
+     The number of CPUs (cores, threads) detected by netserver.  Units:
      CPU count.
-
-`REMOTE_CPU_PEAK_UTIL'
+'REMOTE_CPU_PEAK_UTIL'
      The utilization of the CPU most heavily utilized during the test,
-     as measured by netserver. This can be used to see if any one CPU
+     as measured by netserver.  This can be used to see if any one CPU
      of a multi-CPU system was saturated even though the overall CPU
-     utilization as reported by `REMOTE_CPU_UTIL' was low. Units: 0 to
+     utilization as reported by 'REMOTE_CPU_UTIL' was low.  Units: 0 to
      100%
-
-`REMOTE_CPU_PEAK_ID'
+'REMOTE_CPU_PEAK_ID'
      The id of the CPU most heavily utilized during the test as
-     determined by netserver. Units: CPU ID.
-
-`REMOTE_CPU_MODEL'
+     determined by netserver.  Units: CPU ID.
+'REMOTE_CPU_MODEL'
      Model information for the processor(s) present on the system
-     running netserver. Assumes all processors in the system (as
+     running netserver.  Assumes all processors in the system (as
      perceived by netserver) on which netserver is running are the same
-     model. Units: Text
-
-`REMOTE_CPU_FREQUENCY'
+     model.  Units: Text
+'REMOTE_CPU_FREQUENCY'
      The frequency of the processor(s) on the system running netserver,
      at the time netserver made the call.  Assumes that all processors
      present in the system running netserver are running at the same
-     frequency. Units: MHz
-
-`SOURCE_PORT'
+     frequency.  Units: MHz
+'SOURCE_PORT'
      The port ID/service name to which the data socket created by
      netperf was bound.  A value of 0 means the data socket was not
-     explicitly bound to a port number. Units: ASCII text.
-
-`SOURCE_ADDR'
+     explicitly bound to a port number.  Units: ASCII text.
+'SOURCE_ADDR'
      The name/address to which the data socket created by netperf was
-     bound. A value of 0.0.0.0 means the data socket was not explicitly
-     bound to an address. Units: ASCII text.
-
-`SOURCE_FAMILY'
+     bound.  A value of 0.0.0.0 means the data socket was not explicitly
+     bound to an address.  Units: ASCII text.
+'SOURCE_FAMILY'
      The address family to which the data socket created by netperf was
-     bound.  A value of 0 means the data socket was not explicitly
-     bound to a given address family. Units: ASCII text.
-
-`DEST_PORT'
+     bound.  A value of 0 means the data socket was not explicitly bound
+     to a given address family.  Units: ASCII text.
+'DEST_PORT'
      The port ID to which the data socket created by netserver was
-     bound. A value of 0 means the data socket was not explicitly bound
+     bound.  A value of 0 means the data socket was not explicitly bound
      to a port number.  Units: ASCII text.
-
-`DEST_ADDR'
+'DEST_ADDR'
      The name/address of the data socket created by netserver.  Units:
      ASCII text.
-
-`DEST_FAMILY'
+'DEST_FAMILY'
      The address family to which the data socket created by netserver
-     was bound. A value of 0 means the data socket was not explicitly
-     bound to a given address family. Units: ASCII text.
-
-`LOCAL_SEND_CALLS'
+     was bound.  A value of 0 means the data socket was not explicitly
+     bound to a given address family.  Units: ASCII text.
+'LOCAL_SEND_CALLS'
      The number of successful "send" calls made by netperf against its
-     data socket. Units: Calls.
-
-`LOCAL_RECV_CALLS'
+     data socket.  Units: Calls.
+'LOCAL_RECV_CALLS'
      The number of successful "receive" calls made by netperf against
-     its data socket. Units: Calls.
-
-`LOCAL_BYTES_PER_RECV'
+     its data socket.  Units: Calls.
+'LOCAL_BYTES_PER_RECV'
      The average number of bytes per "receive" call made by netperf
-     against its data socket. Units: Bytes.
-
-`LOCAL_BYTES_PER_SEND'
+     against its data socket.  Units: Bytes.
+'LOCAL_BYTES_PER_SEND'
      The average number of bytes per "send" call made by netperf against
-     its data socket. Units: Bytes.
-
-`LOCAL_BYTES_SENT'
+     its data socket.  Units: Bytes.
+'LOCAL_BYTES_SENT'
      The number of bytes successfully sent by netperf through its data
-     socket. Units: Bytes.
-
-`LOCAL_BYTES_RECVD'
+     socket.  Units: Bytes.
+'LOCAL_BYTES_RECVD'
      The number of bytes successfully received by netperf through its
-     data socket. Units: Bytes.
-
-`LOCAL_BYTES_XFERD'
+     data socket.  Units: Bytes.
+'LOCAL_BYTES_XFERD'
      The sum of bytes sent and received by netperf through its data
-     socket. Units: Bytes.
-
-`LOCAL_SEND_OFFSET'
+     socket.  Units: Bytes.
+'LOCAL_SEND_OFFSET'
      The offset from the alignment of the buffers passed by netperf in
-     its "send" calls. Specified via the global `-o' option and
-     defaults to 0. Units: Bytes.
-
-`LOCAL_RECV_OFFSET'
+     its "send" calls.  Specified via the global '-o' option and
+     defaults to 0.  Units: Bytes.
+'LOCAL_RECV_OFFSET'
      The offset from the alignment of the buffers passed by netperf in
-     its "receive" calls. Specified via the global `-o' option and
-     defaults to 0. Units: Bytes.
-
-`LOCAL_SEND_ALIGN'
+     its "receive" calls.  Specified via the global '-o' option and
+     defaults to 0.  Units: Bytes.
+'LOCAL_SEND_ALIGN'
      The alignment of the buffers passed by netperf in its "send" calls
-     as specified via the global `-a' option. Defaults to 8. Units:
+     as specified via the global '-a' option.  Defaults to 8.  Units:
      Bytes.
-
-`LOCAL_RECV_ALIGN'
+'LOCAL_RECV_ALIGN'
      The alignment of the buffers passed by netperf in its "receive"
-     calls as specified via the global `-a' option. Defaults to 8.
+     calls as specified via the global '-a' option.  Defaults to 8.
      Units: Bytes.
-
-`LOCAL_SEND_WIDTH'
+'LOCAL_SEND_WIDTH'
      The "width" of the ring of buffers through which netperf cycles as
      it makes its "send" calls.  Defaults to one more than the local
      send socket buffer size divided by the send size as determined at
-     the time the data socket is created. Can be used to make netperf
-     more processor data cache unfriendly. Units: number of buffers.
-
-`LOCAL_RECV_WIDTH'
+     the time the data socket is created.  Can be used to make netperf
+     more processor data cache unfriendly.  Units: number of buffers.
+'LOCAL_RECV_WIDTH'
      The "width" of the ring of buffers through which netperf cycles as
      it makes its "receive" calls.  Defaults to one more than the local
      receive socket buffer size divided by the receive size as
-     determined at the time the data socket is created. Can be used to
-     make netperf more processor data cache unfriendly. Units: number
+     determined at the time the data socket is created.  Can be used to
+     make netperf more processor data cache unfriendly.  Units: number
      of buffers.
-
-`LOCAL_SEND_DIRTY_COUNT'
+'LOCAL_SEND_DIRTY_COUNT'
      The number of bytes to "dirty" (write to) before netperf makes a
-     "send" call. Specified via the global `-k' option, which requires
+     "send" call.  Specified via the global '-k' option, which requires
      that -enable-dirty=yes was specified with the configure command
-     prior to building netperf. Units: Bytes.
-
-`LOCAL_RECV_DIRTY_COUNT'
+     prior to building netperf.  Units: Bytes.
+'LOCAL_RECV_DIRTY_COUNT'
      The number of bytes to "dirty" (write to) before netperf makes a
-     "recv" call. Specified via the global `-k' option which requires
+     "recv" call.  Specified via the global '-k' option which requires
      that -enable-dirty was specified with the configure command prior
-     to building netperf. Units: Bytes.
-
-`LOCAL_RECV_CLEAN_COUNT'
+     to building netperf.  Units: Bytes.
+'LOCAL_RECV_CLEAN_COUNT'
      The number of bytes netperf should read "cleanly" before making a
-     "receive" call. Specified via the global `-k' option which
+     "receive" call.  Specified via the global '-k' option which
      requires that -enable-dirty was specified with configure command
      prior to building netperf.  Clean reads start were dirty writes
      ended.  Units: Bytes.
-
-`LOCAL_NODELAY'
+'LOCAL_NODELAY'
      Indicates whether or not setting the test protocol-specific "no
      delay" (eg TCP_NODELAY) option on the data socket used by netperf
-     was requested by the test-specific `-D' option and successful.
+     was requested by the test-specific '-D' option and successful.
      Units: 0 means no, 1 means yes.
-
-`LOCAL_CORK'
+'LOCAL_CORK'
      Indicates whether or not TCP_CORK was set on the data socket used
-     by netperf as requested via the test-specific `-C' option. 1 means
+     by netperf as requested via the test-specific '-C' option.  1 means
      yes, 0 means no/not applicable.
-
-`REMOTE_SEND_CALLS'
-
-`REMOTE_RECV_CALLS'
-
-`REMOTE_BYTES_PER_RECV'
-
-`REMOTE_BYTES_PER_SEND'
-
-`REMOTE_BYTES_SENT'
-
-`REMOTE_BYTES_RECVD'
-
-`REMOTE_BYTES_XFERD'
-
-`REMOTE_SEND_OFFSET'
-
-`REMOTE_RECV_OFFSET'
-
-`REMOTE_SEND_ALIGN'
-
-`REMOTE_RECV_ALIGN'
-
-`REMOTE_SEND_WIDTH'
-
-`REMOTE_RECV_WIDTH'
-
-`REMOTE_SEND_DIRTY_COUNT'
-
-`REMOTE_RECV_DIRTY_COUNT'
-
-`REMOTE_RECV_CLEAN_COUNT'
-
-`REMOTE_NODELAY'
-
-`REMOTE_CORK'
+'REMOTE_SEND_CALLS'
+'REMOTE_RECV_CALLS'
+'REMOTE_BYTES_PER_RECV'
+'REMOTE_BYTES_PER_SEND'
+'REMOTE_BYTES_SENT'
+'REMOTE_BYTES_RECVD'
+'REMOTE_BYTES_XFERD'
+'REMOTE_SEND_OFFSET'
+'REMOTE_RECV_OFFSET'
+'REMOTE_SEND_ALIGN'
+'REMOTE_RECV_ALIGN'
+'REMOTE_SEND_WIDTH'
+'REMOTE_RECV_WIDTH'
+'REMOTE_SEND_DIRTY_COUNT'
+'REMOTE_RECV_DIRTY_COUNT'
+'REMOTE_RECV_CLEAN_COUNT'
+'REMOTE_NODELAY'
+'REMOTE_CORK'
      These are all like their "LOCAL_" counterparts only for the
      netserver rather than netperf.
-
-`LOCAL_SYSNAME'
+'LOCAL_SYSNAME'
      The name of the OS (eg "Linux") running on the system on which
-     netperf was running. Units: ASCII Text.  Disabled in 2.7.0.
-
-`LOCAL_SYSTEM_MODEL'
-     The model name of the system on which netperf was running. Units:
+     netperf was running.  Units: ASCII Text.  Disabled in 2.7.0.
+'LOCAL_SYSTEM_MODEL'
+     The model name of the system on which netperf was running.  Units:
      ASCII Text.  Disabled in 2.7.0.
-
-`LOCAL_RELEASE'
+'LOCAL_RELEASE'
      The release name/number of the OS running on the system on which
-     netperf  was running. Units: ASCII Text.  Disabled in 2.7.0.
-
-`LOCAL_VERSION'
+     netperf was running.  Units: ASCII Text.  Disabled in 2.7.0.
+'LOCAL_VERSION'
      The version number of the OS running on the system on which netperf
-     was running. Units: ASCII Text.  Disabled in 2.7.0.
-
-`LOCAL_MACHINE'
+     was running.  Units: ASCII Text.  Disabled in 2.7.0.
+'LOCAL_MACHINE'
      The machine architecture of the machine on which netperf was
-     running. Units: ASCII Text.  Disabled in 2.7.0.
-
-`REMOTE_SYSNAME'
-
-`REMOTE_SYSTEM_MODEL'
-
-`REMOTE_RELEASE'
-
-`REMOTE_VERSION'
-
-`REMOTE_MACHINE'
+     running.  Units: ASCII Text.  Disabled in 2.7.0.
+'REMOTE_SYSNAME'
+'REMOTE_SYSTEM_MODEL'
+'REMOTE_RELEASE'
+'REMOTE_VERSION'
+'REMOTE_MACHINE'
      These are all like their "LOCAL_" counterparts only for the
      netserver rather than netperf.  Disabled in 2.7.0.
-
-`LOCAL_INTERFACE_NAME'
+'LOCAL_INTERFACE_NAME'
      The name of the probable egress interface through which the data
-     connection went on the system running netperf. Example: eth0.
+     connection went on the system running netperf.  Example: eth0.
      Units: ASCII Text.  Disabled in 2.7.0.
-
-`LOCAL_INTERFACE_VENDOR'
+'LOCAL_INTERFACE_VENDOR'
      The vendor ID of the probable egress interface through which
      traffic on the data connection went on the system running netperf.
-     Units: Hexadecimal IDs as might be found in a `pci.ids' file or at
+     Units: Hexadecimal IDs as might be found in a 'pci.ids' file or at
      the PCI ID Repository (http://pciids.sourceforge.net/).  Disabled
      in 2.7.0.
-
-`LOCAL_INTERFACE_DEVICE'
+'LOCAL_INTERFACE_DEVICE'
      The device ID of the probable egress interface through which
      traffic on the data connection went on the system running netperf.
-     Units: Hexadecimal IDs as might be found in a `pci.ids' file or at
+     Units: Hexadecimal IDs as might be found in a 'pci.ids' file or at
      the PCI ID Repository (http://pciids.sourceforge.net/).  Disabled
      in 2.7.0.
-
-`LOCAL_INTERFACE_SUBVENDOR'
+'LOCAL_INTERFACE_SUBVENDOR'
      The sub-vendor ID of the probable egress interface through which
      traffic on the data connection went on the system running netperf.
-     Units: Hexadecimal IDs as might be found in a `pci.ids' file or at
+     Units: Hexadecimal IDs as might be found in a 'pci.ids' file or at
      the PCI ID Repository (http://pciids.sourceforge.net/).  Disabled
      in 2.7.0.
-
-`LOCAL_INTERFACE_SUBDEVICE'
+'LOCAL_INTERFACE_SUBDEVICE'
      The sub-device ID of the probable egress interface through which
      traffic on the data connection went on the system running netperf.
-     Units: Hexadecimal IDs as might be found in a `pci.ids' file or at
+     Units: Hexadecimal IDs as might be found in a 'pci.ids' file or at
      the PCI ID Repository (http://pciids.sourceforge.net/).  Disabled
      in 2.7.0.
-
-`LOCAL_DRIVER_NAME'
+'LOCAL_DRIVER_NAME'
      The name of the driver used for the probable egress interface
      through which traffic on the data connection went on the system
-     running netperf. Units: ASCII Text.  Disabled in 2.7.0.
-
-`LOCAL_DRIVER_VERSION'
+     running netperf.  Units: ASCII Text.  Disabled in 2.7.0.
+'LOCAL_DRIVER_VERSION'
      The version string for the driver used for the probable egress
      interface through which traffic on the data connection went on the
-     system running netperf. Units: ASCII Text.  Disabled in 2.7.0.
-
-`LOCAL_DRIVER_FIRMWARE'
+     system running netperf.  Units: ASCII Text.  Disabled in 2.7.0.
+'LOCAL_DRIVER_FIRMWARE'
      The firmware version for the driver used for the probable egress
      interface through which traffic on the data connection went on the
-     system running netperf. Units: ASCII Text.  Disabled in 2.7.0.
-
-`LOCAL_DRIVER_BUS'
+     system running netperf.  Units: ASCII Text.  Disabled in 2.7.0.
+'LOCAL_DRIVER_BUS'
      The bus address of the probable egress interface through which
      traffic on the data connection went on the system running netperf.
      Units: ASCII Text.  Disabled in 2.7.0.
-
-`LOCAL_INTERFACE_SLOT'
+'LOCAL_INTERFACE_SLOT'
      The slot ID of the probable egress interface through which traffic
-     on the data connection went on the system running netperf. Units:
+     on the data connection went on the system running netperf.  Units:
      ASCII Text.  Disabled in 2.7.0.
-
-`REMOTE_INTERFACE_NAME'
-
-`REMOTE_INTERFACE_VENDOR'
-
-`REMOTE_INTERFACE_DEVICE'
-
-`REMOTE_INTERFACE_SUBVENDOR'
-
-`REMOTE_INTERFACE_SUBDEVICE'
-
-`REMOTE_DRIVER_NAME'
-
-`REMOTE_DRIVER_VERSION'
-
-`REMOTE_DRIVER_FIRMWARE'
-
-`REMOTE_DRIVER_BUS'
-
-`REMOTE_INTERFACE_SLOT'
+'REMOTE_INTERFACE_NAME'
+'REMOTE_INTERFACE_VENDOR'
+'REMOTE_INTERFACE_DEVICE'
+'REMOTE_INTERFACE_SUBVENDOR'
+'REMOTE_INTERFACE_SUBDEVICE'
+'REMOTE_DRIVER_NAME'
+'REMOTE_DRIVER_VERSION'
+'REMOTE_DRIVER_FIRMWARE'
+'REMOTE_DRIVER_BUS'
+'REMOTE_INTERFACE_SLOT'
      These are all like their "LOCAL_" counterparts only for the
      netserver rather than netperf.  Disabled in 2.7.0.
-
-`LOCAL_INTERVAL_USECS'
+'LOCAL_INTERVAL_USECS'
      The interval at which bursts of operations (sends, receives,
      transactions) were attempted by netperf.  Specified by the global
-     `-w' option which requires -enable-intervals to have been
-     specified with the configure command prior to building netperf.
-     Units: Microseconds (though specified by default in milliseconds
-     on the command line)
-
-`LOCAL_INTERVAL_BURST'
+     '-w' option which requires -enable-intervals to have been specified
+     with the configure command prior to building netperf.  Units:
+     Microseconds (though specified by default in milliseconds on the
+     command line)
+'LOCAL_INTERVAL_BURST'
      The number of operations (sends, receives, transactions depending
      on the test) which were attempted by netperf each
-     LOCAL_INTERVAL_USECS units of time. Specified by the global `-b'
-     option which requires -enable-intervals to have been specified
-     with the configure command prior to building netperf.  Units:
-     number of operations per burst.
-
-`REMOTE_INTERVAL_USECS'
+     LOCAL_INTERVAL_USECS units of time.  Specified by the global '-b'
+     option which requires -enable-intervals to have been specified with
+     the configure command prior to building netperf.  Units: number of
+     operations per burst.
+'REMOTE_INTERVAL_USECS'
      The interval at which bursts of operations (sends, receives,
-     transactions) were attempted by netserver.  Specified by the
-     global `-w' option which requires -enable-intervals to have been
-     specified with the configure command prior to building netperf.
-     Units: Microseconds (though specified by default in milliseconds
-     on the command line)
-
-`REMOTE_INTERVAL_BURST'
+     transactions) were attempted by netserver.  Specified by the global
+     '-w' option which requires -enable-intervals to have been specified
+     with the configure command prior to building netperf.  Units:
+     Microseconds (though specified by default in milliseconds on the
+     command line)
+'REMOTE_INTERVAL_BURST'
      The number of operations (sends, receives, transactions depending
      on the test) which were attempted by netperf each
-     LOCAL_INTERVAL_USECS units of time. Specified by the global `-b'
-     option which requires -enable-intervals to have been specified
-     with the configure command prior to building netperf.  Units:
-     number of operations per burst.
-
-`LOCAL_SECURITY_TYPE_ID'
-
-`LOCAL_SECURITY_TYPE'
-
-`LOCAL_SECURITY_ENABLED_NUM'
-
-`LOCAL_SECURITY_ENABLED'
-
-`LOCAL_SECURITY_SPECIFIC'
-
-`REMOTE_SECURITY_TYPE_ID'
-
-`REMOTE_SECURITY_TYPE'
-
-`REMOTE_SECURITY_ENABLED_NUM'
-
-`REMOTE_SECURITY_ENABLED'
-
-`REMOTE_SECURITY_SPECIFIC'
+     LOCAL_INTERVAL_USECS units of time.  Specified by the global '-b'
+     option which requires -enable-intervals to have been specified with
+     the configure command prior to building netperf.  Units: number of
+     operations per burst.
+'LOCAL_SECURITY_TYPE_ID'
+'LOCAL_SECURITY_TYPE'
+'LOCAL_SECURITY_ENABLED_NUM'
+'LOCAL_SECURITY_ENABLED'
+'LOCAL_SECURITY_SPECIFIC'
+'REMOTE_SECURITY_TYPE_ID'
+'REMOTE_SECURITY_TYPE'
+'REMOTE_SECURITY_ENABLED_NUM'
+'REMOTE_SECURITY_ENABLED'
+'REMOTE_SECURITY_SPECIFIC'
      A bunch of stuff related to what sort of security mechanisms (eg
      SELINUX) were enabled on the systems during the test.  Disabled in
      2.7.0.
-
-`RESULT_BRAND'
-     The string specified by the user with the global `-B' option.
+'RESULT_BRAND'
+     The string specified by the user with the global '-B' option.
      Units: ASCII Text.
-
-`UUID'
+'UUID'
      The universally unique identifier associated with this test, either
      generated automagically by netperf, or passed to netperf via an
-     omni test-specific `-u' option. Note: Future versions may make this
-     a global command-line option. Units: ASCII Text.
-
-`MIN_LATENCY'
+     omni test-specific '-u' option.  Note: Future versions may make
+     this a global command-line option.  Units: ASCII Text.
+'MIN_LATENCY'
      The minimum "latency" or operation time (send, receive or
      request/response exchange depending on the test) as measured on the
-     netperf side when the global `-j' option was specified. Units:
+     netperf side when the global '-j' option was specified.  Units:
      Microseconds.
-
-`MAX_LATENCY'
+'MAX_LATENCY'
      The maximum "latency" or operation time (send, receive or
      request/response exchange depending on the test) as measured on the
-     netperf side when the global `-j' option was specified. Units:
+     netperf side when the global '-j' option was specified.  Units:
      Microseconds.
-
-`P50_LATENCY'
+'P50_LATENCY'
      The 50th percentile value of "latency" or operation time (send,
      receive or request/response exchange depending on the test) as
-     measured on the netperf side when the global `-j' option was
-     specified. Units: Microseconds.
-
-`P90_LATENCY'
+     measured on the netperf side when the global '-j' option was
+     specified.  Units: Microseconds.
+'P90_LATENCY'
      The 90th percentile value of "latency" or operation time (send,
      receive or request/response exchange depending on the test) as
-     measured on the netperf side when the global `-j' option was
-     specified. Units: Microseconds.
-
-`P99_LATENCY'
+     measured on the netperf side when the global '-j' option was
+     specified.  Units: Microseconds.
+'P99_LATENCY'
      The 99th percentile value of "latency" or operation time (send,
      receive or request/response exchange depending on the test) as
-     measured on the netperf side when the global `-j' option was
-     specified. Units: Microseconds.
-
-`MEAN_LATENCY'
+     measured on the netperf side when the global '-j' option was
+     specified.  Units: Microseconds.
+'P999_LATENCY'
+     The 99.9th percentile value of "latency" or operation time (send,
+     receive or request/response exchange depending on the test) as
+     measured on the netperf side when the global '-j' option was
+     specified.  Units: Microseconds.
+'P9999_LATENCY'
+     The 99.99th percentile value of "latency" or operation time (send,
+     receive or request/response exchange depending on the test) as
+     measured on the netperf side when the global '-j' option was
+     specified.  Units: Microseconds.
+'MEAN_LATENCY'
      The average "latency" or operation time (send, receive or
      request/response exchange depending on the test) as measured on the
-     netperf side when the global `-j' option was specified. Units:
+     netperf side when the global '-j' option was specified.  Units:
      Microseconds.
-
-`STDDEV_LATENCY'
+'STDDEV_LATENCY'
      The standard deviation of "latency" or operation time (send,
      receive or request/response exchange depending on the test) as
-     measured on the netperf side when the global `-j' option was
-     specified. Units: Microseconds.
-
-`COMMAND_LINE'
-     The full command line used when invoking netperf. Units: ASCII
+     measured on the netperf side when the global '-j' option was
+     specified.  Units: Microseconds.
+'COMMAND_LINE'
+     The full command line used when invoking netperf.  Units: ASCII
      Text.
-
-`OUTPUT_END'
+'OUTPUT_END'
      While emitted with the list of output selectors, it is ignored when
      specified as an output selector.
 
@@ -4020,9 +3835,9 @@ File: netperf.info,  Node: CPU rate calibration,  Next: UUID Generation,  Prev:
 
 Some of the CPU utilization measurement mechanisms of netperf work by
 comparing the rate at which some counter increments when the system is
-idle with the rate at which that same counter increments when the
-system is running a netperf test.  The ratio of those rates is used to
-arrive at a CPU utilization percentage.
+idle with the rate at which that same counter increments when the system
+is running a netperf test.  The ratio of those rates is used to arrive
+at a CPU utilization percentage.
 
    This means that netperf must know the rate at which the counter
 increments when the system is presumed to be "idle."  If it does not
@@ -4031,9 +3846,9 @@ test.  This calibration step takes 40 seconds for each of the local or
 remote systems, and if repeated for each netperf test would make taking
 repeated measurements rather slow.
 
-   Thus, the netperf CPU utilization options `-c' and and `-C' can take
+   Thus, the netperf CPU utilization options '-c' and and '-C' can take
 an optional calibration value.  This value is used as the "idle rate"
-and the calibration step is not performed. To determine the idle rate,
+and the calibration step is not performed.  To determine the idle rate,
 netperf can be used to run special tests which only report the value of
 the calibration - they are the LOC_CPU and REM_CPU tests.  These return
 the calibration value for the local and remote system respectively.  A
@@ -4051,12 +3866,11 @@ important to use the LOC_CPU and REM_CPU tests to get the calibration
 values first to avoid issues with some of the aggregate netperf tests
 transferring data while others are "idle" and getting bogus calibration
 values.  When running aggregate tests, it is very important to remember
-that any one instance of netperf does not know about the other
-instances of netperf.  It will report global CPU utilization and will
-calculate service demand believing it was the only thing causing that
-CPU utilization.  So, you can use the CPU utilization reported by
-netperf in an aggregate test, but you have to calculate service demands
-by hand.
+that any one instance of netperf does not know about the other instances
+of netperf.  It will report global CPU utilization and will calculate
+service demand believing it was the only thing causing that CPU
+utilization.  So, you can use the CPU utilization reported by netperf in
+an aggregate test, but you have to calculate service demands by hand.
 
 
 File: netperf.info,  Node: UUID Generation,  Prev: CPU rate calibration,  Up: Other Netperf Tests
@@ -4070,7 +3884,7 @@ IDentifiers (UUIDs).  This can be done explicitly via the "UUID" test:
      2c8561ae-9ebd-11e0-a297-0f5bfa0349d0
 
    In and of itself, this is not terribly useful, but used in
-conjunction with the test-specific `-u' option of an "omni" test to set
+conjunction with the test-specific '-u' option of an "omni" test to set
 the UUID emitted by the *note UUID: Omni Output Selectors. output
 selector, it can be used to tie-together the separate instances of an
 aggregate netperf test.  Say, for instance if they were inserted into a
@@ -4083,16 +3897,16 @@ File: netperf.info,  Node: Address Resolution,  Next: Enhancing Netperf,  Prev:
 *********************
 
 Netperf versions 2.4.0 and later have merged IPv4 and IPv6 tests so the
-functionality of the tests in `src/nettest_ipv6.c' has been subsumed
-into the tests in `src/nettest_bsd.c'  This has been accomplished in
-part by switching from `gethostbyname()'to `getaddrinfo()' exclusively.
+functionality of the tests in 'src/nettest_ipv6.c' has been subsumed
+into the tests in 'src/nettest_bsd.c' This has been accomplished in part
+by switching from 'gethostbyname()'to 'getaddrinfo()' exclusively.
 While it was theoretically possible to get multiple results for a
-hostname from `gethostbyname()' it was generally unlikely and netperf's
+hostname from 'gethostbyname()' it was generally unlikely and netperf's
 ignoring of the second and later results was not much of an issue.
 
-   Now with `getaddrinfo' and particularly with AF_UNSPEC it is
+   Now with 'getaddrinfo' and particularly with AF_UNSPEC it is
 increasingly likely that a given hostname will have multiple associated
-addresses.  The `establish_control()' routine of `src/netlib.c' will
+addresses.  The 'establish_control()' routine of 'src/netlib.c' will
 indeed attempt to chose from among all the matching IP addresses when
 establishing the control connection.  Netperf does not _really_ care if
 the control connection is IPv4 or IPv6 or even mixed on either end.
@@ -4103,17 +3917,16 @@ turn-out to be an issue has yet to be determined.
 
    If you do run into problems with this, the easiest workaround is to
 specify IP addresses for the data connection explicitly in the
-test-specific `-H' and `-L' options.  At some point, the netperf tests
+test-specific '-H' and '-L' options.  At some point, the netperf tests
 _may_ try to be more sophisticated in their parsing of returns from
-`getaddrinfo()' - straw-man patches to <netperf-feedback@netperf.org>
+'getaddrinfo()' - straw-man patches to <netperf-feedback@netperf.org>
 would of course be most welcome :)
 
    Netperf has leveraged code from other open-source projects with
-amenable licensing to provide a replacement `getaddrinfo()' call on
-those platforms where the `configure' script believes there is no
-native getaddrinfo call.  As of this writing, the replacement
-`getaddrinfo()' as been tested on HP-UX 11.0 and then presumed to run
-elsewhere.
+amenable licensing to provide a replacement 'getaddrinfo()' call on
+those platforms where the 'configure' script believes there is no native
+getaddrinfo call.  As of this writing, the replacement 'getaddrinfo()'
+as been tested on HP-UX 11.0 and then presumed to run elsewhere.
 
 
 File: netperf.info,  Node: Enhancing Netperf,  Next: Netperf4,  Prev: Address Resolution,  Up: Top
@@ -4125,31 +3938,27 @@ Netperf is constantly evolving.  If you find you want to make
 enhancements to netperf, by all means do so.  If you wish to add a new
 "suite" of tests to netperf the general idea is to:
 
-  1. Add files `src/nettest_mumble.c' and `src/nettest_mumble.h' where
+  1. Add files 'src/nettest_mumble.c' and 'src/nettest_mumble.h' where
      mumble is replaced with something meaningful for the test-suite.
-
-  2. Add support for an appropriate `--enable-mumble' option in
-     `configure.ac'.
-
-  3. Edit `src/netperf.c', `netsh.c', and `netserver.c' as required,
+  2. Add support for an appropriate '--enable-mumble' option in
+     'configure.ac'.
+  3. Edit 'src/netperf.c', 'netsh.c', and 'netserver.c' as required,
      using #ifdef WANT_MUMBLE.
-
   4. Compile and test
 
-   However, with the addition of the "omni" tests in version 2.5.0 it
-is preferred that one attempt to make the necessary changes to
-`src/nettest_omni.c' rather than adding new source files, unless this
+   However, with the addition of the "omni" tests in version 2.5.0 it is
+preferred that one attempt to make the necessary changes to
+'src/nettest_omni.c' rather than adding new source files, unless this
 would make the omni tests entirely too complicated.
 
    If you wish to submit your changes for possible inclusion into the
 mainline sources, please try to base your changes on the latest
-available sources. (*Note Getting Netperf Bits::.) and then send email
-describing the changes at a high level to
-<netperf-feedback@netperf.org> or perhaps <netperf-talk@netperf.org>.
-If the consensus is positive, then sending context `diff' results to
-<netperf-feedback@netperf.org> is the next step.  From that point, it
-is a matter of pestering the Netperf Contributing Editor until he gets
-the changes incorporated :)
+available sources.  (*Note Getting Netperf Bits::.)  and then send email
+describing the changes at a high level to <netperf-feedback@netperf.org>
+or perhaps <netperf-talk@netperf.org>.  If the consensus is positive,
+then sending context 'diff' results to <netperf-feedback@netperf.org> is
+the next step.  From that point, it is a matter of pestering the Netperf
+Contributing Editor until he gets the changes incorporated :)
 
 
 File: netperf.info,  Node: Netperf4,  Next: Concept Index,  Prev: Enhancing Netperf,  Up: Top
@@ -4158,16 +3967,16 @@ File: netperf.info,  Node: Netperf4,  Next: Concept Index,  Prev: Enhancing Netp
 ***********
 
 Netperf4 is the shorthand name given to version 4.X.X of netperf.  This
-is really a separate benchmark more than a newer version of netperf,
-but it is a descendant of netperf so the netperf name is kept.  The
+is really a separate benchmark more than a newer version of netperf, but
+it is a descendant of netperf so the netperf name is kept.  The
 facetious way to describe netperf4 is to say it is the
-egg-laying-woolly-milk-pig version of netperf :)  The more respectful
-way to describe it is to say it is the version of netperf with support
-for synchronized, multiple-thread, multiple-test, multiple-system,
+egg-laying-woolly-milk-pig version of netperf :) The more respectful way
+to describe it is to say it is the version of netperf with support for
+synchronized, multiple-thread, multiple-test, multiple-system,
 network-oriented benchmarking.
 
-   Netperf4 is still undergoing evolution. Those wishing to work with or
-on netperf4 are encouraged to join the netperf-dev
+   Netperf4 is still undergoing evolution.  Those wishing to work with
+or on netperf4 are encouraged to join the netperf-dev
 (http://www.netperf.org/cgi-bin/mailman/listinfo/netperf-dev) mailing
 list and/or peruse the current sources
 (http://www.netperf.org/svn/netperf4/trunk).
@@ -4191,22 +4000,22 @@ Concept Index
                                                                (line  6)
 * Installation:                          Installing Netperf.   (line  6)
 * Introduction:                          Introduction.         (line  6)
-* Latency, Connection Establishment <1>: XTI_TCP_CRR.          (line  6)
-* Latency, Connection Establishment <2>: XTI_TCP_CC.           (line  6)
-* Latency, Connection Establishment <3>: TCP_CRR.              (line  6)
 * Latency, Connection Establishment:     TCP_CC.               (line  6)
-* Latency, Request-Response <1>:         SCTP_RR.              (line  6)
-* Latency, Request-Response <2>:         DLCO_RR.              (line  6)
-* Latency, Request-Response <3>:         DLCL_RR.              (line  6)
-* Latency, Request-Response <4>:         XTI_UDP_RR.           (line  6)
-* Latency, Request-Response <5>:         XTI_TCP_CRR.          (line  6)
-* Latency, Request-Response <6>:         XTI_TCP_RR.           (line  6)
-* Latency, Request-Response <7>:         UDP_RR.               (line  6)
-* Latency, Request-Response <8>:         TCP_CRR.              (line  6)
+* Latency, Connection Establishment <1>: TCP_CRR.              (line  6)
+* Latency, Connection Establishment <2>: XTI_TCP_CC.           (line  6)
+* Latency, Connection Establishment <3>: XTI_TCP_CRR.          (line  6)
 * Latency, Request-Response:             TCP_RR.               (line  6)
-* Limiting Bandwidth <1>:                UDP_STREAM.           (line  9)
+* Latency, Request-Response <1>:         TCP_CRR.              (line  6)
+* Latency, Request-Response <2>:         UDP_RR.               (line  6)
+* Latency, Request-Response <3>:         XTI_TCP_RR.           (line  6)
+* Latency, Request-Response <4>:         XTI_TCP_CRR.          (line  6)
+* Latency, Request-Response <5>:         XTI_UDP_RR.           (line  6)
+* Latency, Request-Response <6>:         DLCL_RR.              (line  5)
+* Latency, Request-Response <7>:         DLCO_RR.              (line  5)
+* Latency, Request-Response <8>:         SCTP_RR.              (line  5)
 * Limiting Bandwidth:                    Installing Netperf Bits.
                                                                (line 64)
+* Limiting Bandwidth <1>:                UDP_STREAM.           (line  9)
 * Measuring Latency:                     TCP_RR.               (line  6)
 * Packet Loss:                           UDP_RR.               (line  6)
 * Port Reuse:                            TCP_CC.               (line 13)
@@ -4239,148 +4048,153 @@ Option Index
                                                               (line  30)
 * --enable-xti, Configure:               Installing Netperf Bits.
                                                               (line  30)
-* -4, Global:                            Global Options.      (line 489)
-* -4, Test-specific <1>:                 Options Common to TCP UDP and SCTP _RR tests.
-                                                              (line  88)
+* -4, Global:                            Global Options.      (line 475)
 * -4, Test-specific:                     Options common to TCP UDP and SCTP tests.
                                                               (line 110)
+* -4, Test-specific <1>:                 Options Common to TCP UDP and SCTP _RR tests.
+                                                              (line  88)
 * -6 Test-specific:                      Options Common to TCP UDP and SCTP _RR tests.
                                                               (line  94)
-* -6, Global:                            Global Options.      (line 498)
+* -6, Global:                            Global Options.      (line 484)
 * -6, Test-specific:                     Options common to TCP UDP and SCTP tests.
                                                               (line 116)
-* -A, Global:                            Global Options.      (line  18)
 * -a, Global:                            Global Options.      (line   6)
-* -B, Global:                            Global Options.      (line  29)
+* -A, Global:                            Global Options.      (line  18)
 * -b, Global:                            Global Options.      (line  22)
-* -C, Global:                            Global Options.      (line  42)
+* -B, Global:                            Global Options.      (line  29)
 * -c, Global:                            Global Options.      (line  33)
+* -C, Global:                            Global Options.      (line  42)
 * -c, Test-specific:                     Native Omni Tests.   (line  13)
-* -D, Global:                            Global Options.      (line  56)
 * -d, Global:                            Global Options.      (line  47)
+* -D, Global:                            Global Options.      (line  56)
 * -d, Test-specific:                     Native Omni Tests.   (line  17)
-* -F, Global:                            Global Options.      (line  76)
 * -f, Global:                            Global Options.      (line  67)
-* -H, Global:                            Global Options.      (line  95)
+* -F, Global:                            Global Options.      (line  76)
 * -h, Global:                            Global Options.      (line  91)
-* -H, Test-specific:                     Options Common to TCP UDP and SCTP _RR tests.
-                                                              (line  17)
-* -h, Test-specific <1>:                 Options Common to TCP UDP and SCTP _RR tests.
-                                                              (line  10)
+* -H, Global:                            Global Options.      (line  95)
 * -h, Test-specific:                     Options common to TCP UDP and SCTP tests.
                                                               (line  10)
-* -i, Global:                            Global Options.      (line 179)
-* -I, Global:                            Global Options.      (line 130)
-* -j, Global:                            Global Options.      (line 205)
-* -k, Test-specific:                     Native Omni Tests.   (line  37)
-* -L, Global:                            Global Options.      (line 263)
-* -l, Global:                            Global Options.      (line 242)
-* -L, Test-specific <1>:                 Options Common to TCP UDP and SCTP _RR tests.
-                                                              (line  26)
+* -h, Test-specific <1>:                 Options Common to TCP UDP and SCTP _RR tests.
+                                                              (line  10)
+* -H, Test-specific:                     Options Common to TCP UDP and SCTP _RR tests.
+                                                              (line  17)
+* -I, Global:                            Global Options.      (line 129)
+* -i, Global:                            Global Options.      (line 178)
+* -j, Global:                            Global Options.      (line 203)
+* -k, Test-specific:                     Native Omni Tests.   (line  35)
+* -l, Global:                            Global Options.      (line 235)
+* -L, Global:                            Global Options.      (line 256)
 * -L, Test-specific:                     Options common to TCP UDP and SCTP tests.
                                                               (line  25)
-* -M, Test-specific:                     Options common to TCP UDP and SCTP tests.
-                                                              (line  48)
+* -L, Test-specific <1>:                 Options Common to TCP UDP and SCTP _RR tests.
+                                                              (line  26)
 * -m, Test-specific:                     Options common to TCP UDP and SCTP tests.
                                                               (line  32)
-* -N, Global:                            Global Options.      (line 293)
-* -n, Global:                            Global Options.      (line 275)
-* -O, Global:                            Global Options.      (line 338)
-* -o, Global:                            Global Options.      (line 329)
-* -O, Test-specific:                     Native Omni Tests.   (line  62)
-* -o, Test-specific:                     Native Omni Tests.   (line  50)
-* -P, Global:                            Global Options.      (line 363)
-* -p, Global:                            Global Options.      (line 343)
-* -P, Test-specific <1>:                 Options Common to TCP UDP and SCTP _RR tests.
-                                                              (line  33)
+* -M, Test-specific:                     Options common to TCP UDP and SCTP tests.
+                                                              (line  48)
+* -n, Global:                            Global Options.      (line 268)
+* -N, Global:                            Global Options.      (line 286)
+* -o, Global:                            Global Options.      (line 322)
+* -O, Global:                            Global Options.      (line 331)
+* -o, Test-specific:                     Native Omni Tests.   (line  48)
+* -O, Test-specific:                     Native Omni Tests.   (line  60)
+* -p, Global:                            Global Options.      (line 336)
+* -P, Global:                            Global Options.      (line 356)
 * -P, Test-specific:                     Options common to TCP UDP and SCTP tests.
                                                               (line  61)
+* -P, Test-specific <1>:                 Options Common to TCP UDP and SCTP _RR tests.
+                                                              (line  33)
 * -r, Test-specific:                     Options Common to TCP UDP and SCTP _RR tests.
                                                               (line  36)
 * -S Test-specific:                      Options common to TCP UDP and SCTP tests.
                                                               (line  87)
-* -S, Global:                            Global Options.      (line 381)
-* -s, Global:                            Global Options.      (line 372)
-* -S, Test-specific:                     Options Common to TCP UDP and SCTP _RR tests.
-                                                              (line  68)
-* -s, Test-specific <1>:                 Options Common to TCP UDP and SCTP _RR tests.
-                                                              (line  48)
+* -s, Global:                            Global Options.      (line 365)
+* -S, Global:                            Global Options.      (line 374)
 * -s, Test-specific:                     Options common to TCP UDP and SCTP tests.
                                                               (line  64)
-* -T, Global:                            Global Options.      (line 423)
-* -t, Global:                            Global Options.      (line 391)
-* -T, Test-specific:                     Native Omni Tests.   (line  81)
-* -t, Test-specific:                     Native Omni Tests.   (line  76)
-* -V, Global:                            Global Options.      (line 468)
-* -v, Global:                            Global Options.      (line 440)
-* -W, Global:                            Global Options.      (line 480)
-* -w, Global:                            Global Options.      (line 473)
+* -s, Test-specific <1>:                 Options Common to TCP UDP and SCTP _RR tests.
+                                                              (line  48)
+* -S, Test-specific:                     Options Common to TCP UDP and SCTP _RR tests.
+                                                              (line  68)
+* -t, Global:                            Global Options.      (line 384)
+* -T, Global:                            Global Options.      (line 409)
+* -t, Test-specific:                     Native Omni Tests.   (line  74)
+* -T, Test-specific:                     Native Omni Tests.   (line  79)
+* -v, Global:                            Global Options.      (line 426)
+* -V, Global:                            Global Options.      (line 454)
+* -w, Global:                            Global Options.      (line 459)
+* -W, Global:                            Global Options.      (line 466)
 
 
 
 Tag Table:
-Node: Top439
-Node: Introduction1476
-Node: Conventions4150
-Node: Installing Netperf5913
-Node: Getting Netperf Bits7467
-Node: Installing Netperf Bits9326
-Node: Verifying Installation17820
-Node: The Design of Netperf18524
-Node: CPU Utilization20120
-Node: CPU Utilization in a Virtual Guest28844
-Node: Global Command-line Options30431
-Node: Command-line Options Syntax30970
-Node: Global Options32366
-Node: Using Netperf to Measure Bulk Data Transfer56529
-Node: Issues in Bulk Transfer57202
-Node: Options common to TCP UDP and SCTP tests61463
-Node: TCP_STREAM67788
-Node: TCP_MAERTS71873
-Node: TCP_SENDFILE73110
-Node: UDP_STREAM75610
-Node: XTI_TCP_STREAM79046
-Node: XTI_UDP_STREAM79691
-Node: SCTP_STREAM80336
-Node: DLCO_STREAM81036
-Node: DLCL_STREAM83009
-Node: STREAM_STREAM83883
-Node: DG_STREAM84741
-Node: Using Netperf to Measure Request/Response85422
-Node: Issues in Request/Response87740
-Node: Options Common to TCP UDP and SCTP _RR tests90114
-Node: TCP_RR95138
-Node: TCP_CC97538
-Node: TCP_CRR99772
-Node: UDP_RR100834
-Node: XTI_TCP_RR103138
-Node: XTI_TCP_CC103721
-Node: XTI_TCP_CRR104226
-Node: XTI_UDP_RR104738
-Node: DLCL_RR105315
-Node: DLCO_RR105468
-Node: SCTP_RR105620
-Node: Using Netperf to Measure Aggregate Performance105756
-Node: Running Concurrent Netperf Tests106788
-Node: Issues in Running Concurrent Tests111429
-Node: Using --enable-burst113693
-Node: Using --enable-demo120592
-Node: Using Netperf to Measure Bidirectional Transfer126148
-Node: Bidirectional Transfer with Concurrent Tests127280
-Node: Bidirectional Transfer with TCP_RR129636
-Node: Implications of Concurrent Tests vs Burst Request/Response132020
-Node: The Omni Tests133834
-Node: Native Omni Tests134881
-Node: Migrated Tests140159
-Node: Omni Output Selection142264
-Node: Omni Output Selectors145247
-Node: Other Netperf Tests175368
-Node: CPU rate calibration175803
-Node: UUID Generation178171
-Node: Address Resolution178887
-Node: Enhancing Netperf180863
-Node: Netperf4182358
-Node: Concept Index183263
-Node: Option Index185589
+Node: Top1605
+Node: Introduction3809
+Node: Conventions6477
+Node: Installing Netperf8240
+Node: Getting Netperf Bits9797
+Node: Installing Netperf Bits11654
+Node: Verifying Installation20145
+Node: The Design of Netperf20849
+Node: CPU Utilization22445
+Node: CPU Utilization in a Virtual Guest31168
+Node: Global Command-line Options32755
+Node: Command-line Options Syntax33294
+Node: Global Options34691
+Node: Using Netperf to Measure Bulk Data Transfer58889
+Node: Issues in Bulk Transfer59562
+Node: Options common to TCP UDP and SCTP tests63823
+Node: TCP_STREAM70152
+Node: TCP_MAERTS74233
+Node: TCP_SENDFILE75471
+Node: UDP_STREAM77968
+Node: XTI_TCP_STREAM81407
+Node: XTI_UDP_STREAM82052
+Node: SCTP_STREAM82698
+Node: DLCO_STREAM83397
+Node: DLCL_STREAM85365
+Node: STREAM_STREAM86240
+Node: DG_STREAM87099
+Node: Using Netperf to Measure Request/Response87781
+Node: Issues in Request/Response90100
+Node: Options Common to TCP UDP and SCTP _RR tests92476
+Node: TCP_RR97499
+Node: TCP_CC99899
+Node: TCP_CRR102132
+Node: UDP_RR103194
+Node: XTI_TCP_RR105500
+Node: XTI_TCP_CC106084
+Node: XTI_TCP_CRR106589
+Node: XTI_UDP_RR107101
+Node: DLCL_RR107678
+Node: DLCO_RR107831
+Node: SCTP_RR107983
+Node: Using Netperf to Measure Aggregate Performance108119
+Node: Running Concurrent Netperf Tests109153
+Node: Issues in Running Concurrent Tests113795
+Node: Using --enable-burst116059
+Node: Using --enable-demo122961
+Node: Using Netperf to Measure Bidirectional Transfer128516
+Node: Bidirectional Transfer with Concurrent Tests129648
+Node: Bidirectional Transfer with TCP_RR132004
+Node: Implications of Concurrent Tests vs Burst Request/Response134389
+Node: The Omni Tests136203
+Node: Native Omni Tests137250
+Node: Migrated Tests142534
+Node: Omni Output Selection144635
+Node: Omni Output Selectors147620
+Node: Other Netperf Tests178213
+Node: CPU rate calibration178648
+Node: UUID Generation181017
+Node: Address Resolution181733
+Node: Enhancing Netperf183708
+Node: Netperf4185203
+Node: Concept Index186108
+Node: Option Index188434
 
 End Tag Table
+
+
+Local Variables:
+coding: utf-8
+End:
diff --git a/doc/netperf.man b/doc/netperf.man
index ac53e03..a78e4b0 100644
--- a/doc/netperf.man
+++ b/doc/netperf.man
@@ -86,7 +86,7 @@ Instruct netperf to calculate additional statistics on timing when
 running an omni test.  Display of said statistics will depend on the
 presence of the corresponding output selectors in the output
 selection. These are MIN_LATENCY, MAX_LATENCY, P50_LATENCY,
-P90_LATENCY, P99_LATENCY, MEAN_LATENCY and STDDEV_LATENCY.
+P90_LATENCY, P99_LATENCY, P999_LATENCY, P9999_LATENCY, MEAN_LATENCY and STDDEV_LATENCY.
 .TP
 .B \-I lvl,[,intvl]
 Specify the confidence level (either 95 or 99 - 99 is the default) and
diff --git a/doc/netperf.pdf b/doc/netperf.pdf
deleted file mode 100644
index 8726ff3..0000000
Binary files a/doc/netperf.pdf and /dev/null differ
diff --git a/doc/netperf.ps b/doc/netperf.ps
deleted file mode 100644
index 1b543ba..0000000
--- a/doc/netperf.ps
+++ /dev/null
@@ -1,4768 +0,0 @@
-%!PS-Adobe-2.0
-%%Creator: dvips(k) 5.92b Copyright 2002 Radical Eye Software
-%%Title: netperf.dvi
-%%Pages: 47
-%%PageOrder: Ascend
-%%BoundingBox: 0 0 596 842
-%%EndComments
-%DVIPSWebPage: (www.radicaleye.com)
-%DVIPSCommandLine: dvips -o netperf.ps netperf.dvi
-%DVIPSParameters: dpi=600, compressed
-%DVIPSSource:  TeX output 2007.02.09:1703
-%%BeginProcSet: texc.pro
-%!
-/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
-N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
-mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
-0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
-landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
-mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
-matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
-exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
-statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
-N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
-/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
-/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
-array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
-df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
-definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
-}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
-B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
-1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
-1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
-0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
-sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
-rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
-gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
-/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
-/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
-A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
-get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
-ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
-fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
-{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
-chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
-1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
-forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
-/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
-}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
-bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
-mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
-SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
-userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
-1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
-index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
-/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
-/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
-(LaserWriter 16/600)]{A length product length le{A length product exch 0
-exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
-end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
-grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
-imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
-exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
-fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
-delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
-B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
-p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
-rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end
-
-%%EndProcSet
-TeXDict begin 39158280 55380996 1000 600 600 (netperf.dvi)
-@start
-%DVIPSBitmapFont: Fa cmti9 9 1
-/Fa 1 47 df<121C127F12FFA412FE12380808778718>46 D E
-%EndDVIPSBitmapFont
-%DVIPSBitmapFont: Fb cmr9 9 24
-/Fb 24 118 df<123C127EB4FCA21380A2127F123D1201A412031300A25A1206120E120C
-121C5A5A126009177A8715>44 D<13075B5B137FEA07FFB5FC13BFEAF83F1200B3B3A249
-7E007FB51280A319327AB126>49 D<EB1FE0EBFFFC4813FF3907E03F80390F001FC0001E
-EB0FE0001CEB07F0123F018013F8140313C01380A2381F0007C7FC15F0A2EC0FE015C014
-1FEC3F80EC7E00EB01F8EB7FE014FCEB003FEC1FC0EC0FE0EC07F015F8140315FC140115
-FEA3127EB4FCA415FC48130312780070EB07F86C14F0003C130F001FEB1FE0390FE03F80
-0003B51200C613FCEB1FE01F347DB126>51 D<1230123C003FB6FCA34814FEA215FC0070
-C7123800601430157015E04814C01401EC0380C7EA07001406140E5C141814385CA25CA2
-495A1303A3495AA2130FA3131F91C7FCA25BA55BA9131C20347CB126>55
-D<B77E16F016FE3A01FE0001FF00009138003FC0EE0FE0707E707E707E707E177E177FEF
-3F80A2EF1FC0A3EF0FE0A418F0AA18E0A3171F18C0A21880173F18005F17FE5F4C5AEE07
-F04C5AEE3FC000014AB45AB748C7FC16F8168034337EB23B>68 D<B512FEA3000113006C
-5AB3B3A7487EB512FEA317337EB21C>73 D<D8FFFE91381FFFF87F80C6030013006E143C
-D9DFE01418EBCFF0A2EBC7F8EBC3FCA2EBC1FEEBC0FF6E7EA26E7E6E7EA26E7E6E7E6E7E
-A26E7E6E7EA2ED7F80ED3FC0ED1FE0A2ED0FF0ED07F8A2ED03FCED01FEED00FFA2EE7F98
-EE3FD8A2EE1FF8160F1607A216031601A2486C1400D807F81578B500C01438A217183533
-7EB23A>78 D<007FB712FEA390398007F001D87C00EC003E0078161E0070160EA2006016
-0600E01607A3481603A6C71500B3AB4A7E011FB512FCA330337DB237>84
-D<EB7F803803FFF0380F80FC381C003E003F133F6D6C7E6E7EA26E7EEA1F00C7FCA4EB01
-FF131FEBFF873803FC07EA0FF0EA1FC0EA3F80127F13004815C05AA3140FA26C131F6C13
-3B3A3F8071F180391FC1E1FF2607FFC013003900FE003C22237DA126>97
-D<EB07F8EB3FFF9038FC07C03901F000E03903E003F03807C007120FEA1F80123F903800
-03E04890C7FCA2127E12FEAA127FA26C14187F001F14386D1330000F14706C6C13E03903
-F001C03900FC0F8090383FFE00EB07F01D237EA122>99 D<153FEC0FFFA3EC007F81AEEB
-07F0EB3FFCEBFC0F3901F003BF3907E001FF48487E48487F8148C7FCA25A127E12FEAA12
-7E127FA27E6C6C5BA26C6C5B6C6C4813803A03F007BFFC3900F81E3FEB3FFCD90FE01300
-26357DB32B>I<EB0FE0EB7FFCEBF83F3903F00F80D807E013C0390FC007E0381F800315
-F0EA3F0014014814F8127EA212FEA2B6FCA248C8FCA5127E127FA26C1418A26C6C133800
-0F14306D13706C6C13E03901F003C03900FC0F00EB3FFEEB07F01D237EA122>I<EB01FC
-EB07FF90381F078090383E0FC0EB7C1F13FCEA01F8A20003EB070049C7FCACB512F0A3D8
-03F0C7FCB3A7487E387FFFE0A31A357FB417>I<151F90391FC07F809039FFF8E3C03901
-F07FC73907E03F033A0FC01F83809039800F8000001F80EB00074880A66C5CEB800F000F
-5CEBC01F6C6C48C7FCEBF07C380EFFF8380C1FC0001CC9FCA3121EA2121F380FFFFEECFF
-C06C14F06C14FC4880381F0001003EEB007F4880ED1F8048140FA56C141F007C15006C14
-3E6C5C390FC001F83903F007E0C6B51280D91FFCC7FC22337EA126>I<EA03F012FFA312
-071203AEEC1FC0EC7FF09038F1E0FC9038F3807C9038F7007E13FE497FA25BA25BB3486C
-EB7F80B538C7FFFCA326347EB32B>I<EA0780EA0FC0EA1FE0A4EA0FC0EA0780C7FCAAEA
-07E012FFA3120F1207B3A6EA0FF0B5FCA310337EB215>I<EA07E012FFA3120F1207B3B3
-A7EA0FF0B5FCA310347EB315>108 D<3903F01FC000FFEB7FF09038F1E0FC9038F3807C
-3907F7007EEA03FE497FA25BA25BB3486CEB7F80B538C7FFFCA326217EA02B>110
-D<EB07F0EB3FFE9038FC1F803901F007C03903C001E000078048486C7E48C7127CA24814
-7E003E143E007E143FA300FE1580A8007E1500A36C147EA26C147C6D13FC6C6C485A0007
-5C3903F007E03900FC1F80D93FFEC7FCEB07F021237EA126>I<3903F03F8000FFEBFFE0
-9038F3C0F89038F7007ED807FE7F6C48EB1F804914C049130F16E0ED07F0A3ED03F8A915
-0716F0A216E0150F16C06D131F6DEB3F80160001FF13FC9038F381F89038F1FFE0D9F07F
-C7FC91C8FCAA487EB512C0A325307EA02B>I<3803E07C38FFE1FF9038E38F809038E71F
-C0EA07EEEA03ECA29038FC0F8049C7FCA35BB2487EB512E0A31A217FA01E>114
-D<EBFF06000713CE381F00FE003C133E48131E140E5A1406A27EA200FE90C7FC6C7EEA7F
-FC383FFFC014F0000F7F6C7FC67FEB0FFF1300EC3F8000C0131F140F6C1307A37E15006C
-5B6C130E6C5B38F7807838E1FFE038C07F8019237EA11E>I<1330A51370A313F0A21201
-A212031207381FFFFEB5FCA23803F000AF1403A814073801F806A23800FC0EEB7E1CEB1F
-F8EB07E0182F7FAD1E>I<D803F0133F00FFEB0FFFA30007EB007F000380B35DA35D1201
-6D4813800000903803BFFC90387E073FEB1FFED907F8130026227EA02B>I
-E
-%EndDVIPSBitmapFont
-%DVIPSBitmapFont: Fc cmb10 10.95 40
-/Fc 40 123 df<EA0FC0EA1FE0EA3FF0EA7FF8EAFFFCA313FEA3127F123F121FEA0FDEEA
-001EA2133E133CA2137CA2137813F813F01201EA03E0EA07C0A2EA0F80EA1F00121E120C
-0F207BBE19>39 D<147814F81301EB03F0EB07E0EB0FC0A2EB1F80133FEB7F00A213FEA2
-485A1203A25B1207A2485AA3121F5BA2123FA4485AA612FFB3A2127FA66C7EA4121FA27F
-120FA36C7EA212037FA212016C7EA2137FA2EB3F80131FEB0FC0A2EB07E0EB03F0EB01F8
-13001478155A78C323>I<127012F87E127E7E6C7EA26C7E7F6C7EA26C7EA26C7E7FA212
-007FA2EB7F80A314C0133FA214E0A4EB1FF0A614F8B3A214F0A6EB3FE0A414C0A2137F14
-80A3EBFF00A25B1201A25B485AA2485AA2485A5B485AA248C7FC127E5A5A1270155A7BC3
-23>I<B512FEA917097F981E>45 D<EA0FC0EA1FE0EA3FF0EA7FF8EAFFFCA6EA7FF8EA3F
-F0EA1FE0EA0FC00E0E7B8D19>I<EA0FC0EA1FE0EA3FF0EA7FF8EAFFFCA6EA7FF8EA3FF0
-EA1FE0EA0FC0C7FCACEA0FC0EA1FE0EA3FF0EA7FF8EAFFFCA6EA7FF8EA3FF0EA1FE0EA0F
-C00E287BA719>58 D<DB7FF8130E0207B5131E023FECC03E91B6EAF07E0103EDF9FE4990
-38F807FF011FEBC0004990C7123FD97FFC141F4948140F48491407484914035C48491401
-5A91C9FC5A187E485AA3007F173EA25BA200FF1700AE127F183E7FA2123FA2187E6C7E18
-7C7E6E15FC6C6D15F86C16016EEC03F06C7F6C6DEC07E06D6CEC0FC06DB4EC3F806D01C0
-EBFF0001079038F807FE6D90B55A010015F0023F5C020714809126007FF8C7FC37407BBE
-42>67 D<B812FEA483C69038F8003F16071601828383A2EF1F80A3170FED01F0A3EF07C0
-A3150394C7FCA21507151F91B5FCA5ECF81F1507150318F8A21501EF01F0A592C71203A2
-18E0A21707A2170F171F18C0173F17FF1603161FB9FCA21880A3353D7CBC3C>69
-D<B612F8A5C6EBF800B3B3B0B612F8A51D3E7DBD24>73 D<B500F891B512FC80A28080C6
-933800FC008181A28181A201FD7F01FC7FA26E7E6E7E80826E7F80826E7F6E7FA26E7F6F
-7EA26F7E6F1380A26F13C06F13E0A26F13F06F13F8A26F13FCEE7FFEA2EE3FFF82A28282
-A2828282A2177F173FA2171F170FA21707B500FC1403A217011700A23E3E7CBD47>78
-D<913801FFC0021F13FC91B67E010315E04901807F903A1FFE003FFCD93FF8EB0FFE4948
-6D7E49486D7F48496D7F48834A7F48834890C86C7EA2488349153FA2003F83A249151F00
-7F83A400FF1880AE007F1800A36D5DA2003F5FA36C6C4B5AA26C5F6E14FF6C5F6C6D495B
-6E5B6C5F6C6D495B6D6C4990C7FCD93FFEEB3FFE6D6C6CB45A010790B512F06D5D010015
-80021F01FCC8FC020113C039407BBE44>I<B712F816FF17E08317FCC6D9F0007FEE1FFF
-7013808218C08218E0A318F0A818E0A318C05E18804C13005EEEFFFE91B612F85F17C04C
-C7FC02F8C9FCB3A4B612F8A5343E7CBD3E>I<003FB812FCA5D9FC03EBE01FD87FE0ED07
-FE01C01501018015001300007E177EA3007C173EA400FC173F48171FA5C71600B3AF013F
-B612FEA5383D7DBC3F>84 D<B600F890B512F8A5C601F8C8EAF800B3B3A5017F150160A2
-80013F1503606D6C1407010F4B5A6E4A5A6D6D133F6D6D01FFC7FC6D9038F807FE6D6CB5
-5A6E5C020F14E0020314809126003FFCC8FC3D3F7CBD46>I<B600E0B6D8F007B51280A5
-00019026F0000101F8C73807C00070160F6C6D6184177F6D6C4EC7FC84173F6D6C183E17
-7F846E187E6D92B5147C856F17FC6D4A5E05F77F03C016016D02035E05E313E003E01603
-6D02075E05C113F003F016076D61DC0F8013F803F8160F6D6193391F007FFC03FC161F02
-7F95C8FC4C14FE043E013F5BDA3FFE163E047E14FF047C6D137EDA1FFF167C04FC15FC4C
-7F6E5FA24C7F6E5FA24C7F6E5FA24C7F6E5FA24C7F6E5FA293C8127FA26F93C9FC037E81
-033E153E593F7EBD5E>87 D<B600F80103B512C0A5C66C48C8380F80006E151F6D4CC7FC
-816D167E6D7F6F5C6D5E6F13016D5E6F13036D4B5A6D7F6F495A027F5D6F131F6E92C8FC
-6E6D5AEEC07E80705A80EEF1F86E5C6E13FBEEFFE0805F815F6F90C9FC815EB3A2021FB6
-FCA5423E7FBD45>89 D<136013F01201EA03E0EA07C0A2EA0F80EA1F00121E123E123C12
-7CA21278A212F85AA2EAF7E0EAFFF013F813FC13FEA3127FA3EA3FFCEA1FF8EA0FF0EA07
-E00F207CBE19>96 D<EB0FFE90387FFFC048B512F04814FC3907FC0FFE48486C7E6D6C7F
-486C7E82A26E7FA36C5A6C5AEA01E0C8FC5C49B5FC131F90B6FC000313F84813C0481300
-EA1FFC485A127F5B12FF5BA45CA26C6C5A16F83B3FF807BFFF80391FFC1F3F390FFFFE1F
-6C497E0001EBF80326003FE0C8FC292B7EA92C>I<13FFB5FCA512077EAFEC03FE91381F
-FFC0027F13F091B57E9138FE0FFE9138F003FF4A7E02C014804A6C13C017E0A3EE7FF0A3
-17F8AC17F0A3EEFFE0A217C05D02C014806E4813006E485A9138FC1FFC01FCB55A496C13
-E0D9F01F1380C7D807FCC7FC2D407EBE33>I<EB03FF011F13E0017F13F890B57E48EB83
-FE3903FE01FF00075B4848481380121F13F8123FA2127F496C13006E5AEC007800FF91C7
-FCAC127FA27F003FEC07C0A26C6C130F16806C6C131F000715006C6C137F6CEBC1FE6CEB
-FFFC6D13F0011F5B010390C7FC222B7DA928>I<ED01FEEC01FFA5EC000F1507AFEB01FF
-011F13C7017F13F790B6FC4813C148EB007F4848131F485A001F140F5B123FA2485AA312
-FFAC127FA36C7EA3001F141F6C7E00074A7E6D90B512F83803FF83C690B6FC6D13EF011F
-13CF903A03FE0FF8002D407DBE33>I<49B47E010F13F0013F7F90B512FE48EBC3FF4801
-0013804848EB7FC04848133F001F15E05B003FEC1FF0A2485A150F16F8A212FFA290B6FC
-A401F0C8FCA5127FA37F003F15F8A26C6C1301000F15F06D13036C6CEB07E06C9038800F
-C06C9038F07F806C6CB512006D5B010F13F8010013C0252B7EA92A>I<EC1FF8ECFFFE01
-077F491480D91FF813C0D93FE013E0EB7FC1EBFF81481301A348486C13C0ED7F80ED3F00
-92C7FCAAB6FCA5000390C8FCB3ACB6FCA523407EBF1C>I<D907FE13FC90393FFFC3FE90
-B5EAF7FF4891B5128048130F3907FC03FE3A0FF801FF7F001FEDFF00496C13BE1680003F
-81A7001F5DA26D5A000F92C7FC6C6C485A3903FF0FFCECFFF8485CD80F3F13C0D907FEC8
-FC90CAFC5AA27FA213E090B512F015FF6C15C0826C816C8182120F4881393FE0003FD87F
-80EB07FF150148C7FC81A56D5B007F5D6D13036C6C495AD81FF8EB1FF86CB4EBFFF06C90
-B55A000115806C6C49C7FC010713E0293D7EA82D>I<13FFB5FCA512077EAFED7FE09138
-01FFF802077F4A7F91381FC3FFDA3E031380147CEC780102F014C014E0A214C0A31480B3
-A4B5D8FE1F13FFA5303F7EBE33>I<EA01F8487E487E487E481380A66C13006C5A6C5A6C
-5AC8FCA913FFB5FCA512077EB3ABB512F8A515407EBF19>I<13FFB5FCA512077EB092B5
-12E0A592380FE0004B5A4B5A4BC7FC15FE4A5A4A5A4A5A4A5A4A5A143FECFFE0A28181A2
-ECDFFCEC8FFE140F6E7E6E7FA26E7F6E7FA26F7E6F7EA26F7E6F7EB539FC7FFFF8A52D3F
-7FBE30>107 D<13FFB5FCA512077EB3B3AFB512FCA5163F7EBE19>I<01FFD97FE0EB3FF0
-B52601FFF8EBFFFC0207D9FC037F4A6D487F91281FC3FF0FE17FDA3E03D99F017F000701
-7C14BE6CD97801EBBC0002F002F88002E05CA202C05CA302805CB3A4B5D8FE1FD9FF0FEB
-FF80A549297EA84C>I<01FFEB7FE0B53801FFF802077F4A7F91381FC3FFDA3E03138000
-07137C6CEB780102F014C014E0A214C0A31480B3A4B5D8FE1F13FFA530297EA833>I<49
-B47E010F13F0013F13FC90B6FC48018113803A03FE007FC04848EB3FE0000F15F049131F
-001F15F8A24848EB0FFCA2007F15FEA400FF15FFAB007F15FEA3003F15FC6D131F001F15
-F8A26C6CEB3FF0000715E06C6CEB7FC03A01FF81FF806C90B51200013F13FC010F13F001
-011380282B7EA92D>I<9038FF03FEB5381FFFC0027F13F091B57E9138FE1FFE9138F007
-FF0007497E6C01C014804A6C13C017E081A217F0A2167F17F8ACEEFFF0A317E05D17C0A2
-6E4813806E4813006E485A9138FC1FFC91B55A16E0029F1380DA87FCC7FC0280C8FCACB5
-12FEA52D3B7EA833>I<3901FE07F800FFEB0FFE91383FFF804A13C0EC7C7F9138F8FFE0
-3807FFF06C5B5CA2ED7FC09138803F80ED1F0092C7FCA291C8FCB3A3B6FCA523297FA827
->114 D<90387FE1E03803FFFB4813FF5A381FE07F383F801F387F000F007E130712FE14
-03A27EA26DC7FC13F013FF6C13F014FC6C13FF15806C14C07E6C14E0000114F06C7E0103
-13F8EB003F140F0078130712F814037EA36C14F06C1307A29038800FE09038F03FC090B5
-1280150000F813FC38E03FF01D2B7DA924>I<131FA65BA55BA25BA25A5A5A001FEBFFC0
-B6FCA4000790C7FCB3EC03E0A97EEC87C0A26CEBCF806C13FF6D1300EB1FFEEB07F81B3B
-7EB923>I<D9FF80EB7FC0B5EB7FFFA5000714036C80B3A55DA35D7E4B13E0DAC01E13FF
-6CEBE07E6DB45A6D5B010F13E0010101801300302A7EA833>I<B539FC1FFFE0A5000390
-398000F800ECC0016C5DA2ECE0036C5D1507D97FF05BA2ECF80F013F5CA2ECFC1F011F91
-C7FC5D90380FFE3EA2157E903807FF7CA215FC6D5BA26D5BA36D5BA36E5AA26E5AA36EC8
-FC2B287EA730>I<B500E1B53887FFF8A50007903B801FF0003F006C6F133E150F02C015
-7E6C4A6C137CA26C01E05D4B7EA2D97FF04A5AED7FFF157DD93FF84A5A03FD138303F813
-87D91FFCECC7C014FD9238F07FCFD90FFFECEF80A29238E03FFF6D93C7FCA24B7E6D5DA2
-ED800F6D5DA2ED00076D5DA24A1303027E5C027C13013D287EA742>I<B539FC1FFFE0A5
-000390398000F800ECC0016C5DA2ECE0036C5D1507D97FF05BA2ECF80F013F5CA2ECFC1F
-011F91C7FC5D90380FFE3EA2157E903807FF7CA215FC6D5BA26D5BA36D5BA36E5AA26E5A
-A36EC8FCA25C143EA2000E5BEA3F80387FC0FC486C5AA2EBE1F0A2EBE3E013C7387FCFC0
-387D3F80D83FFFC9FC5BEA0FF8EA07E02B3B7EA730>121 D<001FB61280A4D9F80F1300
-EBE01F01C05B49485A130048495A4A5AA2D83E015B5B5D495BA2C64890C7FC5B5C495A01
-7FEB0F8014F8EBFFF0A248EBE01F48150014C0481380A248495A485A5D48485B007F5B90
-38F80FFEB6FCA421287EA728>I E
-%EndDVIPSBitmapFont
-%DVIPSBitmapFont: Fd cmbx12 13.14 28
-/Fd 28 89 df<EA07E0EA1FF8EA3FFCEA7FFEA2B5FCA6EA7FFEA2EA3FFCEA1FF8EA07E0
-1010778F22>46 D<EC0FFC91B512C0010714F8498090393FFC0FFF90267FE0017F49486C
-7F48496D7E4890C76C7E49141F000782000F8249140F001F82A3003F824980A2007F1780
-A600FF17C0B3A4007F1780A6003F17006D5CA2001F5EA3000F5E6D141F00075E6D143F6C
-5E6C6D495A6C6D495A90267FF0035B90263FFC0F90C7FC010FB512FC6D5C010014C0DA0F
-FCC8FC32487BC63D>48 D<15F014011407141F147FEB03FF137FB6FCA313FC1380C7FCB3
-B3B2007FB712E0A52B4777C63D>I<ECFFF80107EBFF80013F14F090B612FC4881480101
-EBFF802707F8003F13C0D80FE0010F13E0D81F806D13F0003F80D87FF06D13F86D15FC6D
-7F00FF16FE6D147FA217FF82A36C5A6C5A6C5A6C5AC95A17FEA3EEFFFCA24B13F817F05D
-17E04B13C017804B13004B5A4B5A5EED7FE04B5A4A5B4A90C7FCEC07FC4A5A4A5A4B131F
-EC3F804AC7FC14FE4948143E495AEB07E0495A4948147E49C8FC017E15FE90B7FC4816FC
-5A5A5A5A5A5AB8FC17F8A430477AC63D>I<EC3FFE0103B512E0010F14FC013F14FF9026
-7FE01F7F9026FF000713E0D801FC6D7FD803F07F486C6D7FD80FFE817F486D80167FA380
-5C16FF7E91C75B6C5A6C5AD80020495B90C75C5D5F4B5B5F031F90C7FCED3FFC4AB45A49
-B512E0168016E016FC90C7EA3FFF030713C06F7F6F7F6F7F83707E83A2701380A318C0EA
-07E0EA1FF8487E487EA2B5FCA31880A25E491600127F494A5A6C485D01E05B001F4A5BD8
-0FFC495B2707FFC03F13C06C90B65AC64BC7FC013F14F8010714E09026007FFEC8FC3248
-7BC63D>I<EE07E0160FA2161F163F167F16FFA25D5D5DA25D5D5DA2157D15FDEC01F915
-F1EC03E11407EC0FC1EC1F811501143F147E14FC14F8EB01F01303EB07E014C0EB0F8013
-1FEB3F00133E5B13FC485A485A5B1207485A485A90C7FC123E127E5AB912FCA5C80003EB
-E000AD023FB612FCA536487DC73D>I<D8038015E001E0140301FC143F9039FFE003FF91
-B612C017801700A25E5E16F05E5E93C7FC15FC15F001E790C8FC01E0C9FCAAEC1FFC01E1
-B512C001E714F001EF14FC9039FFE01FFFDA0007138001FC6D13C001F06D13E04915F049
-7F17F8C913FC167F17FEA417FFA3EA0FC0EA3FF0487EA2487EA317FEA34914FF6C4815FC
-5B018015F86CC74813F07F6C6C4913E0D80FF04913C0D807FC011F13806CB46CB512006C
-90B512FC6C5D013F14C0010F91C7FC010113F030487AC63D>I<ED7FF8913807FFFE021F
-6D7E027F80903A01FFF01FE0010790388003F04948486C7E49486D7ED93FF01307494813
-0F01FF4A7E4849133F5C5A4890C7FCA25A705A48486E5A705A003F92C8FCA3485AA21520
-913807FFE0021F13FC00FF497F4A6D7EDAFC017F9026FDF0007F4A6D7ED9FFC06D7E4A6D
-7E8391C7FC8382491680A318C05BA3127FA6123FA27F001F1780A3000F4B1300A26C6C5D
-A26C6D495A6C6D5C6C6D495A6D6C48485A90263FFC075B6DB65A6D4AC7FC01035C010014
-F0020F90C8FC32487BC63D>I<121F7F7F13FE90B812E0A45A18C0188018005F5FA25F48
-5E90C8EA07E0007E4B5A5F007C151F4CC7FC167E5E485D15014B5A4B5AC8485A4B5AA24B
-C8FC157EA25D1401A24A5A1407A24A5AA2141FA24A5AA2147FA314FFA3495BA45BA55BAA
-6D5BA26D90C9FCEB007C334B79C93D>I<EC1FFF49B512F0010714FC011F14FF90263FF0
-0713C049C77F01FCEC3FF04848EC0FF848481407000782491403000F821601A2121F7FA2
-7F13FE6D140302C05C14F002FC495A6C6D130FDAFF805B9238E01FE06C6E485A9238FCFF
-806C91B5C7FC6C15FC6C5D7F6D14FE6D806D15C06D81011F81017F81D9FFDF8048130726
-03FE018048486C804848133F4848010F1480003F8049130148486D6C13C0161F82484814
-0382A282A2177FA218807F127FEFFF007F6C6C4A5AA2D81FFC4A5A6C6CEC0FF86C6C6CEB
-3FF06C9039F003FFE06C90B612806C6C92C7FC011F14FC010714E09026003FFEC8FC3248
-7BC63D>I<EC1FFE49B512C0010F14F04914FC90397FFC0FFE903AFFE003FF804849C67F
-48496D7E4890C7FC486F7E484881161F003F825B007F82A28300FF81A31880A518C0A45E
-127FA3003F5D7F121F5E120F6C6C91B5FC6C90388001EF6CEBC0036C9038E00FCF6DB512
-8F011F140F010701FE1480010113F8903800010091C7FCA24C1300A3D803F85D487E487E
-486C4A5AA25F4C5AA24C5A49495B6C485D49010790C7FC01E0495AD807F8EB3FFC6CB448
-B45A6C90B55A6C15C06D91C8FC011F13FC010313C032487BC63D>I<EE01F8A24C7EA34C
-7EA24C7EA34C7FA24C7FA34C7FA293B57EA34B8016F303038016E316E103078016C0030F
-805E83031F814C7E4B81153E83037E81037C7F03FC815D830201824B7F0203825D830207
-824B7F020F825D84021F8392B8FC4A83A34A83027CC8120F02FC835C840101844A810103
-845C840107844A81010F845C85011F85496C82B600C091B712F0A5544D7CCC5D>65
-D<93261FFF80EB01C00307B500F81303033F02FE13074AB7EA800F0207EEE01F021F903A
-FE007FF83F027F01E0903807FC7F91B5C73801FEFF010301FCEC007F4901F0814901C015
-0F4949814990C97E494882495A48498248197F5C48193F5C48191F5C48190FA2485BA21A
-075AA391CDFCA2B5FCAD7EA280F207C0A27EA36C7F1A0F6C1A80806C191F6E18006C6180
-6C197E6C6D177C6D6C17FC6D6C4C5A6D6D4B5A6D6D4B5A6D01F0ED1FC06D01FC4B5A0100
-01FF03FFC7FC6E01E0EB07FE021F01FEEB3FFC020790B612F0020116C0DA003F92C8FC03
-0714F8DB001F13804A4D79CB59>67 D<B912F0F0FF8019F019FC19FFD8001F9026800001
-14C0DD001F7F060713F806017F726C7E737E737F737F737F8587737F8587A2747EA38786
-A21C80A51CC0A586A462A51C80A51C00A26263A2631AFF636163614F5B634F5B073F90C7
-FC4F5A4F5A06035B061F5B4DB512C0BBC8FC19FC19F0198006F0C9FC524B7CCA5E>I<BB
-12C0A486D8000F01E0C77E18071801F0007F193F191F190F1907861903A31901A3EF0F80
-A2737EA497C7FC171FA2173F177F17FF160392B6FCA5EDE0031600177F173F171FA2050F
-EC0F80A3F21F00A494C8FC621A3EA21A7EA31AFE6219011903A21907190FF13FF819FF18
-03183FBBFCA262A3494A7CC951>I<BBFCA41A80D8001F01C0C7FC181F18038484197F19
-3F191F1AC0190FA31907A4171FF103E0A496C7FCA25FA25F5F5E160792B6FCA5EDC00716
-01828383A283A794C9FCB1B8FCA5434A7CC94D>I<93261FFF80EB01C00307B500F81303
-033F02FE13074AB7EA800F0207EEE01F021F903AFE007FF83F027F01E0903807FC7F91B5
-C73801FEFF010301FCEC007F4901F0814901C0150F4949814990C97E494882495A484982
-48197F5C48193F5C48191F5C48190FA2485BA21A075AA391CEFCA2B5FCAD7E050FB712C0
-80A37E94C7001FEBC000807EA27E807E807E806C7F7E6D7E6D7E6D7F6D01E05D6D6D5D6D
-13FC010001FF4AB5FC6E01E0EB07F9021F01FFEB3FF0020791B5EAE07F0201EEC01FDA00
-3FED0007030702F81301DB001F018090C8FC524D79CB60>I<B712FEA5D8000FEBE000B3
-B3B3ABB712FEA5274B7DCA2E>73 D<B8FCA5D8001F01C0C9FCB3B3A4193EA4197E197CA5
-19FCA31801A2F003F8A21807180F181F183F187FEF01FF1707173FBA12F0A53F4B7BCA4A
->76 D<B600E04DB612806F5FA26F5FA2D8001F09FCC7FC6FEF0F7FA2DABFFE171EA2DA9F
-FF173CA3028F6D1678A202876D16F0A202836DED01E0A302816DED03C0A202806DED0780
-A26F6CED0F00A36F6C151EA26F6C5DA26F6D5CA26F6D5CA36F6D495AA26F6D495AA26F6D
-495AA3706C49C7FCA2706C131EA2706C5BA3706D5AA2706D5AA270EBE1E0A370EBF3C0A2
-70EBFF80A27190C8FCA2715AA3715AA2715A497EB600F06D480103B71280A3715A715A69
-4B7BCA74>I<B600E092B612FC8181A281D8001F6D9239001FE0006F705A82A28202BF7F
-029F7FA2028F7F02877F02837F8214810280806F7F6F7F83816F7F6F7F6F7F83816F8070
-7F707F8482707F707F707FA2707F7014807113C019E0837113F07113F87113FC19FE8371
-13FF71148F7213CF1AEF847213FF8484A284848485A2858585A285858585497EB600F816
-7F1A3F1A1F1A0FA2564B7BCA60>I<EEFFF8031FEBFFC04AB612FC020715FF021FD9C01F
-13C091277FFE000313F0902601FFF09038007FFC49496E7E490180EC0FFF4990C86C7F49
-486F7F49486F7F017F8449486F7F4849707EA24849707E4885A24849701380A2481AC04A
-82A2481AE0A34890CA6C13F0A5B519F8AE6C1AF0A26E5EA36C1AE0A26E5E6C1AC0A26C1A
-806E5E6C1A006E5E6C616E16FF6C616C6D4B5B6D6C4B5B6E5D6D6D4A5B6D6D4A5B01076D
-4A90C7FC6D01F8ECFFFE6D01FE01035B9028007FFFC01F13F0021F90B612C0020793C8FC
-020115FCDA001F14C0030101FCC9FC4D4D79CB5C>I<B912C018FCF0FF8019F085D8001F
-902680000713FE05007F063F1380060F13C07213E01AF0841AF8A27213FCA31AFEA81AFC
-A34E13F8A21AF0601AE04E13C0063F138095B51200050713FC92B75A19E096C7FC18F803
-C0CAFCB3ABB712FCA5474B7BCA54>I<B9FC18F8F0FF8019E019F8D8000F9026C0000713
-FE9439007FFF80061F7F727F727F727F84868684A286A862A24E5BA2624E5B4E5B4E5B4E
-5B95B5C8FC050713FC92B712F0198006FCC9FC18FF9226C0003F13C0050713F0717F717F
-717F187F85727FA28486A786A71C3E86A28474137E72157C726D13FCB700FC6D9038FE01
-F872EBFF8373EBFFF0071F14E007031480CD383FFE00574C7CCA5C>82
-D<DA7FFCEB01C00103B5EAC003011FECF00749ECFC0F90B7121F48D9E00F13BF4890C713
-FFD807FC141F4848804848140382484880177F485A173F171F12FFA2170F7FA217077F7F
-7F6D92C7FC6D7E6C13F014FF15F86CECFF8016F86C15FF6C16C0836C826C826C826C8201
-3F816D1680010716C01300020F15E01400030714F0ED007F160F16037013F882177F1278
-00F8163FA3171FA27E18F0A27EA26CEE3FE07F18C001E0157F6DEDFF8001FC160001FF14
-0302E0EB0FFED97FFEEB3FFC486CB612F0D8FC0F5DD8F803158048C66C49C7FC48010313
-F0354D79CB44>I<003FBB12C0A5DA80019038FC001FD9FC001601D87FF09438007FE001
-C0183F49181F90C7170FA2007E1907A3007C1903A500FC1AF0481901A5C894C7FCB3B3A7
-49B812FCA54C4A7CC955>I<B700F8023FB512F8A5D8001F01C0C9380FE000745AB3B3AD
-6D180F63811A1F6D96C7FC626D7F1A7E6D7F6D606E6C4B5A6E6CED07F06E6C4B5A6E01C0
-EC3FC06E01F049B45A020101FF011F90C8FC6E91B55A033F15F8030715E0030092C9FC04
-0713F0554C7CCA5E>I<003FB600FC011FB61280A5D8000701FCC8D81FF0C7FC6D6D6F5A
-626D6D4B5A6D6E4AC8FC616E6D147E6E6D5C70495A6E15036E6D5C6E6D495A4E5A6E6D13
-1F6E6D5C4EC9FC6EEC807E6FEBC0FE715A6FEBE1F86FEBF3F06F13FF606F5C6F5CA26F91
-CAFC6F80707FA2707F707FA2707F845E4C7F84047E805E03016D7F4C6C7FED03F04B486C
-7F030F6D7F16C04B486C7F4B486C7F717F157E4B6D8002016F7F5D4A486E7F4A486E7F14
-0F4B6E7F4A486E7F4AC86C7F5C027E6F7F4A6F80495A0103717F496C707FB600FC027FB6
-12FCA5564B7DCA5D>88 D E
-%EndDVIPSBitmapFont
-%DVIPSBitmapFont: Fe cmsltt10 10.95 8
-/Fe 8 117 df<903803FF80011F13F0017F13FC90B57E4880488149C67F49133F48486D
-7E0003140F5BC65A90C77FA25EA2EC3FFF0107B5FC133F90B6FC1203485D48EBE01F381F
-FE00EA3FF0D87FC0133F5B48C75B5AA2157FA215FF6C4990C7FCEB8007267FE07F13FE90
-B7FC6C16806C14BF6C020F130000039038F803FEC601C0C8FC292A79A830>97
-D<EEFF80030713E0031F13F0157F92B512F85C4AEB07F0EC07FC03F813E091390FF001C0
-4BC7FCA2141F5DA548B612FE48815AA36C5DC7D87F80C7FC92C8FCA55C5CA513015CA513
-035CA513075CA2007FB512FEB7FCA46C5C2D397CB830>102 D<90383FFFF8497F81A37F
-90380001FCA514035DA514075DA5140F5DA5141F5DA5143F5DA5147F92C7FCA55C5CA200
-3FB612F04815F8B712FCA26C15F86C15F026387BB730>108 D<913903F001F83B01FF0F
-FC07FE489039BFFE1FFF91B5007F138093B5FC18C06C9039FC3FFE1F3B003FF81FFC0F02
-E013F002C013E0A2028013C09139003F801F491680A2017E1400A401FE49133F49017E14
-00A5000102FE5B4949137EA50003010114FE01F0495BA23C3FFE07FF03FF80486C480187
-13C0B5009F01CF13E0A26C010F018713C06C486C01031380332881A730>I<EC1FE0ECFF
-FC010313FF010F14804914E0137F9039FFE07FF0489038800FF83903FE000749EB03FC48
-481301484814FE491300485A123F5B167F48C8FCA300FE15FEA4150116FCA26CEC03F815
-0716F06C6C130FED1FE06DEB3FC06C6C137F3A1FF001FF80D9FC0713006CB55A6C14F86C
-5C6C14C06C6C90C7FCEB0FF8282A79A830>111 D<ED03FE903A3FFC1FFF8090267FFE7F
-13E001FF90B57E91B67E6D816D9038FE07FE0101EBF0019238C000FF5D92C7EA7F804A14
-3F5C13035C18C0171FA2173F010716805CA3177F1800130F5F4C5AA24C5A6E495A011F14
-0F6E495A6EEB7FE09139FF83FFC092B55A94C7FCD93FDF5B028F13F8028313E0028090C8
-FC92C9FC137FA291CAFCA45BA25BA4387FFFF0B57E80A25C6C5B323C82A730>I<EE3FE0
-3B01FFFC01FFF848D9FE0F13FC485C037F13FE6C91B5FC6C90B512E1D80001EC01FC15FC
-9238F000704B13005D5D4990C8FC5CA25CA25C13075CA5130F5CA5131F5CA2007FB512FC
-B67EA46C5C2F287DA730>114 D<EB03C0497E80A3130F5CA5003FB612E04815F0B7FCA3
-6C15E026003FC0C7FC5CA5137F91C8FCA55B5BA50001EC0F8049EB1FC0A3153F1680157F
-15FF6D4813009038FF07FE6CEBFFFC5D6D5B6D5B010F1380D903FCC7FC243378B130>
-116 D E
-%EndDVIPSBitmapFont
-%DVIPSBitmapFont: Ff cmsl10 10.95 29
-/Ff 29 123 df<007FB5FCA2B512FEA418067C961E>45 D<DCFFC01338030F01F0137803
-7F01FC13F0913A01FF803F01913A07FC000781DA1FE0EB03C3DA7FC0EB01E74AC812FF49
-48ED7FE0D907FC153F495A4948151F495A4948150F494816C018074890C9FC485AA2485A
-000F1880491603121FA248481607A295C7FC485AA412FF5BA75BA2181C183C1838A27F00
-7F1778187018F0003F5F6D150160001F16036C6C4B5A95C7FC6C6C5D6C6C151E6C6C5D6C
-6C15F86D6C495A6D6CEB07C0D91FF0EB1F80D907FE01FEC8FC0101B512F86D6C13E0DA07
-FEC9FC3D4276BF42>67 D<011FB512FC5BA29039003FF8006E5AA25DA5143F5DA5147F5D
-A514FF92C7FCA55B5CA513035CA513075CA5130F5CA5131F5CA3133F497E007FB512F0A2
-B6FC263E7EBD21>73 D<90263FFFF093381FFFF85013F0629026007FF8EFF000023F4D5A
-A2023B933801DFC0A2DA39FCED039FA2F1073F14790271040E5BEC70FE191C19381A7F02
-F01670DAE07F94C7FC19E0A2F001C06201016D6C495A02C05FF00700A2180E6F6C140101
-03161C028003385BA218706F7EF0E00313070200DA01C05BA2923907F00380A294380700
-075B010E902603F80E5C5FA25F190F011E6D6C5A011C605FA2EEFDC0DB00FF141F013C5D
-013860013C92C7FC017C5C01FE027E143F2607FF80017C4A7EB500FC037FB512E004785E
-4A1338553E7CBD53>77 D<90263FFFE0023FB5FC6F16FEA29026003FF8020313C0021F03
-0013004A6C157C023B163C6F15381439810238167802787FDA707F157082153F82031F15
-F002F07FDAE00F5D8215078203031401010180DAC0015D82811780047F1303010315C04A
-013F5C17E0161F17F0040F1307010715F891C7000791C7FC17FC160317FE04015B4915FF
-010E6E130E188E177F18CEEF3FDE011E16FE011C6F5AA2170FA21707133C01386F5A133C
-017C150113FE2607FF801400B512FC18705C483E7DBD44>I<013FB612FEEFFFE018F890
-3B007FF0000FFC6E48EB01FF7113804BEC7FC0183F19E0F01FF0A2147F5D19F8A402FFED
-3FF092C8FCA219E0A2F07FC05B4AEDFF8019004D5A4D5AEF0FF80103ED3FE04A903801FF
-8091B648C7FC17F002FCCAFCA213075CA5130F5CA5131F5CA5133F5CA3137F497EB612E0
-A25D3D3E7DBD3E>80 D<9238FF80070207EBE00F021FEBF81E91387F00FE02FCEB1F3ED9
-03F0EB0FFE49481307494813034AEB01FC49C7FC491400133E137E177C491578A57F1770
-A26D1500808080EB7FFEECFFE06D13FEEDFFC06D14F06D14FC010380010080143F020314
-80DA003F13C015031500EE7FE0163F161FA2160F121CA31607160F003C16C0A31780003E
-151F1700007E5D007F153E6D5C16FC01E0495AD87DF0495AD8FCFCEB0FC03AF87F803F80
-27F01FFFFEC7FCD8E00713F839C0007FC030427BBF33>83 D<B600E090B512FC4B15F8A2
-000101C0C7000F13006C49EC03FCEF01F091C9FC60A317015A495EA417031203495EA417
-0712074993C7FCA45F120F49150EA4171E121F49151CA4173C123F491538A31778177017
-F05F001F15015F16036D4A5A000F93C8FC5E6C6C141E6C6C5C000115F86C6C495A017FEB
-07C090393FC03F8090260FFFFEC9FC010313F89038007FC03E4073BD44>85
-D<EC7FC0903803FFF890380FC07E90383E003F496D7E01FF6D7E82A248140782A26C5A13
-7890C7120FA25EA2EC03FF147F903807FF1FEB1FE0D97F805B3801FE00EA03F8485A4848
-133F485A003F5D49EC81C048C7FCA2157F48ED03804814FFA2007F5B913903BF07009038
-80073F3A3FC00E1F8E260FE03C13FC3A03FFF00FF83A007FC003E02A2A7CA82D>97
-D<EB3F80EA1FFFA3C6FC137FA291C9FCA55B5BA512015BA4EC07F80003EB3FFF9039F8F8
-0FC09039FBE003E09039FF8001F891C77E5B4848147E49147F5B821780A2120F5B17C0A3
-167F001F16805BA4EEFF00123F5B4B5AA24B5A5E007F4A5AA24B5A6D495A4BC7FCD87CE0
-137E39F87001F839F03C07E039E00FFF80260003FCC8FC2A4077BE33>I<EC1FF0ECFFFE
-903903F01F8090390FC003C0D93F0013E0017E130F49131F000115F04848EB3FE0485AA2
-4848EB1FC0001FEC0F004990C7FC123FA2485AA412FF90C9FCA96CEC0380150716006C6C
-5B151E001F5C6C6C5B6C6C5B6C6C485A3901F80F8026007FFEC7FCEB0FF0242A7AA828>
-I<EE03F8ED01FFA3ED000F1607A217F0A4160FA217E0A4161FA217C0A491380FF03FECFF
-FC902603F81F138090390FC007BF90391F8003FF90387E0001497F0001157F4848150048
-5A120F5B001F5D485A5E5B127FA2150112FF90C75BA41503A25EA37E1507A26C4A5A7F00
-1F141F6C6C133F6C6CEBFFF83B03F001EFFFC03900F80F8F90383FFE0FD90FF0EBE0002D
-407ABE33>I<EC3FE0903801FFF8903807E07E90380F801F90393F000F80017E14C049EB
-07E0485A12034848EB03F0485AA2121F5B123FA248481307A290B6FCA2D8FF80C8FC90C9
-FCA87EED01C015036C15806D1307001FEC0F006D131E000F5C6C6C5B6C6C485A3900FC07
-C0D93FFFC7FCEB07F8242A7BA828>I<ED07F0ED3FFCEDFC1E913803F03F4A48B4FC4A48
-1380141FEC3F81DA7F0113008102FE137C93C7FCA213015CA513035CA50007B512F8A326
-0007F0C8FCA3130F5CA5131F5CA5133F5CA5137F91C9FCA55B5BA4EA03FF007F13FEB5FC
-A229407DBF1C>I<1478EB01FE130314FFA25B14FE130314FCEB00F01400ACEB03F8EA01
-FF14F0A2EA001F130FA314E0A5131F14C0A5133F1480A5137F1400A55B5BA4EA03FF007F
-13F0A2B5FC183E7DBD1A>105 D<147FEB3FFFA313017FA25CA513015CA513035CA50107
-0103B5FC02F014FEA26F13F06F1380EEFE00010F14F84A485AED03C04B5A031FC7FC153E
-011F13784A5AECC3E0ECC7F0ECCFF814FF497F14F9ECE1FE14C04A7E4A7E4980017E133F
-82151F82150F01FE8049130782A2000181486C49B4FCB5D8F03F13F04B13E0A2303F7EBE
-30>107 D<143FEB1FFF5BA213017FA214FEA5130114FCA5130314F8A5130714F0A5130F
-14E0A5131F14C0A5133F1480A5137F1400A55B5BA4EA03FF007F13F8A2B5FC183F7DBE1A
->I<902707F007F8EB03FCD803FFD91FFF90380FFF80913CE0781FC03C0FE09126E1E00F
-EBF0073E001FE38007E1C003F090260FE700EBE38002EEDAF70013F802FC14FE02D85C14
-F84A5CA24A5C011F020F14074A4A14F0A5013F021F140F4A4A14E0A5017F023F141F91C7
-4914C0A549027F143F4992C71380A300014B147F486C496DEBFFC0B5D8F87FD9FC3F13FE
-A347287DA74C>I<903907F007F8D803FFEB1FFF9139E0781FC09138E1E00F3B001FE380
-07E090380FE70002EE14F014FC14D814F85CA24A130F131F4A14E0A4161F133F4A14C0A4
-163F137F91C71380A4167F5B491500A300015D486C491380B5D8F87F13FCA32E287DA733
->I<EC0FF0ECFFFE903903F01F8090390FC007C049C66C7E013E6D7E01FC6D7E48488049
-147C0003157E485A000F157F5B121FA2485AA2007F1680A2170048C85AA54B5AA25E5A6C
-4A5A7E4B5A5E6C140F6C6C5C4B5A6C6C013EC7FC6C6C5B6C6C485A3900FC0FE090383FFF
-80D90FF8C8FC292A7BA82D>I<91387F01FE903A7FFF0FFFC09139FE3E03F09238F801F8
-903A03FFE000FE6D49137F4B7F92C713804A15C04A141FA218E0A20103150F5C18F0A317
-1F010716E05CA3173F18C0130F4A147F1880A2EFFF004C5A011F5D16034C5A6E495AEE1F
-C06E495AD93FDC017EC7FC91388F01F8913883FFE0028090C8FC92C9FC137FA291CAFCA4
-5BA25BA31201487EB512F8A3343A81A733>I<903907F01F80D803FFEB7FE09138E1E1F0
-9138E387F839001FE707EB0FE614EE02FC13F002D813E09138F801804AC7FCA25C131FA2
-5CA4133F5CA5137F91C8FCA55B5BA31201487EB512FEA325287EA724>114
-D<9138FF81C0010713E390381F807F90397C003F8049131F4848130F5B00031407A24848
-1400A27FA27F6D90C7FCEBFF8014FC6C13FF6C14C015F06C6C7F011F7F13079038007FFE
-1403140100381300157EA2123C153E157E007C147CA2007E147815F8007F495A4A5A486C
-485A26F9E01FC7FC38E0FFFC38C01FE0222A7DA824>I<EB0380A4130791C7FCA25BA25B
-A2133EA2137E13FE12011207001FB512C0B6FCA2D801FCC7FCA312035BA512075BA5120F
-5BA41407001F130E13C0A4141E141C1380A26D5AA2000F5B14F03807E1E03801FF80D800
-7EC7FC1A3978B723>I<01FE147F00FFEC7FFF4914FEA20007140300031401A34914FCA4
-150312074914F8A41507120F4914F0A4150F121F4914E0A2151FA3153F4914C0157F15FF
-EC01DF3A0FC003BFE09138073FFF3803F01E3801FFF826003FE01380282977A733>I<B5
-39E007FFF05D17E02707FE000313006C48EB01FC6F5A5E00014A5A5EA24B5A6D13070000
-92C7FC5D150E6D5B7F5DA25D1480013F5B14815D14C3011F5B02C7C8FCA214CE14EEEB0F
-FCA25CA26D5A5CA25CA26D5A2C2878A630>I<B500C3B53803FFFCA204FE14F8290FFE00
-3FE00013C0D807F86D48EB7F000003173E183C150F18386D5E0001141F705B153F4D5A15
-776D4B5A0000ECE7F04DC7FCEC01C3170E9038FF0383017F5D91380703F85FEC0E01021E
-5CD93F9C14F002BC6D5A02B813FDDAF8005B4A13FF5F6D5A94C8FC5C4A137E167C6DC7FC
-1678010E14383E2878A642>I<90B539E007FFF05E18E0902707FE000313006D48EB01FC
-705A5F01014A5A5F16036E5C0100140794C7FC160E805E805E1678ED8070023F13F05EED
-81C015C191381FC38015C793C8FC15EF15EEEC0FFCA25DA26E5AA25DA26E5A5DA24AC9FC
-5C140E141E141C5C121C003F5B5A485B495A130300FE5B4848CAFCEA701EEA783CEA3FF0
-EA0FC0343A80A630>121 D<017FB512FEA2ECC00190397E0003FC49EB07F849EB0FF049
-EB1FE049EB3FC0ED7F8000011500495B4A5A4A5A4848485A4A5AC7485A4A5A5D147F4AC7
-FC495A495A49481370494813E0495A5C133F90387F8001D9FF0013C0485A48481303485A
-4848EB078049130F4848131F003F143F397F8001FFB71200A227277EA628>I
-E
-%EndDVIPSBitmapFont
-%DVIPSBitmapFont: Fg cmti10 10.95 1
-/Fg 1 47 df<120FEA3FC0127FA212FFA31380EA7F00123C0A0A77891C>46
-D E
-%EndDVIPSBitmapFont
-%DVIPSBitmapFont: Fh cmbxti10 14.4 1
-/Fh 1 47 df<13FCEA03FF000F13804813C05AA25AA2B5FCA31480A214006C5A6C5A6C5A
-EA0FE0121271912B>46 D E
-%EndDVIPSBitmapFont
-%DVIPSBitmapFont: Fi cmbx12 17.28 47
-/Fi 47 121 df<B812C0AD2A0D7EA636>45 D<19F0F001F8F003FCA3180719F8180FA219
-F0181F19E0183FA219C0187F198018FFA219005F601703A260170760170FA260171F6017
-3FA260177F6017FFA295C7FC5E5F1603A25F16075F160FA25F161F5F163FA25F167F5F16
-FFA294C8FC5D5E1503A25E15075E150FA25E151F5EA2153F5E157FA25E15FF93C9FC5CA2
-5D14035D1407A25D140F5D141FA25D143F5D147FA25D14FF92CAFC5BA25C13035C1307A2
-5C130F5C131FA25C133F5C137FA25C13FF91CBFC5AA25B12035B1207A25B120F5B121FA2
-5B123F5B127FA25B12FF90CCFCA3127E123C3E9077EB51>47 D<ED0FFF4AB512F8020F14
-FF023F15C091B712F049D9FC037F0107D9F00013FE4901C0EB3FFF4990C7000F7F49486E
-7F017F8349486E7F4A80488448496E7FA248844A157F4884A3481980A34819C04A81A348
-19E0A7B518F0B3A86C19E0A76C19C0A26E5DA26C1980A36C1900A36C6D4B5AA26C60A26C
-6D4A5B6C606E5C6D6C4A5B6D6C4A5B6D6D495B6D6D4990C7FC6D01F0EBFFFE6DD9FC035B
-010090B612F0023F15C0020F92C8FC020114F8DA001F138044607ADD51>I<16F04B7E15
-07151F153FEC01FF1407147F010FB5FCB7FCA41487EBF007C7FCB3B3B3B3007FB91280A6
-395E74DD51>I<913801FFF8021FEBFFC091B612F8010315FF010F16C0013F8290267FFC
-0114F89027FFE0003F7F4890C7000F7F48486E7FD807F86E148048486E14C048486E14E0
-48486F13F001FC17F8486C816D17FC6E80B56C16FE8380A219FFA283A36C5BA26C5B6C90
-C8FCD807FC5DEA01F0CA14FEA34D13FCA219F85F19F04D13E0A294B512C019804C14004C
-5B604C5B4C5B604C13804C90C7FC4C5A4C5A4B13F05F4B13804B90C8FC4B5AED1FF84B5A
-4B5A4B48143F4A5B4A48C8FC4A5A4A48157E4A5A4A5AEC7F8092C9FC02FE16FE495A495A
-4948ED01FCD90FC0150749B8FC5B5B90B9FC5A4818F85A5A5A5A5ABAFCA219F0A4405E78
-DD51>I<92B5FC020F14F8023F14FF49B712C04916F0010FD9C01F13FC90271FFC00077F
-D93FE001017F49486D8049C86C7F484883486C6F7F14C0486D826E806E82487FA4805CA3
-6C5E4A5E6C5B6C5B6C495E011FC85A90C95CA294B55A614C91C7FC604C5B4C5B4C5B4C5B
-047F138092260FFFFEC8FC020FB512F817E094C9FC17F817FF91C7003F13E0040713F804
-0113FE707F717F7113E085717FA2717F85A285831A80A31AC0EA03FCEA0FFF487F487F48
-7FA2B57EA31A80A34D14005C7E4A5E5F6C495E49C8485BD81FF85F000F5ED807FE92B55A
-6C6C6C4914806C01F0010791C7FC6C9026FF803F5B6D90B65A011F16F0010716C001014B
-C8FCD9001F14F0020149C9FC426079DD51>I<F01F804E7E187F18FFA25F5F5F5FA25F5F
-5FA294B5FC5E5E5EA25E5EEE3FBFEE7F3FA216FEED01FCED03F8ED07F0A2ED0FE0ED1FC0
-ED3F8016005D15FE4A5A4A5AA24A5A4A5A4A5A4A5AA24AC7FC14FE495A5C1303495A495A
-495A5C133F49C8FC13FE485AA2485A485A485A5B121F485A48C9FC12FEBCFCA6CA6CEBC0
-00B1037FB8FCA6485E7CDD51>I<01C0EE01C0D801F8160F01FF167F02F0EC07FFDAFF80
-90B5FC92B7128019006060606060606095C7FC17FC5F17E0178004FCC8FC16E09026FC3F
-FCC9FC91CBFCADED3FFE0203B512F0020F14FE023F6E7E91B712E001FDD9E00F7F9027FF
-FE00037F02F801007F02E06EB4FC02806E138091C8FC496F13C04917E07113F0EA00F090
-C914F8A219FC83A219FEA419FFA3EA03F0EA0FFC487E487E487FA2B57EA319FEA35C4D13
-FC6C90C8FC5B4917F8EA3FF001804B13F06D17E0001F5E6C6C17C06D4B1380D807FC92B5
-12006C6C4A5B6C6C6C01075B6C01E0011F5BD97FFE90B55A6DB712C0010F93C7FC6D15FC
-010115F0D9003F1480020301F0C8FC406078DD51>I<EE1FFF0303B512E0031F14F892B6
-12FE0203814AD9FC037F021F9039C0007FC04A90C7EA1FE0DAFFFC6E7E494914074949EC
-7FF8494914FF49495B4949497F4990C7FC495D5C13FF485BA25A4A6E5B5A715B48496E5B
-725A4894C8FCA35AA35C48913801FFE0030F13FE033F6D7E4B14E092B612F89126E1FE03
-7FB53AE3F0007FFEDAE7E06D7EDAEFC06D7F4B6D7F02FFC76C7F4A82717F4A82A2854A80
-85A24A1780A54A17C0A37EA77EA47E6E1780A27EA21A007E4D5B7E6E5E7E6E5E6C4C5B6D
-7E013F4B5B6D6C4A5B6D01C0495B6D6D90B5C7FC6DD9FC0713FC6D90B65A6D5E023F15C0
-020F92C8FC020114F8DA001F1380426079DD51>I<EA07E0120F7F13FCEBFFFC91B912F8
-A45AA21AF01AE01AC01A801A00A248606161616101E0C9123F01804C5A48CA485A4D90C7
-FC60007E4C5A17074D5A4D5A4D5A485F4D5A17FF4C90C8FCC9485A5F4C5A160F4C5A5F16
-3F4C5A16FF5F5D94C9FC5D5D5E150FA24B5AA2153FA24B5AA215FFA34A5BA25CA35CA44A
-5BA45CA65CAD6E5BA26E5BDA03FECAFC6E5A456377E051>I<92383FFF800203B512FC02
-1FECFF80027F15E049B712F849D9F0077F010F90C76C7ED91FFCEC1FFFD93FF06E7F4948
-02037F494882717F484980854890C9127FA24884183FA25A80A380806E157F6E5E14FE6E
-7E6F4A5A6C14F003FC495B03FF495B6C1580DCE0075B6CDBF80F90C7FC9338FE1FFE6C92
-38FF7FF84D5A6D16C06D5E6D4BC8FC6D6F7E6D16E00101826D16FC023F814A8149B87E01
-0783498390263FFE3F8190267FFC0F819026FFF003814849C6FC48496D804849131F4890
-C7000780160148486E1580003F163F49150F007F7014C0491501717E8400FF835B8484A3
-84A21A80A27F007F1900607F003F606D160F001F606D4C5A6C6D153F6C6D4B5A6C01F04B
-5A6C01FC02035B6C01FF021F5B6D9027F001FFFEC7FC6D90B65A010F16F001035E010093
-C8FC020F14F8DA007F90C9FC426079DD51>I<ED3FFF0207B512F0023F14FC91B7FC0103
-16C049D9F8077F49D9C00113F8013F496C6C7E4948C76C7E49486E7E4884484980717F48
-49825A48707F855A5C855A8583A2B583A41A80A71AC0A35F7EA46C5EA27E6E5C7EA26C5E
-6C7F6C5E6C6D147D6D6C14FD6D6CEB01F96D90388003F16D9038F01FE16D90B500C11480
-010115816D6C1401021F13FC020113E091C8FC1A00A25FA261A3D9FF805E487F486D4A5B
-487FA2486D5E5F61615F614A4A90C7FC4D5A6C5B4A4A5A4A01035BD803FCC7485B6C6C02
-1F13C0D9FFC0017F5B6CD9F803B5C8FC6DB612FC6D5D010F15E0010392C9FC010014F802
-0F1380426079DD51>I<F00FE04E7EA24E7EA34E7EA24E7EA34D7FA24D80A24D80A34D80
-A24D80A34D80A2DD7FBF7FA2181F05FF8017FE04016D7FA24D7E04038217F804076D80A2
-4D7E040F8217E0041F6D80A24D7F043F825F047F6E7FA294C77E4C825E03016F7FA24C80
-0303845E03076F80A24C80030F845E031F6F80A24C81033F845E037F707F93B9FCA292BA
-7EA24A85A203FCC912070203865D020771805D86020F864B82021F865D87023F864B8302
-7F8692CBFC874A864A840101875C496C728090381FFFC0B700E092B812FEA66F647BE37A
->65 D<BB12F0F2FF801BF81BFEF3FFC088D800010280C7000114F8DF003F7F080F13FF74
-807480867480757FA2757FA28987A289A965A26365A2515BA298B55A505C505C5091C7FC
-505B505B087F13F00703B512C096B6C8FC93B812F81BC01BF8F3FF801CE00480C8001F13
-F8080713FE08016D7E7480757F757F757F89757F89871E80871EC0A41EE087A663A21EC0
-A3631E80A2511400A2515B515B6398B55A505C08075C081F5C97B6C7FCBD5A1CF81CE099
-C8FC1BF898C9FC63627AE173>I<4DB5ED03C0057F02F014070407B600FE140F047FDBFF
-C0131F4BB800F0133F030F05FC137F033F9127F8007FFE13FF92B6C73807FF814A02F002
-0113C3020702C09138007FE74A91C9001FB5FC023F01FC16074A01F08291B54882490280
-824991CB7E49498449498449498449865D49498490B5FC484A84A2484A84A24891CD127F
-A25A4A1A3F5AA348491A1FA44899C7FCA25CA3B5FCB07EA380A27EA2F50FC0A26C7FA37E
-6E1A1F6C1D80A26C801D3F6C6E1A00A26C6E616D1BFE6D7F6F4E5A7F6D6D4E5A6D6D4E5A
-6D6D4E5A6D6E171F6D02E04D5A6E6DEFFF806E01FC4C90C7FC020F01FFEE07FE6E02C0ED
-1FF8020102F8ED7FF06E02FF913803FFE0033F02F8013F1380030F91B648C8FC030117F8
-6F6C16E004071680DC007F02F8C9FC050191CAFC626677E375>I<BB12E0F2FF801BF01B
-FE757E1CF0D800010280C7000780DF007F13FE080F6D7E0801807480093F7F090F13FC75
-7F757F877580767F8A88767F8A888AA2767FA28A881F80A37614C0A41FE0A5881FF0B052
-14E0A51FC0A4521480A31F006466A2525BA2525BA2525B666499B55A515C5191C7FC515B
-515B515B097F5B50B512C008075C083F91C8FC0707B512FCBD12F01CC051C9FC1BF81B80
-08E0CAFC6C627AE17C>I<BD12FCA488A2D8000102C0C71201F1000F1A01F2007F1B3F1B
-0F1B07757EA28787A288A3F43F80A31C1FA3197EA3F40FC0A499C7FC19FEA31801A21803
-1807181F18FF93B6FCA6EEC000181F180718031801A21800A21D7E197EA21DFCA696C812
-011DF8A31C03A3F407F0A31C0FA21C1F1C3F1DE01C7F1CFF63631B0F093F13C098B5FC1A
-0797B6FCBEFCA31D80A35F617AE06A>I<4DB5ED03C0057F02F014070407B600FE140F04
-7FDBFFC0131F4BB800F0133F030F05FC137F033F9127F8007FFE13FF92B6C73807FF814A
-02F0020113C3020702C09138007FE74A91C9001FB5FC023F01FC16074A01F08291B54882
-490280824991CB7E49498449498449498449865D49498490B5FC484A84A2484A84A24891
-CD127FA25A4A1A3F5AA348491A1FA44899C8FCA25CA3B5FCB07E071FB812F880A37EA296
-C70001ECC000A26C7FA37E807EA26C80A26C80A26C807F6D7F816D7F7F6D7F6D6D5F6D14
-C06D6E5E6E7F6E01FC5E020F01FF5E6E02C0ED7FEF020102F8EDFFC76E02FF0207138303
-3F02FC013F1301030F91B638FC007F03014D131F6F6C04E01307040704801301DC007F02
-F8CAFC050191CBFC6D6677E37F>71 D<B912E0A6C702E0C7FCB3B3B3B3AEB912E0A63362
-7CE13C>73 D<B700C0083FB612F070627097B7FCA37061D800010DF8C7FC70F103EFA202
-FD6DF107CFA202FC6DF10F8FA36F6DF01F0FA26F6D183EA26F6D187CA26F6D18F8A36F6D
-EF01F0A26F6DEF03E0A26F6DEF07C0A26F6DEF0F80A3706DEE1F00A2706D163EA2706D5E
-A2706D5EA3706D4B5AA2706D4B5AA2706D4B5AA2706D4B5AA3716D4AC7FCA2716D143EA2
-716D5CA2716D5CA3716D495AA2716D495AA2716D495AA2716D495AA3726D48C8FCA272EB
-C03EA2726D5AA2726D5AA372EBF9F0A272EBFFE0A2725CA2725CA37390C9FCA2735AA273
-5A90381FFFC0B700F86E480207B812F0A3735AA2735A8C627AE199>77
-D<B700E0040FB7128082828282A2D800016EDC000101FCC7FC719338001FC08383A28302
-FD808302FC80816F7F6F806F8084816F806F806F8084707F827080708085708082708070
-8085717F83718071807180868371807180727F8672808472807280877280847280737F87
-731480857314C07314E01CF07314F8857314FC7413FE7413FF1D9F867414DF7414FF86A2
-86868787A287878787A28787888888A288888890261FFFC084B712F8881D7F1D3F1D1F77
-5A71627AE17E>I<94381FFFE00407B67E043F15F04BB712FE030FEEFFC0033FD9FC0014
-F092B500C0010F13FC020349C7000113FF4A01F86E6C7F021F496F13E04A01C0030F7F4A
-496F7F91B5C96C7F0103497013FF494970804B834949717F49874949717F49874B8390B5
-86484A717FA24891CB6C7FA2481D804A84481DC0A348497214E0A3481DF0A34A85481DF8
-A5B51CFCB06C1DF8A36E96B5FCA36C1DF0A46C6D4E14E0A36C1DC06E606C1D80A26C6E4D
-1400A26C6E4D5BA26C6E4D5BA26D6D4D5B6D636D6D4D5B6F94B5FC6D636D6D4C5C6D6D4C
-91C7FC6D6E4B5B6D02E0031F5B023F6D4B13F06E01FC92B55A6E01FF02035C020302C001
-0F91C8FC020002FC90B512FC033F90B712F0030F17C0030394C9FCDB007F15F804071580
-DC001F01E0CAFC666677E379>I<BB7E1AFCF2FFC01BF81BFE757ED800010280C7001F80
-070114F0736C7F081F7F747F747F7414807414C0A27414E0A21DF0A27513F8A41DFCA91D
-F8A498B512F0A21DE0A25014C01D8062501400505B505B087F5B4FB512E0071F5C93B9C7
-FC1BFC1BF01B8008F0C8FC04C0CCFCB3B3A2B97EA65E627AE16E>I<BA12F8F1FFE01AFE
-F2FFC01BF01BFED800010280C76C7F070714C0070014F0747F081F7F747F747F7480A274
-8089A37480A389A865A3505CA265A2505C9AC9FC505B505B505B087F5B4FB55A07071480
-96B548CAFC93B812F81BC050CBFC621AFF932680000314C0DE007F7F071F13F8737F737F
-737F73808885888688A2747FA688A688A676140FF71F80A374801F3F86771400745E746E
-5BB96E6E5B746E485A75EBFE07091F90B55A090715E009015DCF003F91C7FC0A0013FC71
-647AE178>82 D<001FBEFCA64849C79126E0000F148002E0180091C8171F498601F81A03
-49864986A2491B7FA2491B3F007F1DC090C9181FA4007E1C0FA600FE1DE0481C07A5CA95
-C7FCB3B3B3A3021FBAFCA663617AE070>84 D<B96C023FB612FEA6D8000102C0CA0007EB
-F000E2007FC7FCB3B3B3AA656D63A2821C01806570170380525A6E7F6E4F5A70171F6E62
-6E6D4D5A6E6D177F525A6E6E030390C8FC033F01E04B5A6F6DED1FFC6F01FCED7FF80303
-D9FF80903803FFE06F02F8017F5B6F6C90B7C9FC041F5E040716F8040016C0050F4ACAFC
-DD003F13C06F647AE17C>I<913803FFFE027FEBFFF00103B612FE010F6F7E4916E09027
-3FFE001F7FD97FE001077FD9FFF801017F486D6D7F717E486D6E7F85717FA2717FA36C49
-6E7FA26C5B6D5AEB1FC090C9FCA74BB6FC157F0207B7FC147F49B61207010F14C0013FEB
-FE004913F048B512C04891C7FC485B4813F85A5C485B5A5CA2B55AA45FA25F806C5E806C
-047D7F6EEB01F96C6DD903F1EBFF806C01FED90FE114FF6C9027FFC07FC01580000191B5
-487E6C6C4B7E011F02FC130F010302F001011400D9001F90CBFC49437CC14E>97
-D<903807FF80B6FCA6C6FC7F7FB3A8EFFFF8040FEBFF80047F14F00381B612FC038715FF
-038F010014C0DBBFF0011F7FDBFFC001077F93C76C7F4B02007F03F8824B6F7E4B6F1380
-4B17C0851BE0A27313F0A21BF8A37313FCA41BFEAE1BFCA44F13F8A31BF0A24F13E0A24F
-13C06F17804F1300816F4B5A6F4A5B4AB402075B4A6C6C495B9126F83FE0013F13C09127
-F00FFC03B55A4A6CB648C7FCDAC00115F84A6C15E091C7001F91C8FC90C8000313E04F65
-7BE35A>I<92380FFFF04AB67E020F15F0023F15FC91B77E01039039FE001FFF4901F801
-0113804901E0010713C04901804913E0017F90C7FC49484A13F0A2485B485B5A5C5A7113
-E0485B7113C048701380943800FE0095C7FC485BA4B5FCAE7EA280A27EA2806C18FCA26C
-6D150119F87E6C6D15036EED07F06C18E06C6D150F6D6DEC1FC06D01E0EC7F806D6DECFF
-00010701FCEB03FE6D9039FFC03FFC010091B512F0023F5D020F1580020102FCC7FCDA00
-0F13C03E437BC148>I<F17FF8050FB5FCA6EF000F8484B3A892380FFF804AB512F8020F
-14FE023FECFF8391B712E301039138807FF3499039F8000FFB011F01E00103B5FC494913
-004990C87E49488148498148834A815A485BA2485BA25AA3485BA4B5FCAE7EA46C7FA37E
-A26C7FA26C5F806C5F6C6D5D6C6D5D017F93B5FC6D6C6C0103806D6D49806D01F0D91FF7
-EBFFFE6D9039FE01FFE7010190B612876D6CECFE07021F14F8020314E09127003FFE00EC
-C0004F657BE35A>I<92380FFFC04AB512FC020FECFF80023F15E091B712F80103D9FE03
-7F499039F0007FFF011F01C0011F7F49496D7F4990C76C7F49486E7F48498048844A8048
-84485B727E5A5C48717EA35A5C721380A2B5FCA391B9FCA41A0002C0CBFCA67EA380A27E
-A27E6E160FF11F806C183F6C7FF17F006C7F6C6D16FE6C17016D6C4B5A6D6D4A5A6D01E0
-4A5A6D6DEC3FE0010301FC49B45A6D9026FFC01F90C7FC6D6C90B55A021F15F8020715E0
-020092C8FC030713F041437CC14A>I<EE3FFC0307B51280033F14C04AB612F0020715F8
-4A9038F03FFC4AEB807F913A7FFE00FFFE4A5A4B4813FF4913F05B4913E0A24913C0A270
-13FE4949EB7FFCEF3FF8EF1FF0EF07C094C7FCB0B812C0A6D8001F01C0C8FCB3B3B0007F
-B612FCA638657CE431>I<F107F8DB7FFEEC3FFE020FB5D8F001B5FC027FDAFE03148049
-B7128F49DCDFFD13C0010FD9F00FEBFFC149D9800114014990C7EBFC0349486E6C7E4948
-EC3FFF48496E018113800780130048F0C03E97C7FC48496E7FA34884A96C60A36C6D4A5B
-A26C60A26C6D4A90C8FC6D6C4A5A6D6C4A5A6D6D485BDBF00F5B4990B612C060D97C7F4A
-C9FCD9FC0F14F09126007FFECAFC92CCFC1201A47FA27F8014F091B77E18FE6CEFFFC019
-F06D17FC19FF6D846D846D846D84013F8490BAFC0003854801E0C712014890C9000F7F48
-4816014848EE007F4848717E8512FF5B85A56D5F007F616D173F003F616D177F6C6C4D5A
-6C01C003035B6C6D4B5B6C01F8031F5BC601FF92B5C7FC6D01F8011F5B011F90B712F801
-0717E0010094C8FC020F15F0DA003F01FCC9FC4A607CC151>I<903807FF80B6FCA6C6FC
-7F7FB3A8EF1FFF94B512F0040714FC041F14FF4C8193267FE07F7F922781FE001F7FDB83
-F86D7FDB87F07FDB8FC0814C7F039FC78015BE03BC8003FC825DA25DA25DA45DB3B2B7D8
-F007B71280A651647BE35A>I<EB0FE0EB3FF8497E48B5FCA24880A24880A76C5CA26C91
-C7FCA238007FFC6D5AEB0FE090C9FCAF903807FF80007FB5FCA6C6FC7F7FB3B3AEB712C0
-A622657BE42C>I<903807FF80B6FCA6C6FC7F7FB3A90503B61280A6DD003FEB8000DE0F
-FCC7FCF01FF04E5AF0FFC04D5B4D90C8FCEF07FC4D5AEF3FF04D5A4D5A4C90C9FC4C5AEE
-0FFC4C5A4C5AEE7FC04C7E03837F03877F158F039F7F03BF7F92B5FC838403FC804B7E03
-F0804B6C7F4B6C7F1580707F707F707FA270807080717FA2717F717F717FA2717F717F83
-867180727F95B57EB7D8E00FECFFF0A64C647BE355>107 D<903807FF80B6FCA6C6FC7F
-7FB3B3B3B3ADB712E0A623647BE32C>I<902607FF80D91FFFEEFFF8B691B500F00207EB
-FF80040702FC023F14E0041F02FF91B612F84C6F488193267FE07F6D4801037F922781FE
-001F9027E00FF0007FC6DA83F86D9026F01FC06D7F6DD987F06D4A487F6DD98FC0DBF87E
-C7804C6D027C80039FC76E488203BEEEFDF003BC6E4A8003FC04FF834B5FA24B5FA24B94
-C8FCA44B5EB3B2B7D8F007B7D8803FB612FCA67E417BC087>I<902607FF80EB1FFFB691
-B512F0040714FC041F14FF4C8193267FE07F7F922781FE001F7FC6DA83F86D7F6DD987F0
-7F6DD98FC0814C7F039FC78015BE03BC8003FC825DA25DA25DA45DB3B2B7D8F007B71280
-A651417BC05A>I<923807FFE092B6FC020715E0021F15F8027F15FE494848C66C6C7E01
-0701F0010F13E04901C001037F49496D7F4990C87F49486F7E49486F7E48496F13804819
-C04A814819E048496F13F0A24819F8A348496F13FCA34819FEA4B518FFAD6C19FEA46C6D
-4B13FCA36C19F8A26C6D4B13F0A26C19E06C6D4B13C0A26C6D4B13806C6D4B13006D6C4B
-5A6D6D495B6D6D495B010701F0010F13E06D01FE017F5B010090B7C7FC023F15FC020715
-E0020092C8FC030713E048437CC151>I<902607FF80EBFFF8B6010FEBFF80047F14F003
-81B612FC038715FF038F010114C09227BFF0003F7FC6DAFFC0010F7F6D91C76C7F6D496E
-7F03F86E7F4B6E7F4B17804B6F13C0A27313E0A27313F0A21BF885A21BFCA3851BFEAE4F
-13FCA41BF861A21BF0611BE0611BC06F92B512801B006F5C6F4A5B6F4A5B03FF4A5B7049
-5B04E0017F13C09226CFFC03B55A03C7B648C7FC03C115F803C015E0041F91C8FC040313
-E093CBFCB3A3B712F0A64F5D7BC05A>I<DB0FFFEC01F04AB500E01303020F02F8130702
-3F14FE91B7130F01030280EB801F49903AFC001FC03F011F01F0EB0FE04949903803F07F
-490180903801F8FF90B56E7E4891C8B5FC48498184485B484981A248835C5A845C5AA4B5
-5AAE7E80A37EA2807EA26C6D5D606C7F606C6D5D7E6C6D92B5FC6D6D5B6D6D13076D6DEB
-0FEF6D01F8EB3FCF6D9039FE01FF8F010190B6120F6D6C14FC021F14F0020314C0913900
-3FFE0092C8FCB3A3053FB612FCA64E5D7BC055>I<D90FFFEB0FFCB690383FFF8093B512
-E04B14F04B14F8923907FC7FFC92390FE0FFFEC6EC1F806DD93F0113FF6D133E157E157C
-15F8A215F07013FEA24BEB7FFCEF3FF8EF0FE04B90C7FCA55DB3B0B712F8A638417BC042
->I<913A3FFF8007800107B5EAF81F011FECFE7F017F91B5FC48B8FC48EBE0014890C712
-1FD80FFC1407D81FF0801600485A007F167F49153FA212FF171FA27F7F7F6D92C7FC13FF
-14E014FF6C14F8EDFFC06C15FC16FF6C16C06C16F06C826C826C826C82013F1680010F16
-C01303D9007F15E0020315F0EC001F1500041F13F81607007C150100FC81177F6C163FA2
-171F7EA26D16F0A27F173F6D16E06D157F6D16C001FEEDFF806D0203130002C0EB0FFE02
-FCEB7FFC01DFB65A010F5DD8FE0315C026F8007F49C7FC48010F13E035437BC140>I<EC
-07E0A6140FA5141FA3143FA2147FA214FF5BA25B5B5B5B137F48B5FC000F91B512FEB8FC
-A5D8001F01E0C8FCB3AFEF0FC0AC171F6D6D1480A2173F6D16006F5B6D6D137E6D6D5B6D
-EBFF836EEBFFF86E5C020F14C002035C9126003FFCC7FC325C7DDA3F>I<902607FFC0ED
-3FFEB60207B5FCA6C6EE00076D826D82B3B3A260A360A2607F60183E6D6D147E4E7F6D6D
-4948806D6DD907F0ECFF806D01FFEB3FE06D91B55A6E1500021F5C020314F8DA003F0180
-02F0C7FC51427BC05A>I<007FB600C0017FB512F8A6D8001F01F8C70007EBF0006D0401
-90C7FC6D6D5D6D6D4A5A6D6D4A5A70495A6D4C5A6E7F6E6D495A6E6D495A7049C8FC6E4A
-5A6E6D485A6E6D485A6E13FFEF8FF06EEC9FE06FEBFFC06F5C6F91C9FC5F6F5B816F7F6F
-7F8481707F8493B57E4B805D4B80DB0FF37FDB1FE17F04C080153F4B486C7F4B486C7F4A
-486D7F4A486D7F4A5A4B6D7F020F6E7F4A486D7F4A486D804A5A4AC86C7F49486F7F4A6F
-7F0107707FEB3FFFB600F049B7FCA650407EBF55>120 D E
-%EndDVIPSBitmapFont
-%DVIPSBitmapFont: Fj cmtt10 10.95 83
-/Fj 83 125 df<121C127FEAFF80B3EA7F00B2123EC7FCA8121C127FA2EAFF80A3EA7F00
-A2121C09396DB830>33 D<00101304007C131F00FEEB3F80A26C137FA248133FB2007E14
-00007C7F003C131E00101304191C75B830>I<903907C007C0A2496C487EA8011F131FA2
-02C05BA3007FB7FCA2B81280A36C16006C5D3A007F807F80A2020090C7FCA9495BA2003F
-90B512FE4881B81280A36C1600A22701FC01FCC7FCA300031303A201F85BA76C486C5AA2
-29387DB730>I<1438147C14FCA4EB03FF011F13E090B512FC4880000780481580261FFE
-FD13C09039F0FC3FE0D83FC0131FD87F80EB0FF001001307007E15F800FE14035A1507A3
-6CEC03F0A2007F91C7FC138013C0EA3FF0EA1FFE13FF6C13FF6C14E0000114F86C6C7F01
-1F7F01037F0100148002FD13C09138FC7FE0151FED0FF015070018EC03F8127E1501B4FC
-A35AA26CEC03F07E01801307ED0FE0D83FC0131F01F0EB7FC0D81FFEB512806CB612006C
-5C6C5CC614F0013F13C0D907FEC7FCEB00FCA5147C143825477BBE30>I<D803C0EB01E0
-D80FF01303486C497E487E150F487ED87E7E495AEAFE7F5E486C133FA25E157FA24BC7FC
-6C5A5D387E7E01EA7FFED83FFC5B1403EA1FF86C48485AEA03C0C75B140FA25D141FA24A
-5AA25D147FA292C8FC5CA2495AA25C1303A25C1307A290390FF001E0ED07F84A487E011F
-497EA24A487E133F163F90267F807F1380ED7E1F14005BA25B1201A24848EB7F3F033F13
-004914FF12076F5A5B6F5A6C486D5A0001EC01E029477DBE30>I<EB07E0EB1FF8497E13
-7F497E803801FC7F497E810003131F13F0A6143F92C8FC91387F0FFF9026F87E1F138000
-0113FEEBF9FC13FB4A6C1300D9FFF013C06C13E0151F02C05BEB7F809038FF003F4892C7
-FC485C48EB807E5A15FE391FDFC0FC383F8FE014E1397F07F1F8EB03F300FEEBFBF0EB01
-FF5D7FEDC006027F130F91393F801F8015C06C137F6CEBFFE049EBF83F018701FC130026
-3FFFFBB5FC6C01F15B14E06C9038C03FFC00039038001FF8D801FCEB07E0293A7DB830>
-I<141E147F14FF5BEB03FEEB07FCEB0FF0EB1FE0EB3FC0EB7F80EBFF00485A5B12035B48
-5A120F5BA2485AA2123F5BA2127F90C7FCA412FEAD127FA47F123FA27F121FA26C7EA27F
-12076C7E7F12017F6C7EEB7F80EB3FC0EB1FE0EB0FF0EB07FCEB03FEEB01FF7F147F141E
-184771BE30>40 D<127812FE7E7F6C7E6C7EEA0FF06C7E6C7E6C7E6C7EEB7F80133F14C0
-131FEB0FE014F01307A2EB03F8A214FC1301A214FE1300A4147FAD14FEA4130114FCA213
-0314F8A2EB07F0A2130F14E0EB1FC0133F1480137FEBFF00485A485A485A485AEA3FE048
-5A485A90C7FC5A1278184778BE30>I<14E0497E497EA60038EC0380007EEC0FC0D8FF83
-EB3FE001C3137F9038F3F9FF267FFBFB13C06CB61280000FECFE00000314F86C5C6C6C13
-C0011F90C7FC017F13C048B512F04880000F14FE003FECFF80267FFBFB13C026FFF3F913
-E09038C3F87F0183133FD87E03EB0FC00038EC0380000091C7FCA66D5A6D5A23277AAE30
->I<143EA2147FAF007FB7FCA2B81280A36C1600A2C76CC8FCAF143EA229297DAF30>I<EA
-03E0EA0FF0EA1FF813FCEA3FFEA213FFA27EA27E1203EA007FA2137E13FEEA01FC1203EA
-07F8EA3FF0127FEAFFE0EA7F801300123C1019708B30>I<007FB612F0A2B712F8A36C15
-F0A225077B9E30>I<120FEA3FC0EA7FE0A2EAFFF0A4EA7FE0A2EA3FC0EA0F000C0C6E8B
-30>I<16F01501ED03F8A21507A2ED0FF0A2ED1FE0A2ED3FC0A2ED7F80A2EDFF00A24A5A
-A25D1403A24A5AA24A5AA24A5AA24A5AA24A5AA24AC7FCA2495AA25C1303A2495AA2495A
-A2495AA2495AA2495AA249C8FCA2485AA25B1203A2485AA2485AA2485AA2485AA2485AA2
-48C9FCA25AA2127CA225477BBE30>I<14FE903807FFC0497F013F13F8497F90B57E48EB
-83FF4848C6138049137F4848EB3FC04848EB1FE049130F001F15F0491307A24848EB03F8
-A290C712014815FCA400FEEC00FEAD6C14016C15FCA36D1303003F15F8A26D1307001F15
-F0A26D130F6C6CEB1FE0A26C6CEB3FC06C6CEB7F806D13FF2601FF8313006CEBFFFE6D5B
-6D5B010F13E06D5BD900FEC7FC273A7CB830>I<EB03C0497EA2130FA2131FA2133F137F
-13FF1203123FB5FCA213EF138FEA7E0F1200B3B0003FB512F84814FCB612FEA26C14FC6C
-14F81F3977B830>I<EB07FC90383FFFC090B512F00003804814FE4880261FF80F138026
-3FE00113C09038C0007F4848EB3FE090C7121FED0FF04814075A6C15F81503A3127E1218
-C8FCA2150716F0150F16E0151F16C0153FED7F8015FF4A13005DEC07FC4A5A4A5A4A5A4A
-5A4A5A4990C7FC495A495AEB0FF0EB3FE0495A495A4890C8FC4848EB01F04848EB03F848
-5AEA1FE048B6FCB7FCA37E6C15F025397BB830>I<EB03FF013F13E090B512F84814FE48
-80481580260FFE0113C09038F0007F4848EB1FE0150F16F01507A26C5A6C5AC8FC150F16
-E0A2151FED3FC0157FEDFF8002071300903807FFFE495B5D8115FF6D1480D9000113C091
-38003FE0ED1FF0ED07F8150316FC150116FE1500A21218127EB4FCA2150116FC4814036C
-15F86C6C13076DEB1FF0D83FF0133F3A1FFE01FFE06CB612C06C15806CECFE00C65C013F
-13F001031380273A7CB830>I<EC03FC4A7E140F141FA2143F147F157E14FEA2EB01FCEB
-03F8A2EB07F0A2EB0FE0EB1FC0A2EB3F80A2EB7F0013FEA2485A485AA2485AA2485A485A
-A2485AA248C7FC12FEB8FC1780A46C1600C8007EC7FCAA91387FFFFE91B6FCA46E5B2939
-7DB830>I<000FB612804815C05AA316800180C8FCAEEB83FF019F13C090B512F015FC81
-81D9FE0313809039F0007FC049133F0180EB1FE06CC7120F000E15F0C81207A216F81503
-A31218127EA2B4FC150716F048140F6C15E06C141F6DEB3FC06D137F3A3FE001FF80261F
-FC0F13006CB55A6C5C6C5C6C14E06C6C1380D90FFCC7FC25397BB730>I<EC0FF8EC7FFF
-49B51280010714E0131F4914F090387FF80F9039FFC007F84813803803FE005B485A4848
-EB03F0ED01E0484890C7FC5B123F5BA2127FEB000C903803FFE0010F13F8D8FF3F13FE48
-B6FCB7128016C09039FE007FE001F8EB1FF001E0130F49EB07F849EB03FCA290C7120116
-FE1500A37EA46C7E15016D14FC121F6D1303000FEC07F86D130F6C6CEB1FF06DEB3FE03A
-03FF81FFC06C90B512806C15006D5B011F13F8010713E001011380273A7CB830>I<127C
-B712FC16FEA416FC48C7EA0FF816F0ED1FE0007CEC3FC0C8EA7F80EDFF00A24A5A4A5A5D
-14075D140F5D4A5AA24A5AA24AC7FCA25C5C13015CA213035CA213075CA4495AA6131F5C
-A96D5A6DC8FC273A7CB830>I<49B4FC011F13F0017F13FC90B57E0003ECFF804815C048
-010113E03A1FF8003FF049131FD83FC0EB07F8A24848EB03FC90C71201A56D1303003F15
-F86D13076C6CEB0FF06C6CEB1FE0D807FCEB7FC03A03FF83FF806C90B512006C6C13FC01
-1F13F0497F90B512FE48802607FE0013C0D80FF8EB3FE0D81FE0EB0FF04848EB07F84913
-03007F15FC90C712014815FE481400A66C14016C15FC6D1303003F15F86D1307D81FF0EB
-1FF06D133F3A0FFF01FFE06C90B512C06C1580C6ECFE006D5B011F13F0010190C7FC273A
-7CB830>I<49B4FC010F13E0013F13F890B57E4880488048010113803A0FFC007FC0D81F
-F0EB3FE04848131F49EB0FF048481307A290C7EA03F85A4815FC1501A416FEA37E7E6D13
-03A26C6C13076C6C130F6D133FD80FFC13FF6CB6FC7E6C14FE6C14F9013FEBE1FC010F13
-8190380060011400ED03F8A2150716F0150F000F15E0486C131F486CEB3FC0157FEDFF80
-4A1300EC07FE391FF01FFC90B55A6C5C6C5C6C1480C649C7FCEB3FF0273A7CB830>I<12
-0FEA3FC0EA7FE0A2EAFFF0A4EA7FE0A2EA3FC0EA0F00C7FCAF120FEA3FC0EA7FE0A2EAFF
-F0A4EA7FE0A2EA3FC0EA0F000C276EA630>I<16F01503ED07F8151F157FEDFFF014034A
-13C0021F138091383FFE00ECFFF8495B010713C0495BD93FFEC7FC495A3801FFF0485B00
-0F13804890C8FCEA7FFC5BEAFFE05B7FEA7FF87FEA1FFF6C7F000313E06C7F38007FFC6D
-7E90380FFF806D7F010113F06D7FEC3FFE91381FFF80020713C06E13F01400ED7FF8151F
-1507ED03F01500252F7BB230>60 D<007FB7FCA2B81280A36C16006C5DCBFCA7003FB612
-FE4881B81280A36C1600A229157DA530>I<1278127EB4FC13C07FEA7FF813FEEA1FFF6C
-13C000037F6C13F86C6C7EEB1FFF6D7F010313E06D7F9038007FFC6E7E91380FFF806E13
-C0020113F080ED3FF8151F153FEDFFF05C020713C04A138091383FFE004A5A903801FFF0
-495B010F13804990C7FCEB7FFC48485A4813E0000F5B4890C8FCEA7FFE13F8EAFFE05B90
-C9FC127E1278252F7BB230>I<EC1FE0ECFFF8010313FE010F7F4914804914C090397FF0
-3FE09038FF800F4890380007F0D803FC13033A07F801FBF89038F007FF380FE01F4A13FC
-EA1FC0495A003FEBFF0F903800FE07903901FC03FE007FEBF801EA7E03ECF000A2EAFE07
-00FC49137EAA00FE6D13FED87E0314FCA2ECF801D87F0114F8003FEBFC03903900FE07F0
-903880FF0F001F90387FFFE06D6C13C0EA0FE06E13803A07F007FE009038F801F86C6CC7
-127C6CB414FE6CEB800390387FF01F6DB512FC6D14F86D14E0010314C00100EBFE00EC1F
-F0273A7CB830>64 D<147F4A7EA2497FA4497F14F7A401077F14E3A3010F7FA314C1A201
-1F7FA490383F80FEA590387F007FA4498049133F90B6FCA34881A39038FC001F00038149
-130FA4000781491307A2D87FFFEB7FFFB56CB51280A46C496C130029397DB830>I<007F
-B512F0B612FE6F7E82826C813A03F8001FF815076F7E1501A26F7EA615015EA24B5A1507
-ED1FF0ED7FE090B65A5E4BC7FC6F7E16E0829039F8000FF8ED03FC6F7E1500167FA3EE3F
-80A6167F1700A25E4B5A1503ED1FFC007FB6FCB75A5E16C05E6C02FCC7FC29387EB730>
-I<91387F803C903903FFF03E49EBFC7E011F13FE49EBFFFE5B9038FFE07F48EB801F3903
-FE000F484813075B48481303A2484813015B123F491300A2127F90C8FC167C16005A5AAC
-7E7EA2167C6D14FE123FA27F121F6D13016C6C14FCA26C6CEB03F86D13076C6CEB0FF039
-01FF801F6C9038E07FE06DB512C06D14806D1400010713FC6D13F09038007FC0273A7CB8
-30>I<003FB512E04814FCB67E6F7E6C816C813A03F8007FF0ED1FF8150F6F7E6F7E1501
-6F7EA2EE7F80A2163F17C0161FA4EE0FE0AC161F17C0A3163F1780A2167F17005E4B5A15
-034B5A150F4B5AED7FF0003FB65A485DB75A93C7FC6C14FC6C14E02B387FB730>I<007F
-B7FCB81280A47ED803F8C7123FA8EE1F0093C7FCA4157C15FEA490B5FCA6EBF800A4157C
-92C8FCA5EE07C0EE0FE0A9007FB7FCB8FCA46C16C02B387EB730>I<003FB712804816C0
-B8FCA27E7ED801FCC7121FA8EE0F8093C7FCA5153E157FA490B6FCA69038FC007FA4153E
-92C8FCAE383FFFF8487FB5FCA27E6C5B2A387EB730>I<02FF13F00103EBC0F8010F13F1
-013F13FD4913FF90B6FC4813C1EC007F4848133F4848131F49130F485A491307121F5B12
-3F491303A2127F90C7FC6F5A92C8FC5A5AA892B5FC4A14805CA26C7F6C6D1400ED03F8A2
-7F003F1407A27F121F6D130F120F7F6C6C131FA2D803FE133F6C6C137FECC1FF6C90B5FC
-7F6D13FB010F13F30103EBC1F0010090C8FC293A7DB830>I<3B3FFF800FFFE0486D4813
-F0B56C4813F8A26C496C13F06C496C13E0D803F8C7EAFE00B290B6FCA601F8C7FCB3A23B
-3FFF800FFFE0486D4813F0B56C4813F8A26C496C13F06C496C13E02D387FB730>I<007F
-B6FCB71280A46C1500260007F0C7FCB3B3A8007FB6FCB71280A46C1500213879B730>I<
-D83FFF90380FFF80486D4813C0B56C5AA26C497E6C496C1380D803F0903803F8004B5A4B
-5A151F4B5A5E4BC7FC15FE14014A5A5D4A5A4A5A141F5D4A5A4AC8FC5C13F18101F37F13
-F790B57E14EFECC7F01483EC03F8140101FE7F496C7E5B157F497F82151F82150F826F7E
-A26F7E1501821500D83FFF903803FFC0486D4813E0B56C5AA26C497E6C496C13C02B387F
-B730>75 D<383FFFF8487FB57EA26C5B6C5BD801FCC9FCB3B0EE0F80EE1FC0A9003FB7FC
-5AB8FCA27E6C16802A387EB730>I<D83FF8ECFFE0486C4913F0486C4913F8A2007F16F0
-6C6C4913E00007160001EF14BFEC800FA39039E7C01F3FA4ECE03F01E3133EA2ECF07EA2
-01E1137CA2ECF8FCA201E013F8A214FDEC7DF0A3147FEC3FE0A3EC1FC0A2EC070091C7FC
-ADD83FFC903801FFE0486C4913F0B54913F8A26C486D13F06C486D13E02D387FB730>I<
-D83FFC90381FFF80486C4913C0B54913E0A26C6D6C13C06C6E13800003913801F800EBF7
-C0A3EBF3E0A314F013F1A214F8A213F014FCA2147C147EA2143E143FA2141FA21581A214
-0F15C1A2140715E1A2140315F1A21401A215F91400A3157DA3153FEA3FFF481380B5EAC0
-1FA26CEB800F6C496C5A2B387EB730>I<90383FFFE048B512FC000714FF4815804815C0
-4815E0EBF80001E0133FD87F80EB0FF0A290C71207A44815F8481403B3A96C1407A26C15
-F0A36D130FA26D131F6C6CEB3FE001F813FF90B6FC6C15C06C15806C1500000114FCD800
-3F13E0253A7BB830>I<007FB512F0B612FE6F7E16E0826C813903F8003FED0FFCED03FE
-15016F7EA2821780163FA6167F17005EA24B5A1503ED0FFCED3FF890B6FC5E5E16804BC7
-FC15F001F8C9FCB0387FFFC0B57EA46C5B29387EB730>I<90383FFFE048B512FC000714
-FF4815804815C04815E0EBF80001E0133F4848EB1FF049130F90C71207A44815F8481403
-B3A8147E14FE6CEBFF076C15F0EC7F87A2EC3FC7018013CF9038C01FFFD83FE014E0EBF8
-0F90B6FC6C15C06C15806C1500000114FCD8003F7FEB00016E7EA21680157F16C0153F16
-E0151F16F0150FED07E025467BB830>I<003FB57E4814F0B612FC15FF6C816C812603F8
-017F9138003FF0151F6F7E15071503821501A515035E1507150F4B5A153F4AB45A90B65A
-5E93C7FC5D8182D9F8007FED3FE0151F150F821507A817F8EEF1FCA53A3FFF8003FB4801
-C0EBFFF8B56C7E17F06C496C13E06C49EB7FC0C9EA1F002E397FB730>I<90390FF803C0
-D97FFF13E048B512C74814F74814FF5A381FF80F383FE001497E4848137F90C7123F5A48
-141FA2150FA37EED07C06C91C7FC7F7FEA3FF0EA1FFEEBFFF06C13FF6C14E0000114F86C
-80011F13FF01031480D9003F13C014019138007FE0151FED0FF0A2ED07F8A2007C140312
-FEA56C140716F07F6DEB0FE06D131F01F8EB3FC001FF13FF91B51280160000FD5CD8FC7F
-13F8D8F81F5BD878011380253A7BB830>I<003FB712C04816E0B8FCA43AFE003F800FA8
-007CED07C0C791C7FCB3B1011FB5FC4980A46D91C7FC2B387EB730>I<3B7FFFC007FFFC
-B56C4813FEA46C496C13FCD803F8C7EA3F80B3B16D147F00011600A36C6C14FE6D13016D
-5CEC800390393FE00FF890391FF83FF06DB55A6D5C6D5C6D91C7FC9038007FFCEC1FF02F
-3980B730>I<D83FFC903801FFE0486C4913F000FF16F8A2007F16F06C486D13E0D81FC0
-9038001FC0000F1680A76D143F00071600A7000390380F803E9039F01FC07EEC3FE0A3EC
-7FF0A2147D0001157CA29039F8FDF8FCA314F8A300005D01F913FCA2ECF07CA201FD137D
-A2017D5CECE03DA3017F133FA2ECC01FA2013F5CA2EC800F6D486C5A2D397FB730>87
-D<3A3FFF01FFF84801837F02C77FA202835B6C01015B3A01FC007F806D91C7FC00005C6D
-5BEB7F01EC81FCEB3F8314C3011F5B14E7010F5B14FF6D5BA26D5BA26D5BA26D90C8FCA4
-497FA2497FA2815B81EB0FE781EB1FC381EB3F8181EB7F0081497F49800001143F498000
-03141F49800007140FD87FFEEB7FFFB590B5128080A25C6C486D130029387DB730>I<D8
-7FFF90381FFFC0B56C4813E0A46C496C13C0D803F8903803F8006D1307A26C6C495AA26C
-6C5C151F6D5CEC803F013F5CECC07F011F91C7FCA290380FE0FEA214F101075BA2903803
-FBF8A201015B14FF6D5BA26E5AA36E5AB1903803FFF8497F497FA26D5B6D5B2B387EB730
->I<007FB5FCB61280A4150048C8FCB3B3B3A5B6FC1580A46C140019476DBE30>91
-D<007FB5FCB61280A47EC7123FB3B3B3A5007FB5FCB6FCA46C140019477DBE30>93
-D<1307EB1FC0EB7FF0497E000313FE000FEBFF80003F14E0D87FFD13F039FFF07FF8EBC0
-1FEB800F38FE0003007CEB01F00010EB00401D0E77B730>I<007FB612F0A2B712F8A36C
-15F0A225077B7D30>I<1338137CEA01FE12031207EA0FFC13F0EA1FE013C0EA3F801300
-5A127EA212FE5AA5EAFFC013E013F0127FA2123FA2EA1FE0EA07C00F1D70BE30>I<EB7F
-F80003B5FC4814C04880488048809038E01FFC9038C003FE14016E7E6C487F6CC77FC812
-3FA491B5FC130F137F48B6FC12075A48EB803F383FF800EA7FE0138048C7FC5AA4157F7E
-6C6C13FFEBC003263FF01FEBFF8090B712C07E6C14EF000314876CD9FE01138026003FE0
-C8FC2A2A7BA830>I<EA3FFC487E12FFA2127F123F1200AAEC03FE91381FFF80027F13E0
-91B57E90B612FC82ECFE079138F001FF4A6C13804A137F4AEB3FC091C7121F17E049140F
-A217F01607A8160FA217E07F161F6EEB3FC0A26EEB7F806E13FFDAF00313009138FC0FFE
-91B55A5E495CD97E7F13C0D93C1F90C7FC90380003FC2C3980B730>I<ECFFE0010713FC
-011F7F017F7F90B612804815C048EB807F3907FC003F485A485A49EB1F804848EB0F0049
-90C7FC127F90C9FCA25A5AA87E7EA27F003FEC07C06DEB0FE06C7E6D131F6C6C14C0D807
-FE133F9039FFC0FF806C90B5FCC615006D5B011F13F801075B01011380232A7AA830>I<
-913801FFE04A7F5CA28080EC0007AAEB03FE90381FFF874913E790B6FC5A5A481303380F
-FC00D81FF0133F49131F485A150F4848130790C7FCA25AA25AA87E6C140FA27F003F141F
-6D133F6C7E6D137F390FF801FF2607FE07EBFFC06CB712E06C16F06C14F76D01C713E001
-1F010313C0D907FCC8FC2C397DB730>I<49B4FC010713E0011F13F8017F7F90B57E4880
-48018113803A07FC007FC04848133FD81FE0EB1FE0150F484814F0491307127F90C7FCED
-03F85A5AB7FCA516F048C9FC7E7EA27F003FEC01F06DEB03F86C7E6C7E6D1307D807FEEB
-1FF03A03FFC07FE06C90B5FC6C15C0013F14806DEBFE00010713F8010013C0252A7CA830
->I<EDFF80020713E0021F13F05C4A13F891B5FC491387903803FE079138FC03F0903907
-F800C04A1300A8003FB612C04815E0B7FCA36C15C0260007F0C7FCB3A9003FB512FE4880
-B71280A26C15006C5C25397DB830>I<D903FC13FF90261FFF8713C04913DF90B712E05A
-5A2607FE07138F903AF801FE07C048486C6CC7FCA2497F001F8149133FA56D137F000F92
-C7FC6D5BA26C6C485AEBFE0790B55A5D485C15C001DF5BD9C3FCC8FC01C0C9FCA37F7F6C
-B512F015FF6C15C04815F0488148813A3FE0001FFE0180130148C8127F007E8100FE1680
-48151FA56C153F007FED7F006D5C6C6C495A01F013076CB4EB7FFC6C90B55A6C5D000115
-C06C6C91C7FC011F13FC010113C02B3E7DA730>I<EA3FFC487E12FFA2127F123F1200AA
-EC01FE91380FFF80023F13E091B57E90B67EA29138FE07FCECF8039138E001FE14C0EC80
-00A291C7FCA25BB3A23B3FFFF81FFFF8486D4813FCB500FE14FEA26C01FC14FC6C496C13
-F82F3880B730>I<14E0EB03F8A2497EA36D5AA2EB00E091C8FCA9381FFFF8487F5AA27E
-7EEA0001B3A9003FB612C04815E0B7FCA27E6C15C023397AB830>I<EA7FF8487EA4127F
-1200AB0203B512804A14C017E0A217C06E14809139001FE0004B5A4B5A4BC7FC4A5A4A5A
-EC0FF84A5A4A5A4A5A4A5A01FD7F90B57E8114F7ECE3F8ECC1FCEC81FEEC00FF497F496D
-7E6F7E826F7E15076F7E6F7E3B7FFFF81FFFE0B56C4813F017F8A217F06C496C13E02D38
-7FB730>107 D<387FFFF8B57EA47EEA0001B3B3A8007FB612F0B712F8A46C15F025387B
-B730>I<02FC137E3B7FC3FF01FF80D8FFEF01877F90B500CF7F15DF92B57E6C010F1387
-2607FE07EB03F801FC13FE9039F803FC01A201F013F8A301E013F0B3A23C7FFE0FFF07FF
-80B548018F13C0A46C486C01071380322881A730>I<EC01FE3A3FFC0FFF80267FFE3F13
-E000FF90B57E90B67E7E6C9038FE07FCC6EBF8039138E001FE14C0EC8000A291C7FCA25B
-B3A23B3FFFF81FFFF8486D4813FCB500FE14FEA26C01FC14FC6C496C13F82F2880A730>
-I<49B4FC010F13E0013F13F8497F90B57E0003ECFF8014013A07FC007FC04848EB3FE0D8
-1FE0EB0FF0A24848EB07F8491303007F15FC90C71201A300FEEC00FEA86C14016C15FCA2
-6D1303003F15F86D13076D130F6C6CEB1FF06C6CEB3FE06D137F3A07FF01FFC06C90B512
-806C15006C6C13FC6D5B010F13E0010190C7FC272A7CA830>I<EC03FE3A3FFC1FFF8026
-7FFE7F13E000FF90B57E90B612FC6C816CEBFE07C69038F001FF4A6C13804A137F4AEB3F
-C091C7121F17E049140FA217F01607A8160FA217E07F161F6EEB3FC0A26EEB7F806E13FF
-DAF00313009138FC0FFE91B55A5E495C6E13C0021F90C7FCEC03FC91C9FCAD383FFFF848
-7FB57EA26C5B6C5B2C3C80A730>I<49B413F8010FEBC1FC013F13F14913FD48B6FC5A48
-1381390FFC007F49131F4848130F491307485A491303127F90C7FC15015A5AA77E7E1503
-7FA26C6C1307150F6C6C131F6C6C133F01FC137F3907FF01FF6C90B5FC6C14FD6C14F901
-3F13F1010F13C1903803FE0190C7FCAD92B512F84A14FCA46E14F82E3C7DA730>I<ED07
-F83A3FFF803FFF486DB51280B512C302CF14C06C13DF6C9038FFFC3FD8001F13E0923880
-1F809238000F004A90C7FC5C5C5CA25CA45CAF003FB512FC4880B7FCA26C5C6C5C2A287E
-A730>I<90381FFC1E48B5129F000714FF5A5A5A387FF007EB800100FEC7FC4880A46C14
-3E007F91C7FC13E06CB4FC6C13FC6CEBFF806C14E0000114F86C6C7F01037F9038000FFF
-02001380007C147F00FEEC1FC0A2150F7EA27F151F6DEB3F806D137F9039FC03FF0090B6
-FC5D5D00FC14F0D8F83F13C026780FFEC7FC222A79A830>I<EB0780497E131FA9003FB6
-12E04815F0B7FCA36C15E026001FC0C7FCB216F8ED01FCA5ECE003010FEB07F814F09138
-FC1FF06DB512E06D14C016806D14009038007FFCEC1FF026337EB130>I<D83FFCEB3FFC
-486C497E00FF14FFA2007F147F003F143F00001400B3A41501A2150315076D130F903A7F
-C07FFFF891B612FC6D15FE7F6D4913FC6D9038F87FF8010001C0C7FC2F2880A630>I<3B
-3FFFC07FFF80486DB512C0B515E0A26C16C06C496C13803B01F80003F000A26D13070000
-5DA26D130F017E5CA2017F131F6D5CA2EC803F011F91C7FCA26E5A010F137EA2ECE0FE01
-075BA214F101035BA3903801FBF0A314FF6D5BA36E5A6E5A2B277EA630>I<3B3FFFC01F
-FFE0486D4813F0B515F8A26C16F06C496C13E0D807E0C7EA3F00A26D5C0003157EA56D14
-FE00015DEC0F80EC1FC0EC3FE0A33A00FC7FF1F8A2147DA2ECFDF9017C5C14F8A3017E13
-FBA290393FF07FE0A3ECE03FA2011F5C90390F800F802D277FA630>I<3A3FFF81FFFC48
-01C37FB580A26C5D6C01815BC648C66CC7FC137FEC80FE90383F81FC90381FC3F8EB0FE3
-ECE7F06DB45A6D5B7F6D5B92C8FC147E147F5C497F81903803F7E0EB07E790380FE3F0EC
-C1F890381F81FC90383F80FE90387F007E017E137F01FE6D7E48486D7E267FFF80B5FCB5
-00C1148014E3A214C16C0180140029277DA630>I<3B3FFFC07FFF80486DB512C0B515E0
-A26C16C06C496C13803B01FC0003F000A2000014076D5C137E150F017F5C7F151FD91F80
-5BA214C0010F49C7FCA214E00107137EA2EB03F0157C15FCEB01F85DA2EB00F9ECFDF014
-7D147FA26E5AA36E5AA35DA2143F92C8FCA25C147EA2000F13FE486C5AEA3FC1EBC3F813
-87EB8FF0EBFFE06C5B5C6C90C9FC6C5AEA01F02B3C7EA630>I<001FB612FC4815FE5AA3
-16FC90C7EA0FF8ED1FF0ED3FE0ED7FC0EDFF80003E491300C7485A4A5A4A5A4A5A4A5A4A
-5A4A5A4990C7FC495A495A495A495A495A495A4948133E4890C7127F485A485A485A485A
-485A48B7FCB8FCA46C15FE28277DA630>I<127CA212FEB3B3B3AD127CA207476CBE30>
-124 D E
-%EndDVIPSBitmapFont
-%DVIPSBitmapFont: Fk cmsy10 10.95 2
-/Fk 2 16 df<EE7FFE0307B512E0033F14FC92B7FC0203D9C00313C0DA0FFCC7EA3FF0DA
-3FE0EC07FCDA7F80EC01FED901FEC9EA7F80D903F8EE1FC0D907E0EE07E04948707E4948
-707E49CB7E017E187E498449844848F00F8000031AC04918074848F003E0A24848F001F0
-A248CD12F8A2001E1A78003E1A7CA2003C1A3C007C1A3EA200781A1EA300F81A1FA2481A
-0FAB6C1A1FA200781A1EA3007C1A3EA2003C1A3C003E1A7CA2001E1A78001F1AF8A26C6C
-F001F0A26C6CF003E0A26C6CF007C06D180F00011A806C6CF01F006D60017E187E6D606D
-6C4C5A6D6C4C5A6D6C4C5AD903F8EE1FC0D901FEEE7F809026007F80DA01FEC7FCDA3FE0
-EC07FCDA0FFCEC3FF0913B03FFC003FFC0020090B6C8FC033F14FC030714E09226007FFE
-C9FC50557BC05B>13 D<EB0FFCEB3FFF90B512C0000314F04880488048804880A2481580
-A3B712C0AA6C1580A36C1500A26C5C6C5C6C5C6C5CC614C0013F90C7FCEB0FFC22227BA7
-2D>15 D E
-%EndDVIPSBitmapFont
-%DVIPSBitmapFont: Fl cmtt12 14.4 15
-/Fl 15 116 df<EA0780EA1FE0EA3FF0EA7FF8A2EAFFFCA4EA7FF8A2EA3FF0EA1FE0EA07
-800E0E688D3E>46 D<EC3FF80103B57E010F14E0013F14F84914FE48B7FC4816C048D9C0
-1F7F270FFE00017F49EB007FD81FF0EC1FF848486E7E160748486E7E4914018300FF81A2
-6D1680177FA36C5AA26CC9FCCAFCA217FF1800A25E5F16035F16075F160F4C5A163F4C5A
-5F4C5A4B90C7FCED07FE4B5A4B5A4B5A4B5A4B5A4A5B4A90C8FCEC0FFE4A5AEC3FF04A5A
-4A5A495B4990C9FCEB0FFC495A495A495A4948143F485B4890C8EA7F80EA0FFC485A48B8
-FC5AB9FCA36C17007E314A7AC93E>50 D<ED7FE0913803FFF8020F13FE023F6D7E91B67E
-49814981010F9038C03FF890391FFE000FD93FF86D7ED97FE06D7E4A130149486D7E4890
-C8FC4848903803FC7F49D90FFF13804848013F13FF5D484890B612C0495A001F5B01C014
-0F913807FC03003F49487E0180496C13E04A48137F127F010049133F143F4B131F5A4813
-7FA292C7120FA96F131FA26C013F15C07E6F133F021F158001806D137F123F6E6CEBFF00
-01C06D5A001F6D6C485A913903FF0FFC01E014FF000F6D5C6D6C5C6C6C6D5B6F5B6C6C01
-0F90C7FC6DEB03FC6C6C90C9FC6C6DEC0FC06D6CEC1FE06E143FD93FF814FFD91FFE1303
-90270FFFC01F1380010390B612006D5D6D5D023F14F0020F14C0020391C7FC9138007FF0
-334B7BC93E>64 D<913807FFF0023F13FE49B61280010715C04915E04915F0137F903AFF
-FC003FF84801E0131F48138091C7FC485A4848EC0FF049EC07E0484891C7FC5B123F5B12
-7F5BA312FF90CAFCA97F127FA27F123F7F17FC6C6CEC01FE7F6C7E6C6C14036DEC07FC6C
-01C0130F6C01F0EB1FF86C01FEEBFFF06DB612E06D15C0010F15806D1500010114FC6D6C
-13F0020790C7FC2F3678B43E>99 D<EC1FF891B57E010314E0010F14F84980017F8090B7
-FC48D9F80F1380DAC00113C048496C13E04848C7123F4848EC1FF049140F484815F81607
-484815FCA248481403A24915FEA200FF1501A290B7FCA517FCA290CAFC7FA2127FA27F12
-3F6D15FCA26C6CEC01FE7F6C6C14036C6C14076DEC0FFC6C6D131F6C01E0EB7FF86C9039
-FC03FFF06DB612E06D15C06D158001071500010114FC6D6C13E0020790C7FC2F3679B43E
->101 D<383FFF805AB57EA37E7EEA003FAEED07FC92383FFF8092B512E002C38002C780
-02CF8002DF809138FFF80F9238C003FFED00014A7F4A815C177F5CA25CA35CB3A8003FB5
-D8C07FB51280486EB612C0B66C15E0A36C4A15C06C4A6C14803B497FC83E>104
-D<143E147F4A7E497FA56D5B6EC8FC143E91C9FCAC003FB57E5A81A47EC7123FB3B3007F
-B71280B812C0A56C16802A4A76C93E>I<ED07C0ED0FE0ED1FF0ED3FF8A5ED1FF0ED0FE0
-ED07C092C7FCAC011FB512F05B16F8A47F90C71207B3B3B2150F16F0A2151F123F486CEB
-3FE0A2486CEB7FC015FF4A1380D9E007130090B6FC6C5C5D6C5C6C14E00007148026007F
-FCC7FC25667AC93E>I<EA7FFFA2B57EA37EA2EA003FAF031FB512F05D18F8A318F08192
-39003FF0004C5A4C5A4B5B4B90C7FC4B5A4B5A4B5A4B5A4B5A4B5A02815B028390C8FCEC
-87FE148FEC9FFF02BF7F91B57EA2EDBFE0ED1FF04A6C7EECFC0702F87F4A6C7E4A6C7E4A
-7E4A80707E707E161F83707E707E160383707E007FB5D8C03F13FEA2B66C4813FFA36C4A
-6C13FEA238497DC83E>I<DA0FC0137E3C7FF07FF003FF8000FF9026FFFC0713E001FBD9
-FE1F7F90B55B6F487FA26C903AF07FFF83FC00039039C03FFE01028013FC020001F87F03
-1F1300495CA2495CA4495CB3A93D7FFFC0FFFE07FFF0B500E16D4813F802E35CA302E180
-6C01C0496C13F03D3480B33E>109 D<ED07FC3B3FFF803FFF804891B512E0B500C38002
-C78002CF806C01DF806C9038FFF80FD8003F9038C003FFED00014A7F4A815C177F5CA25C
-A35CB3A8003FB5D8C07FB51280486EB612C0B66C15E0A36C4A15C06C4A6C14803B347FB3
-3E>I<EC1FF0ECFFFE01036D7E010F14E04980017F14FC90B67E489038F01FFFECC00748
-D90001138048486D13C04848EC7FE049143F4848EC1FF049140F003F16F8491407A24848
-EC03FCA448C8EA01FEAA6D1403007F16FCA26D1407A2003F16F86D140F6C6CEC1FF0A26C
-6CEC3FE06D147F6C6CECFFC06D5B6CD9C00713806CD9F01F13006C90B55A6D5C6D5C010F
-14E001031480010049C7FCEC1FF02F3679B43E>I<ED07FC3B3FFF803FFF804891B512E0
-B500C314F802CF8002DF806C90B7FC6CDAF80F1380D8003FD9C00113C092C713E04A143F
-4AEC1FF04A15F84A140F4AEC07FCA217034A15FE1701A318FF83A95F18FEA280170318FC
-6E140718F86E140FEF1FF06E143F6EEC7FE06EECFFC0DBC0031380EDF01F92B6120002DF
-14FC02CF5C02C35C02C114C0DAC07F90C7FCED0FF892C9FCB3003FB512C04880B67EA36C
-5C6C5C384F7FB33E>I<EE07FE263FFFF890387FFFC0484AB512E0B5D8FC0714F05D4B14
-F86C5C6C91387FFC0FD80003EBFFC002FD90380007F0DAFFFEEB03E003F890C7FC5D5DA2
-5D5DA292C9FCA25CA45CB3A3003FB612FC4881B7FCA37E6C5D35347CB33E>114
-D<903901FFF00F011F9038FE1F8090B612BF000315FF5A5A5A393FFE003F01F01307D87F
-C0130190C8FC5A48157FA47EEE3F00D87FC091C7FC13F0EA3FFE381FFFF06CEBFFC06C14
-FE6C6E7EC615E0013F14F8010780D9003F7F02007F03071380030013C0003EED3FE0007F
-151F48150F17F06D1407A37FA26D140F6D15E0161F01FCEC3FC06D14FF9026FFC00F1380
-91B612005E485D013F5C6D14E0D8FC0714802778007FF8C7FC2C3677B43E>I
-E
-%EndDVIPSBitmapFont
-%DVIPSBitmapFont: Fm cmbx12 14.4 56
-/Fm 56 124 df<B712F0AB240B7F9F2D>45 D<EA07F0487E487E487E487EB51280A76C13
-006C5A6C5A6C5A6C5A1111769025>I<EF01E01703EF07F0A2170FA2EF1FE0A218C0173F
-A2EF7F80A218005FA24C5AA25F1603A24C5AA25F160FA24C5AA25F163FA24C5AA294C7FC
-5EA24B5AA25E1503A24B5AA25E150FA24B5AA25E153FA24B5AA293C8FC5DA24A5AA25D14
-03A25D1407A24A5AA25D141FA24A5AA25D147FA24AC9FCA25C1301A2495AA25C1307A249
-5AA25C131FA2495AA25C137FA249CAFCA25B1201A2485AA25B1207A2485AA25B121FA248
-5AA25B127FA248CBFCA25AA2127CA2347879D943>I<913803FFC0023F13FC91B6FC0103
-15C0010F018113F0903A1FFC003FF849486D7E49486D7E49486D7E48496D138048496D13
-C0A24817E04890C813F0A34817F8A24817FC49157FA3007F17FEA600FF17FFB3A5007F17
-FEA6003F17FCA26D15FFA26C17F8A36C17F0A26C6D4913E0A26C6D4913C06C17806E5B6C
-6D4913006D6C495AD91FFCEB3FF8903A0FFF81FFF06D90B55A01011580D9003F01FCC7FC
-020313C0384F7BCD43>I<157815FC14031407141F14FF130F0007B5FCB6FCA2147F13F0
-EAF800C7FCB3B3B3A6007FB712FEA52F4E76CD43>I<EC3FFE0103B512E0010F14FC013F
-14FF90B712C048D9C07F7F2703FE000F13F8D807F801037FD80FE06D7F48486D7F484880
-01F01680486C6E13C07F486C6E13E07FA27013F0A56C5AA26C5AEA0FF0EA03C0C914E05E
-A218C05E1880A24C13005F4C5A4B5B5F4B5B5F4B5B4B90C7FC4B5A5E4B5AED7FE04B5A4A
-5B4A48C8FC4A5A5D4A48EB01F04A5AEC3F804AC7FC02FEEC03E0495A495A495A495AD91F
-80140749C8FC013E150F017FB7FC90B812C05A5A5A5A5A5A5AB9FC1880A4344E79CD43>
-I<91380FFFC091B512FC0107ECFF80011F15E090263FF8077F9026FF800113FC4848C76C
-7ED803F86E7E491680D807FC8048B416C080486D15E0A4805CA36C17C06C5B6C90C75AD8
-01FC1680C9FC4C13005FA24C5A4B5B4B5B4B13C04B5BDBFFFEC7FC91B512F816E016FCEE
-FF80DA000713E0030113F89238007FFE707E7013807013C018E07013F0A218F8A27013FC
-A218FEA2EA03E0EA0FF8487E487E487EB57EA318FCA25E18F891C7FC6C17F0495C6C4816
-E001F04A13C06C484A1380D80FF84A13006CB44A5A6CD9F0075BC690B612F06D5D011F15
-80010302FCC7FCD9001F1380374F7ACD43>I<177C17FEA2160116031607160FA2161F16
-3F167FA216FF5D5DA25D5DED1FBFED3F3F153E157C15FCEC01F815F0EC03E01407EC0FC0
-1580EC1F005C147E147C5C1301495A495A5C495A131F49C7FC133E5B13FC485A5B485A12
-07485A485A90C8FC123E127E5ABA12C0A5C96C48C7FCAF020FB712C0A53A4F7CCE43>I<
-D80380150ED807E0157E01FEEC03FED9FFF0137F91B65A5F5F5F5F5F94C7FC5E5E16F016
-C093C8FC15F801E190C9FC01E0CAFCABEC0FFF027F13F001E3B512FE01E76E7E9026FFF8
-077FDAC0017F49C713F8496E7E49143F4981496E7E6C481680C9FC18C08218E0A418F0A3
-EA0FE0487E487E487E487EA418E0A35B6C484A13C05B491680003EC85A003F17006C6C4A
-5A6D5D6C6C4A5AD807F8495BD803FE01075B2701FFC03F5B6C90B65A013F4AC7FC6D14F8
-010314C09026007FF8C8FC344F79CD43>I<ED0FFF92B512E0020780021F14FC91397FFE
-03FE903A01FFF0007F4901C0EB3F804990C7121F4948EC7FC0494814FF49484913E04948
-5B01FF5C485BA2485B5AA2486F13C04A6D1380486F1300177E94C7FC5AA291CAFC5AA215
-08913801FFF8020713FFB54814C04A14F04AC66C7E023C6D7E4A6D7E4A6D7E7013804A15
-C0A24A15E07013F05C18F8A491C714FCA37EA67EA46C17F880A27E18F06C5D18E06C6D15
-C07E6E4913806C6D15006D6C495A6D6CEB7FFC6DB448485A6D90B55A010315C0010092C7
-FC023F13FC020713C0364F7ACD43>I<121F7F7FEBFF8091B81280A45A1900606060A260
-6060485F0180C86CC7FC007EC95A4C5A007C4B5A5F4C5A160F4C5A484B5A4C5A94C8FC16
-FEC812014B5A5E4B5A150F4B5AA24B5AA24B5A15FFA24A90C9FCA25C5D1407A2140FA25D
-141FA2143FA4147F5DA314FFA55BAC6D5BA2EC3FC06E5A395279D043>I<913807FFC002
-7F13FC0103B67E010F15E090261FFC0113F8903A3FE0003FFCD97F80EB0FFE49C76C7E48
-488048486E1380000717C04980120F18E0177FA2121F7FA27F7F6E14FF02E015C014F802
-FE4913806C7FDBC00313009238F007FE6C02F85B9238FE1FF86C9138FFBFF06CEDFFE017
-806C4BC7FC6D806D81010F15E06D81010115FC010781011F81491680EBFFE748018115C0
-48D9007F14E04848011F14F048487F48481303030014F8484880161F4848020713FC1601
-824848157F173FA2171FA2170FA218F8A27F007F17F06D151FA26C6CED3FE0001F17C06D
-157F6C6CEDFF806C6C6C010313006C01E0EB0FFE6C01FCEBFFFC6C6CB612F06D5D010F15
-80010102FCC7FCD9000F13C0364F7ACD43>I<91380FFF8091B512F8010314FE010F6E7E
-4901037F90267FF8007F4948EB3FF048496D7E484980486F7E484980824817805A91C714
-C05A7013E0A218F0B5FCA318F8A618FCA46C5DA37EA25E6C7F6C5DA26C5D6C7F6C6D137B
-6C6D13F390387FF803011FB512E36D14C30103028313F89039007FFE03EC00401500A218
-F05EA3D801F816E0487E486C16C0487E486D491380A218005E5F4C5A91C7FC6C484A5A49
-4A5A49495B6C48495BD803FC010F5B9027FF807FFEC7FC6C90B55A6C6C14F06D14C0010F
-49C8FC010013F0364F7ACD43>I<171F4D7E4D7EA24D7EA34C7FA24C7FA34C7FA34C7FA2
-4C7FA34C8083047F80167E8304FE804C7E03018116F8830303814C7E03078116E083030F
-814C7E031F81168083033F8293C77E4B82157E8403FE824B800201835D840203834B8002
-07835D844AB87EA24A83A3DA3F80C88092C97E4A84A2027E8202FE844A82010185A24A82
-0103854A82010785A24A82010F855C011F717FEBFFFCB600F8020FB712E0A55B547BD366
->65 D<BA12C019FEF1FFC01AF01AFCD8000701F0C7000313FFDE007F7F737F070F7F737F
-878587858785A287A84F5BA263616361634F5B4F5B077F90C7FC4E485A060713F892B812
-E097C8FC861AF003F0C7000313FE9539003FFF80070F13E0737F07017F87737F747E1C80
-7413C0A27413E0A31CF0A386A362A31CE0A2621CC0A250138097B5FC1C004F5B19074F5B
-073F13F04EB55ABC128098C7FC1AF81AC007F8C8FC54527CD160>I<932601FFFCEC01C0
-047FD9FFC013030307B600F81307033F03FE131F92B8EA803F0203DAE003EBC07F020F01
-FCC7383FF0FF023F01E0EC0FF94A01800203B5FC494848C9FC4901F88249498249498249
-49824949824990CA7E494883A2484983485B1B7F485B481A3FA24849181FA3485B1B0FA2
-5AA298C7FC5CA2B5FCAE7EA280A2F307C07EA36C7FA21B0F6C6D1980A26C1A1F6C7F1C00
-6C6D606C6D187EA26D6C606D6D4C5A6D6D16036D6D4C5A6D6D4C5A6D01FC4C5A6D6DEE7F
-806D6C6C6C4BC7FC6E01E0EC07FE020F01FEEC1FF80203903AFFE001FFF0020091B612C0
-033F93C8FC030715FCDB007F14E0040101FCC9FC525479D261>I<BA7E19FCF1FF801AF0
-1AFCD8000701F0C7000F13FF060014C0071F7F070713F807017F737F747E747F747F8674
-7F747F8886888688A2757EA31D8087A21DC0A51DE0A387A963A31DC0A51D80A2631D00A3
-515AA2646264505B6264505B505B5090C7FCF2FFFE4F5B07075B071F5B96B512C0060F91
-C8FCBB5A1AF01AC007FCC9FC19805B527CD167>I<BC1280A5D8000701F8C7000114C0F0
-001F19071901851A7F1A3F1A1FA2F20FE0A21A07A31A03A318F81BF01A01A497C7FC1701
-A317031707170F177F92B6FCA59238F8007F170F170717031701A317001B3EA31B7CA395
-C8FCA21BFCA21BF8A21A01A31A031BF01A071A0FA21A1F1A3FF27FE0F101FF1907191F06
-03B5FCBCFCA21BC0A34F517CD058>I<932601FFFCEC01C0047FD9FFC013030307B600F8
-1307033F03FE131F92B8EA803F0203DAE003EBC07F020F01FCC7383FF0FF023F01E0EC0F
-F94A01800203B5FC494848C9FC4901F8824949824949824949824949824990CA7E494883
-A2484983485B1B7F485B481A3FA24849181FA3485B1B0FA25AA298C8FC5CA2B5FCAE6C05
-7FB712E0A280A36C94C7003FEBC000A36C7FA36C7FA27E6C7FA26C7F6C7FA26D7E6D7F6D
-7F6D6D5E6D7F6D01FC93B5FC6D13FF6D6C6D5C6E01F0EC07FB020F01FEEC1FF10203903A
-FFF001FFE0020091B6EAC07F033FEE001F030703FC1307DB007F02E01301040149CAFC5B
-5479D26A>71 D<B812C0A5D8000701F8C7FCB3B3B3B2B812C0A52A527CD132>73
-D<027FB71280A591C76C90C7FCB3B3B3EA07F0EA1FFC487E487EA2B57EA44C5AA34A485B
-7E49495BD83FF8495BD81FE05DD80FFC011F5B2707FF807F90C8FC000190B512FC6C6C14
-F0011F14C0010101F8C9FC39537DD145>I<B600FC073FB512FE6F61A26F96B6FCA2D800
-07F5C00070EF01EFA202EF6DEF03CFA202E76DEF078FA202E36DEF0F0FA202E16D171EA3
-02E06D173CA26F6C1778A26F6C17F0A26F6DED01E0A26F6DED03C0A36F6DED0780A26F6D
-ED0F00A26F6D151EA26F6D5DA3706C5DA2706C5DA2706D495AA2706D495AA2706D495AA3
-706D49C7FCA2706D131EA2706D5BA2716C5BA3716C5BA271EB81E0A271EBC3C0A271EBE7
-80A27101FFC8FCA3715BA2715BA2725AA2725AA2D93FFC6F5AB74DB712FEA2725AA2725A
-77527CD180>77 D<B600FC93B7FC8181A282D800076E9239003FFC0070EE07E08282A282
-02EF7F02E77F02E380A202E18002E0806F7F6F7F6F7FA26F7F6F7F6F806F80A26F80707F
-707F707F707FA2707F7080708070808583717F717F717F717FA27114807114C07114E072
-13F07213F8A27213FC7213FE7213FF721487A27214C77214E77313F77313FF85A2858585
-85A28586868686A286868686A2D93FFC187FB7173F1B1F1B0F1B07755A60527CD169>I<
-93380FFFC00303B6FC031F15E092B712FC0203D9FC0013FF020F01C0010F13C0023F90C7
-000313F0DA7FFC02007F494848ED7FFE4901E0ED1FFF49496F7F49496F7F4990C96C7F49
-854948707F4948707FA24849717E48864A83481B804A83481BC0A2481BE04A83A2481BF0
-A348497113F8A5B51AFCAF6C1BF86E5FA46C1BF0A26E5F6C1BE0A36C6D4D13C0A26C6D4D
-1380A26C1B006C6D4D5A6E5E6C626D6C4C5B6D6D4B5B6D6D4B5B6D6D4B5B6D6D4B5B6D6D
-4B90C7FC6D6D4B5A6D01FF02035B023F01E0011F13F0020F01FC90B512C0020390B7C8FC
-020016FC031F15E0030392C9FCDB001F13E0565479D265>I<BAFC19F819FF1AE086D800
-0701F0C7001F13FC060113FF726C13807313C0070F13E01BF0857313F81BFCA27313FEA4
-1BFFA81BFEA31BFC61A21BF84F13F04F13E0614F13C04F13004E485A061F5B92B812F01A
-C04FC7FC19E003F8CBFCB3AEB812C0A550527CD15C>I<B912F0F0FF8019F819FF1AC0D8
-000701F0C714F0060F7F060113FE727F737F737F85737F87A2737FA387A863A2616363A2
-4F5B4F5B4F90C8FC4F5A06035B060F13F095B512C092B8C9FC19F819E019F89226F00003
-13FE9439007FFF80727F727F727F727F727F8684A28684A787A71D1C75133EA38575137E
-73157C7513FC731401B86C6D9038F803F807039038FE07F07390B512E0736C14C0080F14
-00CEEA7FFC5F537CD164>82 D<91260FFF80130791B500F85B010702FF5B011FEDC03F49
-EDF07F9026FFFC006D5A4801E0EB0FFD4801800101B5FC4848C87E48488149150F001F82
-4981123F4981007F82A28412FF84A27FA26D82A27F7F6D93C7FC14C06C13F014FF15F86C
-ECFF8016FC6CEDFFC017F06C16FC6C16FF6C17C06C836C836D826D82010F821303010082
-021F16801400030F15C0ED007F040714E01600173F050F13F08383A200788200F882A318
-7FA27EA219E07EA26CEFFFC0A27F6D4B13806D17006D5D01FC4B5A01FF4B5A02C04A5A02
-F8EC7FF0903B1FFFC003FFE0486C90B65AD8FC0393C7FC48C66C14FC48010F14F048D900
-7F90C8FC3C5479D24B>I<003FBC1280A59126C0003F9038C0007F49C71607D87FF80601
-13C001E08449197F49193F90C8171FA2007E1A0FA3007C1A07A500FC1BE0481A03A6C994
-C7FCB3B3AC91B912F0A553517BD05E>I<B800C00103B612FCA5D8000701F8CAEBF000F3
-1F80B3B3B11B3FA26D97C7FC81637F1B7E6D6D17FE505A6E7E505A6E6D15076E4D5A6E6D
-4B5A6E6D4B5A6E01F84B5A6E6DDA03FFC8FC6E6CB46CEB0FFE6F9039F001FFF8030F90B6
-5A030316C0DB007F92C9FC040F14F8DC007F13805E537CD167>I<B700FE031FB512FEA5
-D8001F01F0CA383FFE00F307F06D626F170F6D62811B1F6D6D601B3F6D97C7FC6F5F6D19
-7E821BFE6E6D5E1A016E6D5E1A036E60701507A26E6D5E1A0F6E6D5E1A1F6E6070153FA2
-6E6D93C8FC626E6E147E1AFE6F5E711301A26F6D5C19036F6D5C19076F5E71130FA26F6D
-5C191F6F6D5C193F6F93C9FC715BA26FEC807E19FE706D5A18C1705C18E3705C18F318F7
-70EBFFE0A2705CA2705CA37091CAFCA2705BA2715AA3715AA2715AA2715A715A5F537DD1
-66>I<EC7FFF0107B512F0013F14FE90B77E48D9E00F7F2703FE000113F0486C6D7F6EEB
-3FFC48826E131F83707FA36C496D7FA26C90C7FC6C5AC9FCA6037FB5FC020FB6FC91B7FC
-01071487013FEBF0074913803901FFFC004813F0485B485B485B4890C7FC5A5BA2485AA4
-5EA26D5C007F151D163D6C6C02797F6C6D01F113F86C9026C003E1EBFFE06C9026F81FC0
-14F06C90B5487EC6ED001F011F01FC010713E0010101E090C8FC3C387CB641>97
-D<EB3FF0B5FCA51203C6FCB3A4923801FFE0030F13FE033FEBFFC092B612F002F301017F
-913AF7F8003FFEDAFFE0EB0FFF03806D7F92C76C7F4A6E7F4A824A6E7FA2727EA285A285
-84A31A80AC1A00A44E5AA36118FF616E4A5BA26E4A5B6E4A5B6F495BDACFC04990C7FCDA
-87F0EB7FFC913A03FE03FFF849C6B612E0496D148049011F01FCC8FC90C7000313C04154
-7BD24B>I<913801FFF8021FEBFF8091B612F0010315FC010F9038C00FFE903A1FFE0001
-FFD97FFC491380D9FFF05B4817C048495B5C5A485BA2486F138091C7FC486F1300705A48
-92C8FC5BA312FFAD127F7FA27EA2EF03E06C7F17076C6D15C07E6E140F6CEE1F806C6DEC
-3F006C6D147ED97FFE5C6D6CEB03F8010F9038E01FF0010390B55A01001580023F49C7FC
-020113E033387CB63C>I<4DB47E0407B5FCA5EE001F1707B3A4913801FFE0021F13FC91
-B6FC010315C7010F9038E03FE74990380007F7D97FFC0101B5FC49487F4849143F484980
-485B83485B5A91C8FC5AA3485AA412FFAC127FA36C7EA37EA26C7F5F6C6D5C7E6C6D5C6C
-6D49B5FC6D6C4914E0D93FFED90FEFEBFF80903A0FFFC07FCF6D90B5128F0101ECFE0FD9
-003F13F8020301C049C7FC41547CD24B>I<913803FFC0023F13FC49B6FC010715C04901
-817F903A3FFC007FF849486D7E49486D7E4849130F48496D7E48178048497F18C0488191
-C7FC4817E0A248815B18F0A212FFA490B8FCA318E049CAFCA6127FA27F7EA218E06CEE01
-F06E14037E6C6DEC07E0A26C6DEC0FC06C6D141F6C6DEC3F806D6CECFF00D91FFEEB03FE
-903A0FFFC03FF8010390B55A010015C0021F49C7FC020113F034387CB63D>I<ED3FFC02
-03B5FC020F14C0023F14E09139FFF81FF0499038C03FF849EB807F49903800FFFC495A49
-5AA2495AA2EE7FF8495AEE3FF0EE0FC093C7FCAEB712E0A526007FF8C8FCB3B3A7007FB5
-12FEA52E547CD329>I<DA3FFF14FF0103B5D8F00713C0010FDAFC1F13E0013FECFF7F90
-267FFC0F9038FF9FF09026FFE001EBF83F48496C13E0484990387FF01F4890C7D83FF813
-E0489338FC0FC0F0078048486E6CC7FCA2003F82A9001F5EA26C6C4A5AA26C5E6C6D495A
-6C6D495A6C6D485BDAFC0F5B4890B6C8FCD803EF14FC01C314F02607C03F90C9FC91CBFC
-A2120FA37FA213F813FE90B7FC6C16F817FF18C06C836C836C836D828448B9FC12074848
-C700031480D81FF8EC003F4848150748486F13C083485A83A56D5D007F18806D5D003F18
-006C6C4B5AD80FFEED1FFC6C6C6CEC7FF86C01E049485A6C01FE011F5B6C6CB71280010F
-03FCC7FC010115E0D9000F01FCC8FC3C4F7CB543>I<EB3FF0B5FCA51203C6FCB3A4EE1F
-FC93B512C0030314F0030F8092391FE07FFC92393F001FFE037C8003F07FDAF1E081ECF3
-C0DAF7807F8502FFC7FC5CA25CA45CB3ACB6D8F807B612C0A542537BD24B>I<137F497E
-000313E0487FA2487FA76C5BA26C5BC613806DC7FC90C8FCADEB3FF0B5FCA512017EB3B3
-A6B612E0A51B547BD325>I<EB3FF0B5FCA51203C6FCB3A54CB512F8A59339003FFE00EF
-1FF0EF3FC04D5A4DC7FCEE03FEEE07F84C5A4C5AEE7FC04CC8FC4B5A4B5AED0FF8ED1FE0
-4B7E4B7EECF1FF02F37F02F77F91B6FC83159F030F7F02FE80DAF8077F4A7E6F7F6F7F83
-707E82707F84707F707F82707F84707F177F717E4D13C0B6D8F003B6FCA540537CD247>
-107 D<EB3FF0B5FCA512017EB3B3B3B1B612F0A51C537BD225>I<D93FF0D91FFCEDFFE0
-B591B500C0010713FE030302F0011F6D7E030F6E017F8092271FE07FFCD9FF037F922A3F
-001FFE01F8007F0003027C9126FF03E080C602F06DD90780137FDAF1E0038FC77FDAF3C0
-159EDAF7806D01BC143F07FC8102FFC75C4A5EA24A5EA44A5EB3ACB6D8F807B6D8C03FB5
-12FEA567367BB570>I<D93FF0EB1FFCB591B512C0030314F0030F8092391FE07FFC9239
-3F001FFE0003027C80C602F07FDAF1E081ECF3C0DAF7807F8502FFC7FC5CA25CA45CB3AC
-B6D8F807B612C0A542367BB54B>I<913801FFE0021F13FE91B612C0010315F0010F9038
-807FFC903A1FFC000FFED97FF86D6C7E49486D7F48496D7F48496D7F4A147F48834890C8
-6C7EA24883A248486F7EA3007F1880A400FF18C0AC007F1880A3003F18006D5DA26C5FA2
-6C5F6E147F6C5F6C6D4A5A6C6D495B6C6D495B6D6C495BD93FFE011F90C7FC903A0FFF80
-7FFC6D90B55A010015C0023F91C8FC020113E03A387CB643>I<903A3FF001FFE0B5010F
-13FE033FEBFFC092B612F002F301017F913AF7F8007FFE0003D9FFE0EB1FFFC602806D7F
-92C76C7F4A824A6E7F4A6E7FA2717FA285187F85A4721380AC1A0060A36118FFA2615F61
-6E4A5BA26E4A5B6E4A5B6F495B6F4990C7FC03F0EBFFFC9126FBFE075B02F8B612E06F14
-80031F01FCC8FC030313C092CBFCB1B612F8A5414D7BB54B>I<912601FFE0EB0780021F
-01F8130F91B500FE131F0103ECFF80010F9039F03FC03F499039800FE07F903A7FFE0003
-F04948903801F8FF4849EB00FD4849147F4A805A4849805A4A805AA291C87E5AA35B12FF
-AC6C7EA37EA2806C5EA26C6D5CA26C6D5C6C6D5C6C93B5FC6C6D5B6D6C5B6DB4EB0FEF01
-0F9038C07FCF6D90B5120F010114FED9003F13F80203138091C8FCB1040FB61280A5414D
-7CB547>I<90397FE003FEB590380FFF80033F13E04B13F09238FE1FF89139E1F83FFC00
-03D9E3E013FEC6ECC07FECE78014EF150014EE02FEEB3FFC5CEE1FF8EE0FF04A90C7FCA5
-5CB3AAB612FCA52F367CB537>I<903903FFF00F013FEBFE1F90B7FC120348EB003FD80F
-F81307D81FE0130148487F4980127F90C87EA24881A27FA27F01F091C7FC13FCEBFFC06C
-13FF15F86C14FF16C06C15F06C816C816C81C681013F1580010F15C01300020714E0EC00
-3F030713F015010078EC007F00F8153F161F7E160FA27E17E07E6D141F17C07F6DEC3F80
-01F8EC7F0001FEEB01FE9039FFC00FFC6DB55AD8FC1F14E0D8F807148048C601F8C7FC2C
-387CB635>I<143EA6147EA414FEA21301A313031307A2130F131F133F13FF5A000F90B6
-FCB8FCA426003FFEC8FCB3A9EE07C0AB011FEC0F8080A26DEC1F0015806DEBC03E6DEBF0
-FC6DEBFFF86D6C5B021F5B020313802A4D7ECB34>I<D93FF8913801FFC0B50207B5FCA5
-0003ED001FC61607B3AE5FA35FA2017F5D173B177B6D6C14F3DC01E313F06D6CD907C3EB
-FFC0903A0FFFC03F836D90B51203010114FE6D6C13F8020701E091C7FC42377BB54B>I<
-B600F00107B5FCA5000101F8C8EA7FE06C6DED3F00A2017F163E6E157E013F167C6E15FC
-6D5E6F13016D5E8117036D5E6F13076D5E6F130F6D5E6F131F6D93C7FC815F6E6C133E17
-7E023F147C6F13FC6E5C16816E5C16C3A26EEBE3E016E76E5C16FF6E5CA26E91C8FCA26F
-5AA36F5AA26F5AA26F5AA26F5A6F5A40367DB447>I<B6D8E07FB5D8C003B512C0A50001
-01F0C701F0C7381FF8006E027FED07E06C715DA26E023F150F017F705DA26E181F013F4B
-6C92C7FC6E606D70143E94B5FC6F177E6D4A6E137C03C001F315FC6D715B160303E001E1
-14016D020702E05B03F013C06D71485A160F03F8D9807F13076D05F85B93381F003F03FC
-160F027F4902FC5BDBFE3E011F131F023F04FE90C8FC167EDBFF7C010F5B6E01FCECFF3E
-4C6D137E6E5FA24C7F6E5F4C7F6E5FA24C7F6E5F4C147FA26E5F93C8123F6F5EA2033E6F
-C9FC5A367DB461>I<007FB500F090387FFFFEA5C66C48C7000F90C7FC6D6CEC07F86D6D
-5C6D6D495A6D4B5A6F495A6D6D91C8FC6D6D137E6D6D5B91387FFE014C5A6E6C485A6EEB
-8FE06EEBCFC06EEBFF806E91C9FCA26E5B6E5B6F7E6F7EA26F7F834B7F4B7F92B5FCDA01
-FD7F03F87F4A486C7E4A486C7E020F7FDA1FC0804A486C7F4A486C7F02FE6D7F4A6D7F49
-5A49486D7F01076F7E49486E7E49486E7FEBFFF0B500FE49B612C0A542357EB447>I<B6
-00F00107B5FCA5C601F8C8EA7FE06EED3F00A26D6C153E187E013F167C6E15FC6D5E6F13
-016D5E6F13036D5E8117076D6D5C170F6D6D5C171F6D93C7FC6F5B027F143E6F137E023F
-147C6F13FCA26E6D5A16816EEBC1F016C36E5C16E76E5C16FF6E5CA26E91C8FCA36F5AA2
-6F5AA26F5AA26F5AA26F5AA35E150F5E151F93C9FC5DD81FC0133E486C137E486C137C48
-6C13FC5D14015D14034A5A6C48485A49485A263FC07FCAFCEB81FE6CB45A6C13F000035B
-C690CBFC404D7DB447>I<001FB8FC1880A3912680007F130001FCC7B5FC01F0495B495D
-49495B495B4B5B48C75C5D4B5B5F003E4A90C7FC92B5FC4A5B5E4A5B5CC7485B5E4A5B5C
-4A5B93C8FC91B5FC495B5D4949EB0F805B495B5D495B49151F4949140092C7FC495A485E
-485B5C485E485B4A5C48495B4815074849495A91C712FFB8FCA37E31357CB43C>I<BB12
-C0A4420480A243>I E
-%EndDVIPSBitmapFont
-%DVIPSBitmapFont: Fn cmr10 10.95 85
-/Fn 85 124 df<4AB4EB0FE0021F9038E03FFC913A7F00F8FC1ED901FC90383FF03FD907
-F090397FE07F80494801FF13FF4948485BD93F805C137F0200ED7F00EF003E01FE6D91C7
-FC82ADB97EA3C648C76CC8FCB3AE486C4A7E007FD9FC3FEBFF80A339407FBF35>11
-D<EC03FE91383FFF809138FE03E0903903F800F0D90FE013384948137C90393F8001FE90
-387F00035B5BA2485A6F5AED007093C7FCAA16FEB7FCA33901FC000315011500B3AC486C
-497EB5D8F87F13FCA32E407EBF33>I<EC03FF023F13EE9138FE01FEEB03F090380FE003
-EB1FC0EB3F80EB7F005B5B150148481300AEB7FCA3D801FCC7FCB3AE486C497EB5D8F87F
-13FCA32E407EBF33>I<DA03FE49B4FC91273FFF801F13C0913BFE03E07F01F0903C03F0
-00F1FC0078D90FE0D97FF0131C49484948133E4948484913FF494848495A5B491500A248
-485C03016E5A0300153896C7FCAA197FBBFCA3D801FCC738FE00018485B3AC486C496CEC
-FF80B5D8F87FD9FC3F13FEA347407EBF4C>I<121EEA7F80EAFFC0A9EA7F80ACEA3F00AC
-121EAB120CC7FCA8121EEA7F80A2EAFFC0A4EA7F80A2EA1E000A4179C019>33
-D<001E130F397F803FC000FF137F01C013E0A201E013F0A3007F133F391E600F30000013
-00A401E01370491360A3000114E04913C00003130101001380481303000EEB070048130E
-0018130C0038131C003013181C1C7DBE2D>I<4B6C130C4B6C131EA20307143EA24C133C
-A2030F147CA293C71278A24B14F8A2031E5CA2033E1301A2033C5CA3037C1303A203785C
-A203F81307A24B5CA20201140F007FBAFCBB1280A26C1900C72707C0003EC8FC4B133CA3
-020F147CA292C71278A24A14F8A2021E5CA3023E1301007FBAFCBB1280A26C1900C727F8
-0007C0C8FC4A5CA20101140FA24A91C9FCA301035CA24A131EA20107143EA24A133CA201
-0F147CA291C71278A34914F8A2011E5CA2013E1301A2013C5CA201186D5A41517BBE4C>
-I<013F1603D9FFC04B7E2601E0E0150F2607C070151F48486C4BC7FC023E157E48486C15
-FE48D90FC0EB03FC003ED90EF0EB0FF8DA0F3F13FD007E903A070FFFF1F0007C0200EB03
-E0160000FC6D6C495A170F604DC8FC5F173E5F17FC5F4C5A1603007CD907005B4C5A007E
-150F003E495C020E49C9FC003F5D6C49133E260F803C5B023813FC6C6C485B3A01E0E001
-F03800FFC090273F0003E0133F90C70007ECFFC09339C001E0E0923A0F8007C070031F49
-487E0400143C033E90381F001C037E497F037C133E4B150F0201027E7F4B137C4A5A0207
-02FCEB03805D4A5A141F92C7FC143E147E147C5CA2495A0103037CEB07005C4948147E01
-0F033E5B4A160E49C8123F496F5B013E92380F803C49173801FC6F6C5A49923801E0E049
-6FB45A0160043FC7FC41497BC34C>37 D<121EEA7F8012FF13C0A213E0A3127FEA1E6012
-00A413E013C0A312011380120313005A120E5A1218123812300B1C79BE19>39
-D<1430147014E0EB01C0EB03801307EB0F00131E133E133C5B13F85B12015B1203A2485A
-A2120F5BA2121F90C7FCA25AA3123E127EA6127C12FCB2127C127EA6123E123FA37EA27F
-120FA27F1207A26C7EA212017F12007F13787F133E131E7FEB07801303EB01C0EB00E014
-701430145A77C323>I<12C07E12707E7E121E7E6C7E7F12036C7E7F12007F1378137CA2
-7FA2133F7FA21480130FA214C0A3130714E0A6130314F0B214E01307A614C0130FA31480
-A2131F1400A25B133EA25BA2137813F85B12015B485A12075B48C7FC121E121C5A5A5A5A
-145A7BC323>I<EB03C0A2805CA600F0140F00FC143F00FE147F00FF14FF393FC3C3FC39
-0FE187F03903F18FC03900FDBF00EB3FFCEB0FF0EB03C0EB0FF0EB3FFCEBFDBF3903F18F
-C0390FE187F0393FC3C3FC39FF03C0FF00FE147F00FC143F00F0140F00001400A6805CA2
-20277AC32D>I<121EEA7F8012FF13C0A213E0A3127FEA1E601200A413E013C0A3120113
-80120313005A120E5A1218123812300B1C798919>44 D<B512FEA617067F961E>I<121E
-EA7F80A2EAFFC0A4EA7F80A2EA1E000A0A798919>I<ED0180ED03C01507A21680150FA2
-16005DA2151E153EA2153C157CA2157815F8A25D1401A25D1403A25D1407A25D140FA24A
-C7FCA2141E143EA2143C147CA2147814F8A25C1301A25C1303A25C1307A25C130FA291C8
-FC5BA2131E133EA25BA2137813F8A25B1201A25B1203A25B1207A25B120FA290C9FC5AA2
-121E123EA2123C127CA2127812F8A25A1260225B7BC32D>I<EB01FE90380FFFC090383F
-03F090387C00F849137C48487F48487F4848EB0F80A2000F15C04848EB07E0A3003F15F0
-A290C712034815F8A64815FCB3A26C15F8A56C6CEB07F0A3001F15E0A36C6CEB0FC0A26C
-6CEB1F80000315006C6C133E6C6C5B017C5B90383F03F090380FFFC0D901FEC7FC263F7D
-BC2D>I<EB01C013031307131F137FEA07FFB5FC139FEAF81F1200B3B3ACEB7FF0B612F8
-A31D3D78BC2D>I<EB07FC90383FFF8090B512E03903F01FF83907C007FC390F0001FE00
-1E6D7E001C1580003CEC7FC05AED3FE01270B4FC6DEB1FF07FA56C5A6CC7FC120CC813E0
-153FA216C0157F168015FF16004A5A5D4A5A4A5A5D4A5A4A5A4AC7FC147E147C5C495A49
-5A495A495A49C71270133E133C5B4914E0485A485A485A48C7120148B6FCA25A4815C0B7
-FCA3243D7CBC2D>I<EB07FC90383FFF809038F80FE03901E003F839078001FCD80F007F
-000E6D7E001E1580D81F80137F486C14C07FA27F5BA2121F6C5AC8138015FF1600A24A5A
-A24A5A5DEC07E04A5A023FC7FCEB1FFCECFF809038000FE0EC07F86E7E6E7E6E7E1680ED
-7FC0A216E0153FA216F0A2120C123F487E487EA316E0A249137F6CC713C01278EDFF807E
-6C4913006C495A3907C007FC3903F80FF0C6B55A013F1380D907F8C7FC243F7CBC2D>I<
-150E151E153EA2157EA215FE1401A21403EC077E1406140E141CA214381470A214E0EB01
-C0A2EB0380EB0700A2130E5BA25B5BA25B5B1201485A90C7FC5A120E120C121C5AA25A5A
-B8FCA3C8EAFE00AC4A7E49B6FCA3283E7EBD2D>I<00061403D80780131F01F813FE90B5
-FC5D5D5D15C092C7FC14FCEB3FE090C9FCACEB01FE90380FFF8090383E03E090387001F8
-496C7E49137E497F90C713800006141FC813C0A216E0150FA316F0A3120C127F7F12FFA4
-16E090C7121F12FC007015C012780038EC3F80123C6CEC7F00001F14FE6C6C485A6C6C48
-5A3903F80FE0C6B55A013F90C7FCEB07F8243F7CBC2D>I<EC1FE0ECFFF8903803F03E90
-380FC00F90391F000780133E017EEB1FC049133F4848137F12035B12074848EB3F80ED1F
-00001F91C7FC5BA2123FA3485AA214FE903887FF8039FF8F07E090389C01F09038B800FC
-01B0137E13F0497F16804914C0A2ED1FE0A34914F0A5127FA6123F6D14E0A2121FED3FC0
-A26C6C1480A20007EC7F006C6C137E6C6C5B6C6C485A90387E07F06DB45A010F1380D903
-FCC7FC243F7CBC2D>I<1238123C123F90B612FCA316F85A16F016E00078C712010070EC
-03C0ED078016005D48141E151C153C5DC8127015F04A5A5D14034A5A92C7FC5C141EA25C
-A2147C147814F8A213015C1303A31307A3130F5CA2131FA6133FAA6D5A0107C8FC26407B
-BD2D>I<EB03FC90381FFF8090387C07E09038F001F83901E0007C48487F48487F48C7FC
-ED0F80121E16C0003E1407A4123FA26DEB0F807F6C6C131F6D140001FC133E6C6C5B9038
-FF80786C6D5A6CEBF3E06CEBFF806C91C7FC133F6D13C06D7F013F13F801787F48486C7E
-3903E01FFF48486C1380260F800313C048487E489038007FE0003E143F007E141F007CEC
-0FF01507481403A31501A46C15E0007C1403A2007E15C06C14076CEC0F806DEB1F006C6C
-133ED807F05B3901FC03F86CB512E0011F1380D903FCC7FC243F7CBC2D>I<EB03FCEB1F
-FF90387E07C09038FC03F048486C7E48486C7E4848137C000F147E4848137F81003F1580
-5B007F15C0A2151F12FF16E0A516F0A5127F153FA36C7EA2001F147F120F6C6C13FF6D13
-DF000313013900F8039F90387E0F1FD91FFE13E0EB07F090C7FCA2ED3FC0A41680157FD8
-0F801400487E486C13FEA24A5A5D49485AEB8007391E000FE0001F495A260FC07FC7FC38
-03FFFE6C13F838003FC0243F7CBC2D>I<121EEA7F80A2EAFFC0A4EA7F80A2EA1E00C7FC
-B3121EEA7F80A2EAFFC0A4EA7F80A2EA1E000A2779A619>I<121EEA7F80A2EAFFC0A4EA
-7F80A2EA1E00C7FCB3121E127FEAFF80A213C0A4127F121E1200A412011380A312031300
-5A1206120E120C121C5A1230A20A3979A619>I<007FB912E0BA12F0A26C18E0CDFCAE00
-7FB912E0BA12F0A26C18E03C167BA147>61 D<15074B7EA34B7EA34B7EA34B7EA34B7E15
-E7A2913801C7FC15C3A291380381FEA34AC67EA3020E6D7EA34A6D7EA34A6D7EA34A6D7E
-A34A6D7EA349486D7E91B6FCA249819138800001A249C87EA24982010E157FA2011E8201
-1C153FA2013C820138151FA2017882170F13FC00034C7ED80FFF4B7EB500F0010FB512F8
-A33D417DC044>65 D<B712FCEEFF8017F00001903980000FF86C6CC7EA03FE707E701380
-EF7FC0EF3FE0A2EF1FF0A218F8A3170F171FA318F0A2EF3FE0177F18C0EFFF804C1300EE
-03FCEE0FF8EE7FE091B6C7FC17E091C7EA07FCEE01FE933800FF80EF7FC0EF3FE0EF1FF0
-18F8170F18FC1707A218FEA718FC170FA2EF1FF818F0173FEF7FE0EFFFC0040313804848
-6C90380FFE00B85A17E094C7FC373E7DBD40>I<DB3FF01306912603FFFE130E020F9038
-FF801E913A3FF007E03E9139FF8000F8D903FEC7EA7C7ED907F8EC1EFE4948140FD93FE0
-140749481403495A91C812014848150012034848167E5B000F173EA24848161EA2123F5B
-180E127FA349160012FFAC127F7F180EA2123FA27F001F171E181C6C7EA20007173C6D16
-386C6C1678000117706C6C16F06EEC01E06D6C15C06D6C1403D90FF0EC07806D6CEC1F00
-D903FE143E902600FF8013F891393FF007F0020FB512C0020391C7FC9138003FF037427B
-BF42>I<B712FCEEFF8017E000019039C0001FF86C6C48EB03FEEE00FF717E717EEF0FE0
-84717E717E170184717EA21980187F19C0A3F03FE0A519F0AB19E0A5F07FC0A21980A218
-FF19004D5AA24D5A6017074D5A4D5AEF7FC04DC7FCEE03FE48486CEB1FF8B85A178004FC
-C8FC3C3E7DBD45>I<B912E0A300019038C000016C6C48EB001FEF0FF01703A217011700
-A31870A418381638A41800A21678A216F81501150791B5FCA3EC8007150115001678A216
-38A2180EA3181C93C7FCA4183C1838A21878A318F8EF01F0A21707170F173F48486CEB03
-FFB912E0A3373E7DBD3E>I<B91280A300019038C000036C6C48EB007FEF1FC0170F1707
-A21703A31701A4EF00E0A21638A31800A31678A216F81501150791B5FCA3EC8007150115
-001678A21638A693C8FCAF3801FFE0B612F0A3333E7DBD3B>I<DB3FE0130C912603FFFE
-131C021F9038FF803C913A7FF00FC07C9139FF0001F0D903FC90380078FC4948143DD91F
-E0141F4948140F4948140701FF15034890C8FC491501485A000716005B000F177C5B001F
-173CA2485AA2181C127FA25B95C7FC12FFAB041FB512F0127FA26D9139000FFE00EF03FC
-123FA27F121FA26C7EA212077F12036C7E7F6C7F6D6C14076D7E6D6C140FD907F8141ED9
-03FEEC3C7C902600FF80EBF83C913A7FF007F01C021FB5EAC00C020391C8FC9138003FF0
-3C427BBF47>I<B6D8C01FB512F8A3000101E0C7383FFC0026007F80EC0FF0B3A691B7FC
-A30280C7120FB3A92601FFE0EC3FFCB6D8C01FB512F8A33D3E7DBD44>I<B612F0A3C6EB
-F000EB3FC0B3B3B2EBFFF0B612F0A31C3E7EBD21>I<011FB512FCA3D9000713006E5A14
-01B3B3A6123FEA7F80EAFFC0A44A5A1380D87F005B007C130700385C003C495A6C495A6C
-495A2603E07EC7FC3800FFF8EB3FC026407CBD2F>I<B600C090387FFFFCA3000101E0C7
-000F138026007F80913807FE0018F818E0604D5A4DC7FC173E5F5F4C5A4C5A4C5A4C5A4C
-C8FC163E5E5E4B5A4B5AED07804B7E151F4B7E4B7E15FF913881EFF8913883C7FCEC8787
-91388F03FE91389E01FF14BCDAF8007F4A6D7E5C4A6D7E4A6D7EA2707E707EA2707E707E
-A2707F717E84173F717E717EA2717E848419802601FFE04A13C0B600C090B6FCA3403E7D
-BD47>I<B612F8A3000101E0C9FC38007F80B3B0EF0380A517071800A45FA35FA25F5F5F
-4C5A160748486C133FB8FCA3313E7DBD39>I<B500C093B512C0A300016D4BEBE000D800
-7F1880D977F0ED03BFA3D973F8ED073FA3D971FC150EA2D970FE151CA3027F1538A36E6C
-1470A36E6C14E0A26E6CEB01C0A36E6CEB0380A36E6CEB0700A26E6C130EA36E6C5BA303
-7F5BA26F6C5AA36F6C5AA392380FE1C0A3923807F380A26FB4C7FCA36F5AA213F8486C6D
-5AD807FFEFFFE0B500F80178017FEBFFC0A34A3E7CBD53>I<B56C91B512F88080D8007F
-030713006EEC01FC6E6E5A1870EB77FCEB73FEA2EB71FF01707FA26E7E6E7EA26E7E6E7E
-A26E7E6E7EA26E7E6E7FA26F7E6F7EA26F7E6F7EA26F7E6F7EA26F7E6F1380A2EE7FC0EE
-3FE0A2EE1FF0EE0FF8A2EE07FCEE03FEA2EE01FF7013F0A2177F173FA2171F170FA21707
-01F81503487ED807FF1501B500F81400A218703D3E7DBD44>I<ED7FE0913807FFFE9139
-1FC03F8091397E0007E04948EB03F8D907F0EB00FE4948147F49486E7E49486E7E49C86C
-7E01FE6F7E00018349150300038348486F7EA248486F7EA2001F188049167F003F18C0A3
-007F18E049163FA300FF18F0AC007F18E06D167FA4003F18C0A26C6CEEFF80A36C6C4B13
-00A26C6C4B5A00035F6D150700015F6C6C4B5A6D5E6D6C4A5A6D6C4A5A6D6C4AC7FC6D6C
-14FED901FCEB03F8D9007FEB0FE091391FC03F80912607FFFEC8FC9138007FE03C427BBF
-47>I<B712F8EEFF8017E000019039C0003FF86C6C48EB07FCEE01FE707EEF7F80EF3FC0
-18E0A2EF1FF0A218F8A818F0A2EF3FE0A218C0EF7F80EFFF004C5AEE07FCEE3FF091B612
-C04CC7FC0280C9FCB3A73801FFE0B612C0A3353E7DBD3E>I<B712C016FCEEFF800001D9
-C00013E06C6C48EB1FF0EE07FCEE01FE707E84717EA2717EA284A760177F606017FF95C7
-FCEE01FCEE07F8EE1FE0EEFF8091B500FCC8FC16F091388001FCED003FEE1FC0707E707E
-83160383160183A383A484A4F0C004190EA28218E0057F131E2601FFE0161CB600C0EB3F
-F094381FF83805071370CA3801FFE09438003F803F407DBD43>82
-D<D907FC131890391FFF8038017FEBE0783901FC03F83A03F0007CF8D807C0133F484813
-0F001F140748C7FC003E1403007E1401A2007C140012FC1678A46C1538A27EA26C6C1400
-7F7FEA3FF8EBFF806C13F86CEBFF806C14F06C14FC6C14FF6C15C0013F14E0010714F0EB
-007F020713F89138007FFC150FED07FE15031501ED00FFA200E0157FA3163FA27EA3163E
-7E167E6C157C6C15FC6C15F86D13016DEB03F06DEB07E0D8F9FCEB0FC03AF07F803F8090
-391FFFFE00D8E00713F839C0007FC028427BBF33>I<003FB91280A3903AF0007FE00101
-8090393FC0003F48C7ED1FC0007E1707127C00781703A300701701A548EF00E0A5C81600
-B3B14B7E4B7E0107B612FEA33B3D7DBC42>I<B600C090B512F8A3000101E0C700071300
-26007F80EC01FC715A1870B3B3A4013F16F06E5DA21701011F5E80010F15036E4A5A0107
-93C7FC6D6C5C6D6C141E6D6C5C027F14F86E6C485A91390FF00FE00203B51280020049C8
-FCED1FF03D407DBD44>I<B691380FFFFEA3000301E0020113E06C01809138007F806CEF
-3F00017F163E181C6E153C013F1638A26E1578011F1670A26D6C5DA26E140101075EA26E
-140301035EA26D6C4AC7FCA2806D150EA26F131E027F141CA26F133C023F1438A26E6C5B
-A26F13F0020F5CA2EDF80102075CA26E6C485AA2EDFE07020191C8FCA26F5A6E130EA2ED
-7F9CA216DCED3FF8A36F5AA36F5AA26F5AA36F5A3F407EBD44>I<B500FE017FB5D88007
-B5FCA3000301C0010101E0C713F86C90C849EC3FE07148EC0F807E7215006E143F017F19
-0E84A26D6C60A24D7E6D6C60A2EFE7F86D6C60A2933801C3FC6E18F001076104037F6E02
-81140101036104077F17006D6C4D5AA2040EEB7F806D6C4DC7FCA24CEB3FC0DA7F80160E
-A24CEB1FE003C0161E023F171C047814F0DBE070010F133C021F173804F014F84C1307DA
-0FF05EA2DBF1C0EB03FCDA07F95EA2DBFB80EB01FEDA03FF6F5AA293C8FCA26E5FA24B15
-7F020094C8FCA24B81037C153EA20378151E0338151C58407EBD5D>I<007FB5D8C003B5
-12E0A3C649C7EBFC00D93FF8EC3FE06D48EC1F806D6C92C7FC171E6D6C141C6D6C143C5F
-6D6C14706D6D13F04C5ADA7FC05B023F13036F485ADA1FF090C8FC020F5BEDF81E913807
-FC1C163C6E6C5A913801FF7016F06E5B6F5AA26F7E6F7EA28282153FED3BFEED71FF15F1
-03E07F913801C07F0203804B6C7EEC07004A6D7E020E6D7E5C023C6D7E02386D7E14784A
-6D7E4A6D7F130149486E7E4A6E7E130749C86C7E496F7E497ED9FFC04A7E00076DEC7FFF
-B500FC0103B512FEA33F3E7EBD44>I<B66C0103B51280A3000101F0C8EBF8006C6C48ED
-3FC0725A013F041EC7FC6D7E606D6C15386D6C1578606D6C5D6E14016D5E6D6D1303606E
-6C49C8FC6E6C5B170E6E6C131E171C6E6C5B6E6C137817706E6C13F06F5B6E13016EEB83
-C05FED7FC7DB3FE7C9FC16EFED1FFE5E150F6F5AB3A4ED1FFC020FB512FCA3413E7FBD44
->I<003FB712F8A391C7EA1FF013F801E0EC3FE00180EC7FC090C8FC003EEDFF80A2003C
-4A1300007C4A5A12784B5A4B5AA200704A5AA24B5A4B5AA2C8485A4A90C7FCA24A5A4A5A
-A24A5AA24A5A4A5AA24A5A4A5AA24990C8FCA2495A4948141CA2495A495AA2495A495A17
-3C495AA24890C8FC485A1778485A484815F8A24848140116034848140F4848143FED01FF
-B8FCA32E3E7BBD38>I<EAFFFCA4EAF000B3B3B3B3ABEAFFFCA40E5B77C319>I<486C13C0
-0003130101001380481303000EEB070048130E0018130C0038131C003013180070133800
-601330A300E01370481360A400CFEB678039FFC07FE001E013F0A3007F133FA2003F131F
-01C013E0390F0007801C1C73BE2D>I<EAFFFCA4EA003CB3B3B3B3ABEAFFFCA40E5B7FC3
-19>I<EA0180120313005A120E5A12181238123012701260A312E05AA412CFEAFFC013E0
-A3127FA2123F13C0EA0F000B1C7ABE19>96 D<EB0FF8EBFFFE3903F01F8039078007E000
-0F6D7E9038E001F8D81FF07F6E7EA3157F6C5AEA0380C8FCA4EC1FFF0103B5FC90381FF8
-7FEB7F803801FC00EA07F8EA0FE0485A485AA248C7FCEE038012FEA315FFA3007F5BEC03
-BF3B3F80071F8700261FC00E13CF3A07F03C0FFE3A01FFF807FC3A003FC001F0292A7DA8
-2D>I<EA01FC12FFA3120712031201B1EC03FC91381FFF8091387C07E09039FDE001F090
-39FFC000FC4A137E91C77E49158049141F17C0EE0FE0A217F0A2160717F8AA17F0A2160F
-A217E0161F17C06D1580EE3F006D5C6E13FE9039F3C001F89039F1E003F09039E0780FC0
-9026C03FFFC7FCC7EA07F82D407EBE33>I<49B4FC010F13E090383F00F8017C131E4848
-131F4848137F0007ECFF80485A5B121FA24848EB7F00151C007F91C7FCA290C9FC5AAB6C
-7EA3003FEC01C07F001F140316806C6C13076C6C14000003140E6C6C131E6C6C13789038
-3F01F090380FFFC0D901FEC7FC222A7DA828>I<ED01FC15FFA3150715031501B114FF01
-0713E190381F80F990387E003D49131FD803F81307485A49130348481301121F123F5B12
-7FA290C7FCA25AAA7E7FA2123FA26C7E000F14037F000714076C6C497E6C6C497ED8007C
-017913F890383F01F190380FFFC1903A01FE01FC002D407DBE33>I<EB01FE90380FFFC0
-90383F03F09038FC01F848486C7E4848137E48487F000F158049131F001F15C04848130F
-A2127F16E090C7FCA25AA290B6FCA290C9FCA67EA27F123F16E06C7E1501000F15C06C6C
-13036DEB07806C6C1400C66C131E017E5B90381F80F8903807FFE0010090C7FC232A7EA8
-28>I<EC1FC0EC7FF8903801F83C903807E07E90380FC0FFEB1FC1EB3F811401137FEC00
-FE01FE137C1500AEB6FCA3C648C7FCB3AE487E007F13FFA320407EBF1C>I<167C903903
-F801FF903A1FFF078F8090397E0FDE1F9038F803F83803F001A23B07E000FC0600000F6E
-C7FC49137E001F147FA8000F147E6D13FE00075C6C6C485AA23901F803E03903FE0FC026
-071FFFC8FCEB03F80006CAFC120EA3120FA27F7F6CB512E015FE6C6E7E6C15E06C810003
-813A0FC0001FFC48C7EA01FE003E140048157E825A82A46C5D007C153E007E157E6C5D6C
-6C495A6C6C495AD803F0EB0FC0D800FE017FC7FC90383FFFFC010313C0293D7EA82D>I<
-EA01FC12FFA3120712031201B1EC01FE913807FFC091381E07E091387803F09138E001F8
-D9FDC07F148001FF6D7E91C7FCA25BA25BB3A6486C497EB5D8F87F13FCA32E3F7DBE33>
-I<EA01E0EA07F8A2487EA46C5AA2EA01E0C8FCACEA01FC127FA3120712031201B3AC487E
-B512F0A3143E7DBD1A>I<1478EB01FEA2EB03FFA4EB01FEA2EB00781400AC147FEB7FFF
-A313017F147FB3B3A5123E127F38FF807E14FEA214FCEB81F8EA7F01387C03F0381E07C0
-380FFF803801FC00185185BD1C>I<EA01FC12FFA3120712031201B292B51280A392383F
-FC0016E0168093C7FC153C5D5D4A5AEC07C04A5A4AC8FC143E147F4A7E13FD9038FFDFC0
-EC9FE0140F496C7E01FC7F496C7E1401816E7E81826F7E151F826F7EA282486C14FEB539
-F07FFFE0A32B3F7EBE30>I<EA01FC12FFA3120712031201B3B3B1487EB512F8A3153F7D
-BE1A>I<2701F801FE14FF00FF902707FFC00313E0913B1E07E00F03F0913B7803F03C01
-F80007903BE001F87000FC2603F9C06D487F000101805C01FBD900FF147F91C75B13FF49
-92C7FCA2495CB3A6486C496CECFF80B5D8F87FD9FC3F13FEA347287DA74C>I<3901F801
-FE00FF903807FFC091381E07E091387803F000079038E001F82603F9C07F0001138001FB
-6D7E91C7FC13FF5BA25BB3A6486C497EB5D8F87F13FCA32E287DA733>I<14FF010713E0
-90381F81F890387E007E01F8131F4848EB0F804848EB07C04848EB03E0000F15F04848EB
-01F8A2003F15FCA248C812FEA44815FFA96C15FEA36C6CEB01FCA3001F15F86C6CEB03F0
-A26C6CEB07E06C6CEB0FC06C6CEB1F80D8007EEB7E0090383F81FC90380FFFF0010090C7
-FC282A7EA82D>I<3901FC03FC00FF90381FFF8091387C0FE09039FDE003F03A07FFC001
-FC6C496C7E6C90C7127F49EC3F805BEE1FC017E0A2EE0FF0A3EE07F8AAEE0FF0A4EE1FE0
-A2EE3FC06D1580EE7F007F6E13FE9138C001F89039FDE007F09039FC780FC0DA3FFFC7FC
-EC07F891C9FCAD487EB512F8A32D3A7EA733>I<02FF131C0107EBC03C90381F80F09039
-7F00387C01FC131CD803F8130E4848EB0FFC150748481303121F485A1501485AA448C7FC
-AA6C7EA36C7EA2001F14036C7E15076C6C130F6C7E6C6C133DD8007E137990383F81F190
-380FFFC1903801FE0190C7FCAD4B7E92B512F8A32D3A7DA730>I<3901F807E000FFEB1F
-F8EC787CECE1FE3807F9C100031381EA01FB1401EC00FC01FF1330491300A35BB3A5487E
-B512FEA31F287EA724>I<90383FC0603901FFF8E03807C03F381F000F003E1307003C13
-03127C0078130112F81400A27E7E7E6D1300EA7FF8EBFFC06C13F86C13FE6C7F6C148000
-0114C0D8003F13E0010313F0EB001FEC0FF800E01303A214017E1400A27E15F07E14016C
-14E06CEB03C0903880078039F3E01F0038E0FFFC38C01FE01D2A7DA824>I<131CA6133C
-A4137CA213FCA2120112031207001FB512C0B6FCA2D801FCC7FCB3A215E0A912009038FE
-01C0A2EB7F03013F138090381F8700EB07FEEB01F81B397EB723>I<D801FC14FE00FF14
-7FA3000714030003140100011400B3A51501A31503120015076DEB06FF017E010E13806D
-4913FC90381FC078903807FFE00100903880FE002E297DA733>I<B539E00FFFE0A32707
-FE000313006C48EB00FC5E00015D7F00005DA26D13016D5CA26D6C485AA2ECC007011F91
-C7FCA290380FE00EA2ECF01E0107131CA26D6C5AA2ECFC7801011370A2ECFEF001005BA2
-EC7FC0A36E5AA26EC8FCA3140E2B287EA630>I<B53BC3FFFE03FFF8A3290FFE003FE000
-13C06C486D48EB3F806C4817006D010F141E00016F131C15076D163C00004A6C1338A201
-7F5E4B7E151DD93F805DED3DFC1538D91FC04A5AED78FE9238707E03D90FE0017F5BEDE0
-3F02F0140701070387C7FC9138F1C01F02F9148F010315CE9138FB800F02FF14DE6D15FC
-ED00076D5DA24A1303027E5CA2027C1301023C5C023813003D287EA642>I<B539F01FFF
-E0A30003D9C00F1300C690388007F8D97F0013E002805BD93FC05B011F49C7FC90380FE0
-0EECF01E6D6C5A01035B6D6C5A6E5AEB00FF6E5A6E5A81141F814A7E81147BECF1FC9038
-01E1FEECC0FF01037F49486C7ED90F007F011E6D7E013E130F496D7E01FC80486C80000F
-4A7EB539803FFFF8A32D277FA630>I<B539E00FFFE0A32707FE000313006C48EB01FC6F
-5A00015D7F00005DA2017F495AA2EC8003013F5CA26D6C48C7FCA26E5A010F130EA26D6C
-5AA2ECF83C01031338A26D6C5AA2ECFEF001005BA2EC7FC0A36E5AA36EC8FCA2140EA214
-1E141C143C1438A2147800181370127EB45BA2495AA248485AD87E07C9FCEA780EEA3C3C
-EA1FF8EA07E02B3A7EA630>I<001FB61280A2EBE0000180140049485A001E495A121C4A
-5A003C495A141F00385C4A5A147F5D4AC7FCC6485AA2495A495A130F5C495A90393FC003
-80A2EB7F80EBFF005A5B484813071207491400485A48485BA248485B4848137F00FF495A
-90B6FCA221277EA628>I<B812F0A22C0280982D>I E
-%EndDVIPSBitmapFont
-%DVIPSBitmapFont: Fo cmbx12 20.736 14
-/Fo 14 117 df<96267FFFE01670063FB6ED01F80503B700F01403053F04FC14074CB96C
-130F040706E0131F043F72133F93BA00FC137F0303DC00076D13FF030F03C09039003FFF
-814B02FCC8000713C3037F02E0030113F792B600806F6CB5FC02034ACA121F4A02F8834A
-02E0834A4A1701027F4A8391B548CC7E494A85495C4C854988494A85494A85495C8A4991
-CDFC90B54886A2484A1B7FA2481E3F5D481E1F5D5A1F0FA2485CA3481E075DA2F703F048
-9BC7FCA45DA2B6FCB27EA281A47EA2F703F06FF307F87EA36C80A21F0F7E6F1CF07E6F1B
-1F7E20E06C6E1B3F816DF57FC06D80F7FF806D806D6E4F13006D6E616D525A826D6E4F5A
-6D6E4F5A6E6D6C4E5A021F6EF0FFE06E6E4D5B6E02F84D5B6E02FE050F90C7FC02006E6C
-EE3FFE6F02F0EEFFFC031F02FE03035B6FDAFFC0021F13E0030303FF0103B55A030093B7
-C8FC043F18FC040718F0040118C0DC003F94C9FC050316F8DD003F1580DE007F01F0CAFC
-757A75F78C>67 D<BF12FCA48AA4C7003F0280C8123F1B01F3003F1C07767F1C00898989
-8989A2891F8089A289A31E7FA21FC0A21E3FA3F20FF0A3F61FE0A49BC7FCA21A1FA31A3F
-A21A7FA21AFF1903190F197F94B7FCA8943880007F190F190319001A7FA21A3FA21A1FA3
-1A0FA997CBFCB3A9BBFCA86B757AF47A>70 D<B800C00507B812C083838383A28383C700
-3F6F93C7001F01F0C7FC72060190C8FC84A284848403EF8015E703E3808503E18103E081
-708082708085708070807081828670817180718083718086718071817181837280877280
-728072808487728172817281857380887380738073808573818973817480748086897480
-7480741580867415C01EE07514F07514F87514FC877514FE1EFF7515817515C1877614E1
-1FF17614F97614FD7691B5FC8888A28888898989A289898989A2898A8A8A8AA28A8A8A8A
-8B903803FFFEB800F8858B8B8BA28B8B795A8A767AF597>78 D<92383FFFF80207B612E0
-027F15FC49B87E010717E0011F83499026F0007F13FC4948C7000F7F90B502036D7E486E
-6D806F6D80727F486E6E7F8486727FA28684A26C5C72806C5C6D90C8FC6D5AEB0FF8EB03
-E090CAFCA70507B6FC041FB7FC0303B8FC157F0203B9FC021FECFE0391B612800103ECF8
-00010F14C04991C7FC017F13FC90B512F04814C0485C4891C8FC485B5A485B5C5A5CA2B5
-FC5CA360A36E5DA26C5F6E5D187E6C6D846E4A48806C6D4A4814FC6C6ED90FF0ECFFFC6C
-02E090263FE07F14FE00019139FC03FFC06C91B6487E013F4B487E010F4B1307010303F0
-1301D9003F0280D9003F13FC020101F8CBFC57507ACE5E>97 D<97380FFFE00607B6FCA8
-F00003190086B3AD93383FFF800307B512F8033F14FF4AB712C0020716F0021F16FC027F
-9039FE007FFE91B500F0EB0FFF01030280010190B5FC4949C87E49498149498149498149
-498190B548814884484A8192CAFC5AA2485BA25A5C5AA35A5CA4B5FCAF7EA4807EA37EA2
-807EA26C7F616C6E5D6C606C80616D6D5D6D6D5D6D6D92B67E6D6D4A15FC010301FF0207
-EDFFFE6D02C0EB3FFE6D6C9039FC01FFF86E90B65A020F16C002031600DA007F14FC030F
-14E09226007FFEC749C7FC5F797AF76C>100 D<93387FFF80030FB512FC037FECFF804A
-B712E0020716F8021F16FE027FD9F8077F49B5D8C000804991C7003F13E04901FC020F7F
-49496E7F49498049496E7F49496E7F90B55A48727E92C914804884485B1BC048841BE048
-5BA27313F05AA25C5AA21BF885A2B5FCA391BAFCA41BF002F8CCFCA67EA3807EA47E806C
-F103F0F207F86C7F1A0F6C6E17F06C191F6F17E06C6E163F6D6DEE7FC06D6D16FF6D6D4B
-13806D6D4B13006D6D6CEC0FFE6D02E0EC3FFC6D02F8ECFFF86D9126FFC00F5B023F91B6
-5A020F178002034CC7FC020016F8031F15E0030392C8FCDB000F13E04D507BCE58>I<EF
-7FFE040FB512C093B612F0030715FC031F814B8192B5D8F01F13800203DA803F13C04A90
-26FC007F13E04A4990B5FC4A5B4A494814F04A13C091B51280A2491400A2495BA27114E0
-5B4B6E13C0721380721300F007FC95C8FCB3B912C0A8D8000749CAFCB3B3B3A7007FB712
-FCA844797AF83B>I<F37F80922607FFFC913807FFE092B600E0011F13F8020703FC017F
-13FC021FDBFF01B512FE027F16C349B800F7EBBFFF49DA803F9038FFF83F010F9026FC00
-0714C04901F00101EC007F49496D148049496E6D7E90B517E04B6E15FE48F1F01F4891C8
-6C9038F80FFCF307F098C7FC48496F7FA34885AB6C61A36C6D4B5BA36C6E4A5B6C616F5C
-6D606D6D91B55A6D6D4991C8FC6D01FC01075B9226FF803F13F893B65A4917C0D93F1F93
-C9FC020715FCD97E0015E0030701FCCAFC01FE90CDFCA412017FA280A280808014FE6C90
-B812C019FF1AF01AFC6DF0FF801BE06D851BFC6D856D856D1A806D1AC05B011F1AE0137F
-48BC12F0000701FCC9FC4801E0040314F84849EE007F4849171F91CB1207487313FC5B00
-FF855B86A56D60007F1BF86D60A26C6D4D13F06E5F6C6D4D13E06C6D4D13C06C01FC94B5
-12806C01FF04031400C602C0030F13FC6D01F8037F5B011FD9FFE0011FB512E0010791B8
-128001014EC7FC6D6C17F8020F17C0DA007F03F8C8FC03014AC9FC58727BCE61>I<EB01
-FCEB07FF011F13C0497F497F90B57EA24880A24880A76C5CA26C5CA26D5B6D5B6D5B0107
-90C8FCEB01FC90CAFCB2903801FFFC007FB5FCA8C67E131F7FB3B3B3A5B81280A8297979
-F835>105 D<902601FFF891380FFFE0B692B512FE05036E7E050F15E0053F15F84D8193
-2701FFF01F7F4CD900077FDC07FC6D80C66CDA0FF06D80011FDA1FC07F6D4A48824CC8FC
-047E6F7F5EEDF9F85E03FB707F5E15FF5EA25EA293C9FCA45DB3B3A6B8D8E003B81280A8
-614E79CD6C>110 D<93381FFFE00303B6FC031F15E092B712FC020316FF020F17C0023F
-D9FC0014F091B500C0010F13FC4991C700037F4901FC02007F010F496F13C049496F7F49
-496F7F4B8149496F7F90B5C96C7F4886A24849707F481B80A248497014C0A2481BE0A348
-497113F0A3481BF8A5B51AFCAE6C1BF8A46C1BF06E94B5FCA36C1BE0A26C6D4C14C0A26C
-1B806E5E6C1B006C6E4B5BA26C6E4B5B6D6D4B5B6D6D4B5B6D6D4B5B6D6D92B55A6D01FF
-02035C6D02C0010F91C7FC010002FC90B512FC6E90B75A021F17E00207178002014CC8FC
-DA003F15F0030392C9FCDB001F13E056507BCE61>I<902601FFFCEC7FFEB6020FB512F0
-057F14FE4CB712C0040716F0041F82047F16FE93B5C66C7F92B500F0010F14C0C66C0380
-010380011F4AC76C806D4A6E8004F06F7F4C6F7F4C6F7F4C8193C915804B7014C0861DE0
-A27414F0A27414F8A47513FCA57513FEAF5113FCA598B512F8A31DF0621DE0621DC0621D
-806F5E701800704B5B505B704B5B7092B55A04FC4A5C704A5C706C010F5C05E0013F49C7
-FC9227FE7FFC01B55A70B712F0040F16C0040393C8FC040015F8053F14C0050301F0C9FC
-94CCFCB3A6B812E0A85F6F7ACD6C>I<902601FFF8EB07FEB691383FFFC094B512F00403
-804C14FE4C8093261FFC3F138093263FE07F13C0DC7F80B5FCC66C5D011FDAFE0114E06D
-EBF9FC16F815FB16F016E015FF16C07114C05E72138095381FFE0093C76C5AF001E095C8
-FCA25DA65DB3B3A2B812F8A8434E7ACD4F>114 D<15FFA75CA55CA45CA25CA25CA25CA2
-5C91B5FCA25B5B5B131F5B90B9FC120FBAFCA6D8000791C9FCB3B3A3F01FE0AE183F7014
-C07F187F7014806D16FF826D4B13006E6D485AEEFE0F6E90B55A020F5D6E5D020115C06E
-6C5C031F49C7FC030113F03B6E7CEC4B>116 D E
-%EndDVIPSBitmapFont
-end
-%%EndProlog
-%%BeginSetup
-%%Feature: *Resolution 600dpi
-TeXDict begin
-%%PaperSize: A4
- end
-%%EndSetup
-%%Page: 1 1
-TeXDict begin 1 0 bop 150 1318 a Fo(Care)65 b(and)f(F)-16
-b(eeding)65 b(of)f(Netp)5 b(erf)p 150 1418 3600 34 v
-2783 1515 a Fn(V)-8 b(ersions)29 b(2.4.3)k(and)c(Later)150
-5064 y Fm(Ric)l(k)46 b(Jones)f Fl(rick.jones2@hp)o(.co)o(m)p
-150 5141 3600 17 v eop end
-%%Page: 2 2
-TeXDict begin 2 1 bop 150 4834 a Fn(This)29 b(is)g(Ric)m(k)h(Jones')h
-(feeble)f(attempt)h(at)g(a)g(T)-8 b(exinfo-based)30 b(man)m(ual)g(for)g
-(the)g(netp)s(erf)g(b)s(enc)m(hmark.)150 4969 y(Cop)m(yrigh)m(t)602
-4966 y(c)577 4969 y Fk(\015)g Fn(2005-2007)k(Hewlett-P)m(ac)m(k)-5
-b(ard)33 b(Compan)m(y)390 5103 y(P)m(ermission)28 b(is)g(gran)m(ted)j
-(to)f(cop)m(y)-8 b(,)31 b(distribute)c(and/or)j(mo)s(dify)d(this)i(do)s
-(cumen)m(t)g(p)s(er)g(the)390 5213 y(terms)38 b(of)h(the)f(netp)s(erf)f
-(source)i(licence,)h(a)f(cop)m(y)g(of)f(whic)m(h)f(can)i(b)s(e)e(found)
-g(in)g(the)i(\014le)390 5322 y(`)p Fj(COPYING)p Fn(')29
-b(of)h(the)h(basic)f(netp)s(erf)f(distribution.)p eop
-end
-%%Page: -1 3
-TeXDict begin -1 2 bop 3725 -116 a Fn(i)150 299 y Fi(T)-13
-b(able)54 b(of)g(Con)l(ten)l(ts)150 637 y Fm(1)135 b(In)l(tro)t
-(duction)15 b Fh(.)20 b(.)f(.)h(.)f(.)g(.)h(.)f(.)h(.)f(.)h(.)f(.)g(.)h
-(.)f(.)h(.)f(.)h(.)f(.)g(.)h(.)f(.)h(.)f(.)h(.)f(.)g(.)h(.)f(.)h(.)f(.)
-60 b Fm(1)349 774 y Fn(1.1)92 b(Con)m(v)m(en)m(tions)13
-b Fg(.)j(.)f(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)
-g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g
-(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)43
-b Fn(1)150 1015 y Fm(2)135 b(Installing)46 b(Netp)t(erf)17
-b Fh(.)j(.)g(.)f(.)g(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)g(.)h(.)f(.)h(.)
-f(.)h(.)f(.)g(.)h(.)f(.)h(.)f(.)h(.)61 b Fm(3)349 1152
-y Fn(2.1)92 b(Getting)31 b(Netp)s(erf)f(Bits)15 b Fg(.)g(.)g(.)g(.)g(.)
-g(.)g(.)g(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g
-(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)45
-b Fn(3)349 1262 y(2.2)92 b(Installing)28 b(Netp)s(erf)12
-b Fg(.)j(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)h(.)
-f(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g
-(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)42 b Fn(3)349 1371 y(2.3)92
-b(V)-8 b(erifying)29 b(Installation)f Fg(.)15 b(.)g(.)g(.)g(.)g(.)g(.)g
-(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)
-g(.)g(.)g(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)58
-b Fn(6)150 1612 y Fm(3)135 b(The)44 b(Design)i(of)f(Netp)t(erf)36
-b Fh(.)20 b(.)f(.)h(.)f(.)g(.)h(.)f(.)h(.)f(.)h(.)f(.)g(.)h(.)f(.)h(.)f
-(.)h(.)f(.)g(.)h(.)80 b Fm(7)349 1749 y Fn(3.1)92 b(CPU)30
-b(Utilization)18 b Fg(.)c(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g
-(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)
-g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)48
-b Fn(7)150 1990 y Fm(4)135 b(Global)45 b(Command-line)h(Options)15
-b Fh(.)20 b(.)g(.)f(.)h(.)f(.)g(.)h(.)f(.)h(.)f(.)h(.)f(.)60
-b Fm(10)349 2127 y Fn(4.1)92 b(Command-line)28 b(Options)h(Syn)m(tax)e
-Fg(.)15 b(.)g(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g
-(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)56 b Fn(10)349
-2237 y(4.2)92 b(Global)30 b(Options)15 b Fg(.)f(.)h(.)g(.)g(.)g(.)g(.)g
-(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)g(.)g(.)
-g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g
-(.)45 b Fn(10)150 2477 y Fm(5)135 b(Using)45 b(Netp)t(erf)h(to)f
-(Measure)g(Bulk)g(Data)h(T)-11 b(ransfer)456 2610 y Fh(.)20
-b(.)f(.)g(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)g(.)h(.)f(.)h(.)f(.)h(.)f
-(.)g(.)h(.)f(.)h(.)f(.)h(.)f(.)g(.)h(.)f(.)h(.)f(.)h(.)f(.)g(.)h(.)f(.)
-h(.)f(.)h(.)f(.)82 b Fm(17)349 2747 y Fn(5.1)92 b(Issues)30
-b(in)f(Bulk)g(T)-8 b(ransfer)12 b Fg(.)j(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)
-g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g
-(.)h(.)f(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)41 b Fn(17)349
-2857 y(5.2)92 b(Options)29 b(common)i(to)g(TCP)e(UDP)i(and)f(SCTP)f
-(tests)12 b Fg(.)k(.)f(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)41
-b Fn(18)549 2966 y(5.2.1)92 b(TCP)p 1026 2966 28 4 v
-39 w(STREAM)20 b Fg(.)15 b(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g
-(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)g(.)
-g(.)g(.)g(.)g(.)g(.)g(.)49 b Fn(20)549 3076 y(5.2.2)92
-b(TCP)p 1026 3076 V 39 w(MAER)-8 b(TS)24 b Fg(.)15 b(.)g(.)g(.)g(.)g(.)
-g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)g(.)g
-(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)53
-b Fn(21)549 3186 y(5.2.3)92 b(TCP)p 1026 3186 V 39 w(SENDFILE)9
-b Fg(.)16 b(.)f(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g
-(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)h(.)
-f(.)38 b Fn(21)549 3295 y(5.2.4)92 b(UDP)p 1031 3295
-V 41 w(STREAM)17 b Fg(.)d(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g
-(.)g(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)
-g(.)g(.)g(.)g(.)g(.)g(.)46 b Fn(22)549 3405 y(5.2.5)92
-b(XTI)p 999 3405 V 40 w(TCP)p 1233 3405 V 39 w(STREAM)24
-b Fg(.)15 b(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g
-(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)53
-b Fn(23)549 3514 y(5.2.6)92 b(XTI)p 999 3514 V 40 w(UDP)p
-1238 3514 V 40 w(STREAM)21 b Fg(.)15 b(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g
-(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)
-g(.)g(.)g(.)g(.)50 b Fn(23)549 3624 y(5.2.7)92 b(SCTP)p
-1077 3624 V 39 w(STREAM)16 b Fg(.)f(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g
-(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)
-g(.)g(.)g(.)h(.)f(.)g(.)g(.)45 b Fn(23)549 3733 y(5.2.8)92
-b(DLCO)p 1095 3733 V 40 w(STREAM)28 b Fg(.)15 b(.)g(.)g(.)g(.)g(.)g(.)g
-(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)
-g(.)g(.)g(.)g(.)g(.)g(.)g(.)h(.)f(.)57 b Fn(24)549 3843
-y(5.2.9)92 b(DLCL)p 1081 3843 V 40 w(STREAM)14 b Fg(.)g(.)h(.)g(.)g(.)g
-(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)
-g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)43 b
-Fn(24)549 3953 y(5.2.10)93 b(STREAM)p 1275 3953 V 39
-w(STREAM)24 b Fg(.)15 b(.)g(.)g(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)g
-(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)54
-b Fn(25)549 4062 y(5.2.11)93 b(DG)p 1018 4062 V 41 w(STREAM)22
-b Fg(.)15 b(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g
-(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)
-g(.)g(.)53 b Fn(25)150 4303 y Fm(6)135 b(Using)45 b(Netp)t(erf)h(to)f
-(Measure)g(Request/Resp)t(onse)456 4436 y Fh(.)20 b(.)f(.)g(.)h(.)f(.)h
-(.)f(.)h(.)f(.)h(.)f(.)g(.)h(.)f(.)h(.)f(.)h(.)f(.)g(.)h(.)f(.)h(.)f(.)
-h(.)f(.)g(.)h(.)f(.)h(.)f(.)h(.)f(.)g(.)h(.)f(.)h(.)f(.)h(.)f(.)82
-b Fm(26)349 4573 y Fn(6.1)92 b(Issues)30 b(in)f(Reqeust/Resp)s(onse)f
-Fg(.)15 b(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)h(.)f(.)g
-(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)57
-b Fn(26)349 4682 y(6.2)92 b(Options)29 b(Common)h(to)h(TCP)f(UDP)h(and)
-e(SCTP)p 2311 4682 V 69 w(RR)h(tests)d Fg(.)15 b(.)g(.)h(.)f(.)g(.)g(.)
-55 b Fn(27)549 4792 y(6.2.1)92 b(TCP)p 1026 4792 V 39
-w(RR)22 b Fg(.)15 b(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g
-(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)
-g(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)51 b Fn(28)549
-4902 y(6.2.2)92 b(TCP)p 1026 4902 V 39 w(CC)23 b Fg(.)15
-b(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)g
-(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)
-g(.)g(.)g(.)g(.)g(.)g(.)53 b Fn(29)549 5011 y(6.2.3)92
-b(TCP)p 1026 5011 V 39 w(CRR)11 b Fg(.)k(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)
-g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)h(.)f
-(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)40
-b Fn(29)549 5121 y(6.2.4)92 b(UDP)p 1031 5121 V 41 w(RR)19
-b Fg(.)c(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)
-g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g
-(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)48 b Fn(30)549 5230 y(6.2.5)92
-b(XTI)p 999 5230 V 40 w(TCP)p 1233 5230 V 39 w(RR)26
-b Fg(.)15 b(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g
-(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)
-g(.)g(.)g(.)56 b Fn(30)549 5340 y(6.2.6)92 b(XTI)p 999
-5340 V 40 w(TCP)p 1233 5340 V 39 w(CC)27 b Fg(.)15 b(.)g(.)g(.)g(.)g(.)
-g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)g(.)g(.)g
-(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)57
-b Fn(31)p eop end
-%%Page: -2 4
-TeXDict begin -2 3 bop 3699 -116 a Fn(ii)549 83 y(6.2.7)92
-b(XTI)p 999 83 28 4 v 40 w(TCP)p 1233 83 V 39 w(CRR)15
-b Fg(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)
-g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)g
-(.)g(.)44 b Fn(31)549 193 y(6.2.8)92 b(XTI)p 999 193
-V 40 w(UDP)p 1238 193 V 40 w(RR)23 b Fg(.)16 b(.)f(.)g(.)g(.)g(.)g(.)g
-(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)
-g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)h(.)f(.)52 b
-Fn(31)549 302 y(6.2.9)92 b(DLCL)p 1081 302 V 40 w(RR)16
-b Fg(.)f(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)
-g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)g(.)g
-(.)g(.)g(.)g(.)g(.)g(.)g(.)45 b Fn(31)549 412 y(6.2.10)93
-b(DLCO)p 1141 412 V 39 w(RR)29 b Fg(.)15 b(.)g(.)h(.)f(.)g(.)g(.)g(.)g
-(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)
-g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)h(.)f(.)58
-b Fn(31)549 521 y(6.2.11)93 b(SCTP)p 1123 521 V 38 w(RR)17
-b Fg(.)e(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)
-g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g
-(.)g(.)h(.)f(.)g(.)g(.)46 b Fn(31)150 764 y Fm(7)135
-b(Using)45 b(Netp)t(erf)h(to)f(Measure)g(Aggregate)419
-897 y(P)l(erformance)10 b Fh(.)21 b(.)e(.)g(.)h(.)f(.)h(.)f(.)h(.)f(.)g
-(.)h(.)f(.)h(.)f(.)h(.)f(.)g(.)h(.)f(.)h(.)f(.)h(.)f(.)g(.)h(.)f(.)h(.)
-f(.)55 b Fm(32)349 1034 y Fn(7.1)92 b(Running)28 b(Concurren)m(t)i
-(Netp)s(erf)g(T)-8 b(ests)14 b Fg(.)i(.)f(.)g(.)g(.)g(.)g(.)g(.)g(.)g
-(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)43
-b Fn(32)349 1143 y(7.2)92 b(Using)30 b({enable-burst)9
-b Fg(.)14 b(.)h(.)g(.)g(.)g(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g
-(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)
-g(.)g(.)g(.)g(.)g(.)39 b Fn(33)150 1386 y Fm(8)135 b(Using)45
-b(Netp)t(erf)h(to)f(Measure)g(Bidirectional)419 1518
-y(T)-11 b(ransfer)12 b Fh(.)19 b(.)g(.)h(.)f(.)h(.)f(.)h(.)f(.)g(.)h(.)
-f(.)h(.)f(.)h(.)f(.)h(.)f(.)g(.)h(.)f(.)h(.)f(.)h(.)f(.)g(.)h(.)f(.)h
-(.)f(.)h(.)f(.)g(.)57 b Fm(37)349 1655 y Fn(8.1)92 b(Bidirectional)29
-b(T)-8 b(ransfer)29 b(with)g(Concurren)m(t)h(T)-8 b(ests)28
-b Fg(.)15 b(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)56
-b Fn(37)349 1765 y(8.2)92 b(Bidirectional)29 b(T)-8 b(ransfer)29
-b(with)g(TCP)p 1862 1765 V 40 w(RR)13 b Fg(.)h(.)h(.)g(.)g(.)g(.)g(.)g
-(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)42
-b Fn(37)150 2007 y Fm(9)135 b(Other)45 b(Netp)t(erf)g(T)-11
-b(ests)38 b Fh(.)19 b(.)h(.)f(.)h(.)f(.)g(.)h(.)f(.)h(.)f(.)h(.)f(.)g
-(.)h(.)f(.)h(.)f(.)h(.)f(.)g(.)h(.)82 b Fm(39)349 2144
-y Fn(9.1)92 b(CPU)30 b(rate)h(calibration)d Fg(.)15 b(.)g(.)g(.)g(.)g
-(.)g(.)h(.)f(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)
-g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)59
-b Fn(39)150 2387 y Fm(10)135 b(Address)44 b(Resolution)27
-b Fh(.)21 b(.)f(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)g(.)h(.)f(.)h(.)f(.)h(.)f
-(.)g(.)h(.)f(.)h(.)f(.)72 b Fm(40)150 2657 y(11)135 b(Enhancing)45
-b(Netp)t(erf)c Fh(.)20 b(.)f(.)h(.)f(.)g(.)h(.)f(.)h(.)f(.)h(.)f(.)g(.)
-h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)g(.)86 b Fm(41)150 2927
-y(12)135 b(Netp)t(erf4)26 b Fh(.)20 b(.)g(.)f(.)h(.)f(.)g(.)h(.)f(.)h
-(.)f(.)h(.)f(.)h(.)f(.)g(.)h(.)f(.)h(.)f(.)h(.)f(.)g(.)h(.)f(.)h(.)f(.)
-h(.)f(.)g(.)h(.)f(.)71 b Fm(42)150 3196 y(Index)37 b
-Fh(.)19 b(.)h(.)f(.)h(.)f(.)g(.)h(.)f(.)h(.)f(.)h(.)f(.)g(.)h(.)f(.)h
-(.)f(.)h(.)f(.)g(.)h(.)f(.)h(.)f(.)h(.)f(.)h(.)f(.)g(.)h(.)f(.)h(.)f(.)
-h(.)f(.)g(.)h(.)f(.)82 b Fm(43)p eop end
-%%Page: 1 5
-TeXDict begin 1 4 bop 150 -116 a Fn(Chapter)30 b(1:)41
-b(In)m(tro)s(duction)2591 b(1)150 299 y Fi(1)80 b(In)l(tro)t(duction)
-150 568 y Fn(Netp)s(erf)37 b(is)f(a)h(b)s(enc)m(hmark)f(that)i(can)f(b)
-s(e)g(use)f(to)i(measure)f(v)-5 b(arious)36 b(asp)s(ect)i(of)f(net)m(w)
-m(orking)g(p)s(erfor-)150 678 y(mance.)46 b(The)31 b(primary)f(fo)s(ci)
-i(are)g(bulk)e(\(ak)-5 b(a)33 b(unidirectional\))c(data)k(transfer)e
-(and)g(request/resp)s(onse)150 787 y(p)s(erformance)43
-b(using)g(either)g(TCP)g(or)h(UDP)g(and)f(the)h(Berk)m(eley)h(So)s(c)m
-(k)m(ets)g(in)m(terface.)82 b(As)44 b(of)g(this)150 897
-y(writing,)29 b(the)h(tests)h(a)m(v)-5 b(ailable)30 b(either)g
-(unconditionally)d(or)j(conditionally)e(include:)225
-1043 y Fk(\017)60 b Fn(TCP)28 b(and)h(UDP)g(unidirectional)d(transfer)i
-(and)h(request/resp)s(onse)f(o)m(v)m(er)j(IPv4)e(and)f(IPv6)h(using)330
-1153 y(the)i(So)s(c)m(k)m(ets)g(in)m(terface.)225 1293
-y Fk(\017)60 b Fn(TCP)32 b(and)g(UDP)h(unidirectional)d(transfer)i(and)
-g(request/resp)s(onse)h(o)m(v)m(er)h(IPv4)f(using)e(the)i(XTI)330
-1402 y(in)m(terface.)225 1543 y Fk(\017)60 b Fn(Link-lev)m(el)29
-b(unidirectional)e(transfer)j(and)g(request/resp)s(onse)g(using)e(the)j
-(DLPI)f(in)m(terface.)225 1683 y Fk(\017)60 b Fn(Unix)29
-b(domain)g(so)s(c)m(k)m(ets)225 1823 y Fk(\017)60 b Fn(SCTP)25
-b(unidirectional)e(transfer)i(and)h(request/resp)s(onse)g(o)m(v)m(er)i
-(IPv4)e(and)g(IPv6)g(using)f(the)h(so)s(c)m(k-)330 1933
-y(ets)31 b(in)m(terface.)275 2110 y(While)h(not)j(ev)m(ery)g(revision)d
-(of)i(netp)s(erf)f(will)f(w)m(ork)i(on)g(ev)m(ery)h(platform)e(listed,)
-h(the)g(in)m(ten)m(tion)g(is)150 2220 y(that)d(at)g(least)g(some)f(v)m
-(ersion)g(of)h(netp)s(erf)e(will)f(w)m(ork)i(on)h(the)f(follo)m(wing)f
-(platforms:)225 2366 y Fk(\017)60 b Fn(Unix)29 b(-)i(at)g(least)g(all)e
-(the)h(ma)5 b(jor)31 b(v)-5 b(arian)m(ts.)225 2506 y
-Fk(\017)60 b Fn(Lin)m(ux)225 2646 y Fk(\017)g Fn(Windo)m(ws)225
-2787 y Fk(\017)g Fn(Op)s(enVMS)225 2927 y Fk(\017)g Fn(Others)275
-3104 y(Netp)s(erf)31 b(is)g(main)m(tained)g(and)g(informally)e(supp)s
-(orted)h(primarily)e(b)m(y)k(Ric)m(k)g(Jones,)g(who)g(can)g(p)s(er-)150
-3214 y(haps)i(b)s(e)h(b)s(est)f(describ)s(ed)f(as)i(Netp)s(erf)g(Con)m
-(tributing)e(Editor.)53 b(Non-trivial)33 b(and)i(v)m(ery)g(appreciated)
-150 3323 y(assistance)24 b(comes)g(from)f(others)h(in)e(the)h(net)m(w)m
-(ork)i(p)s(erformance)e(comm)m(unit)m(y)-8 b(,)25 b(who)e(are)h(to)s(o)
-g(n)m(umerous)150 3433 y(to)32 b(men)m(tion)f(here.)44
-b(While)30 b(it)h(is)f(often)i(used)e(b)m(y)i(them,)f(netp)s(erf)g(is)f
-(NOT)h(supp)s(orted)f(via)h(an)m(y)g(of)h(the)150 3542
-y(formal)d(Hewlett-P)m(ac)m(k)-5 b(ard)32 b(supp)s(ort)c(c)m(hannels.)
-40 b(Y)-8 b(ou)30 b(should)e(feel)i(free)g(to)g(mak)m(e)h(enhancemen)m
-(ts)g(and)150 3652 y(mo)s(di\014cations)37 b(to)i(netp)s(erf)e(to)j
-(suit)d(y)m(our)h(nefarious)f(p)s(orp)s(oises,)i(so)g(long)f(as)h(y)m
-(ou)f(sta)m(y)i(within)c(the)150 3762 y(guidelines)d(of)k(the)f(netp)s
-(erf)f(cop)m(yrigh)m(t.)58 b(If)35 b(y)m(ou)i(feel)e(so)i(inclined,)d
-(y)m(ou)j(can)f(send)f(y)m(our)h(c)m(hanges)h(to)150
-3871 y(netp)s(erf-feedbac)m(k)30 b(\()p Fj(netperf-feedback@netperf.or)
-o(g)p Fn(\))24 b(for)30 b(p)s(ossible)e(inclusion)f(in)m(to)j
-(subsequen)m(t)150 3981 y(v)m(ersions)g(of)g(netp)s(erf.)275
-4127 y(If)23 b(y)m(ou)g(w)m(ould)g(prefer)f(to)j(mak)m(e)f(con)m
-(tributions)e(to)i(net)m(w)m(orking)g(b)s(enc)m(hmark)e(using)g
-(certi\014ed)h(\\op)s(en)150 4236 y(source")k(license,)f(please)g
-(considuer)e(netp)s(erf4,)j(whic)m(h)d(is)i(distributed)d(under)h(the)i
-(terms)g(of)g(the)h(GPL.)275 4383 y(The)36 b(netp)s(erf-talk)h(\()p
-Fj(netperf-talk@netperf.org)p Fn(\))31 b(mailing)k(list)h(is)h(a)m(v)-5
-b(ailable)36 b(to)i(discuss)e(the)150 4492 y(care)k(and)f(feeding)f(of)
-i(netp)s(erf)e(with)g(others)i(who)f(share)g(y)m(our)g(in)m(terest)g
-(in)f(net)m(w)m(ork)j(p)s(erformance)150 4602 y(b)s(enc)m(hmarking.)d
-(The)28 b(netp)s(erf-talk)g(mailing)e(list)h(is)h(a)h(closed)f(list)f
-(and)h(y)m(ou)g(m)m(ust)h(\014rst)e(subscrib)s(e)f(b)m(y)150
-4711 y(sending)j(email)g(to)i(netp)s(erf-talk-request)f(\()p
-Fj(netperf-talk-request@netper)o(f.or)o(g)p Fn(\).)150
-4961 y Fm(1.1)68 b(Con)l(v)l(en)l(tions)150 5121 y Fn(A)29
-b Ff(sizesp)s(ec)34 b Fn(is)28 b(a)h(one)g(or)g(t)m(w)m(o)h(item,)g
-(comma-separated)g(list)e(used)g(as)h(an)g(argumen)m(t)g(to)h(a)f
-(command-)150 5230 y(line)36 b(option)h(that)i(can)f(set)g(one)g(or)g
-(t)m(w)m(o,)j(related)d(netp)s(erf)e(parameters.)64 b(If)37
-b(y)m(ou)h(wish)e(to)i(set)h(b)s(oth)150 5340 y(parameters)31
-b(to)g(separate)g(v)-5 b(alues,)30 b(items)g(should)e(b)s(e)i
-(separated)h(b)m(y)f(a)h(comma:)p eop end
-%%Page: 2 6
-TeXDict begin 2 5 bop 150 -116 a Fn(Chapter)30 b(1:)41
-b(In)m(tro)s(duction)2591 b(2)390 299 y Fj(parameter1,parameter2)275
-433 y Fn(If)32 b(y)m(ou)i(wish)d(to)j(set)g(the)f(\014rst)g(parameter)g
-(without)f(altering)h(the)g(v)-5 b(alue)33 b(of)g(the)h(second)f(from)g
-(its)150 543 y(default,)d(y)m(ou)h(should)d(follo)m(w)i(the)g(\014rst)g
-(item)g(with)f(a)i(comma:)390 677 y Fj(parameter1,)275
-812 y Fn(Lik)m(ewise,)e(precede)i(the)f(item)g(with)f(a)i(comma)g(if)f
-(y)m(ou)g(wish)f(to)i(set)g(only)e(the)i(second)f(parameter:)390
-946 y Fj(,parameter2)275 1081 y Fn(An)g(item)g(with)f(no)h(commas:)390
-1215 y Fj(parameter1and2)275 1350 y Fn(will)24 b(set)j(b)s(oth)f
-(parameters)h(to)h(the)f(same)g(v)-5 b(alue.)39 b(This)25
-b(last)i(mo)s(de)f(is)g(one)i(of)f(the)g(most)g(frequen)m(tly)150
-1460 y(used.)275 1594 y(There)c(is)f(another)i(v)-5 b(arian)m(t)23
-b(of)h(the)g(comma-separated,)i(t)m(w)m(o-item)f(list)d(called)h(a)h
-Ff(optionsp)s(ec)k Fn(whic)m(h)150 1704 y(is)h(lik)m(e)h(a)h(sizesp)s
-(ec)f(with)f(the)h(exception)h(that)g(a)g(single)e(item)h(with)f(no)h
-(comma:)390 1838 y Fj(parameter1)275 1973 y Fn(will)f(only)i(set)h(the)
-g(v)-5 b(alue)31 b(of)h(the)g(\014rst)f(parameter)h(and)g(will)d(lea)m
-(v)m(e)k(the)f(second)g(parameter)g(at)h(its)150 2082
-y(default)d(v)-5 b(alue.)275 2217 y(Netp)s(erf)42 b(has)h(t)m(w)m(o)h
-(t)m(yp)s(es)f(of)h(command-line)d(options.)78 b(The)43
-b(\014rst)f(are)h(global)g(command)g(line)150 2326 y(options.)d(They)30
-b(are)h(essen)m(tially)f(an)m(y)h(option)e(not)i(tied)f(to)h(a)g
-(particular)e(test)i(or)g(group)f(of)g(tests.)42 b(An)150
-2436 y(example)30 b(of)h(a)f(global)g(command-line)f(option)h(is)f(the)
-i(one)f(whic)m(h)f(sets)i(the)g(test)g(t)m(yp)s(e)g(-)f(`)p
-Fj(-t)p Fn('.)275 2570 y(The)j(second)h(t)m(yp)s(e)g(of)g(options)g
-(are)g(test-sp)s(eci\014c)g(options.)51 b(These)34 b(are)g(options)g
-(whic)m(h)e(are)j(only)150 2680 y(applicable)26 b(to)i(a)h(particular)d
-(test)j(or)f(set)g(of)g(tests.)41 b(An)28 b(example)f(of)h(a)h(test-sp)
-s(eci\014c)e(option)h(w)m(ould)f(b)s(e)150 2790 y(the)k(send)e(so)s(c)m
-(k)m(et)j(bu\013er)e(size)g(for)g(a)h(TCP)p 1635 2790
-28 4 v 39 w(STREAM)f(test.)275 2924 y(Global)d(command-line)h(options)g
-(are)h(sp)s(eci\014ed)e(\014rst)h(with)f(test-sp)s(eci\014c)i(options)f
-(follo)m(wing)f(after)150 3034 y(a)k Fj(--)f Fn(as)g(in:)390
-3168 y Fj(netperf)46 b(<global>)f(--)j(<test-specific>)p
-eop end
-%%Page: 3 7
-TeXDict begin 3 6 bop 150 -116 a Fn(Chapter)30 b(2:)41
-b(Installing)28 b(Netp)s(erf)2387 b(3)150 299 y Fi(2)80
-b(Installing)56 b(Netp)t(erf)150 536 y Fn(Netp)s(erf)7
-b('s)33 b(primary)e(form)i(of)g(distribution)d(is)i(source)h(co)s(de.)
-49 b(This)31 b(allo)m(ws)i(installation)e(on)i(systems)150
-646 y(other)41 b(than)g(those)h(to)g(whic)m(h)e(the)h(authors)g(ha)m(v)
-m(e)i(ready)e(access)h(and)f(th)m(us)f(the)i(abilit)m(y)d(to)j(create)
-150 755 y(binaries.)71 b(There)40 b(are)i(t)m(w)m(o)g(st)m(yles)g(of)f
-(netp)s(erf)f(installation.)71 b(The)40 b(\014rst)h(runs)e(the)j(netp)s
-(erf)e(serv)m(er)150 865 y(program)j(-)h(netserv)m(er)f(-)h(as)f(a)h(c)
-m(hild)d(of)j(inetd.)78 b(This)42 b(requires)f(the)j(installer)d(to)j
-(ha)m(v)m(e)g(su\016cien)m(t)150 974 y(privileges)19
-b(to)i(edit)g(the)g(\014les)f(`)p Fj(/etc/services)p
-Fn(')d(and)k(`)p Fj(/etc/inetd.conf)p Fn(')c(or)k(their)f(platform-sp)s
-(eci\014c)150 1084 y(equiv)-5 b(alen)m(ts.)275 1220 y(The)29
-b(second)i(st)m(yle)g(is)e(to)i(run)e(netserv)m(er)i(as)g(a)f
-(standalone)h(daemon.)40 b(This)29 b(second)h(metho)s(d)g(do)s(es)150
-1329 y(not)g(require)e(edit)h(privileges)f(on)h(`)p Fj(/etc/services)p
-Fn(')e(and)i(`)p Fj(/etc/inetd.conf)p Fn(')d(but)j(do)s(es)g(mean)h(y)m
-(ou)150 1439 y(m)m(ust)g(remem)m(b)s(er)g(to)h(run)e(the)i(netserv)m
-(er)f(program)h(explicitly)d(after)i(ev)m(ery)i(system)e(reb)s(o)s(ot.)
-275 1574 y(This)37 b(man)m(ual)i(assumes)g(that)h(those)f(wishing)e(to)
-j(measure)f(net)m(w)m(orking)h(p)s(erformance)e(already)150
-1684 y(kno)m(w)29 b(ho)m(w)g(to)h(use)e(anon)m(ymous)h(FTP)g(and/or)g
-(a)g(w)m(eb)g(bro)m(wser.)40 b(It)29 b(is)f(also)h(exp)s(ected)g(that)g
-(y)m(ou)h(ha)m(v)m(e)150 1793 y(at)j(least)g(a)g(passing)f(familiarit)m
-(y)e(with)h(the)i(net)m(w)m(orking)g(proto)s(cols)f(and)g(in)m
-(terfaces)h(in)m(v)m(olv)m(ed.)47 b(In)32 b(all)150 1903
-y(honest)m(y)-8 b(,)31 b(if)d(y)m(ou)i(do)g(not)f(ha)m(v)m(e)i(suc)m(h)
-e(familiarit)m(y)-8 b(,)28 b(lik)m(ely)g(as)i(not)g(y)m(ou)g(ha)m(v)m
-(e)g(some)g(exp)s(erience)f(to)h(gain)150 2013 y(b)s(efore)25
-b(attempting)g(net)m(w)m(ork)h(p)s(erformance)e(measuremen)m(ts.)39
-b(The)25 b(excellen)m(t)g(texts)h(b)m(y)f(authors)f(suc)m(h)150
-2122 y(as)34 b(Stev)m(ens,)g(F)-8 b(enner)34 b(and)f(Rudo\013)f(and/or)
-i(Stallings)d(w)m(ould)h(b)s(e)h(go)s(o)s(d)g(starting)g(p)s(oin)m(ts.)
-49 b(There)33 b(are)150 2232 y(lik)m(ely)c(other)i(excellen)m(t)f
-(sources)h(out)f(there)h(as)f(w)m(ell.)150 2466 y Fm(2.1)68
-b(Getting)46 b(Netp)t(erf)f(Bits)150 2625 y Fn(Gzipp)s(ed)92
-b(tar)i(\014les)f(of)h(netp)s(erf)f(sources)g(can)h(b)s(e)f(retriev)m
-(ed)h(via)g(anon)m(ymous)f(FTP)150 2735 y(\()p Fj
-(ftp://ftp.netperf.org/netp)o(erf)o Fn(\))57 b(for)63
-b(\\released")h(v)m(ersions)e(of)h(the)g(bits.)136 b(Pre-release)150
-2844 y(v)m(ersions)65 b(of)h(the)f(bits)g(can)h(b)s(e)f(retriev)m(ed)g
-(via)g(anon)m(ymous)h(FTP)f(from)g(the)h(exp)s(erimen)m(tal)150
-2954 y(\()p Fj(ftp://ftp.netperf.org/netp)o(erf)o(/exp)o(erim)o(ent)o
-(al)p Fn(\))25 b(sub)s(directory)-8 b(.)275 3089 y(F)g(or)37
-b(con)m(v)m(enience)h(and)e(ease)i(of)f(remem)m(b)s(ering,)g(a)g(link)d
-(to)k(the)f(do)m(wnload)f(site)g(is)g(pro)m(vided)f(via)150
-3199 y(the)c(Netp)s(erfP)m(age)g(\()p Fj(http://www.netperf.org/)p
-Fn(\))275 3335 y(Those)k(wishing)f(to)j(b)s(e)e(on)h(the)g(bleeding)e
-(edge)j(of)f(netp)s(erf)f(dev)m(elopmen)m(t)i(can)f(grab)g(the)g(top)h
-(of)150 3444 y(trunk)19 b(from)h(the)g(netp)s(erf)g(sub)m(v)m(ersion)f
-(rep)s(ository)g(\()p Fj(http://www.netperf.org/svn)o(/ne)o(tper)o(f2/)
-o(trun)o(k)p Fn(\).)p 3956 3467 42 91 v 275 3580 a(There)30
-b(are)h(lik)m(ely)e(other)i(places)f(around)g(the)h(In)m(ternet)g(from)
-f(whic)m(h)f(one)i(can)g(do)m(wnload)f(netp)s(erf)150
-3689 y(bits.)47 b(These)32 b(ma)m(y)h(b)s(e)f(simple)f(mirrors)g(of)i
-(the)g(main)e(netp)s(erf)h(site,)h(or)g(they)g(ma)m(y)g(b)s(e)f(lo)s
-(cal)g(v)-5 b(arian)m(ts)150 3799 y(on)28 b(netp)s(erf.)39
-b(As)28 b(with)f(an)m(ything)h(one)h(do)m(wnloads)e(from)h(the)g(In)m
-(ternet,)h(tak)m(e)h(care)f(to)g(mak)m(e)h(sure)d(it)h(is)150
-3908 y(what)i(y)m(ou)h(really)e(w)m(an)m(ted)i(and)f(isn't)g(some)g
-(malicious)f(T)-8 b(ro)5 b(jan)30 b(or)h(whatnot.)40
-b(Ca)m(v)m(eat)33 b(do)m(wnloader.)275 4044 y(As)67 b(a)h(general)g
-(rule,)76 b(binaries)66 b(of)i(netp)s(erf)f(and)g(netserv)m(er)h(are)h
-(not)f(distributed)c(from)150 4154 y(ftp.netp)s(erf.org.)51
-b(F)-8 b(rom)35 b(time)e(to)i(time)f(a)g(kind)e(soul)h(or)h(souls)f
-(has)g(pac)m(k)-5 b(aged)36 b(netp)s(erf)d(as)h(a)g(Debian)150
-4263 y(pac)m(k)-5 b(age)41 b(a)m(v)-5 b(ailable)39 b(via)f(the)i
-(apt-get)h(mec)m(hanism)d(or)h(as)h(an)f(RPM.)g(I)g(w)m(ould)f(b)s(e)g
-(most)i(in)m(terested)150 4373 y(in)c(learning)f(ho)m(w)i(to)h(enhance)
-f(the)h(mak)m(e\014les)f(to)h(mak)m(e)g(that)f(easier)g(for)g(p)s
-(eople,)h(and)f(p)s(erhaps)e(to)150 4482 y(generate)d(HP-UX)f
-(swinstall\\dep)s(ots.")150 4716 y Fm(2.2)68 b(Installing)47
-b(Netp)t(erf)150 4876 y Fn(Once)24 b(y)m(ou)h(ha)m(v)m(e)g(do)m
-(wnloaded)e(the)i(tar)f(\014le)f(of)i(netp)s(erf)e(sources)h(on)m(to)h
-(y)m(our)f(system\(s\),)j(it)c(is)h(necessary)150 4985
-y(to)35 b(unpac)m(k)g(the)f(tar)h(\014le,)g(cd)g(to)g(the)g(netp)s(erf)
-e(directory)-8 b(,)36 b(run)d(con\014gure)i(and)f(then)g(mak)m(e.)54
-b(Most)36 b(of)150 5095 y(the)31 b(time)f(it)g(should)e(b)s(e)i
-(su\016cien)m(t)f(to)j(just:)390 5230 y Fj(gzcat)46 b
-(<netperf-version>.tar.gz)c(|)47 b(tar)g(xf)g(-)390 5340
-y(cd)g(<netperf-version>)p eop end
-%%Page: 4 8
-TeXDict begin 4 7 bop 150 -116 a Fn(Chapter)30 b(2:)41
-b(Installing)28 b(Netp)s(erf)2387 b(4)390 299 y Fj(./configure)390
-408 y(make)390 518 y(make)47 b(install)275 655 y Fn(Most)39
-b(of)f(the)h(\\usual")e(con\014gure)h(script)g(options)f(should)f(b)s
-(e)i(presen)m(t)g(dealing)f(with)g(where)h(to)150 765
-y(install)28 b(binaries)g(and)i(whatnot.)390 902 y Fj(./configure)45
-b(--help)275 1039 y Fn(should)28 b(list)h(all)g(of)i(those)g(and)e
-(more.)275 1176 y(If)53 b(the)h(netp)s(erf)f(con\014gure)g(script)g(do)
-s(es)h(not)g(kno)m(w)g(ho)m(w)g(to)g(automagically)g(detect)h(whic)m(h)
-150 1285 y(CPU)38 b(utilization)f(mec)m(hanism)h(to)h(use)f(on)h(y)m
-(our)f(platform)g(y)m(ou)h(ma)m(y)g(w)m(an)m(t)g(to)h(add)e(a)g
-Fj(--enable-)150 1395 y(cpuutil=mumble)54 b Fn(option)j(to)h(the)g
-(con\014gure)g(command.)122 b(If)57 b(y)m(ou)h(ha)m(v)m(e)h(kno)m
-(wledge)f(and/or)150 1504 y(exp)s(erience)24 b(to)h(con)m(tribute)g(to)
-g(that)h(area,)h(feel)d(free)h(to)g(con)m(tact)i Fj
-(netperf-feedback@netperf.o)o(rg)p Fn(.)275 1641 y(Similarly)-8
-b(,)19 b(if)h(y)m(ou)i(w)m(an)m(t)g(tests)g(using)d(the)i(XTI)g(in)m
-(terface,)j(Unix)c(Domain)h(So)s(c)m(k)m(ets,)j(DLPI)d(or)g(SCTP)150
-1751 y(it)31 b(will)e(b)s(e)i(necessary)h(to)g(add)f(one)h(or)f(more)h
-Fj(--enable-[xti|unix|dlpi|)o(sctp)o(]=y)o(es)25 b Fn(options)31
-b(to)150 1861 y(the)e(con\014gure)g(command.)41 b(As)29
-b(of)g(this)f(writing,)g(the)h(con\014gure)g(script)f(will)f(not)i
-(include)e(those)j(tests)150 1970 y(automagically)-8
-b(.)275 2107 y(On)44 b(some)i(platforms,)i(it)d(ma)m(y)g(b)s(e)g
-(necessary)h(to)g(precede)f(the)h(con\014gure)f(command)g(with)f(a)150
-2217 y(CFLA)m(GS)33 b(and/or)h(LIBS)e(v)-5 b(ariable)32
-b(as)i(the)f(netp)s(erf)g(con\014gure)g(script)f(is)g(not)i(y)m(et)g
-(smart)f(enough)g(to)150 2326 y(set)28 b(them)f(itself.)38
-b(Whenev)m(er)28 b(p)s(ossible,)e(these)i(requiremen)m(ts)e(will)f(b)s
-(e)h(found)g(in)g(`)p Fj(README.)p Fe(platform)11 b Fn(')150
-2436 y(\014les.)70 b(Exp)s(ertise)40 b(and)f(assistance)i(in)f(making)g
-(that)h(more)f(automagical)i(in)d(the)i(con\014gure)f(script)150
-2545 y(w)m(ould)29 b(b)s(e)h(most)h(w)m(elcome.)275 2682
-y(Other)24 b(optional)f(con\014gure-time)i(settings)g(include)d
-Fj(--enable-intervals=yes)c Fn(to)26 b(giv)m(e)f(netp)s(erf)150
-2792 y(the)38 b(abilit)m(y)f(to)h(\\pace")i(its)p 1170
-2792 28 4 v 77 w(STREAM)e(tests)h(and)e Fj(--enable-histogram=yes)32
-b Fn(to)39 b(ha)m(v)m(e)g(netp)s(erf)150 2902 y(k)m(eep)31
-b(a)f(histogram)g(of)g(in)m(teresting)f(times.)40 b(Eac)m(h)31
-b(of)f(these)g(will)e(ha)m(v)m(e)j(some)f(e\013ect)i(on)d(the)i
-(measured)150 3011 y(result.)81 b(If)44 b(y)m(our)g(system)g(supp)s
-(orts)e Fj(gethrtime\(\))f Fn(the)k(e\013ect)g(of)f(the)h(histogram)f
-(measuremen)m(t)150 3121 y(should)22 b(b)s(e)i(minimized)d(but)i
-(probably)f(still)g(measurable.)38 b(F)-8 b(or)25 b(example,)g(the)f
-(histogram)g(of)g(a)h(netp)s(erf)150 3230 y(TCP)p 350
-3230 V 39 w(RR)30 b(test)i(will)27 b(b)s(e)j(of)h(the)f(individual)c
-(transaction)k(times:)390 3367 y Fj(netperf)46 b(-t)h(TCP_RR)f(-H)h
-(lag)g(-v)g(2)390 3477 y(TCP)g(REQUEST/RESPONSE)c(TEST)k(from)g
-(0.0.0.0)e(\(0.0.0.0\))h(port)g(0)i(AF_INET)e(to)h(lag.hpl.hp.com)d
-(\(15.4.89.214\))g(port)i(0)i(AF_INET)e(:)h(histogram)p
-6215 3497 42 84 v 390 3587 a(Local)f(/Remote)390 3696
-y(Socket)g(Size)142 b(Request)94 b(Resp.)142 b(Elapsed)93
-b(Trans.)390 3806 y(Send)142 b(Recv)g(Size)238 b(Size)190
-b(Time)237 b(Rate)390 3915 y(bytes)94 b(Bytes)g(bytes)190
-b(bytes)142 b(secs.)189 b(per)47 b(sec)390 4134 y(16384)94
-b(87380)g(1)382 b(1)334 b(10.00)189 b(3538.82)390 4244
-y(32768)94 b(32768)390 4354 y(Alignment)284 b(Offset)390
-4463 y(Local)94 b(Remote)g(Local)g(Remote)390 4573 y(Send)142
-b(Recv)190 b(Send)142 b(Recv)581 4682 y(8)286 b(0)334
-b(0)286 b(0)390 4792 y(Histogram)45 b(of)i(request/response)d(times)390
-4902 y(UNIT_USEC)236 b(:)191 b(0:)f(0:)h(0:)f(0:)g(0:)h(0:)f(0:)g(0:)h
-(0:)f(0)p 3922 4911 42 65 v 390 5011 a(TEN_USEC)284 b(:)191
-b(0:)f(0:)h(0:)f(0:)g(0:)h(0:)f(0:)g(0:)h(0:)f(0)p 3922
-5020 V 390 5121 a(HUNDRED_USEC)92 b(:)191 b(0:)47 b(34480:)94
-b(111:)142 b(13:)g(12:)190 b(6:)h(9:)f(3:)g(4:)h(7)p
-3970 5130 V 390 5230 a(UNIT_MSEC)236 b(:)191 b(0:)142
-b(60:)h(50:)f(51:)h(44:)f(44:)g(72:)95 b(119:)f(100:)h(101)p
-3923 5239 V 390 5340 a(TEN_MSEC)284 b(:)191 b(0:)95 b(105:)190
-b(0:)g(0:)g(0:)h(0:)f(0:)g(0:)h(0:)f(0)p 3922 5349 V
-eop end
-%%Page: 5 9
-TeXDict begin 5 8 bop 150 -116 a Fn(Chapter)30 b(2:)41
-b(Installing)28 b(Netp)s(erf)2387 b(5)390 299 y Fj(HUNDRED_MSEC)92
-b(:)191 b(0:)f(0:)h(0:)f(0:)g(0:)h(0:)f(0:)g(0:)h(0:)f(0)p
-3922 308 42 65 v 390 408 a(UNIT_SEC)284 b(:)191 b(0:)f(0:)h(0:)f(0:)g
-(0:)h(0:)f(0:)g(0:)h(0:)f(0)p 3922 417 V 390 518 a(TEN_SEC)332
-b(:)191 b(0:)f(0:)h(0:)f(0:)g(0:)h(0:)f(0:)g(0:)h(0:)f(0)p
-3922 527 V 390 628 a(>100_SECS:)45 b(0)390 737 y(HIST_TOTAL:)283
-b(35391)275 871 y Fn(Long-time)27 b(users)f(of)g(netp)s(erf)g(will)e
-(notice)j(the)g(expansion)f(of)h(the)g(main)f(test)h(header.)40
-b(This)25 b(stems)150 981 y(from)e(the)h(merging-in)e(of)h(IPv6)h(with)
-e(the)i(standard)e(IPv4)i(tests)g(and)f(the)h(addition)e(of)h(co)s(de)h
-(to)g(sp)s(ecify)150 1090 y(addressing)29 b(information)f(for)j(b)s
-(oth)e(sides)g(of)i(the)f(data)i(connection.)275 1224
-y(The)c(histogram)g(y)m(ou)h(see)h(ab)s(o)m(v)m(e)g(is)e(basically)f(a)
-i(base-10)h(log)f(histogram)f(where)h(w)m(e)g(can)g(see)g(that)150
-1334 y(most)d(of)g(the)g(transaction)g(times)g(w)m(ere)g(on)g(the)g
-(order)f(of)h(one)h(h)m(undred)c(to)k(one-h)m(undred,)f(ninet)m(y-nine)
-150 1443 y(microseconds,)k(but)g(they)g(w)m(ere)h(o)s(ccasionally)f(as)
-g(long)g(as)h(ten)f(to)i(nineteen)d(milliseconds)275
-1577 y(The)43 b(`)p Fj(--enable-demo=yes)p Fn(')c(con\014gure)k(option)
-g(will)e(cause)j(co)s(de)g(to)g(b)s(e)f(included)e(to)k(rep)s(ort)150
-1687 y(in)m(terim)31 b(results)h(during)e(a)j(test)h(run.)46
-b(The)32 b(rate)i(at)f(whic)m(h)e(in)m(terim)h(results)f(are)i(rep)s
-(orted)f(can)h(then)150 1797 y(b)s(e)c(con)m(trolled)g(via)g(the)g
-(global)g(`)p Fj(-D)p Fn(')g(option.)40 b(Here)30 b(is)e(an)h(example)g
-(of)h({enable-demo)f(mo)s(de)g(output:)390 1931 y Fj(src/netperf)45
-b(-D)i(1.35)g(-H)g(lag)g(-f)g(M)390 2040 y(TCP)g(STREAM)f(TEST)h(from)f
-(0.0.0.0)g(\(0.0.0.0\))f(port)i(0)g(AF_INET)f(to)h(lag.hpl.hp.com)d
-(\(15.4.89.214\))g(port)j(0)h(AF_INET)d(:)j(demo)p 5498
-2060 42 84 v 390 2150 a(Interim)e(result:)189 b(9.66)46
-b(MBytes/s)g(over)h(1.67)f(seconds)390 2259 y(Interim)g(result:)189
-b(9.64)46 b(MBytes/s)g(over)h(1.35)f(seconds)390 2369
-y(Interim)g(result:)189 b(9.58)46 b(MBytes/s)g(over)h(1.36)f(seconds)
-390 2478 y(Interim)g(result:)189 b(9.51)46 b(MBytes/s)g(over)h(1.36)f
-(seconds)390 2588 y(Interim)g(result:)189 b(9.71)46 b(MBytes/s)g(over)h
-(1.35)f(seconds)390 2698 y(Interim)g(result:)189 b(9.66)46
-b(MBytes/s)g(over)h(1.36)f(seconds)390 2807 y(Interim)g(result:)189
-b(9.61)46 b(MBytes/s)g(over)h(1.36)f(seconds)390 2917
-y(Recv)142 b(Send)190 b(Send)390 3026 y(Socket)46 b(Socket)94
-b(Message)f(Elapsed)390 3136 y(Size)142 b(Size)190 b(Size)237
-b(Time)h(Throughput)390 3246 y(bytes)94 b(bytes)142 b(bytes)189
-b(secs.)h(MBytes/sec)438 3465 y(32768)94 b(16384)g(16384)189
-b(10.00)333 b(9.61)275 3599 y Fn(Notice)31 b(ho)m(w)f(the)g(units)f(of)
-i(the)f(in)m(terim)f(result)g(trac)m(k)i(that)g(requested)f(b)m(y)h
-(the)f(`)p Fj(-f)p Fn(')g(option.)40 b(Also)150 3708
-y(notice)28 b(that)g(sometimes)f(the)g(in)m(terv)-5 b(al)27
-b(will)e(b)s(e)h(longer)h(than)g(the)h(v)-5 b(alue)27
-b(sp)s(eci\014ed)e(in)h(the)i(`)p Fj(-D)p Fn(')f(option.)150
-3818 y(This)g(is)h(normal)g(and)g(stems)h(from)f(ho)m(w)h(demo)g(mo)s
-(de)f(is)g(implemen)m(ted)f(without)h(relying)f(on)i(in)m(terv)-5
-b(al)150 3927 y(timers,)31 b(but)f(b)m(y)h(calculating)f(ho)m(w)h(man)m
-(y)g(units)f(of)h(w)m(ork)g(m)m(ust)g(b)s(e)g(p)s(erformed)e(to)j(tak)m
-(e)h(at)e(least)h(the)150 4037 y(desired)d(in)m(terv)-5
-b(al.)275 4171 y(As)35 b(of)h(this)f(writing,)g(a)h Fj(make)29
-b(install)34 b Fn(will)f(not)j(actually)g(up)s(date)e(the)i(\014les)f
-(`)p Fj(/etc/services)p Fn(')150 4281 y(and/or)h(`)p
-Fj(/etc/inetd.conf)p Fn(')c(or)k(their)e(platform-sp)s(eci\014c)g
-(equiv)-5 b(alen)m(ts.)57 b(It)35 b(remains)g(necessary)h(to)150
-4390 y(p)s(erform)27 b(that)i(bit)e(of)h(installation)f(magic)h(b)m(y)g
-(hand.)39 b(P)m(atc)m(hes)30 b(to)f(the)g(mak)m(e\014le)f(sources)g(to)
-h(e\013ect)h(an)150 4500 y(automagic)k(editing)d(of)i(the)g(necessary)g
-(\014les)f(to)i(ha)m(v)m(e)g(netp)s(erf)e(installed)e(as)j(a)g(c)m
-(hild)e(of)i(inetd)f(w)m(ould)150 4609 y(b)s(e)e(most)g(w)m(elcome.)275
-4743 y(Starting)f(the)i(netserv)m(er)g(as)f(a)h(standalone)f(daemon)h
-(should)d(b)s(e)i(as)g(easy)h(as:)390 4877 y Fj($)47
-b(netserver)390 4987 y(Starting)f(netserver)f(at)i(port)g(12865)390
-5096 y(Starting)f(netserver)f(at)i(hostname)f(0.0.0.0)f(port)i(12865)f
-(and)h(family)f(0)275 5230 y Fn(Ov)m(er)35 b(time)g(the)g(sp)s
-(eci\014cs)f(of)h(the)g(messages)h(netserv)m(er)g(prin)m(ts)d(to)j(the)
-g(screen)f(ma)m(y)g(c)m(hange)i(but)150 5340 y(the)31
-b(gist)f(will)e(remain)h(the)h(same.)p eop end
-%%Page: 6 10
-TeXDict begin 6 9 bop 150 -116 a Fn(Chapter)30 b(2:)41
-b(Installing)28 b(Netp)s(erf)2387 b(6)275 299 y(If)62
-b(the)h(compilation)e(of)i(netp)s(erf)e(or)i(netserv)m(er)g(happ)s(ens)
-e(to)i(fail,)70 b(feel)62 b(free)h(to)h(con)m(tact)150
-408 y Fj(netperf-feedback@netperf)o(.org)79 b Fn(or)85
-b(join)f(and)h(ask)g(in)f Fj(netperf-talk@netperf.org)p
-Fn(.)150 518 y(Ho)m(w)m(ev)m(er,)34 b(it)d(is)f(quite)h(imp)s(ortan)m
-(t)g(that)h(y)m(ou)f(include)f(the)h(actual)h(compilation)e(errors)h
-(and)g(p)s(erhaps)150 628 y(ev)m(en)40 b(the)g(con\014gure)f(log)h(in)e
-(y)m(our)i(email.)67 b(Otherwise,)41 b(it)e(will)e(b)s(e)i(that)h(m)m
-(uc)m(h)g(more)g(di\016cult)d(for)150 737 y(someone)31
-b(to)g(assist)f(y)m(ou.)150 970 y Fm(2.3)68 b(V)-11 b(erifying)45
-b(Installation)150 1129 y Fn(Basically)-8 b(,)24 b(once)g(netp)s(erf)e
-(is)g(installed)f(and)h(netserv)m(er)i(is)e(con\014gured)g(as)h(a)h(c)m
-(hild)d(of)i(inetd,)h(or)f(launc)m(hed)150 1239 y(as)31
-b(a)f(standalone)g(daemon,)h(simply)d(t)m(yping:)390
-1373 y Fj(netperf)275 1508 y Fn(should)g(result)h(in)g(output)h
-(similar)e(to)j(the)g(follo)m(wing:)390 1642 y Fj($)47
-b(netperf)390 1752 y(TCP)g(STREAM)f(TEST)h(from)f(0.0.0.0)g
-(\(0.0.0.0\))f(port)i(0)g(AF_INET)f(to)h(localhost.localdomain)42
-b(\(127.0.0.1\))j(port)i(0)g(AF_INET)p 5403 1772 42 84
-v 390 1861 a(Recv)142 b(Send)190 b(Send)390 1971 y(Socket)46
-b(Socket)94 b(Message)f(Elapsed)390 2081 y(Size)142 b(Size)190
-b(Size)237 b(Time)h(Throughput)390 2190 y(bytes)94 b(bytes)142
-b(bytes)189 b(secs.)h(10^6bits/sec)438 2409 y(87380)94
-b(16384)g(16384)189 b(10.00)h(2997.84)p eop end
-%%Page: 7 11
-TeXDict begin 7 10 bop 150 -116 a Fn(Chapter)30 b(3:)41
-b(The)30 b(Design)g(of)h(Netp)s(erf)2201 b(7)150 299
-y Fi(3)80 b(The)54 b(Design)f(of)h(Netp)t(erf)150 546
-y Fn(Netp)s(erf)28 b(is)f(designed)f(around)h(a)h(basic)g(clien)m
-(t-serv)m(er)g(mo)s(del.)39 b(There)27 b(are)h(t)m(w)m(o)h(executables)
-g(-)f(netp)s(erf)150 655 y(and)39 b(netserv)m(er.)70
-b(Generally)39 b(y)m(ou)h(will)d(only)i(execute)i(the)f(netp)s(erf)f
-(program,)j(with)c(the)i(netserv)m(er)150 765 y(program)i(b)s(eing)f
-(in)m(v)m(ok)m(ed)i(b)m(y)f(the)h(remote)g(system's)g(inetd)e(or)h
-(equiv)-5 b(alen)m(t.)77 b(When)42 b(y)m(ou)h(execute)150
-875 y(netp)s(erf,)32 b(the)h(\014rst)f(that)h(that)g(will)c(happ)s(en)i
-(is)h(the)g(establishmen)m(t)g(of)g(a)h(con)m(trol)g(connection)g(to)g
-(the)150 984 y(remote)40 b(system.)66 b(This)37 b(connection)i(will)d
-(b)s(e)i(used)g(to)i(pass)e(test)i(con\014guration)e(information)g(and)
-150 1094 y(results)26 b(to)j(and)e(from)g(the)g(remote)i(system.)40
-b(Regardless)27 b(of)h(the)g(t)m(yp)s(e)f(of)h(test)h(to)f(b)s(e)f
-(run,)g(the)g(con)m(trol)150 1203 y(connection)34 b(will)e(b)s(e)i(a)g
-(TCP)g(connection)g(using)f(BSD)i(so)s(c)m(k)m(ets.)54
-b(The)33 b(con)m(trol)i(connection)g(can)f(use)150 1313
-y(either)c(IPv4)g(or)h(IPv6.)275 1452 y(Once)k(the)h(con)m(trol)h
-(connection)f(is)f(up)g(and)g(the)h(con\014guration)f(information)f
-(has)i(b)s(een)f(passed,)150 1561 y(a)40 b(separate)g(\\data")h
-(connection)f(will)d(b)s(e)i(op)s(ened)f(for)i(the)f(measuremen)m(t)h
-(itself)e(using)g(the)i(API's)150 1671 y(and)i(proto)s(cols)g
-(appropriate)f(for)h(the)h(sp)s(eci\014ed)d(test.)78
-b(When)42 b(the)h(test)g(is)e(completed,)46 b(the)c(data)150
-1781 y(connection)d(will)e(b)s(e)h(torn-do)m(wn)h(and)g(results)f(from)
-g(the)i(netserv)m(er)f(will)e(b)s(e)h(passed-bac)m(k)i(via)f(the)150
-1890 y(con)m(trol)31 b(connection)f(and)g(com)m(bined)g(with)f(netp)s
-(erf)7 b('s)29 b(result)h(for)g(displa)m(y)e(to)j(the)g(user.)275
-2029 y(Netp)s(erf)j(places)g(no)h(tra\016c)g(on)f(the)h(con)m(trol)g
-(connection)g(while)d(a)j(test)h(is)d(in)h(progress.)53
-b(Certain)150 2139 y(TCP)35 b(options,)h(suc)m(h)f(as)h(SO)p
-1184 2139 28 4 v 39 w(KEEP)-8 b(ALIVE,)36 b(if)e(set)j(as)e(y)m(our)h
-(systems')g(default,)g(ma)m(y)g(put)f(pac)m(k)m(ets)150
-2248 y(out)c(on)f(the)h(con)m(trol)g(connection)f(while)f(a)i(test)g
-(is)f(in)f(progress.)41 b(Generally)29 b(sp)s(eaking)g(this)h(will)e
-(ha)m(v)m(e)150 2358 y(no)i(e\013ect)i(on)e(the)h(results.)150
-2597 y Fm(3.1)68 b(CPU)45 b(Utilization)150 2756 y Fn(CPU)32
-b(utilization)f(is)g(an)i(imp)s(ortan)m(t,)f(and)g(alas)g(all-to)s(o)h
-(infrequen)m(tly)d(rep)s(orted)i(comp)s(onen)m(t)h(of)f(net-)150
-2866 y(w)m(orking)c(p)s(erformance.)39 b(Unfortunately)-8
-b(,)29 b(it)f(can)g(b)s(e)g(one)h(of)f(the)h(most)g(di\016cult)d
-(metrics)i(to)h(measure)150 2975 y(accurately)j(as)g(man)m(y)f(systems)
-g(o\013er)h(mec)m(hanisms)f(that)h(are)f(at)h(b)s(est)f(il-suited)e(to)
-j(measuring)e(CPU)150 3085 y(utilization)e(in)h(high)g(in)m(terrupt)g
-(rate)i(\(eg)h(net)m(w)m(orking\))f(situations.)275 3224
-y(CPU)g(utilization)e(in)i(netp)s(erf)f(is)h(rep)s(orted)g(as)h(a)g(v)
--5 b(alue)31 b(b)s(et)m(w)m(een)h(0)g(and)f(100\045)i(regardless)e(of)h
-(the)150 3333 y(n)m(um)m(b)s(er)39 b(of)i(CPUs)f(in)m(v)m(olv)m(ed.)70
-b(In)40 b(addition)f(to)i(CPU)f(utilization,)h(netp)s(erf)f(will)e(rep)
-s(ort)h(a)i(metric)150 3443 y(called)32 b(a)g Ff(service)h(demand)p
-Fn(.)46 b(The)32 b(service)g(demand)f(is)h(the)g(normalization)f(of)i
-(CPU)f(utilization)f(and)150 3552 y(w)m(ork)37 b(p)s(erformed.)57
-b(F)-8 b(or)37 b(a)p 1124 3552 V 77 w(STREAM)f(test)h(it)f(is)f(the)i
-(microseconds)f(of)g(CPU)g(time)g(consumed)g(to)150 3662
-y(transfer)d(on)f(KB)h(\(K)g(==)g(1024\))i(of)e(data.)49
-b(F)-8 b(or)34 b(a)p 1957 3662 V 74 w(RR)e(test)i(it)f(is)f(the)h
-(microseconds)f(of)i(CPU)e(time)150 3771 y(consumed)i(pro)s(cessing)f
-(a)i(single)e(transaction.)53 b(F)-8 b(or)35 b(b)s(oth)f(CPU)g
-(utilization)e(and)i(service)h(demand,)150 3881 y(lo)m(w)m(er)c(is)e(b)
-s(etter.)275 4020 y(Service)k(demand)h(can)h(b)s(e)e(particularly)f
-(useful)h(when)h(trying)f(to)i(gauge)h(the)e(e\013ect)i(of)f(a)g(p)s
-(erfor-)150 4129 y(mance)43 b(c)m(hange.)77 b(It)42 b(is)f(essen)m
-(tially)g(a)i(measure)f(of)g(e\016ciency)-8 b(,)46 b(with)41
-b(smaller)g(v)-5 b(alues)41 b(b)s(eing)g(more)150 4239
-y(e\016cien)m(t.)275 4378 y(Netp)s(erf)34 b(is)g(co)s(ded)g(to)i(b)s(e)
-e(able)g(to)h(use)g(one)g(of)g(sev)m(eral,)h(generally)e(platform-sp)s
-(eci\014c)f(CPU)i(uti-)150 4487 y(lization)28 b(measuremen)m(t)i(mec)m
-(hanisms.)40 b(Single)28 b(letter)h(co)s(des)h(will)d(b)s(e)i(included)
-d(in)j(the)g(CPU)g(p)s(ortion)150 4597 y(of)f(the)f(test)h(banner)f(to)
-h(indicate)e(whic)m(h)g(mec)m(hanism)h(w)m(as)g(used)g(on)g(eac)m(h)i
-(of)e(the)h(lo)s(cal)e(\(netp)s(erf)7 b(\))28 b(and)150
-4707 y(remote)j(\(netserv)m(er\))h(system.)275 4845 y(As)e(of)g(this)g
-(writing)e(those)j(co)s(des)f(are:)150 5011 y Fj(U)432
-b Fn(The)50 b(CPU)g(utilization)f(measuremen)m(t)i(mec)m(hanism)f(w)m
-(as)h(unkno)m(wn)e(to)i(netp)s(erf)f(or)630 5121 y(netp)s(erf/netserv)m
-(er)32 b(w)m(as)g(not)g(compiled)f(to)h(include)e(CPU)i(utilization)d
-(measuremen)m(ts.)630 5230 y(The)75 b(co)s(de)h(for)g(the)g(n)m(ull)d
-(CPU)j(utilization)e(mec)m(hanism)h(can)h(b)s(e)f(found)f(in)630
-5340 y(`)p Fj(src/netcpu_none.c)p Fn('.)p eop end
-%%Page: 8 12
-TeXDict begin 8 11 bop 150 -116 a Fn(Chapter)30 b(3:)41
-b(The)30 b(Design)g(of)h(Netp)s(erf)2201 b(8)150 299
-y Fj(I)432 b Fn(An)22 b(HP-UX-sp)s(eci\014c)g(CPU)f(utilization)f(mec)m
-(hanism)i(whereb)m(y)f(the)i(k)m(ernel)e(incremen)m(ted)630
-408 y(a)28 b(p)s(er-CPU)f(coun)m(ter)h(b)m(y)g(one)g(for)f(eac)m(h)i
-(trip)e(through)g(the)h(idle)e(lo)s(op.)39 b(This)26
-b(mec)m(hanism)630 518 y(w)m(as)f(only)e(a)m(v)-5 b(ailable)24
-b(on)g(sp)s(ecially-compiled)d(HP-UX)k(k)m(ernels)f(prior)e(to)j(HP-UX)
-g(10)h(and)630 628 y(is)34 b(men)m(tioned)g(here)h(only)e(for)i(the)g
-(sak)m(e)h(of)f(historical)e(completeness)i(and)f(p)s(erhaps)f(as)630
-737 y(a)38 b(suggestion)g(to)g(those)g(who)f(migh)m(t)g(b)s(e)g
-(altering)g(other)h(op)s(erating)f(systems.)62 b(While)630
-847 y(rather)38 b(simple,)g(p)s(erhaps)e(ev)m(en)j(simplistic,)e(this)f
-(mec)m(hanism)i(w)m(as)g(quite)f(robust)h(and)630 956
-y(w)m(as)28 b(not)f(a\013ected)i(b)m(y)e(the)h(concerns)f(of)h
-(statistical)f(metho)s(ds,)h(or)f(metho)s(ds)g(attempting)630
-1066 y(to)38 b(trac)m(k)g(time)f(in)f(eac)m(h)i(of)g(user,)g(k)m
-(ernel,)h(in)m(terrupt)d(and)g(idle)g(mo)s(des)g(whic)m(h)g(require)630
-1176 y(quite)g(careful)g(accoun)m(ting.)60 b(It)37 b(can)g(b)s(e)f
-(though)m(t-of)i(as)f(the)g(in-k)m(ernel)e(v)m(ersion)h(of)h(the)630
-1285 y(lo)s(op)s(er)k Fj(L)i Fn(mec)m(hanism)f(without)f(the)i(con)m
-(text)i(switc)m(h)d(o)m(v)m(erhead.)79 b(This)41 b(mec)m(hanism)630
-1395 y(required)29 b(calibration.)150 1548 y Fj(P)432
-b Fn(An)26 b(HP-UX-sp)s(eci\014c)h(CPU)f(utilization)f(mec)m(hanism)h
-(whereb)m(y)g(the)h(k)m(ernel)g(k)m(eeps-trac)m(k)630
-1658 y(of)k(time)f(\(in)f(the)i(form)f(of)h(CPU)f(cycles\))h(sp)s(en)m
-(t)f(in)g(the)g(k)m(ernel)g(idle)f(lo)s(op)h(\(HP-UX)h(10.0)630
-1767 y(to)i(11.23)h(inclusiv)m(e\),)d(or)g(where)h(the)g(k)m(ernel)g(k)
-m(eeps)g(trac)m(k)h(of)g(time)e(sp)s(en)m(t)h(in)e(idle,)h(user,)630
-1877 y(k)m(ernel)f(and)g(in)m(terrupt)f(pro)s(cessing)g(\(HP-UX)j
-(11.23)g(and)e(later\).)41 b(The)30 b(former)g(requires)630
-1987 y(calibration,)35 b(the)g(latter)g(do)s(es)g(not.)54
-b(V)-8 b(alues)35 b(in)f(either)g(case)i(are)f(retriev)m(ed)g(via)g
-(one)g(of)630 2096 y(the)g(pstat\(2\))i(family)d(of)i(calls,)f(hence)h
-(the)f(use)g(of)h(the)f(letter)h Fj(P)p Fn(.)55 b(The)35
-b(co)s(de)g(for)g(these)630 2206 y(mec)m(hanisms)29 b(is)f(found)g(in)g
-(`)p Fj(src/netcpu_pstat.c)p Fn(')d(and)k(`)p Fj(src/netcpu_pstatnew.c)
-p Fn(')630 2315 y(resp)s(ectiv)m(ely)-8 b(.)150 2469
-y Fj(K)432 b Fn(A)23 b(Solaris-sp)s(eci\014c)e(CPU)i(utilization)e(mec)
-m(hanism)i(where)f(b)m(y)h(the)h(k)m(ernel)f(k)m(eeps)g(trac)m(k)i(of)
-630 2578 y(tic)m(ks)k(\(eg)g(HZ\))g(sp)s(en)m(t)f(in)f(the)i(idle)d(lo)
-s(op.)40 b(This)26 b(metho)s(d)i(is)g(statistical)g(and)g(is)f(kno)m
-(wn)h(to)630 2688 y(b)s(e)f(inaccurate)h(when)e(the)i(in)m(terrupt)e
-(rate)j(is)d(ab)s(o)m(v)m(e)j(epsilon)d(as)i(time)f(sp)s(en)m(t)g(pro)s
-(cessing)630 2798 y(in)m(terrupts)j(is)g(not)i(subtracted)g(from)f
-(idle.)42 b(The)31 b(v)-5 b(alue)31 b(is)g(retriev)m(ed)g(via)h(a)f
-(kstat\(\))j(call)630 2907 y(-)g(hence)h(the)f(use)g(of)g(the)g(letter)
-h Fj(K)p Fn(.)51 b(Since)33 b(this)g(mec)m(hanism)h(uses)f(units)g(of)h
-(tic)m(ks)h(\(HZ\))630 3017 y(the)g(calibration)e(v)-5
-b(alue)34 b(should)f(in)m(v)-5 b(ariably)32 b(matc)m(h)j(HZ.)g(\(Eg)g
-(100\))i(The)d(co)s(de)h(for)f(this)630 3126 y(mec)m(hanism)c(is)f
-(implemen)m(ted)g(in)g(`)p Fj(src/netcpu_kstat.c)p Fn('.)150
-3280 y Fj(M)432 b Fn(A)33 b(Solaris-sp)s(eci\014c)d(mec)m(hanism)i(a)m
-(v)-5 b(ailable)32 b(on)h(Solaris)d(10)k(and)e(latter)h(whic)m(h)f
-(uses)g(the)630 3389 y(new)20 b(microstate)i(accoun)m(ting)f(mec)m
-(hanisms.)37 b(There)20 b(are)h(t)m(w)m(o,)j(alas,)f(o)m(v)m
-(erlapping,)f(mec)m(h-)630 3499 y(anisms.)37 b(The)24
-b(\014rst)g(trac)m(ks)i(nanoseconds)e(sp)s(en)m(t)g(in)g(user,)h(k)m
-(ernel,)g(and)f(idle)f(mo)s(des.)38 b(The)630 3608 y(second)22
-b(mec)m(hanism)g(trac)m(ks)h(nanoseconds)f(sp)s(en)m(t)f(in)g(in)m
-(terrupt.)36 b(Since)21 b(the)i(mec)m(hanisms)630 3718
-y(o)m(v)m(erlap,)38 b(netp)s(erf)d(go)s(es)i(through)f(some)g(hand-w)m
-(a)m(ving)g(to)h(try)f(to)g(\\\014x")h(the)f(problem.)630
-3828 y(Since)g(the)i(accuracy)g(of)g(the)f(handw)m(a)m(ving)g(cannot)h
-(b)s(e)f(completely)g(determined,)h(one)630 3937 y(m)m(ust)32
-b(presume)g(that)h(while)d(b)s(etter)j(than)f(the)h Fj(K)f
-Fn(mec)m(hanism,)h(this)e(mec)m(hanism)h(to)s(o)h(is)630
-4047 y(not)24 b(without)f(issues.)37 b(The)23 b(v)-5
-b(alues)23 b(are)h(retriev)m(ed)g(via)f(kstat\(\))i(calls,)g(but)e(the)
-h(letter)g(co)s(de)630 4156 y(is)30 b(set)i(to)g Fj(M)f
-Fn(to)h(distinguish)c(this)i(mec)m(hanism)g(from)h(the)g(ev)m(en)h
-(less)f(accurate)i Fj(K)e Fn(mec)m(ha-)630 4266 y(nism.)36
-b(The)20 b(co)s(de)h(for)g(this)f(mec)m(hanism)g(is)g(implemen)m(ted)f
-(in)h(`)p Fj(src/netcpu_kstat10.c)p Fn('.)150 4419 y
-Fj(L)432 b Fn(A)35 b(mec)m(hanism)e(based)h(on)h(\\lo)s(op)s(er"or)f
-(\\soak)m(er")i(pro)s(cesses)e(whic)m(h)f(sit)h(in)f(tigh)m(t)i(lo)s
-(ops)630 4529 y(coun)m(ting)21 b(as)g(fast)h(as)f(they)h(p)s(ossibly)c
-(can.)38 b(This)19 b(mec)m(hanism)i(starts)g(a)h(lo)s(op)s(er)d(pro)s
-(cess)i(for)630 4639 y(eac)m(h)29 b(kno)m(wn)e(CPU)g(on)g(the)h
-(system.)39 b(The)27 b(e\013ect)i(of)f(pro)s(cessor)f(h)m(yp)s
-(erthreading)e(on)j(the)630 4748 y(mec)m(hanism)35 b(is)g(not)h(y)m(et)
-h(kno)m(wn.)57 b(This)35 b(mec)m(hanism)g(de\014nitely)f(requires)g
-(calibration.)630 4858 y(The)c(co)s(de)g(for)h(the)f(\\lo)s(op)s
-(er"mec)m(hanism)f(can)i(b)s(e)f(found)f(in)g(`)p Fj
-(src/netcpu_looper.c)p Fn(')150 5011 y Fj(N)432 b Fn(A)33
-b(Microsoft)g(Windo)m(ws-sp)s(eci\014c)e(mec)m(hanism,)i(the)g(co)s(de)
-g(for)f(whic)m(h)g(can)h(b)s(e)f(found)f(in)630 5121
-y(`)p Fj(src/netcpu_ntperf.c)p Fn('.)j(This)24 b(mec)m(hanism)g(to)s(o)
-i(is)f(based)g(on)g(what)g(app)s(ears)g(to)h(b)s(e)f(a)630
-5230 y(form)d(of)h(micro-state)g(accoun)m(ting)g(and)f(requires)f(no)i
-(calibration.)36 b(On)22 b(laptops,)h(or)g(other)630
-5340 y(systems)38 b(whic)m(h)e(ma)m(y)j(dynamically)c(alter)j(the)g
-(CPU)f(frequency)g(to)i(minimize)c(p)s(o)m(w)m(er)p eop
-end
-%%Page: 9 13
-TeXDict begin 9 12 bop 150 -116 a Fn(Chapter)30 b(3:)41
-b(The)30 b(Design)g(of)h(Netp)s(erf)2201 b(9)630 299
-y(consum)m(tion,)40 b(it)e(has)g(b)s(een)f(suggested)i(that)g(this)e
-(mec)m(hanism)h(ma)m(y)h(b)s(ecome)g(sligh)m(tly)630
-408 y(confsed,)c(in)e(whic)m(h)f(case)j(using)e(BIOS)g(settings)h(to)h
-(disable)d(the)i(p)s(o)m(w)m(er)g(sa)m(ving)g(w)m(ould)630
-518 y(b)s(e)c(indicated.)150 677 y Fj(S)432 b Fn(This)34
-b(mec)m(hanism)h(uses)g(`)p Fj(/proc/stat)p Fn(')f(on)i(Lin)m(ux)e(to)i
-(retriev)m(e)h(time)e(\(tic)m(ks\))i(sp)s(en)m(t)e(in)630
-787 y(idle)e(mo)s(de.)52 b(It)34 b(is)g(though)m(t)h(but)e(not)i(kno)m
-(wn)f(to)h(b)s(e)f(reasonably)g(accurate.)54 b(The)34
-b(co)s(de)630 897 y(for)c(this)f(mec)m(hanism)h(can)h(b)s(e)e(found)h
-(in)f(`)p Fj(src/netcpu_procstat.c)p Fn('.)150 1056 y
-Fj(C)432 b Fn(A)40 b(mec)m(hanism)f(somewhat)i(similar)c(to)j
-Fj(S)g Fn(but)f(using)g(the)h(sysctl\(\))g(call)f(on)h(BSD-lik)m(e)630
-1166 y(Op)s(erating)26 b(systems)g(\(*BSD)i(and)f(MacOS)g(X\).)g(The)g
-(co)s(de)g(for)f(this)g(mec)m(hanism)g(can)i(b)s(e)630
-1275 y(found)h(in)g(`)p Fj(src/netcpu_sysctl.c)p Fn('.)150
-1435 y Fj(Others)192 b Fn(Other)46 b(mec)m(hanisms)f(included)e(in)i
-(netp)s(erf)g(in)g(the)h(past)g(ha)m(v)m(e)i(included)43
-b(using)i(the)630 1544 y(times\(\))34 b(and)f(getrusage\(\))j(calls.)51
-b(These)33 b(calls)g(are)h(actually)g(rather)f(p)s(o)s(orly)g(suited)f
-(to)630 1654 y(the)26 b(task)g(of)g(measuring)f(CPU)g(o)m(v)m(erhead)i
-(for)f(net)m(w)m(orking)g(as)g(they)g(tend)f(to)i(b)s(e)e(pro)s(cess-)
-630 1763 y(sp)s(eci\014c)34 b(and)h(m)m(uc)m(h)h(net)m(w)m(ork-related)
-h(pro)s(cessing)d(can)i(happ)s(en)e(outside)g(the)i(con)m(text)630
-1873 y(of)25 b(a)g(pro)s(cess,)h(in)e(places)h(where)f(it)h(is)f(not)h
-(a)g(giv)m(en)g(it)f(will)f(b)s(e)h(c)m(harged)i(to)f(the)g(correct,)j
-(or)630 1983 y(ev)m(en)33 b(a)g(pro)s(cess.)47 b(They)32
-b(are)h(men)m(tioned)f(here)h(as)g(a)g(w)m(arning)e(to)i(an)m(y)m(one)h
-(seeing)e(those)630 2092 y(mec)m(hanisms)e(used)h(in)f(other)h(net)m(w)
-m(orking)g(b)s(enc)m(hmarks.)43 b(These)31 b(mec)m(hanisms)f(are)i(not)
-630 2202 y(a)m(v)-5 b(ailable)30 b(in)f(netp)s(erf)g(2.4.0)j(and)e
-(later.)275 2361 y(F)-8 b(or)36 b(man)m(y)g(platforms,)g(the)g
-(con\014gure)g(script)e(will)f(c)m(hose)k(the)f(b)s(est)f(a)m(v)-5
-b(ailable)36 b(CPU)f(utilization)150 2471 y(mec)m(hanism.)66
-b(Ho)m(w)m(ev)m(er,)43 b(some)c(platforms)f(ha)m(v)m(e)i(no)f
-(particularly)d(go)s(o)s(d)j(mec)m(hanisms.)65 b(On)38
-b(those)150 2580 y(platforms,)g(it)e(is)g(probably)f(b)s(est)h(to)i
-(use)e(the)h(\\LOOPER")g(mec)m(hanism)f(whic)m(h)g(is)f(basically)h
-(some)150 2690 y(n)m(um)m(b)s(er)30 b(of)h(pro)s(cesses)g(\(as)h(man)m
-(y)f(as)g(there)g(are)h(pro)s(cessors\))f(sitting)f(in)g(tigh)m(t)h
-(little)f(lo)s(ops)g(coun)m(ting)150 2800 y(as)g(fast)g(as)g(they)g
-(can.)40 b(The)30 b(rate)g(at)g(whic)m(h)f(the)h(lo)s(op)s(ers)e(coun)m
-(t)i(when)f(the)g(system)h(is)f(b)s(eliev)m(ed)f(to)j(b)s(e)150
-2909 y(idle)e(is)g(compared)i(with)e(the)i(rate)g(when)f(the)g(system)h
-(is)e(running)f(netp)s(erf)i(and)g(the)g(ratio)h(is)e(used)h(to)150
-3019 y(compute)h(CPU)f(utilization.)275 3153 y(In)35
-b(the)i(past,)h(netp)s(erf)d(included)e(some)k(mec)m(hanisms)f(that)g
-(only)g(rep)s(orted)f(CPU)h(time)g(c)m(harged)150 3263
-y(to)g(the)g(calling)f(pro)s(cess.)56 b(Those)36 b(mec)m(hanisms)e(ha)m
-(v)m(e)j(b)s(een)e(remo)m(v)m(ed)i(from)e(netp)s(erf)g(v)m(ersions)g
-(2.4.0)150 3372 y(and)27 b(later)g(b)s(ecause)h(they)f(are)h(hop)s
-(elessly)d(inaccurate.)40 b(Net)m(w)m(orking)29 b(can)e(and)g(often)h
-(results)e(in)g(CPU)150 3482 y(time)h(b)s(eing)g(sp)s(en)m(t)g(in)f
-(places)i(-)g(suc)m(h)f(as)h(in)m(terrupt)f(con)m(texts)i(-)f(that)g
-(do)g(not)g(get)h(c)m(harged)f(to)h(a)f(or)g(the)150
-3592 y(correct)k(pro)s(cess.)275 3726 y(In)39 b(fact,)44
-b(time)c(sp)s(en)m(t)f(in)g(the)h(pro)s(cessing)f(of)i(in)m(terrupts)d
-(is)h(a)i(common)f(issue)f(for)h(man)m(y)g(CPU)150 3836
-y(utilization)32 b(mec)m(hanisms.)52 b(In)34 b(particular,)f(the)i
-(\\PST)-8 b(A)g(T")35 b(mec)m(hanism)e(w)m(as)i(ev)m(en)m(tually)f(kno)
-m(wn)g(to)150 3945 y(ha)m(v)m(e)29 b(problems)c(accoun)m(ting)j(for)g
-(certain)f(in)m(terrupt)f(time)h(prior)f(to)i(HP-UX)g(11.11)h
-(\(11iv1\).)41 b(HP-UX)150 4055 y(11iv1)24 b(and)e(later)i(are)f(kno)m
-(wn)g(to)h(b)s(e)f(go)s(o)s(d.)38 b(The)23 b(\\KST)-8
-b(A)g(T")23 b(mec)m(hanism)g(is)f(kno)m(wn)h(to)h(ha)m(v)m(e)h
-(problems)150 4164 y(on)36 b(all)e(v)m(ersions)h(of)h(Solaris)e(up)h
-(to)h(and)f(including)d(Solaris)i(10.)58 b(Ev)m(en)36
-b(the)g(microstate)g(accoun)m(ting)150 4274 y(a)m(v)-5
-b(ailable)38 b(via)h(kstat)h(in)d(Solaris)h(10)h(has)g(issues,)h
-(though)f(p)s(erhaps)e(not)i(as)g(bad)g(as)g(those)g(of)h(prior)150
-4384 y(v)m(ersions.)275 4518 y(The)34 b(/pro)s(c/stat)i(mec)m(hanism)f
-(under)e(Lin)m(ux)g(is)h(in)g(what)h(the)g(author)g(w)m(ould)f
-(consider)f(an)i(\\un-)150 4628 y(certain")27 b(category)h(as)f(it)f
-(app)s(ears)f(to)i(b)s(e)f(statistical,)h(whic)m(h)e(ma)m(y)i(also)g
-(ha)m(v)m(e)g(issues)e(with)g(time)h(sp)s(en)m(t)150
-4737 y(pro)s(cessing)j(in)m(terrupts.)275 4872 y(In)36
-b(summary)-8 b(,)39 b(b)s(e)d(sure)h(to)h(\\sanit)m(y-c)m(hec)m(k")i
-(the)d(CPU)g(utilization)f(\014gures)g(with)g(other)i(mec)m(ha-)150
-4981 y(nisms.)g(Ho)m(w)m(ev)m(er,)32 b(platform)c(to)s(ols)h(suc)m(h)g
-(as)h(top,)g(vmstat)g(or)f(mpstat)g(are)h(often)f(based)g(on)g(the)h
-(same)150 5091 y(mec)m(hanisms)g(used)f(b)m(y)h(netp)s(erf.)p
-eop end
-%%Page: 10 14
-TeXDict begin 10 13 bop 150 -116 a Fn(Chapter)30 b(4:)41
-b(Global)29 b(Command-line)g(Options)1824 b(10)150 299
-y Fi(4)80 b(Global)56 b(Command-line)c(Options)150 511
-y Fn(This)26 b(section)i(describ)s(es)e(eac)m(h)j(of)g(the)f(global)f
-(command-line)f(options)i(a)m(v)-5 b(ailable)27 b(in)f(the)j(netp)s
-(erf)e(and)150 621 y(netserv)m(er)h(binaries.)38 b(Essen)m(tially)-8
-b(,)27 b(it)g(is)g(an)h(expanded)e(v)m(ersion)h(of)h(the)g(usage)g
-(information)e(displa)m(y)m(ed)150 731 y(b)m(y)k(netp)s(erf)g(or)g
-(netserv)m(er)h(when)e(in)m(v)m(ok)m(ed)i(with)e(the)i(`)p
-Fj(-h)p Fn(')f(global)g(command-line)f(option.)150 954
-y Fm(4.1)68 b(Command-line)46 b(Options)f(Syn)l(tax)150
-1114 y Fn(Revision)22 b(1.8)i(of)f(netp)s(erf)f(in)m(tro)s(duced)f
-(enough)i(new)f(functionalit)m(y)g(to)h(o)m(v)m(errun)g(the)g(English)e
-(alphab)s(et)150 1223 y(for)31 b(mnemonic)f(command-line)g(option)h
-(names,)g(and)g(the)g(author)g(w)m(as)h(not)f(and)g(is)f(not)h(quite)g
-(ready)150 1333 y(to)45 b(switc)m(h)e(to)h(the)g(con)m(temp)s(orary)h
-(`)p Fj(--mumble)p Fn(')d(st)m(yle)i(of)g(command-line)e(options.)81
-b(\(Call)42 b(him)h(a)150 1443 y(Luddite\).)275 1573
-y(F)-8 b(or)36 b(this)f(reason,)i(the)f(command-line)e(options)h(w)m
-(ere)h(split)e(in)m(to)i(t)m(w)m(o)h(parts)e(-)h(the)g(\014rst)f(are)h
-(the)150 1682 y(global)c(command-line)e(options.)46 b(They)32
-b(are)h(options)f(that)h(a\013ect)g(nearly)f(an)m(y)h(and)e(ev)m(ery)j
-(test)f(t)m(yp)s(e)150 1792 y(of)h(netp)s(erf.)49 b(The)34
-b(second)f(t)m(yp)s(e)h(are)g(the)g(test-sp)s(eci\014c)g(command-line)e
-(options.)50 b(Both)34 b(are)g(en)m(tered)150 1902 y(on)42
-b(the)h(same)g(command)f(line,)i(but)e(they)h(m)m(ust)f(b)s(e)g
-(separated)h(from)f(one)g(another)h(b)m(y)f(a)h Fj(--)f
-Fn(for)150 2011 y(correct)30 b(parsing.)38 b(Global)28
-b(command-line)f(options)h(come)i(\014rst,)e(follo)m(w)m(ed)g(b)m(y)h
-(the)g Fj(--)e Fn(and)h(then)h(test-)150 2121 y(sp)s(eci\014c)d
-(command-line)g(options.)39 b(If)26 b(there)i(are)g(no)f(test-sp)s
-(eci\014c)g(options)f(to)i(b)s(e)f(set,)i(the)e Fj(--)g
-Fn(ma)m(y)h(b)s(e)150 2230 y(omitted.)49 b(If)33 b(there)g(are)h(no)f
-(global)g(command-line)e(options)i(to)h(b)s(e)f(set,)h(test-sp)s
-(eci\014c)g(options)e(m)m(ust)150 2340 y(still)c(b)s(e)i(preceded)g(b)m
-(y)g(a)h Fj(--)p Fn(.)40 b(F)-8 b(or)31 b(example:)390
-2470 y Fj(netperf)46 b(<global>)f(--)j(<test-specific>)275
-2600 y Fn(sets)30 b(b)s(oth)g(global)g(and)f(test-sp)s(eci\014c)i
-(options:)390 2730 y Fj(netperf)46 b(<global>)275 2861
-y Fn(sets)30 b(just)g(global)g(options)f(and:)390 2991
-y Fj(netperf)46 b(--)h(<test-specific>)275 3121 y Fn(sets)30
-b(just)g(test-sp)s(eci\014c)h(options.)150 3345 y Fm(4.2)68
-b(Global)46 b(Options)150 3504 y Fj(-a)30 b(<sizespec>)630
-3614 y Fn(This)c(option)h(allo)m(ws)g(y)m(ou)h(to)g(alter)f(the)h
-(alignmen)m(t)f(of)h(the)f(bu\013ers)g(used)g(in)f(the)i(sending)630
-3723 y(and)h(receiving)f(calls)g(on)h(the)h(lo)s(cal)e(system..)41
-b(Changing)28 b(the)h(alignmen)m(t)f(of)i(the)f(bu\013ers)630
-3833 y(can)23 b(force)h(the)f(system)h(to)f(use)g(di\013eren)m(t)g(cop)
-m(y)g(sc)m(hemes,)j(whic)m(h)c(can)h(ha)m(v)m(e)h(a)g(measurable)630
-3943 y(e\013ect)29 b(on)f(p)s(erformance.)39 b(If)27
-b(the)h(page)h(size)e(for)h(the)g(system)g(w)m(ere)g(4096)h(b)m(ytes,)g
-(and)f(y)m(ou)630 4052 y(w)m(an)m(t)i(to)f(pass)g(page-aligned)f
-(bu\013ers)g(b)s(eginning)e(on)j(page)g(b)s(oundaries,)e(y)m(ou)i
-(could)f(use)630 4162 y(`)p Fj(-a)i(4096)p Fn('.)47 b(By)33
-b(default)e(the)i(units)e(are)i(b)m(ytes,)h(but)e(su\016x)g(of)h(\\G,")
-h(\\M,")g(or)e(\\K")i(will)630 4271 y(sp)s(ecify)19 b(the)i(units)d(to)
-j(b)s(e)f(2)p Fj(^)p Fn(30)h(\(GB\),)h(2)p Fj(^)p Fn(20)g(\(MB\))g(or)e
-(2)p Fj(^)p Fn(10)h(\(KB\))g(resp)s(ectiv)m(ely)-8 b(.)37
-b(A)21 b(su\016x)630 4381 y(of)33 b(\\g,")j(\\m")e(or)f(\\k")h(will)d
-(sp)s(ecify)h(units)g(of)h(10)p Fj(^)p Fn(9,)i(10)p Fj(^)p
-Fn(6)g(or)e(10)p Fj(^)p Fn(3)h(b)m(ytes)g(resp)s(ectiv)m(ely)-8
-b(.)630 4490 y([Default:)41 b(8)31 b(b)m(ytes])150 4641
-y Fj(-A)f(<sizespec>)630 4751 y Fn(This)35 b(option)i(is)f(iden)m
-(tical)g(to)i(the)f(`)p Fj(-a)p Fn(')h(option)e(with)g(the)h
-(di\013erence)g(b)s(eing)f(it)g(a\013ects)630 4860 y(alignmen)m(ts)30
-b(for)g(the)g(remote)i(system.)150 5011 y Fj(-b)e(<size>)66
-b Fn(This)44 b(option)h(is)g(only)g(presen)m(t)h(when)f(netp)s(erf)g
-(has)g(b)s(een)h(con\014gure)f(with)g({enable-)630 5121
-y(in)m(terv)-5 b(als=y)m(es)30 b(prior)f(to)j(compilation.)40
-b(It)31 b(sets)g(the)g(size)g(of)g(the)g(burst)e(of)i(send)f(calls)g
-(in)630 5230 y(a)p 712 5230 28 4 v 71 w(STREAM)g(test.)41
-b(When)31 b(used)e(in)g(conjunction)h(with)f(the)i(`)p
-Fj(-w)p Fn(')f(option)g(it)g(can)g(cause)630 5340 y(the)h(rate)g(at)g
-(whic)m(h)e(data)i(is)e(sen)m(t)i(to)g(b)s(e)f(\\paced.")p
-eop end
-%%Page: 11 15
-TeXDict begin 11 14 bop 150 -116 a Fn(Chapter)30 b(4:)41
-b(Global)29 b(Command-line)g(Options)1824 b(11)150 299
-y Fj(-c)30 b([rate])66 b Fn(This)38 b(option)h(will)e(ask)j(that)g(CPU)
-f(utilization)f(and)h(service)g(demand)g(b)s(e)g(calculated)630
-408 y(for)32 b(the)h(lo)s(cal)e(system.)47 b(F)-8 b(or)33
-b(those)f(CPU)g(utilization)f(mec)m(hanisms)g(requiring)f(calibra-)630
-518 y(tion,)h(the)g(options)f(rate)i(parameter)f(ma)m(y)h(b)s(e)e(sp)s
-(eci\014ed)f(to)j(preclude)e(running)e(another)630 628
-y(calibration)j(step,)j(sa)m(ving)e(40)i(seconds)f(of)f(time.)48
-b(F)-8 b(or)33 b(those)h(CPU)e(utilization)f(mec)m(ha-)630
-737 y(nisms)d(requiring)g(no)i(calibration,)f(the)i(optional)e(rate)i
-(parameter)g(will)c(b)s(e)j(utterly)g(and)630 847 y(completely)g
-(ignored.)40 b([Default:)h(no)30 b(CPU)g(measuremen)m(ts])150
-1015 y Fj(-C)g([rate])66 b Fn(This)33 b(option)g(requests)i(CPU)f
-(utilization)e(and)i(service)g(demand)f(calculations)h(for)g(the)630
-1124 y(remote)d(system.)41 b(It)31 b(is)e(otherwise)h(iden)m(tical)f
-(to)i(the)g(`)p Fj(-c)p Fn(')f(option.)150 1292 y Fj(-d)384
-b Fn(Eac)m(h)43 b(instance)g(of)f(this)g(option)g(will)e(increase)i
-(the)h(quan)m(tit)m(y)g(of)g(debugging)e(output)630 1402
-y(displa)m(y)m(ed)c(during)g(a)i(test.)66 b(If)38 b(the)h(debugging)e
-(output)h(lev)m(el)h(is)e(set)j(high)d(enough,)j(it)630
-1512 y(ma)m(y)33 b(ha)m(v)m(e)h(a)f(measurable)f(e\013ect)j(on)d(p)s
-(erformance.)47 b(Debugging)33 b(information)e(for)i(the)630
-1621 y(lo)s(cal)25 b(system)h(is)e(prin)m(ted)g(to)j(stdout.)39
-b(Debugging)25 b(information)f(for)i(the)f(remote)i(system)630
-1731 y(is)37 b(sen)m(t)i(b)m(y)f(default)g(to)h(the)f(\014le)f(`)p
-Fj(/tmp/netperf.debug)p Fn('.)60 b([Default:)d(no)38
-b(debugging)630 1840 y(output])150 2008 y Fj(-D)30 b([interval,units])
-630 2118 y Fn(This)20 b(option)i(is)f(only)h(a)m(v)-5
-b(ailable)21 b(when)g(netp)s(erf)g(is)h(con\014gured)f(with)g
-({enable-demo=y)m(es.)630 2228 y(When)31 b(set,)h(it)e(will)f(cause)i
-(netp)s(erf)f(to)i(emit)f(p)s(erio)s(dic)d(rep)s(orts)j(of)g(p)s
-(erformance)f(during)630 2337 y(the)42 b(run.)72 b([)p
-Ff(in)m(terv)-5 b(al)p Fn(,)p Ff(units)t Fn(])39 b(follo)m(w)i(the)g
-(seman)m(tics)h(of)f(an)h(optionsp)s(ec.)73 b(If)40 b(sp)s(eci\014ed,)
-630 2447 y Ff(in)m(terv)-5 b(al)46 b Fn(giv)m(es)d(the)g(minim)m(um)d
-(in)m(terv)-5 b(al)41 b(in)h(real)g(seconds,)k(it)d(do)s(es)f(not)h(ha)
-m(v)m(e)h(to)g(b)s(e)630 2556 y(whole)29 b(seconds.)41
-b(The)29 b Ff(units)k Fn(v)-5 b(alue)29 b(can)h(b)s(e)g(used)f(for)h
-(the)g(\014rst)g(guess)g(as)g(to)h(ho)m(w)f(man)m(y)630
-2666 y(units)39 b(of)j(w)m(ork)f(\(b)m(ytes)h(or)f(transactions\))g(m)m
-(ust)g(b)s(e)f(done)h(to)h(tak)m(e)h(at)e(least)h Ff(in)m(terv)-5
-b(al)630 2776 y Fn(seconds.)40 b(If)28 b(omitted,)h Ff(in)m(terv)-5
-b(al)32 b Fn(defaults)27 b(to)j(one)f(second)f(and)g
-Ff(units)j Fn(to)e(v)-5 b(alues)28 b(sp)s(eci\014c)630
-2885 y(to)j(eac)m(h)h(test)f(t)m(yp)s(e.)150 3053 y Fj(-f)f
-(G|M|K|g|m|k)630 3163 y Fn(This)39 b(option)h(can)h(b)s(e)f(used)g(to)i
-(c)m(hange)g(the)f(rep)s(orting)e(units)g(for)p 3071
-3163 28 4 v 81 w(STREAM)h(tests.)630 3272 y(Argumen)m(ts)25
-b(of)g(\\G,")i(\\M,")g(or)e(\\K")g(will)e(set)j(the)f(units)e(to)j(2)p
-Fj(^)p Fn(30,)i(2)p Fj(^)p Fn(20)e(or)f(2)p Fj(^)p Fn(10)h(b)m(ytes/s)
-630 3382 y(resp)s(ectiv)m(ely)g(\(EG)h(p)s(o)m(w)m(er)f(of)g(t)m(w)m(o)
-i(GB,)f(MB)h(or)e(KB\).)h(Argumen)m(ts)f(of)h(\\g,")i(\\,m")e(or)f
-(\\k")630 3492 y(will)35 b(set)k(the)g(units)d(to)j(10)p
-Fj(^)p Fn(9,)i(10)p Fj(^)p Fn(6)e(or)g(10)p Fj(^)p Fn(3)g(bits/s)e
-(resp)s(ectiv)m(ely)-8 b(.)64 b([Default:)57 b('m')38
-b(or)630 3601 y(10)p Fj(^)p Fn(6)31 b(bits/s])150 3769
-y Fj(-F)f(<fillfile>)630 3879 y Fn(This)35 b(option)h(sp)s(eci\014ed)f
-(the)i(\014le)f(from)g(whic)m(h)g(send)g(whic)m(h)f(bu\013ers)h(will)e
-(b)s(e)i(pre-\014lled)630 3988 y(.)78 b(While)41 b(the)i(bu\013ers)f
-(will)e(con)m(tain)j(data)h(from)e(the)h(sp)s(eci\014ed)e(\014le,)k
-(the)e(\014le)f(is)g(not)630 4098 y(fully)32 b(transfered)h(to)i(the)f
-(remote)h(system)f(as)g(the)h(receiving)e(end)g(of)h(the)g(test)h(will)
-d(not)630 4208 y(write)e(the)i(con)m(ten)m(ts)h(of)e(what)h(it)e
-(receiv)m(es)i(to)g(a)g(\014le.)43 b(This)29 b(can)j(b)s(e)e(used)h(to)
-h(pre-\014ll)d(the)630 4317 y(send)37 b(bu\013ers)f(with)h(data)h(ha)m
-(ving)f(di\013eren)m(t)h(compressibilit)m(y)c(and)j(so)h(is)f(useful)f
-(when)630 4427 y(measuring)29 b(p)s(erformance)h(o)m(v)m(er)i(mec)m
-(hanisms)d(whic)m(h)g(p)s(erform)g(compression.)630 4566
-y(While)38 b(optional)h(for)g(most)h(tests,)j(this)38
-b(option)h(is)g(required)e(for)j(a)g(test)g(utilizing)d(the)630
-4675 y(send\014le\(\))22 b(or)g(related)h(calls)f(b)s(ecause)g
-(send\014le)f(tests)i(need)g(a)g(name)f(of)h(a)g(\014le)f(to)h
-(reference.)150 4843 y Fj(-h)384 b Fn(This)29 b(option)g(causes)i(netp)
-s(erf)e(to)i(displa)m(y)e(its)h(usage)h(string)e(and)h(exit)g(to)h(the)
-f(exclusion)630 4953 y(of)h(all)e(else.)150 5121 y Fj(-H)h
-(<optionspec>)630 5230 y Fn(This)h(option)h(will)f(set)i(the)g(name)g
-(of)g(the)g(remote)h(system)f(and)g(or)f(the)i(address)e(family)630
-5340 y(used)e(for)g(the)g(con)m(trol)h(connection.)41
-b(F)-8 b(or)31 b(example:)p eop end
-%%Page: 12 16
-TeXDict begin 12 15 bop 150 -116 a Fn(Chapter)30 b(4:)41
-b(Global)29 b(Command-line)g(Options)1824 b(12)870 299
-y Fj(-H)47 b(linger,4)630 430 y Fn(will)25 b(set)j(the)f(name)h(of)g
-(the)f(remote)i(system)e(to)h(\\tardy")h(and)e(tells)f(netp)s(erf)h(to)
-h(use)f(IPv4)630 540 y(addressing)i(only)-8 b(.)870 671
-y Fj(-H)47 b(,6)630 803 y Fn(will)30 b(lea)m(v)m(e)k(the)f(name)f(of)h
-(the)g(remote)g(system)g(at)g(its)f(default,)h(and)f(request)h(that)g
-(only)630 913 y(IPv6)d(addresses)g(b)s(e)g(used)g(for)g(the)g(con)m
-(trol)h(connection.)870 1044 y Fj(-H)47 b(lag)630 1176
-y Fn(will)32 b(set)k(the)f(name)g(of)g(the)g(remote)h(system)f(to)h
-(\\lag")g(and)e(lea)m(v)m(e)i(the)f(address)g(family)630
-1285 y(to)e(AF)p 876 1285 28 4 v 40 w(UNSPEC)f(whic)m(h)e(means)i
-(selection)g(of)h(IPv4)f(vs)g(IPv6)g(is)f(left)h(to)g(the)h(system's)
-630 1395 y(address)c(resolution.)630 1526 y(A)j(v)-5
-b(alue)31 b(of)g(\\inet")h(can)g(b)s(e)f(used)g(in)f(place)i(of)f(\\4")
-i(to)f(request)g(IPv4)g(only)e(addressing.)630 1636 y(Similarly)-8
-b(,)32 b(a)j(v)-5 b(alue)34 b(of)h(\\inet6")g(can)g(b)s(e)e(used)h(in)f
-(place)h(of)h(\\6")h(to)f(request)f(IPv6)h(only)630 1745
-y(addressing.)h(A)22 b(v)-5 b(alue)22 b(of)g(\\0")h(can)g(b)s(e)e(used)
-g(to)i(request)f(either)f(IPv4)i(or)f(IPv6)g(addressing)630
-1855 y(as)31 b(name)f(resolution)f(dictates.)630 1987
-y(By)g(default,)f(the)h(options)e(set)i(with)e(the)i(global)f(`)p
-Fj(-H)p Fn(')g(option)g(are)h(inherited)d(b)m(y)i(the)h(test)630
-2096 y(for)h(its)g(data)h(connection,)g(unless)d(a)j(test-sp)s
-(eci\014c)g(`)p Fj(-H)p Fn(')f(option)g(is)f(sp)s(eci\014ed.)630
-2228 y(If)23 b(a)h(`)p Fj(-H)p Fn(')f(option)g(follo)m(ws)g(either)f
-(the)i(`)p Fj(-4)p Fn(')f(or)h(`)p Fj(-6)p Fn(')f(options,)i(the)e
-(family)f(setting)i(sp)s(eci\014ed)630 2337 y(with)29
-b(the)h(-H)g(option)g(will)d(o)m(v)m(erride)j(the)g(`)p
-Fj(-4)p Fn(')g(or)g(`)p Fj(-6)p Fn(')g(options)f(for)h(the)g(remote)h
-(address)630 2447 y(family)-8 b(.)58 b(If)35 b(no)i(address)e(family)g
-(is)g(sp)s(eci\014ed,)i(settings)f(from)g(a)h(previous)d(`)p
-Fj(-4)p Fn(')j(or)f(`)p Fj(-6)p Fn(')630 2556 y(option)31
-b(will)e(remain.)43 b(In)31 b(a)h(n)m(utshell,)e(the)h(last)h(explicit)
-e(global)g(command-line)g(option)630 2666 y(wins.)630
-2798 y([Default:)139 b(\\lo)s(calhost")80 b(for)g(the)f(remote)i
-(name/IP)e(address)g(and)g(\\0")i(\(eg)630 2907 y(AF)p
-763 2907 V 41 w(UNSPEC\))29 b(for)i(the)f(remote)h(address)f(family)-8
-b(.])150 3061 y Fj(-I)30 b(<optionspec>)630 3170 y Fn(This)k(option)h
-(enables)g(the)h(calculation)f(of)h(con\014dence)g(in)m(terv)-5
-b(als)35 b(and)g(sets)h(the)g(con\014-)630 3280 y(dence)c(and)f(width)f
-(parameters)i(with)f(the)g(\014rst)g(ha)m(v)m(e)i(of)f(the)g(optionsp)s
-(ec)f(b)s(eing)f(either)630 3389 y(99)35 b(or)f(95)h(for)e(99\045)i(or)
-f(95\045)g(con\014dence)g(resp)s(ectiv)m(ely)-8 b(.)52
-b(The)33 b(second)h(v)-5 b(alue)33 b(of)i(the)f(op-)630
-3499 y(tionsp)s(ec)c(sp)s(eci\014es)f(the)h(width)f(of)h(the)h(desired)
-e(con\014dence)h(in)m(terv)-5 b(al.)40 b(F)-8 b(or)31
-b(example)870 3630 y Fj(-I)47 b(99,5)630 3762 y Fn(asks)24
-b(netp)s(erf)g(to)h(b)s(e)f(99\045)g(con\014den)m(t)h(that)g(the)f
-(measured)g(mean)g(v)-5 b(alues)24 b(for)g(throughput)630
-3871 y(and)30 b(CPU)g(utilization)f(are)h(within)e Fj(+)p
-Fn(/-)j(2.5\045)h(of)e(the)h(\\real")g(mean)g(v)-5 b(alues.)40
-b(If)30 b(the)h(`)p Fj(-i)p Fn(')630 3981 y(option)39
-b(is)g(sp)s(eci\014ed)f(and)h(the)h(`)p Fj(-I)p Fn(')f(option)g(is)g
-(omitted,)j(the)e(con\014dence)g(defaults)e(to)630 4091
-y(99\045)31 b(and)f(the)g(width)f(to)i(5\045)g(\(giving)e
-Fj(+)p Fn(/-)i(2.5\045\))630 4222 y(If)36 b(netp)s(erf)g(calculates)i
-(that)f(the)g(desired)f(con\014dence)h(in)m(terv)-5 b(als)36
-b(ha)m(v)m(e)i(not)f(b)s(een)f(met,)630 4332 y(it)f(emits)f(a)i
-(noticeable)f(w)m(arning)f(that)i(cannot)g(b)s(e)e(suppressed)f(with)h
-(the)i(`)p Fj(-P)p Fn(')f(or)g(`)p Fj(-v)p Fn(')630 4441
-y(options:)870 4573 y Fj(netperf)46 b(-H)h(tardy.cup)e(-i)i(3)h(-I)f
-(99,5)870 4682 y(TCP)g(STREAM)f(TEST)h(from)f(0.0.0.0)g(\(0.0.0.0\))f
-(port)i(0)g(AF_INET)f(to)h(tardy.cup.hp.com)d(\(15.244.44.58\))g(port)i
-(0)i(AF_INET)e(:)h(+/-2.5\045)94 b(99\045)46 b(conf.)p
-6789 4703 42 84 v 870 4792 a(!!!)h(WARNING)870 4902 y(!!!)g(Desired)f
-(confidence)f(was)i(not)g(achieved)e(within)h(the)h(specified)e
-(iterations.)p 4309 4922 42 76 v 870 5011 a(!!!)i(This)g(implies)e
-(that)i(there)f(was)h(variability)e(in)i(the)g(test)g(environment)d
-(that)p 4307 5031 V 870 5121 a(!!!)j(must)g(be)g(investigated)d(before)
-i(going)h(further.)870 5230 y(!!!)g(Confidence)e(intervals:)g
-(Throughput)284 b(:)95 b(6.8\045)870 5340 y(!!!)1097
-b(Local)46 b(CPU)h(util)95 b(:)g(0.0\045)p eop end
-%%Page: 13 17
-TeXDict begin 13 16 bop 150 -116 a Fn(Chapter)30 b(4:)41
-b(Global)29 b(Command-line)g(Options)1824 b(13)870 299
-y Fj(!!!)1097 b(Remote)46 b(CPU)h(util)g(:)95 b(0.0\045)870
-518 y(Recv)142 b(Send)190 b(Send)870 628 y(Socket)46
-b(Socket)94 b(Message)f(Elapsed)870 737 y(Size)142 b(Size)190
-b(Size)237 b(Time)h(Throughput)870 847 y(bytes)94 b(bytes)142
-b(bytes)189 b(secs.)h(10^6bits/sec)918 1066 y(32768)94
-b(16384)g(16384)189 b(10.01)285 b(40.23)630 1198 y Fn(Where)35
-b(w)m(e)g(see)g(that)g(netp)s(erf)f(did)f(not)i(meet)g(the)g(desired)e
-(con)m(vidence)i(in)m(terv)-5 b(als.)52 b(In-)630 1307
-y(stead)33 b(of)g(b)s(eing)e(99\045)i(con\014den)m(t)g(it)f(w)m(as)h
-(within)d Fj(+)p Fn(/-)j(2.5\045)g(of)g(the)g(real)f(mean)h(v)-5
-b(alue)32 b(of)630 1417 y(throughput)26 b(it)g(is)g(only)g(con\014den)m
-(t)h(it)f(w)m(as)i(within)c Fj(+)p Fn(/-3.4\045.)41 b(In)26
-b(this)g(example,)h(increas-)630 1526 y(ing)22 b(the)g(`)p
-Fj(-i)p Fn(')h(option)f(\(describ)s(ed)f(b)s(elo)m(w\))h(and/or)g
-(increasing)f(the)i(iteration)f(length)g(with)630 1636
-y(the)31 b(`)p Fj(-l)p Fn(')f(option)g(migh)m(t)g(resolv)m(e)g(the)h
-(situation.)150 1789 y Fj(-i)f(<sizespec>)630 1899 y
-Fn(This)19 b(option)i(enables)g(the)g(calculation)g(of)g(con\014dence)h
-(in)m(terv)-5 b(als)20 b(and)h(sets)g(the)h(minim)m(um)630
-2008 y(and)27 b(maxim)m(um)f(n)m(um)m(b)s(er)g(of)i(iterations)e(to)i
-(run)e(in)g(attempting)i(to)g(ac)m(hiev)m(e)h(the)e(desired)630
-2118 y(con\014dence)33 b(in)m(terv)-5 b(al.)46 b(The)32
-b(\014rst)g(v)-5 b(alue)32 b(sets)h(the)g(maxim)m(um)e(n)m(um)m(b)s(er)
-g(of)i(iterations)f(to)630 2228 y(run,)g(the)h(second,)g(the)g(minim)m
-(um.)44 b(The)32 b(maxim)m(um)f(n)m(um)m(b)s(er)h(of)g(iterations)g(is)
-g(silen)m(tly)630 2337 y(capp)s(ed)39 b(at)h(30)g(and)f(the)g(minim)m
-(um)e(is)h(silen)m(tly)g(\015o)s(ored)h(at)h(3.)68 b(Netp)s(erf)39
-b(rep)s(eats)h(the)630 2447 y(measuremen)m(t)30 b(the)h(minim)m(um)c(n)
-m(um)m(b)s(er)h(of)i(iterations)g(and)f(con)m(tin)m(ues)h(un)m(til)e
-(it)i(reac)m(hes)630 2556 y(either)37 b(the)h(desired)f(con\014dence)h
-(in)m(terv)-5 b(al,)39 b(or)f(the)g(maxim)m(um)f(n)m(um)m(b)s(er)f(of)i
-(iterations,)630 2666 y(whic)m(hev)m(er)30 b(comes)h(\014rst.)630
-2798 y(If)26 b(the)g(`)p Fj(-I)p Fn(')g(option)f(is)g(sp)s(eci\014ed)f
-(and)i(the)g(`)p Fj(-i)p Fn(')g(option)f(omitted)h(the)g(maxim)m(um)f
-(n)m(um)m(b)s(er)630 2907 y(of)31 b(iterations)e(is)h(set)h(to)g(10)g
-(and)f(the)g(minim)m(um)e(to)j(three.)630 3039 y(If)h(netp)s(erf)g
-(determines)g(that)h(the)g(desired)f(con\014dence)g(in)m(terv)-5
-b(als)32 b(ha)m(v)m(e)i(not)f(b)s(een)f(met,)630 3148
-y(it)e(emits)g(a)h(noticeable)f(w)m(arning.)150 3302
-y Fj(-l)g(testlen)630 3411 y Fn(This)35 b(option)h(con)m(trols)h(the)g
-(length)f(of)h(an)m(y)g(one)g(iteration)f(of)h(the)g(requested)f(test.)
-61 b(A)630 3521 y(p)s(ositiv)m(e)32 b(v)-5 b(alue)33
-b(for)g Ff(testlen)g Fn(will)e(run)h(eac)m(h)i(iteration)f(of)h(the)f
-(test)h(for)f(at)h(least)g Ff(testlen)630 3630 y Fn(seconds.)61
-b(A)37 b(negativ)m(e)h(v)-5 b(alue)37 b(for)g Ff(testlen)g
-Fn(will)d(run)i(eac)m(h)i(iteration)f(for)g(the)g(absolute)630
-3740 y(v)-5 b(alue)43 b(of)i Ff(testlen)f Fn(transactions)g(for)g(a)p
-2076 3740 28 4 v 84 w(RR)g(test)h(or)f(b)m(ytes)g(for)g(a)p
-3104 3740 V 84 w(STREAM)g(test.)630 3850 y(Certain)d(tests,)47
-b(notably)41 b(those)i(using)e(UDP)h(can)h(only)e(b)s(e)h(timed,)i
-(they)f(cannot)g(b)s(e)630 3959 y(limited)28 b(b)m(y)i(transaction)h
-(or)f(b)m(yte)h(coun)m(t.)630 4091 y(In)38 b(some)h(situations,)g
-(individual)34 b(iterations)k(of)h(a)g(test)h(ma)m(y)f(run)e(for)h
-(longer)g(for)h(the)630 4200 y(n)m(um)m(b)s(er)34 b(of)h(seconds)f(sp)s
-(eci\014ed)g(b)m(y)g(the)i(`)p Fj(-l)p Fn(')e(option.)54
-b(In)34 b(particular,)h(this)f(ma)m(y)h(o)s(ccur)630
-4310 y(for)e(those)g(tests)g(where)g(the)g(so)s(c)m(k)m(et)i(bu\013er)c
-(size\(s\))j(are)f(signi\014can)m(tly)e(longer)h(than)h(the)630
-4419 y(bandwidthXdela)m(y)24 b(pro)s(duct)h(of)i(the)f(link\(s\))f(o)m
-(v)m(er)j(whic)m(h)d(the)i(data)g(connection)g(passes,)630
-4529 y(or)j(those)h(tests)g(where)f(there)h(ma)m(y)g(b)s(e)f
-(non-trivial)e(n)m(um)m(b)s(ers)h(of)h(retransmissions.)150
-4682 y Fj(-L)g(<optionspec>)630 4792 y Fn(This)43 b(option)i(is)f(iden)
-m(tical)g(to)i(the)f(`)p Fj(-H)p Fn(')g(option)g(with)e(the)j
-(di\013erence)e(b)s(eing)g(it)h(sets)630 4902 y(the)p
-805 4902 V 83 w(lo)s(cal)p 1030 4902 V 82 w(hostname/IP)d(and/or)h
-(address)f(family)f(information.)75 b(This)41 b(option)h(is)630
-5011 y(generally)31 b(unnecessary)-8 b(,)31 b(but)g(can)h(b)s(e)e
-(useful)g(when)g(y)m(ou)i(wish)e(to)i(mak)m(e)g(sure)f(that)h(the)630
-5121 y(netp)s(erf)26 b(con)m(trol)h(and)f(data)h(connections)g(go)h
-(via)e(di\013eren)m(t)g(paths.)39 b(It)27 b(can)g(also)g(come-in)630
-5230 y(handy)35 b(if)g(one)h(is)f(trying)h(to)g(run)f(netp)s(erf)g
-(through)g(those)i(evil,)g(end-to-end)f(breaking)630
-5340 y(things)29 b(kno)m(wn)h(as)h(\014rew)m(alls.)p
-eop end
-%%Page: 14 18
-TeXDict begin 14 17 bop 150 -116 a Fn(Chapter)30 b(4:)41
-b(Global)29 b(Command-line)g(Options)1824 b(14)630 299
-y([Default:)58 b(0.0.0.0)42 b(\(eg)e(INADDR)p 1869 299
-28 4 v 41 w(ANY\))g(for)f(IPv4)g(and)f(::0)i(for)f(IPv6)g(for)f(the)i
-(lo)s(cal)630 408 y(name.)h(AF)p 1041 408 V 40 w(UNSPEC)30
-b(for)g(the)h(lo)s(cal)e(address)h(family)-8 b(.])150
-581 y Fj(-n)30 b(numcpus)630 690 y Fn(This)42 b(option)h(tells)g(netp)s
-(erf)g(ho)m(w)h(man)m(y)f(CPUs)h(it)f(should)f(ass-u-me)i(are)g(activ)m
-(e)h(on)630 800 y(the)g(system)h(running)c(netp)s(erf.)84
-b(In)44 b(particular,)j(this)d(is)h(used)f(for)h(the)g(Section)g(3.1)
-630 909 y([CPU)24 b(Utilization],)h(page)g(7)f(and)g(service)g(demand)f
-(calculations.)38 b(On)24 b(certain)g(systems,)630 1019
-y(netp)s(erf)32 b(is)h(able)g(to)h(determine)e(the)i(n)m(um)m(b)s(er)e
-(of)h(CPU's)g(automagically)-8 b(.)50 b(This)31 b(option)630
-1129 y(will)d(o)m(v)m(erride)i(an)m(y)h(n)m(um)m(b)s(er)e(netp)s(erf)g
-(migh)m(t)h(b)s(e)g(able)g(to)h(determine)f(on)g(its)g(o)m(wn.)630
-1270 y(Note)25 b(that)g(this)d(option)i(do)s(es)p 1686
-1270 V 63 w(not)p 1856 1270 V 64 w(set)h(the)f(n)m(um)m(b)s(er)e(of)i
-(CPUs)g(on)g(the)g(system)g(running)630 1379 y(netserv)m(er.)39
-b(When)21 b(netp)s(erf/netserv)m(er)i(cannot)f(automagically)h
-(determine)e(the)h(n)m(um)m(b)s(er)630 1489 y(of)34 b(CPUs)g(that)h
-(can)g(only)e(b)s(e)g(set)i(for)f(netserv)m(er)h(via)f(a)h(netserv)m
-(er)f(`)p Fj(-n)p Fn(')g(command-line)630 1598 y(option.)150
-1771 y Fj(-N)384 b Fn(This)21 b(option)i(tells)f(netp)s(erf)g(to)i
-(forego)g(establishing)c(a)k(con)m(trol)f(connection.)39
-b(This)21 b(mak)m(es)630 1880 y(it)g(is)g(p)s(ossible)f(to)i(run)e
-(some)j(limited)c(netp)s(erf)i(tests)i(without)d(a)j(corresp)s(onding)c
-(netserv)m(er)630 1990 y(on)30 b(the)h(remote)g(system.)630
-2131 y(With)d(this)g(option)g(set,)i(the)f(test)h(to)g(b)s(e)e(run)f
-(is)h(to)i(get)g(all)d(the)i(addressing)f(information)630
-2240 y(it)41 b(needs)g(to)h(establish)e(its)h(data)h(connection)f(from)
-g(the)h(command)f(line)f(or)h(in)m(ternal)630 2350 y(defaults.)50
-b(If)34 b(not)g(otherwise)f(sp)s(eci\014ed)g(b)m(y)g(test-sp)s
-(eci\014c)h(command)g(line)e(options,)j(the)630 2459
-y(data)24 b(connection)g(for)f(a)h(\\STREAM")g(or)f(\\SENDFILE")h(test)
-h(will)c(b)s(e)i(to)h(the)g(\\discard")630 2569 y(p)s(ort,)34
-b(an)f(\\RR")h(test)h(will)30 b(b)s(e)j(to)h(the)g(\\ec)m(ho")i(p)s
-(ort,)e(and)e(a)i(\\MEAR)-8 b(TS")34 b(test)h(will)c(b)s(e)630
-2679 y(to)g(the)g(c)m(hargen)g(p)s(ort.)630 2819 y(The)38
-b(resp)s(onse)f(size)h(of)g(an)g(\\RR")h(test)g(will)c(b)s(e)i(silen)m
-(tly)g(set)h(to)h(b)s(e)f(the)g(same)g(as)h(the)630 2929
-y(request)26 b(size.)40 b(Otherwise)25 b(the)h(test)i(w)m(ould)d(hang)h
-(if)f(the)i(resp)s(onse)e(size)h(w)m(as)h(larger)f(than)630
-3039 y(the)36 b(request)g(size,)h(or)e(w)m(ould)g(rep)s(ort)g(an)g
-(incorrect,)i(in\015ated)e(transaction)h(rate)g(if)f(the)630
-3148 y(resp)s(onse)29 b(size)i(w)m(as)f(less)g(than)g(the)h(request)f
-(size.)630 3289 y(Since)43 b(there)h(is)f(no)g(con)m(trol)h(connection)
-g(when)f(this)g(option)g(is)g(sp)s(eci\014ed,)j(it)d(is)g(not)630
-3399 y(p)s(ossible)33 b(to)j(set)f(\\remote")i(prop)s(erties)d(suc)m(h)
-h(as)g(so)s(c)m(k)m(et)i(bu\013er)d(size)h(and)g(the)g(lik)m(e)f(via)
-630 3508 y(the)27 b(netp)s(erf)f(command)g(line.)38 b(Nor)27
-b(is)f(it)g(p)s(ossible)f(to)i(retriev)m(e)g(suc)m(h)g(in)m(teresting)f
-(remote)630 3618 y(information)31 b(as)h(CPU)g(utilization.)45
-b(These)32 b(items)g(will)e(b)s(e)h(set)i(to)g(v)-5 b(alues)32
-b(whic)m(h)f(when)630 3727 y(displa)m(y)m(ed)e(should)f(mak)m(e)k(it)e
-(immediately)e(ob)m(vious)i(that)h(w)m(as)g(the)f(case.)630
-3868 y(The)41 b(only)g(w)m(a)m(y)i(to)f(c)m(hange)h(remote)g(c)m
-(haracteristics)f(suc)m(h)f(as)h(so)s(c)m(k)m(et)i(bu\013er)c(size)i
-(or)630 3978 y(to)d(obtain)g(information)e(suc)m(h)h(as)h(CPU)f
-(utilization)f(is)h(to)h(emplo)m(y)g(platform-sp)s(eci\014c)630
-4088 y(metho)s(ds)26 b(on)g(the)h(remote)h(system.)40
-b(F)-8 b(rankly)g(,)27 b(if)f(one)h(has)f(access)i(to)f(the)g(remote)h
-(system)630 4197 y(to)33 b(emplo)m(y)e(those)i(metho)s(ds)e(one)h(augh)
-m(t)h(to)f(b)s(e)f(able)h(to)g(run)f(a)h(netserv)m(er)g(there.)46
-b(Ho)m(w-)630 4307 y(ev)m(er,)29 b(that)f(abilit)m(y)e(ma)m(y)j(not)f
-(b)s(e)f(presen)m(t)g(in)f(certain)i(\\supp)s(ort")f(situations,)g
-(hence)h(the)630 4416 y(addition)h(of)h(this)f(option.)630
-4557 y(Added)g(in)g(netp)s(erf)h(2.4.3.)150 4729 y Fj(-o)g(<sizespec>)
-630 4839 y Fn(The)j(v)-5 b(alue\(s\))33 b(passed-in)f(with)h(this)f
-(option)h(will)e(b)s(e)i(used)f(as)i(an)f(o\013set)i(added)e(to)h(the)
-630 4949 y(alignmen)m(t)c(sp)s(eci\014ed)e(with)h(the)i(`)p
-Fj(-a)p Fn(')f(option.)40 b(F)-8 b(or)32 b(example:)870
-5089 y Fj(-o)47 b(3)h(-a)f(4096)630 5230 y Fn(will)30
-b(cause)k(the)f(bu\013ers)f(passed)h(to)h(the)f(lo)s(cal)f(send)h(and)f
-(receiv)m(e)i(calls)e(to)i(b)s(egin)e(three)630 5340
-y(b)m(ytes)f(past)f(an)h(address)e(aligned)g(to)i(4096)h(b)m(ytes.)42
-b([Default:)f(0)31 b(b)m(ytes])p eop end
-%%Page: 15 19
-TeXDict begin 15 18 bop 150 -116 a Fn(Chapter)30 b(4:)41
-b(Global)29 b(Command-line)g(Options)1824 b(15)150 299
-y Fj(-O)30 b(<sizespec>)630 408 y Fn(This)k(option)h(b)s(eha)m(v)m(es)i
-(just)e(as)h(the)g(`)p Fj(-o)p Fn(')g(option)f(but)g(on)h(the)g(remote)
-h(system)f(and)f(in)630 518 y(conjunction)29 b(with)g(the)i(`)p
-Fj(-A)p Fn(')f(option.)41 b([Default:)g(0)30 b(b)m(ytes])150
-664 y Fj(-p)g(<optionspec>)630 774 y Fn(The)39 b(\014rst)f(v)-5
-b(alue)38 b(of)h(the)h(optionsp)s(ec)e(passed-in)f(with)h(this)g
-(option)h(tells)f(netp)s(erf)g(the)630 883 y(p)s(ort)29
-b(n)m(um)m(b)s(er)g(at)h(whic)m(h)f(it)g(should)f(exp)s(ect)j(the)f
-(remote)g(netserv)m(er)h(to)f(b)s(e)g(listening)d(for)630
-993 y(con)m(trol)i(connections.)40 b(The)28 b(second)g(v)-5
-b(alue)28 b(of)g(the)h(optionsp)s(ec)e(will)f(request)i(netp)s(erf)f
-(to)630 1103 y(bind)h(to)k(that)f(lo)s(cal)f(p)s(ort)h(n)m(um)m(b)s(er)
-e(b)s(efore)h(establishing)f(the)i(con)m(trol)g(connection.)42
-b(F)-8 b(or)630 1212 y(example)870 1340 y Fj(-p)47 b(12345)630
-1468 y Fn(tells)40 b(netp)s(erf)f(that)i(the)g(remote)g(netserv)m(er)g
-(is)f(listening)e(on)i(p)s(ort)g(12345)j(and)d(lea)m(v)m(es)630
-1577 y(selection)e(of)h(the)g(lo)s(cal)f(p)s(ort)f(n)m(um)m(b)s(er)h
-(for)g(the)h(con)m(trol)g(connection)f(up)g(to)h(the)g(lo)s(cal)630
-1687 y(TCP/IP)30 b(stac)m(k)h(whereas)870 1815 y Fj(-p)47
-b(,32109)630 1943 y Fn(lea)m(v)m(es)34 b(the)f(remote)g(netserv)m(er)g
-(p)s(ort)f(at)h(the)g(default)f(v)-5 b(alue)32 b(of)h(12865)h(and)e
-(causes)h(net-)630 2052 y(p)s(erf)i(to)i(bind)d(to)j(the)f(lo)s(cal)g
-(p)s(ort)f(n)m(um)m(b)s(er)g(32109)j(b)s(efore)e(connecting)h(to)g(the)
-f(remote)630 2162 y(netserv)m(er.)630 2290 y(In)29 b(general,)h
-(setting)g(the)f(lo)s(cal)g(p)s(ort)g(n)m(um)m(b)s(er)g(is)f(only)h
-(necessary)h(when)f(one)g(is)g(lo)s(oking)630 2399 y(to)23
-b(run)d(netp)s(erf)h(through)g(those)h(evil,)h(end-to-end)e(breaking)g
-(things)g(kno)m(wn)g(as)h(\014rew)m(alls.)150 2545 y
-Fj(-P)30 b(0|1)210 b Fn(A)25 b(v)-5 b(alue)25 b(of)g(\\1")i(for)d(the)i
-(`)p Fj(-P)p Fn(')f(option)f(will)f(enable)h(displa)m(y)g(of)h(the)g
-(test)h(banner.)38 b(A)25 b(v)-5 b(alue)630 2655 y(of)25
-b(\\0")h(will)c(disable)g(displa)m(y)h(of)i(the)g(test)g(banner.)38
-b(One)24 b(migh)m(t)g(w)m(an)m(t)i(to)f(disable)e(displa)m(y)630
-2765 y(of)30 b(the)g(test)h(banner)d(when)h(running)e(the)j(same)g
-(basic)f(test)i(t)m(yp)s(e)f(\(eg)h(TCP)p 3285 2765 28
-4 v 39 w(STREAM\))630 2874 y(m)m(ultiple)20 b(times)i(in)f(succession)h
-(where)g(the)g(test)h(banners)e(w)m(ould)h(then)g(simply)d(b)s(e)j
-(redun-)630 2984 y(dan)m(t)31 b(and)e(unnecessarily)g(clutter)h(the)g
-(output.)41 b([Default:)g(1)31 b(-)f(displa)m(y)f(test)i(banners])150
-3130 y Fj(-t)f(testname)630 3240 y Fn(This)22 b(option)h(is)f(used)h
-(to)i(tell)d(netp)s(erf)h(whic)m(h)f(test)j(y)m(ou)f(wish)e(to)i(run.)
-37 b(As)23 b(of)h(this)f(writing,)630 3349 y(v)-5 b(alid)29
-b(v)-5 b(alues)29 b(for)i Ff(testname)36 b Fn(include:)705
-3477 y Fk(\017)60 b Fn(Section)41 b(5.2.1)i([TCP)p 1592
-3477 V 39 w(STREAM],)e(page)h(20,)j(Section)40 b(5.2.2)j([TCP)p
-3277 3477 V 40 w(MAER)-8 b(TS],)810 3587 y(page)76 b(21,)88
-b(Section)75 b(5.2.3)i([TCP)p 2120 3587 V 40 w(SENDFILE],)e(page)h(21,)
-88 b(Section)75 b(6.2.1)810 3696 y([TCP)p 1035 3696 V
-39 w(RR],)49 b(page)g(28,)54 b(Section)48 b(6.2.3)i([TCP)p
-2496 3696 V 40 w(CRR],)e(page)h(29,)54 b(Section)48 b(6.2.2)810
-3806 y([TCP)p 1035 3806 V 39 w(CC],)31 b(page)g(29)705
-3934 y Fk(\017)60 b Fn(Section)29 b(5.2.4)h([UDP)p 1572
-3934 V 41 w(STREAM],)f(page)g(22,)h(Section)f(6.2.4)i([UDP)p
-3201 3934 V 40 w(RR],)f(page)f(30)705 4061 y Fk(\017)60
-b Fn(Section)126 b(5.2.5)i([XTI)p 1735 4061 V 40 w(TCP)p
-1969 4061 V 39 w(STREAM],)e(page)h(23,)151 b(Section)126
-b(6.2.5)810 4171 y([XTI)p 1008 4171 V 40 w(TCP)p 1242
-4171 V 39 w(RR],)71 b(page)h(30,)82 b(Section)70 b(6.2.7)j([XTI)p
-2794 4171 V 40 w(TCP)p 3028 4171 V 39 w(CRR],)d(page)i(31,)810
-4281 y(Section)30 b(6.2.6)i([XTI)p 1543 4281 V 40 w(TCP)p
-1777 4281 V 39 w(CC],)f(page)g(31)705 4408 y Fk(\017)60
-b Fn(Section)125 b(5.2.6)i([XTI)p 1733 4408 V 40 w(UDP)p
-1972 4408 V 40 w(STREAM],)e(page)h(23,)150 b(Section)125
-b(6.2.8)810 4518 y([XTI)p 1008 4518 V 40 w(UDP)p 1247
-4518 V 40 w(RR],)31 b(page)g(31)705 4646 y Fk(\017)60
-b Fn(Section)c(5.2.7)i([SCTP)p 1673 4646 V 39 w(STREAM],)d(page)i(23,)
-64 b(Section)55 b(6.2.11)k([SCTP)p 3533 4646 V 39 w(RR],)810
-4755 y(page)31 b(31)705 4883 y Fk(\017)60 b Fn(Section)51
-b(5.2.8)h([DLCO)p 1680 4883 V 40 w(STREAM],)f(page)g(24,)57
-b(Section)51 b(6.2.10)i([DLCO)p 3532 4883 V 40 w(RR],)810
-4993 y(page)77 b(31,)89 b(Section)76 b(5.2.9)j([DLCL)p
-2180 4993 V 40 w(STREAM],)d(page)h(24,)89 b(Section)76
-b(6.2.9)810 5103 y([DLCL)p 1090 5103 V 40 w(RR],)31 b(page)g(31)705
-5230 y Fk(\017)60 b Fn(Chapter)24 b(9)i([Other)e(Netp)s(erf)h(T)-8
-b(ests],)27 b(page)e(39,)i(Chapter)e(9)g([Other)f(Netp)s(erf)h(T)-8
-b(ests],)810 5340 y(page)31 b(39)p eop end
-%%Page: 16 20
-TeXDict begin 16 19 bop 150 -116 a Fn(Chapter)30 b(4:)41
-b(Global)29 b(Command-line)g(Options)1824 b(16)630 299
-y(Not)50 b(all)d(tests)j(are)f(alw)m(a)m(ys)g(compiled)f(in)m(to)g
-(netp)s(erf.)95 b(In)48 b(particular,)k(the)d(\\XTI,")630
-408 y(\\SCTP)-8 b(,")43 b(\\UNIX,")g(and)f(\\DL*")i(tests)f(are)g(only)
-f(included)d(in)j(netp)s(erf)f(when)g(con-)630 518 y(\014gured)29
-b(with)g(`)p Fj(--enable-[xti|sctp|unix|dlp)o(i]=)o(yes)p
-Fn('.)630 653 y(Netp)s(erf)36 b(only)g(runs)f(one)i(t)m(yp)s(e)g(of)g
-(test)g(no)g(matter)g(ho)m(w)g(man)m(y)g(`)p Fj(-t)p
-Fn(')f(options)g(ma)m(y)i(b)s(e)630 762 y(presen)m(t)g(on)f(the)h
-(command-line.)61 b(The)37 b(last)g(`)p Fj(-t)p Fn(')h(global)e
-(command-line)h(option)g(will)630 872 y(determine)29
-b(the)i(test)g(to)g(b)s(e)f(run.)39 b([Default:)j(TCP)p
-2411 872 28 4 v 39 w(STREAM])150 1031 y Fj(-v)30 b(verbosity)630
-1141 y Fn(This)24 b(option)h(con)m(trols)g(ho)m(w)h(v)m(erb)s(ose)f
-(netp)s(erf)g(will)e(b)s(e)h(in)g(its)h(output,)i(and)d(is)h(often)h
-(used)630 1250 y(in)e(conjunction)g(with)g(the)i(`)p
-Fj(-P)p Fn(')f(option.)38 b(If)25 b(the)h(v)m(erb)s(osit)m(y)f(is)f
-(set)i(to)g(a)f(v)-5 b(alue)25 b(of)h(\\0")g(then)630
-1360 y(only)33 b(the)i(test's)g(SFM)g(\(Single)e(Figure)h(of)g(Merit\))
-h(is)e(displa)m(y)m(ed.)51 b(If)34 b(lo)s(cal)g(Section)g(3.1)630
-1469 y([CPU)d(Utilization],)f(page)i(7)g(is)e(requested)h(via)g(the)g
-(`)p Fj(-c)p Fn(')g(option)f(then)h(the)g(SFM)h(is)e(the)630
-1579 y(lo)s(cal)e(service)h(demand.)39 b(Othersise,)28
-b(if)g(remote)i(CPU)e(utilization)f(is)h(requested)g(via)h(the)630
-1689 y(`)p Fj(-C)p Fn(')37 b(option)g(then)g(the)g(SFM)g(is)f(the)i
-(remote)g(service)f(demand.)60 b(If)37 b(neither)f(lo)s(cal)g(nor)630
-1798 y(remote)23 b(CPU)f(utilization)e(are)j(requested)f(the)h(SFM)f
-(will)e(b)s(e)h(the)i(measured)e(throughput)630 1908
-y(or)30 b(transaction)h(rate)g(as)g(implied)c(b)m(y)j(the)h(test)g(sp)s
-(eci\014ed)e(with)g(the)h(`)p Fj(-t)p Fn(')h(option.)630
-2042 y(If)h(the)g(v)m(erb)s(osit)m(y)g(lev)m(el)g(is)f(set)i(to)g(\\1")
-h(then)d(the)i(\\normal")f(netp)s(erf)f(result)g(output)h(for)630
-2152 y(eac)m(h)g(test)f(is)e(displa)m(y)m(ed.)630 2286
-y(If)34 b(the)g(v)m(erb)s(osit)m(y)g(lev)m(el)g(is)f(set)i(to)g(\\2")g
-(then)f(\\extra")i(information)c(will)g(b)s(e)h(displa)m(y)m(ed.)630
-2396 y(This)d(ma)m(y)i(include,)e(but)h(is)f(not)i(limited)e(to)i(the)g
-(n)m(um)m(b)s(er)e(of)i(send)f(or)g(recv)h(calls)f(made)630
-2506 y(and)k(the)h(a)m(v)m(erage)i(n)m(um)m(b)s(er)d(of)h(b)m(ytes)g(p)
-s(er)f(send)f(or)i(recv)g(call,)h(or)e(a)i(histogram)e(of)h(the)630
-2615 y(time)30 b(sp)s(en)m(t)g(in)g(eac)m(h)i(send\(\))e(call)g(or)h
-(for)f(eac)m(h)i(transaction)e(if)g(netp)s(erf)g(w)m(as)h(con\014gured)
-630 2725 y(with)e(`)p Fj(--enable-histogram=yes)p Fn('.)35
-b([Default:)41 b(1)31 b(-)g(normal)e(v)m(erb)s(osit)m(y])150
-2884 y Fj(-w)h(time)162 b Fn(If)30 b(netp)s(erf)g(w)m(as)h
-(con\014gured)f(with)f(`)p Fj(--enable-intervals=yes)p
-Fn(')c(then)31 b(this)e(v)-5 b(alue)31 b(will)630 2994
-y(set)37 b(the)g(in)m(ter-burst)e(time)h(to)h(time)f(milliseconds,)f
-(and)g(the)i(`)p Fj(-b)p Fn(')f(option)g(will)e(set)j(the)630
-3103 y(n)m(um)m(b)s(er)25 b(of)i(sends)f(p)s(er)f(burst.)39
-b(The)26 b(actual)h(in)m(ter-burst)e(time)h(ma)m(y)h(v)-5
-b(ary)27 b(dep)s(ending)d(on)630 3213 y(the)31 b(system's)f(timer)g
-(resolution.)150 3372 y Fj(-W)g(<sizespec>)630 3482 y
-Fn(This)d(option)i(con)m(trols)g(the)g(n)m(um)m(b)s(er)f(of)h
-(bu\013ers)e(in)h(the)h(send)f(\(\014rst)h(or)g(only)f(v)-5
-b(alue\))29 b(and)630 3592 y(or)d(receiv)m(e)h(\(second)g(or)f(only)f
-(v)-5 b(alue\))26 b(bu\013er)f(rings.)38 b(Unlik)m(e)25
-b(some)i(b)s(enc)m(hmarks,)f(netp)s(erf)630 3701 y(do)s(es)36
-b(not)h(con)m(tin)m(uously)e(send)g(or)h(receiv)m(e)i(from)d(a)i
-(single)e(bu\013er.)58 b(Instead)36 b(it)g(rotates)630
-3811 y(through)41 b(a)g(ring)f(of)h(bu\013ers.)72 b([Default:)63
-b(One)41 b(more)g(than)g(the)h(size)f(of)g(the)h(send)e(or)630
-3920 y(receiv)m(e)29 b(so)s(c)m(k)m(et)g(bu\013er)e(sizes)h(\(`)p
-Fj(-s)p Fn(')g(and/or)f(`)p Fj(-S)p Fn(')h(options\))f(divided)f(b)m(y)
-h(the)h(send)f(`)p Fj(-m)p Fn(')h(or)630 4030 y(receiv)m(e)j(`)p
-Fj(-M)p Fn(')f(bu\013er)g(size)g(resp)s(ectiv)m(ely])150
-4189 y Fj(-4)384 b Fn(Sp)s(ecifying)37 b(this)h(option)h(will)d(set)k
-(b)s(oth)f(the)g(lo)s(cal)g(and)f(remote)j(address)d(families)f(to)630
-4299 y(AF)p 763 4299 V 41 w(INET)g(-)i(that)g(is)f(use)g(only)f(IPv4)i
-(addresses)f(on)g(the)h(con)m(trol)g(connection.)65 b(This)630
-4408 y(can)33 b(b)s(e)e(o)m(v)m(erridden)h(b)m(y)g(a)g(subsequen)m(t)g
-(`)p Fj(-6)p Fn(',)h(`)p Fj(-H)p Fn(')f(or)g(`)p Fj(-L)p
-Fn(')g(option.)46 b(Basically)-8 b(,)33 b(the)f(last)630
-4518 y(option)42 b(explicitly)e(sp)s(ecifying)g(an)i(address)g(family)f
-(wins.)74 b(Unless)42 b(o)m(v)m(erridden)f(b)m(y)i(a)630
-4628 y(test-sp)s(eci\014c)30 b(option,)h(this)e(will)f(b)s(e)h
-(inherited)f(for)i(the)h(data)g(connection)g(as)f(w)m(ell.)150
-4787 y Fj(-6)384 b Fn(Sp)s(ecifying)35 b(this)i(option)g(will)e(set)j
-(b)s(oth)f(lo)s(cal)f(and)h(and)g(remote)i(address)e(families)e(to)630
-4897 y(AF)p 763 4897 V 41 w(INET6)g(-)g(that)h(is)e(use)h(only)f(IPv6)i
-(addresses)e(on)h(the)h(con)m(trol)f(connection.)56 b(This)630
-5006 y(can)33 b(b)s(e)e(o)m(v)m(erridden)h(b)m(y)g(a)g(subsequen)m(t)g
-(`)p Fj(-4)p Fn(',)h(`)p Fj(-H)p Fn(')f(or)g(`)p Fj(-L)p
-Fn(')g(option.)46 b(Basically)-8 b(,)33 b(the)f(last)630
-5116 y(address)40 b(family)f(explicitly)g(sp)s(eci\014ed)g(wins.)70
-b(Unless)40 b(o)m(v)m(erridden)g(b)m(y)h(a)g(test-sp)s(eci\014c)630
-5225 y(option,)30 b(this)f(will)f(b)s(e)i(inherited)e(for)i(the)h(data)
-g(connection)f(as)h(w)m(ell.)p eop end
-%%Page: 17 21
-TeXDict begin 17 20 bop 150 -116 a Fn(Chapter)30 b(5:)41
-b(Using)29 b(Netp)s(erf)i(to)g(Measure)f(Bulk)g(Data)i(T)-8
-b(ransfer)1210 b(17)150 299 y Fi(5)80 b(Using)54 b(Netp)t(erf)f(to)h
-(Measure)f(Bulk)h(Data)g(T)-13 b(ransfer)150 515 y Fn(The)32
-b(most)h(commonly)f(measured)h(asp)s(ect)g(of)f(net)m(w)m(ork)m(ed)i
-(system)f(p)s(erformance)f(is)g(that)h(of)g(bulk)e(or)150
-624 y(unidirectional)f(transfer)i(p)s(erformance.)48
-b(Ev)m(ery)m(one)34 b(w)m(an)m(ts)g(to)g(kno)m(w)e(ho)m(w)i(man)m(y)f
-(bits)e(or)i(b)m(ytes)h(p)s(er)150 734 y(second)e(they)g(can)g(push)e
-(across)i(the)g(net)m(w)m(ork.)46 b(The)31 b(netp)s(erf)g(con)m(v)m(en)
-m(tion)i(for)f(a)g(bulk)e(data)i(transfer)150 844 y(test)f(name)g(is)e
-(to)i(tac)m(k)h(a)f(\\)p 1096 844 28 4 v 40 w(STREAM")g(su\016x)e(to)i
-(a)g(test)g(name.)150 1069 y Fm(5.1)68 b(Issues)45 b(in)g(Bulk)g(T)-11
-b(ransfer)150 1228 y Fn(There)30 b(are)h(an)m(y)f(n)m(um)m(b)s(er)f(of)
-i(things)e(whic)m(h)g(can)i(a\013ect)h(the)e(p)s(erformance)g(of)h(a)f
-(bulk)f(transfer)h(test.)275 1359 y(Certainly)-8 b(,)41
-b(absen)m(t)f(compression,)h(bulk-transfer)d(tests)j(can)f(b)s(e)f
-(limited)e(b)m(y)j(the)g(sp)s(eed)f(of)h(the)150 1468
-y(slo)m(w)m(est)35 b(link)e(in)g(the)i(path)f(from)h(the)f(source)h(to)
-g(the)g(destination.)53 b(If)34 b(testing)h(o)m(v)m(er)g(a)g(gigabit)g
-(link,)150 1578 y(y)m(ou)c(will)c(not)k(see)g(more)f(than)g(a)h
-(gigabit)f(:\))40 b(Suc)m(h)30 b(situations)f(can)i(b)s(e)e(describ)s
-(ed)f(as)j(b)s(eing)e Ff(net)m(w)m(ork-)150 1688 y(limited)j
-Fn(or)e Ff(NIC-limited)p Fn(.)275 1819 y(CPU)24 b(utilization)f(can)i
-(also)f(a\013ect)j(the)e(results)e(of)i(a)g(bulk-transfer)e(test.)40
-b(If)24 b(the)h(net)m(w)m(orking)f(stac)m(k)150 1928
-y(requires)35 b(a)h(certain)g(n)m(um)m(b)s(er)e(of)j(instructions)c(or)
-j(CPU)g(cycles)g(p)s(er)f(KB)h(of)g(data)h(transferred,)g(and)150
-2038 y(the)29 b(CPU)g(is)e(limited)g(in)h(the)h(n)m(um)m(b)s(er)e(of)i
-(instructions)e(or)i(cycles)g(it)f(can)h(pro)m(vide,)g(then)f(the)h
-(transfer)150 2147 y(can)i(b)s(e)e(describ)s(ed)g(as)h(b)s(eing)f
-Ff(CPU-b)s(ound)p Fn(.)275 2278 y(A)f(bulk-transfer)f(test)i(can)g(b)s
-(e)f(CPU)g(b)s(ound)f(ev)m(en)i(when)e(netp)s(erf)h(rep)s(orts)g(less)f
-(than)i(100\045)g(CPU)150 2388 y(utilization.)55 b(This)34
-b(can)i(happ)s(en)e(on)i(an)f(MP)h(system)g(where)f(one)h(or)g(more)g
-(of)g(the)g(CPUs)f(saturate)150 2497 y(at)c(100\045)g(but)f(other)g
-(CPU's)g(remain)f(idle.)39 b(T)m(ypically)-8 b(,)29 b(a)i(single)e
-(\015o)m(w)h(of)g(data,)i(suc)m(h)e(as)g(that)h(from)f(a)150
-2607 y(single)22 b(instance)g(of)i(a)f(netp)s(erf)p 1220
-2607 V 62 w(STREAM)g(test)h(cannot)f(mak)m(e)h(use)f(of)g(m)m(uc)m(h)g
-(more)h(than)e(the)i(p)s(o)m(w)m(er)f(of)150 2716 y(one)k(CPU.)h
-(Exceptions)e(to)i(this)e(generally)h(o)s(ccur)g(when)f(netp)s(erf)g
-(and/or)h(netserv)m(er)h(run)e(on)h(CPU\(s\))150 2826
-y(other)k(than)f(the)g(CPU\(s\))h(taking)f(in)m(terrupts)f(from)h(the)g
-(NIC\(s\).)275 2957 y(Distance)c(and)f(the)i(sp)s(eed-of-ligh)m(t)e
-(can)h(a\013ect)h(p)s(erformance)f(for)f(a)i(bulk-transfer;)e(often)i
-(this)e(can)150 3066 y(b)s(e)g(mitigated)f(b)m(y)h(using)f(larger)h
-(windo)m(ws.)37 b(One)25 b(common)g(limit)e(to)j(the)f(p)s(erformance)g
-(of)g(a)h(transp)s(ort)150 3176 y(using)j(windo)m(w-based)g(\015o)m
-(w-con)m(trol)i(is:)390 3307 y Fj(Throughput)45 b(<=)i
-(WindowSize/RoundTripTime)275 3438 y Fn(As)35 b(the)h(sender)f(can)h
-(only)f(ha)m(v)m(e)i(a)g(windo)m(w's-w)m(orth)d(of)i(data)h
-(outstanding)e(on)h(the)g(net)m(w)m(ork)g(at)150 3547
-y(an)m(y)30 b(one)g(time,)g(and)f(the)h(so)s(onest)g(the)g(sender)f
-(can)h(receiv)m(e)h(a)f(windo)m(w)e(up)s(date)h(from)h(the)g(receiv)m
-(er)g(is)150 3657 y(one)h(RoundT)-8 b(ripTime)26 b(\(R)-8
-b(TT\).)31 b(TCP)f(and)g(SCTP)f(are)h(examples)g(of)h(suc)m(h)f(proto)s
-(cols.)275 3788 y(P)m(ac)m(k)m(et)d(losses)d(and)g(their)g(e\013ects)i
-(can)f(b)s(e)f(particularly)e(bad)i(for)g(p)s(erformance.)38
-b(This)23 b(is)h(esp)s(ecially)150 3897 y(true)32 b(if)g(the)h(pac)m(k)
-m(et)i(losses)d(result)g(in)f(retransmission)f(timeouts)j(for)f(the)h
-(proto)s(col\(s\))g(in)m(v)m(olv)m(ed.)48 b(By)150 4007
-y(the)33 b(time)g(a)h(retransmission)d(timeout)i(has)g(happ)s(ened,)f
-(the)i(\015o)m(w)f(or)g(connection)g(has)g(sat)h(idle)e(for)h(a)150
-4117 y(considerable)c(length)h(of)g(time.)275 4247 y(On)40
-b(man)m(y)g(platforms,)j(some)e(v)-5 b(arian)m(t)41 b(on)g(the)g
-Fj(netstat)e Fn(command)i(can)g(b)s(e)f(used)g(to)i(retriev)m(e)150
-4357 y(statistics)30 b(ab)s(out)g(pac)m(k)m(et)j(loss)c(and)h
-(retransmission.)39 b(F)-8 b(or)31 b(example:)390 4488
-y Fj(netstat)46 b(-p)h(tcp)275 4619 y Fn(will)34 b(retriev)m(e)j(TCP)g
-(statistics)g(on)g(the)g(HP-UX)h(Op)s(erating)d(System.)61
-b(On)36 b(other)h(platforms,)h(it)150 4728 y(ma)m(y)31
-b(not)g(b)s(e)e(p)s(ossible)f(to)j(retriev)m(e)g(statistics)f(for)h(a)f
-(sp)s(eci\014c)g(proto)s(col)g(and)g(something)f(lik)m(e:)390
-4859 y Fj(netstat)46 b(-s)275 4990 y Fn(w)m(ould)29 b(b)s(e)g(used)h
-(instead.)275 5121 y(Man)m(y)36 b(times,)g(suc)m(h)f(net)m(w)m(ork)h
-(statistics)f(are)h(k)m(eep)g(since)f(the)g(time)g(the)h(stac)m(k)g
-(started,)i(and)c(w)m(e)150 5230 y(are)i(only)e(really)h(in)m(terested)
-g(in)g(statistics)g(from)g(when)g(netp)s(erf)f(w)m(as)i(running.)53
-b(In)35 b(suc)m(h)g(situations)150 5340 y(something)30
-b(along)g(the)h(lines)d(of:)p eop end
-%%Page: 18 22
-TeXDict begin 18 21 bop 150 -116 a Fn(Chapter)30 b(5:)41
-b(Using)29 b(Netp)s(erf)i(to)g(Measure)f(Bulk)g(Data)i(T)-8
-b(ransfer)1210 b(18)390 299 y Fj(netstat)46 b(-p)h(tcp)g(>)g(before)390
-408 y(netperf)f(-t)h(TCP_mumble...)390 518 y(netstat)f(-p)h(tcp)g(>)g
-(after)275 655 y Fn(is)27 b(indicated.)38 b(The)28 b(b)s(eforeafter)g
-(\()p Fj(ftp://ftp.cup.hp.com/dist/n)o(etw)o(orki)o(ng/t)o(ool)o(s/)p
-Fn(\))22 b(util-)150 765 y(it)m(y)30 b(can)h(b)s(e)f(used)f(to)i
-(subtract)g(the)f(statistics)h(in)e(`)p Fj(before)p Fn(')g(from)h(the)g
-(statistics)h(in)e(`)p Fj(after)p Fn(')390 901 y Fj(beforeafter)45
-b(before)h(after)g(>)i(delta)275 1038 y Fn(and)34 b(then)g(one)i(can)f
-(lo)s(ok)f(at)i(the)f(statistics)g(in)e(`)p Fj(delta)p
-Fn('.)54 b(Beforeafter)36 b(is)e(distributed)e(in)i(source)150
-1148 y(form)c(so)h(one)f(can)h(compile)e(it)h(on)g(the)h(platofrm\(s\))
-f(of)g(in)m(terest.)275 1285 y(While)73 b(it)h(w)m(as)g(written)g(with)
-f(HP-UX's)i(netstat)g(in)e(mind,)84 b(the)74 b(annotated)i(netstat)150
-1394 y(\()p Fj(ftp://ftp.cup.hp.com/dist/)o(net)o(work)o(ing/)o(bri)o
-(efs/)o(anno)o(tat)o(ed_n)o(etst)o(at.)o(txt)p Fn(\))118
-b(writeup)150 1504 y(ma)m(y)31 b(b)s(e)f(helpful)d(with)i(other)i
-(platforms)e(as)i(w)m(ell.)150 1740 y Fm(5.2)68 b(Options)45
-b(common)g(to)h(TCP)e(UDP)h(and)g(SCTP)f(tests)150 1900
-y Fn(Man)m(y)28 b(\\test-sp)s(eci\014c")g(options)f(are)g(actually)g
-(common)g(across)h(the)f(di\013eren)m(t)g(tests.)41 b(F)-8
-b(or)27 b(those)h(tests)150 2009 y(in)m(v)m(olving)d(TCP)-8
-b(,)27 b(UDP)g(and)f(SCTP)-8 b(,)26 b(whether)g(using)f(the)i(BSD)g(So)
-s(c)m(k)m(ets)h(or)f(the)g(XTI)f(in)m(terface)h(those)150
-2119 y(common)k(options)e(include:)150 2282 y Fj(-h)384
-b Fn(Displa)m(y)29 b(the)h(test-suite-sp)s(eci\014c)g(usage)h(string)e
-(and)g(exit.)41 b(F)-8 b(or)31 b(a)f(TCP)p 3159 2282
-28 4 v 69 w(or)h(UDP)p 3539 2282 V 70 w(test)630 2391
-y(this)22 b(will)f(b)s(e)i(the)h(usage)g(string)e(from)h(the)h(source)f
-(\014le)g(nettest)p 2771 2391 V 41 w(bsd.c.)38 b(F)-8
-b(or)24 b(an)g(XTI)p 3521 2391 V 63 w(test,)630 2501
-y(this)36 b(will)f(b)s(e)h(the)h(usage)h(string)e(from)h(the)g(source)h
-(\014le)e(nettest)p 2908 2501 V 41 w(xti.c.)61 b(F)-8
-b(or)38 b(an)f(SCTP)630 2611 y(test,)32 b(this)d(will)f(b)s(e)h(the)i
-(usage)g(string)e(from)h(the)h(source)f(\014le)g(nettest)p
-3043 2611 V 41 w(sctp.c.)150 2772 y Fj(-H)g(<optionspec>)630
-2882 y Fn(Normally)-8 b(,)28 b(the)f(remote)i(hostname)p
-Fj(|)p Fn(IP)e(and)g(address)f(family)g(information)g(is)g(inherited)
-630 2992 y(from)k(the)h(settings)g(for)g(the)g(con)m(trol)g(connection)
-g(\(eg)h(global)f(command-line)e(`)p Fj(-H)p Fn(',)i(`)p
-Fj(-4)p Fn(')630 3101 y(and/or)i(`)p Fj(-6)p Fn(')g(options\).)50
-b(The)33 b(test-sp)s(eci\014c)g(`)p Fj(-H)p Fn(')g(will)e(o)m(v)m
-(erride)i(those)h(settings)g(for)f(the)630 3211 y(data)41
-b(\(ak)-5 b(a)42 b(test\))g(connection)f(only)-8 b(.)71
-b(Settings)40 b(for)g(the)h(con)m(trol)g(connection)g(are)g(left)630
-3320 y(unc)m(hanged.)150 3482 y Fj(-L)30 b(<optionspec>)630
-3592 y Fn(The)k(test-sp)s(eci\014c)h(`)p Fj(-L)p Fn(')g(option)f(is)g
-(iden)m(tical)f(to)i(the)g(test-sp)s(eci\014c)g(`)p Fj(-H)p
-Fn(')g(option)f(except)630 3701 y(it)i(a\013ects)i(the)f(lo)s(cal)f
-(hostname)p Fj(|)p Fn(IP)g(and)g(address)f(family)g(information.)58
-b(As)36 b(with)g(its)630 3811 y(global)29 b(command-line)e(coun)m
-(terpart,)k(this)d(is)g(generally)h(only)f(useful)g(when)g(measuring)
-630 3920 y(though)i(those)h(evil,)e(end-to-end)i(breaking)e(things)h
-(called)f(\014rew)m(alls.)150 4082 y Fj(-m)h(bytes)114
-b Fn(Set)40 b(the)g(size)g(of)g(the)g(bu\013er)f(passed-in)f(to)i(the)g
-(\\send")g(calls)f(of)h(a)p 3108 4082 V 81 w(STREAM)f(test.)630
-4192 y(Note)33 b(that)g(this)e(ma)m(y)h(ha)m(v)m(e)i(only)d(an)h
-(indirect)e(e\013ect)j(on)f(the)g(size)g(of)g(the)h(pac)m(k)m(ets)g
-(sen)m(t)630 4301 y(o)m(v)m(er)39 b(the)e(net)m(w)m(ork,)j(and)c
-(certain)i(La)m(y)m(er)g(4)f(proto)s(cols)g(do)p 2748
-4301 V 77 w(not)p 2918 4301 V 78 w(preserv)m(e)g(or)g(enforce)630
-4411 y(message)31 b(b)s(oundaries,)c(so)i(setting)h(`)p
-Fj(-m)p Fn(')f(for)g(the)h(send)f(size)g(do)s(es)g(not)h(necessarily)e
-(mean)630 4521 y(the)h(receiv)m(er)h(will)c(receiv)m(e)k(that)g(man)m
-(y)f(b)m(ytes)h(at)g(an)m(y)f(one)h(time.)40 b(By)29
-b(default)f(the)i(units)630 4630 y(are)25 b(b)m(ytes,)h(but)e(su\016x)f
-(of)i(\\G,")h(\\M,")f(or)g(\\K")g(will)d(sp)s(ecify)h(the)h(units)f(to)
-i(b)s(e)f(2)p Fj(^)p Fn(30)h(\(GB\),)630 4740 y(2)p Fj(^)p
-Fn(20)32 b(\(MB\))h(or)f(2)p Fj(^)p Fn(10)g(\(KB\))g(resp)s(ectiv)m
-(ely)-8 b(.)44 b(A)32 b(su\016x)e(of)i(\\g,")h(\\m")f(or)f(\\k")i(will)
-28 b(sp)s(ecify)630 4849 y(units)h(of)h(10)p Fj(^)p Fn(9,)i(10)p
-Fj(^)p Fn(6)f(or)g(10)p Fj(^)p Fn(3)g(b)m(ytes)g(resp)s(ectiv)m(ely)-8
-b(.)40 b(F)-8 b(or)32 b(example:)870 4985 y Fj(-m)47
-b(32K)630 5121 y Fn(will)28 b(set)j(the)f(size)h(to)g(32KB)g(or)g
-(32768)h(b)m(ytes.)42 b([Default:)f(the)30 b(lo)s(cal)g(send)g(so)s(c)m
-(k)m(et)i(bu\013er)630 5230 y(size)27 b(for)h(the)g(connection)f(-)h
-(either)f(the)h(system's)g(default)f(or)g(the)h(v)-5
-b(alue)27 b(set)h(via)f(the)h(`)p Fj(-s)p Fn(')630 5340
-y(option.])p eop end
-%%Page: 19 23
-TeXDict begin 19 22 bop 150 -116 a Fn(Chapter)30 b(5:)41
-b(Using)29 b(Netp)s(erf)i(to)g(Measure)f(Bulk)g(Data)i(T)-8
-b(ransfer)1210 b(19)150 299 y Fj(-M)30 b(bytes)114 b
-Fn(Set)26 b(the)f(size)g(of)h(the)f(bu\013er)f(passed-in)g(to)i(the)g
-(\\recv")g(calls)f(of)g(a)p 2906 299 28 4 v 66 w(STREAM)g(test.)40
-b(This)630 408 y(will)33 b(b)s(e)i(an)g(upp)s(er)e(b)s(ound)h(on)h(the)
-h(n)m(um)m(b)s(er)e(of)i(b)m(ytes)g(receiv)m(ed)g(p)s(er)e(receiv)m(e)i
-(call.)56 b(By)630 518 y(default)25 b(the)g(units)f(are)i(b)m(ytes,)h
-(but)e(su\016x)f(of)i(\\G,")h(\\M,")g(or)e(\\K")h(will)d(sp)s(ecify)h
-(the)i(units)630 628 y(to)35 b(b)s(e)e(2)p Fj(^)p Fn(30)i(\(GB\),)h(2)p
-Fj(^)p Fn(20)f(\(MB\))g(or)f(2)p Fj(^)p Fn(10)h(\(KB\))g(resp)s(ectiv)m
-(ely)-8 b(.)51 b(A)35 b(su\016x)e(of)h(\\g,")i(\\m")630
-737 y(or)29 b(\\k")g(will)d(sp)s(ecify)i(units)f(of)i(10)p
-Fj(^)p Fn(9,)h(10)p Fj(^)p Fn(6)g(or)f(10)p Fj(^)p Fn(3)g(b)m(ytes)h
-(resp)s(ectiv)m(ely)-8 b(.)39 b(F)-8 b(or)30 b(example:)870
-878 y Fj(-M)47 b(32K)630 1019 y Fn(will)33 b(set)j(the)g(size)f(to)h
-(32KB)h(or)e(32768)j(b)m(ytes.)56 b([Default:)c(the)35
-b(remote)i(receiv)m(e)f(so)s(c)m(k)m(et)630 1129 y(bu\013er)27
-b(size)i(for)f(the)g(data)i(connection)e(-)h(either)f(the)g(system's)h
-(default)e(or)i(the)f(v)-5 b(alue)28 b(set)630 1238 y(via)i(the)h(`)p
-Fj(-S)p Fn(')f(option.])150 1410 y Fj(-P)g(<optionspec>)630
-1520 y Fn(Set)h(the)f(lo)s(cal)g(and/or)g(remote)h(p)s(ort)f(n)m(um)m
-(b)s(ers)f(for)h(the)h(data)g(connection.)150 1692 y
-Fj(-s)f(<sizespec>)630 1802 y Fn(This)35 b(option)i(sets)g(the)g(lo)s
-(cal)f(send)g(and)h(receiv)m(e)g(so)s(c)m(k)m(et)i(bu\013er)d(sizes)h
-(for)f(the)h(con)m(trol)630 1911 y(connection)22 b(to)h(the)f(v)-5
-b(alue\(s\))22 b(sp)s(eci\014ed.)37 b(Often,)23 b(this)e(will)e
-(a\013ect)24 b(the)e(adv)m(ertised)g(and/or)630 2021
-y(e\013ectiv)m(e)33 b(TCP)d(or)h(other)g(windo)m(w,)f(but)g(on)h(some)g
-(platforms)f(it)h(ma)m(y)h(not.)42 b(By)32 b(default)630
-2131 y(the)e(units)f(are)i(b)m(ytes,)g(but)e(su\016x)g(of)i(\\G,")g
-(\\M,")h(or)e(\\K")h(will)d(sp)s(ecify)h(the)h(units)f(to)i(b)s(e)630
-2240 y(2)p Fj(^)p Fn(30)h(\(GB\),)h(2)p Fj(^)p Fn(20)f(\(MB\))h(or)e(2)
-p Fj(^)p Fn(10)h(\(KB\))g(resp)s(ectiv)m(ely)-8 b(.)43
-b(A)32 b(su\016x)e(of)h(\\g,")i(\\m")f(or)f(\\k")630
-2350 y(will)d(sp)s(ecify)h(units)g(of)h(10)p Fj(^)p Fn(9,)i(10)p
-Fj(^)p Fn(6)f(or)f(10)p Fj(^)p Fn(3)i(b)m(ytes)f(resp)s(ectiv)m(ely)-8
-b(.)40 b(F)-8 b(or)31 b(example:)870 2491 y Fj(-s)47
-b(128K)630 2632 y Fn(Will)20 b(request)j(the)f(lo)s(cal)g(send)g(and)f
-(receiv)m(e)j(so)s(c)m(k)m(et)g(bu\013er)d(sizes)h(to)h(b)s(e)f(128KB)i
-(or)e(131072)630 2741 y(b)m(ytes.)630 2882 y(While)27
-b(the)h(historic)f(exp)s(ectation)h(is)f(that)i(setting)f(the)g(so)s(c)
-m(k)m(et)i(bu\013er)d(size)h(has)g(a)g(direct)630 2992
-y(e\013ect)41 b(on)e(sa)m(y)h(the)f(TCP)g(windo)m(w,)h(to)s(da)m(y)g
-(that)g(ma)m(y)g(not)f(hold)f(true)h(for)g(all)f(stac)m(ks.)630
-3101 y(F)-8 b(urther,)32 b(while)e(the)i(historic)e(exp)s(ectation)i
-(is)f(that)i(the)f(v)-5 b(alue)31 b(sp)s(eci\014ed)f(in)g(a)i(setso)s
-(c)m(k-)630 3211 y(opt\(\))i(call)e(will)e(b)s(e)i(the)h(v)-5
-b(alue)32 b(returned)g(via)g(a)i(getso)s(c)m(k)m(opt\(\))i(call,)d(at)g
-(least)g(one)g(stac)m(k)630 3320 y(is)g(kno)m(wn)h(to)g(delib)s
-(erately)e(ignore)i(history)-8 b(.)51 b([Default:)d(0)34
-b(-)h(use)e(the)h(system's)h(default)630 3430 y(so)s(c)m(k)m(et)d
-(bu\013er)e(sizes])150 3602 y Fj(-S)g(<sizespec>)630
-3712 y Fn(This)19 b(option)g(sets)i(the)g(remote)g(send)f(and/or)g
-(receiv)m(e)h(so)s(c)m(k)m(et)h(bu\013er)e(sizes)g(for)g(the)g(con)m
-(trol)630 3821 y(connection)i(to)h(the)f(v)-5 b(alue\(s\))22
-b(sp)s(eci\014ed.)37 b(Often,)23 b(this)e(will)e(a\013ect)24
-b(the)e(adv)m(ertised)g(and/or)630 3931 y(e\013ectiv)m(e)33
-b(TCP)d(or)h(other)g(windo)m(w,)f(but)g(on)h(some)g(platforms)f(it)h
-(ma)m(y)h(not.)42 b(By)32 b(default)630 4041 y(the)e(units)f(are)i(b)m
-(ytes,)g(but)e(su\016x)g(of)i(\\G,")g(\\M,")h(or)e(\\K")h(will)d(sp)s
-(ecify)h(the)h(units)f(to)i(b)s(e)630 4150 y(2)p Fj(^)p
-Fn(30)h(\(GB\),)h(2)p Fj(^)p Fn(20)f(\(MB\))h(or)e(2)p
-Fj(^)p Fn(10)h(\(KB\))g(resp)s(ectiv)m(ely)-8 b(.)43
-b(A)32 b(su\016x)e(of)h(\\g,")i(\\m")f(or)f(\\k")630
-4260 y(will)d(sp)s(ecify)h(units)g(of)h(10)p Fj(^)p Fn(9,)i(10)p
-Fj(^)p Fn(6)f(or)f(10)p Fj(^)p Fn(3)i(b)m(ytes)f(resp)s(ectiv)m(ely)-8
-b(.)40 b(F)-8 b(or)31 b(example:)870 4401 y Fj(-s)47
-b(128K)630 4542 y Fn(Will)20 b(request)j(the)f(lo)s(cal)g(send)g(and)f
-(receiv)m(e)j(so)s(c)m(k)m(et)g(bu\013er)d(sizes)h(to)h(b)s(e)f(128KB)i
-(or)e(131072)630 4651 y(b)m(ytes.)630 4792 y(While)27
-b(the)h(historic)f(exp)s(ectation)h(is)f(that)i(setting)f(the)g(so)s(c)
-m(k)m(et)i(bu\013er)d(size)h(has)g(a)g(direct)630 4902
-y(e\013ect)41 b(on)e(sa)m(y)h(the)f(TCP)g(windo)m(w,)h(to)s(da)m(y)g
-(that)g(ma)m(y)g(not)f(hold)f(true)h(for)g(all)f(stac)m(ks.)630
-5011 y(F)-8 b(urther,)32 b(while)e(the)i(historic)e(exp)s(ectation)i
-(is)f(that)i(the)f(v)-5 b(alue)31 b(sp)s(eci\014ed)f(in)g(a)i(setso)s
-(c)m(k-)630 5121 y(opt\(\))i(call)e(will)e(b)s(e)i(the)h(v)-5
-b(alue)32 b(returned)g(via)g(a)i(getso)s(c)m(k)m(opt\(\))i(call,)d(at)g
-(least)g(one)g(stac)m(k)630 5230 y(is)g(kno)m(wn)h(to)g(delib)s
-(erately)e(ignore)i(history)-8 b(.)51 b([Default:)d(0)34
-b(-)h(use)e(the)h(system's)h(default)630 5340 y(so)s(c)m(k)m(et)d
-(bu\013er)e(sizes])p eop end
-%%Page: 20 24
-TeXDict begin 20 23 bop 150 -116 a Fn(Chapter)30 b(5:)41
-b(Using)29 b(Netp)s(erf)i(to)g(Measure)f(Bulk)g(Data)i(T)-8
-b(ransfer)1210 b(20)150 299 y Fj(-4)384 b Fn(Set)23 b(the)f(lo)s(cal)g
-(and)g(remote)h(address)f(family)f(for)h(the)g(data)h(connection)g(to)g
-(AF)p 3346 299 28 4 v 41 w(INET)f(-)g(ie)630 408 y(use)28
-b(IPv4)h(addressing)e(only)-8 b(.)40 b(Just)28 b(as)h(with)e(their)h
-(global)g(command-line)g(coun)m(terparts)630 518 y(the)38
-b(last)f(of)g(the)h(`)p Fj(-4)p Fn(',)h(`)p Fj(-6)p Fn(',)g(`)p
-Fj(-H)p Fn(')e(or)g(`)p Fj(-L)p Fn(')h(option)e(wins)g(for)h(their)f
-(resp)s(ectiv)m(e)i(address)630 628 y(families.)150 779
-y Fj(-6)384 b Fn(This)32 b(option)i(is)f(iden)m(tical)g(to)i(its)f(`)p
-Fj(-4)p Fn(')g(cousin,)g(but)g(requests)g(IPv6)g(addresses)g(for)g(the)
-630 889 y(lo)s(cal)c(and)f(remote)j(ends)d(of)i(the)f(data)h
-(connection.)150 1080 y Fd(5.2.1)63 b(TCP)p 731 1080
-37 5 v 53 w(STREAM)150 1227 y Fn(The)28 b(TCP)p 535 1227
-28 4 v 39 w(STREAM)f(test)i(is)f(the)g(default)f(test)i(in)e(netp)s
-(erf.)39 b(It)28 b(is)g(quite)f(simple,)g(transferring)g(some)150
-1337 y(quan)m(tit)m(y)33 b(of)g(data)g(from)f(the)h(system)f(running)e
-(netp)s(erf)i(to)h(the)g(system)g(running)c(netserv)m(er.)48
-b(While)150 1446 y(time)32 b(sp)s(en)m(t)g(establishing)d(the)k
-(connection)f(is)f(not)i(included)c(in)i(the)h(throughput)f
-(calculation,)h(time)150 1556 y(sp)s(en)m(t)24 b(\015ushing)d(the)j
-(last)g(of)g(the)g(data)h(to)g(the)f(remote)h(at)f(the)h(end)e(of)h
-(the)g(test)h(is.)38 b(This)22 b(is)h(ho)m(w)h(netp)s(erf)150
-1665 y(kno)m(ws)32 b(that)h(all)f(the)g(data)i(it)e(sen)m(t)h(w)m(as)f
-(receiv)m(ed)h(b)m(y)g(the)f(remote.)48 b(In)32 b(addition)f(to)i(the)g
-(Section)f(5.2)150 1775 y([Options)22 b(common)h(to)h(TCP)e(UDP)i(and)e
-(SCTP)g(tests],)j(page)f(18,)i(the)d(follo)m(wing)f(test-sp)s(eci\014c)
-h(options)150 1885 y(can)31 b(b)s(e)e(included)f(to)j(p)s(ossibly)d
-(alter)i(the)h(b)s(eha)m(vior)e(of)i(the)f(test:)150
-2036 y Fj(-C)384 b Fn(This)35 b(option)h(will)e(set)j(TCP)p
-1659 2036 V 39 w(CORK)f(mo)s(de)g(on)g(the)h(data)h(connection)e(on)h
-(those)g(sys-)630 2146 y(tems)44 b(where)g(TCP)p 1338
-2146 V 39 w(CORK)f(is)g(de\014ned)g(\(t)m(ypically)h(Lin)m(ux\).)81
-b(A)44 b(full)e(description)g(of)630 2255 y(TCP)p 830
-2255 V 39 w(CORK)e(is)g(b)s(ey)m(ond)g(the)h(scop)s(e)h(of)f(this)f
-(man)m(ual,)j(but)d(in)g(a)h(n)m(utshell)e(it)h(forces)630
-2365 y(sub-MSS)j(sends)h(to)h(b)s(e)f(bu\013ered)f(so)i(ev)m(ery)h
-(segmen)m(t)f(sen)m(t)g(is)f(Maxim)m(um)g(Segmen)m(t)630
-2474 y(Size)36 b(\(MSS\))g(unless)e(the)j(application)d(p)s(erforms)h
-(an)h(explicit)e(\015ush)h(op)s(eration)h(or)g(the)630
-2584 y(connection)k(is)e(closed.)68 b(A)m(t)41 b(presen)m(t)e(netp)s
-(erf)g(do)s(es)g(not)h(p)s(erform)e(an)m(y)i(explicit)e(\015ush)630
-2694 y(op)s(erations.)62 b(Setting)37 b(TCP)p 1650 2694
-V 40 w(CORK)f(ma)m(y)i(impro)m(v)m(e)g(the)g(bitrate)f(of)h(tests)h
-(where)e(the)630 2803 y(\\send)26 b(size")h(\(`)p Fj(-m)p
-Fn(')f(option\))g(is)g(smaller)f(than)h(the)g(MSS.)g(It)h(should)d
-(also)i(impro)m(v)m(e)h(\(mak)m(e)630 2913 y(smaller\))i(the)i(service)
-f(demand.)630 3043 y(The)c(Lin)m(ux)e(tcp\(7\))k(manpage)e(states)i
-(that)e(TCP)p 2362 3043 V 40 w(CORK)f(cannot)h(b)s(e)g(used)f(in)g
-(conjunc-)630 3153 y(tion)30 b(with)g(TCP)p 1225 3153
-V 39 w(NODELA)-8 b(Y)32 b(\(set)g(via)e(the)h(`)p Fj(-d)p
-Fn(')g(option\),)g(ho)m(w)m(ev)m(er)h(netp)s(erf)e(do)s(es)h(not)630
-3263 y(v)-5 b(alidate)30 b(command-line)f(options)g(to)j(enforce)e
-(that.)150 3414 y Fj(-D)384 b Fn(This)27 b(option)h(will)e(set)j(TCP)p
-1627 3414 V 39 w(NODELA)-8 b(Y)30 b(on)e(the)h(data)g(connection)g(on)g
-(those)g(systems)630 3524 y(where)23 b(TCP)p 1086 3524
-V 39 w(NODELA)-8 b(Y)24 b(is)f(de\014ned.)37 b(This)22
-b(disables)f(something)i(kno)m(wn)g(as)h(the)f(Nagle)630
-3633 y(Algorithm,)46 b(whic)m(h)c(is)g(in)m(tended)h(to)h(mak)m(e)g
-(the)g(segmen)m(ts)g(TCP)f(sends)f(as)i(large)g(as)630
-3743 y(reasonably)23 b(p)s(ossible.)35 b(Setting)23 b(TCP)p
-1956 3743 V 40 w(NODELA)-8 b(Y)24 b(for)e(a)i(TCP)p 2869
-3743 V 39 w(STREAM)f(test)h(should)630 3852 y(either)36
-b(ha)m(v)m(e)h(no)f(e\013ect)i(when)d(the)h(send)f(size)h(\(`)p
-Fj(-m)p Fn(')h(option\))f(is)f(larger)g(than)h(the)h(MSS)630
-3962 y(or)h(will)d(decrease)j(rep)s(orted)f(bitrate)h(and)f(increase)h
-(service)f(demand)g(when)g(the)h(send)630 4072 y(size)c(is)f(smaller)g
-(than)g(the)i(MSS.)e(This)g(stems)h(from)f(TCP)p 2725
-4072 V 40 w(NODELA)-8 b(Y)34 b(causing)g(eac)m(h)630
-4181 y(sub-MSS)e(send)h(to)h(b)s(e)f(its)g(o)m(wn)g(TCP)g(segmen)m(t)i
-(rather)e(than)g(b)s(eing)f(aggregated)k(with)630 4291
-y(other)c(small)e(sends.)43 b(This)30 b(means)h(more)h(trips)e(up)g
-(and)h(do)m(wn)g(the)h(proto)s(col)f(stac)m(k)i(p)s(er)630
-4400 y(KB)d(of)h(data)g(transferred,)f(whic)m(h)f(means)h(greater)i
-(CPU)e(utilization.)630 4531 y(If)25 b(setting)g(TCP)p
-1209 4531 V 39 w(NODELA)-8 b(Y)27 b(with)d(`)p Fj(-D)p
-Fn(')h(a\013ects)h(throughput)e(and/or)i(service)f(demand)630
-4641 y(for)20 b(tests)i(where)e(the)g(send)g(size)h(\(`)p
-Fj(-m)p Fn('\))g(is)e(larger)i(than)f(the)h(MSS)f(it)g(suggests)h(the)g
-(TCP/IP)630 4750 y(stac)m(k's)37 b(implemen)m(tation)d(of)i(the)g
-(Nagle)g(Algorithm)p 2563 4750 V 74 w(ma)m(y)p 2768 4750
-V 76 w(b)s(e)f(brok)m(en,)i(p)s(erhaps)d(in-)630 4860
-y(terpreting)28 b(the)h(Nagle)g(Algorithm)f(on)h(a)g(segmen)m(t)h(b)m
-(y)e(segmen)m(t)i(basis)e(rather)g(than)h(the)630 4969
-y(prop)s(er)40 b(user)i(send)f(b)m(y)h(user)f(send)g(basis.)74
-b(Ho)m(w)m(ev)m(er,)47 b(a)c(b)s(etter)f(test)g(of)h(this)d(can)j(b)s
-(e)630 5079 y(ac)m(hiev)m(ed)31 b(with)e(the)i(Section)f(6.2.1)i([TCP)p
-2120 5079 V 40 w(RR],)e(page)h(28)h(test.)275 5230 y(Here)26
-b(is)f(an)h(example)f(of)h(a)g(basic)g(TCP)p 1639 5230
-V 39 w(STREAM)f(test,)j(in)d(this)f(case)j(from)f(a)g(Debian)f(Lin)m
-(ux)f(\(2.6)150 5340 y(k)m(ernel\))30 b(system)h(to)g(an)f(HP-UX)h
-(11iv2)g(\(HP-UX)g(11.23\))i(system:)p eop end
-%%Page: 21 25
-TeXDict begin 21 24 bop 150 -116 a Fn(Chapter)30 b(5:)41
-b(Using)29 b(Netp)s(erf)i(to)g(Measure)f(Bulk)g(Data)i(T)-8
-b(ransfer)1210 b(21)390 299 y Fj($)47 b(netperf)f(-H)h(lag)390
-408 y(TCP)g(STREAM)f(TEST)h(from)f(0.0.0.0)g(\(0.0.0.0\))f(port)i(0)g
-(AF_INET)f(to)h(lag.hpl.hp.com)d(\(15.4.89.214\))g(port)j(0)h(AF_INET)p
-5165 429 42 84 v 390 518 a(Recv)142 b(Send)190 b(Send)390
-628 y(Socket)46 b(Socket)94 b(Message)f(Elapsed)390 737
-y(Size)142 b(Size)190 b(Size)237 b(Time)h(Throughput)390
-847 y(bytes)94 b(bytes)142 b(bytes)189 b(secs.)h(10^6bits/sec)438
-1066 y(32768)94 b(16384)g(16384)189 b(10.00)285 b(80.42)275
-1205 y Fn(W)-8 b(e)36 b(see)f(that)h(the)f(default)f(receiv)m(e)h(so)s
-(c)m(k)m(et)i(bu\013er)d(size)h(for)f(the)h(receiv)m(er)h(\(lag)f(-)g
-(HP-UX)h(11.23\))150 1314 y(is)29 b(32768)k(b)m(ytes,)e(and)e(the)i
-(default)e(so)s(c)m(k)m(et)j(send)e(bu\013er)f(size)h(for)g(the)h
-(sender)e(\(Debian)h(2.6)i(k)m(ernel\))e(is)150 1424
-y(16384)j(b)m(ytes.)42 b(Througput)30 b(is)f(expressed)i(as)g(10)p
-Fj(^)p Fn(6)g(\(ak)-5 b(a)32 b(Mega\))h(bits)d(p)s(er)f(second,)j(and)e
-(the)h(test)g(ran)150 1534 y(for)f(10)h(seconds.)41 b(IPv4)30
-b(addresses)g(\(AF)p 1562 1534 28 4 v 41 w(INET\))g(w)m(ere)h(used.)150
-1737 y Fd(5.2.2)63 b(TCP)p 731 1737 37 5 v 53 w(MAER)-10
-b(TS)150 1884 y Fn(A)40 b(TCP)p 458 1884 28 4 v 39 w(MAER)-8
-b(TS)39 b(\(MAER)-8 b(TS)40 b(is)f(STREAM)g(bac)m(kw)m(ards\))h(test)h
-(is)e(\\just)g(lik)m(e")h(a)g(Section)f(5.2.1)150 1994
-y([TCP)p 375 1994 V 39 w(STREAM],)27 b(page)g(20)g(test)g(except)g(the)
-g(data)f(\015o)m(ws)h(from)e(the)i(netserv)m(er)g(to)g(the)f(netp)s
-(erf.)38 b(The)150 2103 y(global)21 b(command-line)f(`)p
-Fj(-F)p Fn(')i(option)f(is)g(ignored)g(for)h(this)e(test)j(t)m(yp)s(e.)
-38 b(The)22 b(test-sp)s(eci\014c)f(command-line)150 2213
-y(`)p Fj(-C)p Fn(')30 b(option)g(is)g(ignored)f(for)h(this)f(test)j(t)m
-(yp)s(e.)275 2352 y(Here)k(is)g(an)g(example)g(of)h(a)f(TCP)p
-1478 2352 V 39 w(MAER)-8 b(TS)37 b(test)g(b)s(et)m(w)m(een)g(the)f
-(same)h(t)m(w)m(o)h(systems)e(as)h(in)e(the)150 2461
-y(example)e(for)f(the)h(Section)g(5.2.1)i([TCP)p 1575
-2461 V 39 w(STREAM],)e(page)h(20)g(test.)49 b(This)31
-b(time)i(w)m(e)g(request)g(larger)150 2571 y(so)s(c)m(k)m(et)f
-(bu\013ers)d(with)h(`)p Fj(-s)p Fn(')g(and)g(`)p Fj(-S)p
-Fn(')g(options:)390 2710 y Fj($)47 b(netperf)f(-H)h(lag)g(-t)h
-(TCP_MAERTS)d(--)i(-s)g(128K)g(-S)g(128K)390 2819 y(TCP)g(MAERTS)f
-(TEST)h(from)f(0.0.0.0)g(\(0.0.0.0\))f(port)i(0)g(AF_INET)f(to)h
-(lag.hpl.hp.com)d(\(15.4.89.214\))g(port)j(0)h(AF_INET)p
-5165 2840 42 84 v 390 2929 a(Recv)142 b(Send)190 b(Send)390
-3039 y(Socket)46 b(Socket)94 b(Message)f(Elapsed)390
-3148 y(Size)142 b(Size)190 b(Size)237 b(Time)h(Throughput)390
-3258 y(bytes)94 b(bytes)142 b(bytes)189 b(secs.)h(10^6bits/sec)390
-3477 y(221184)46 b(131072)g(131072)189 b(10.03)285 b(81.14)275
-3616 y Fn(Where)22 b(w)m(e)g(see)h(that)f(Lin)m(ux,)g(unlik)m(e)f
-(HP-UX,)h(ma)m(y)h(not)f(return)f(the)h(same)g(v)-5 b(alue)22
-b(in)e(a)j(getso)s(c)m(k)m(opt\(\))150 3725 y(as)31 b(w)m(as)f
-(requested)h(in)e(the)h(prior)f(setso)s(c)m(k)m(opt\(\).)275
-3864 y(This)f(test)j(is)f(included)d(more)k(for)f(b)s(enc)m(hmarking)f
-(con)m(v)m(enience)i(than)f(an)m(ything)g(else.)150 4068
-y Fd(5.2.3)63 b(TCP)p 731 4068 37 5 v 53 w(SENDFILE)150
-4215 y Fn(The)43 b(TCP)p 550 4215 28 4 v 39 w(SENDFILE)g(test)h(is)f
-(\\just)g(lik)m(e")g(a)h(Section)f(5.2.1)i([TCP)p 2720
-4215 V 40 w(STREAM],)e(page)h(20)g(test)150 4324 y(except)30
-b(netp)s(erf)f(the)h(platform's)e Fj(sendfile\(\))f Fn(call)i(instead)f
-(of)i(calling)e Fj(send\(\))p Fn(.)39 b(Often)29 b(this)f(results)150
-4434 y(in)i(a)h Ff(zero-cop)m(y)41 b Fn(op)s(eration)30
-b(where)h(data)g(is)f(sen)m(t)i(directly)e(from)g(the)h(\014lesystem)g
-(bu\013er)f(cac)m(he.)44 b(This)p 150 4544 V 184 4544
-a(should)p 450 4544 V 76 w(result)37 b(in)g(lo)m(w)m(er)h(CPU)g
-(utilization)e(and)i(p)s(ossibly)d(higher)i(throughput.)63
-b(If)38 b(it)g(do)s(es)f(not,)150 4653 y(then)28 b(y)m(ou)i(ma)m(y)f(w)
-m(an)m(t)h(to)f(con)m(tact)i(y)m(our)e(v)m(endor\(s\))g(b)s(ecause)g
-(they)g(ha)m(v)m(e)h(a)f(problem)e(on)i(their)f(hands.)275
-4792 y(Zero-cop)m(y)42 b(mec)m(hanisms)f(ma)m(y)h(also)g(alter)g(the)g
-(c)m(haracteristics)g(\(size)g(and)f(n)m(um)m(b)s(er)f(of)i(bu\013ers)
-150 4902 y(p)s(er\))36 b(of)i(pac)m(k)m(ets)h(passed)d(to)i(the)f(NIC.)
-g(In)g(man)m(y)g(stac)m(ks,)j(when)c(a)i(cop)m(y)g(is)e(p)s(erformed,)h
-(the)g(stac)m(k)150 5011 y(can)c(\\reserv)m(e")g(space)g(at)g(the)g(b)s
-(eginning)c(of)k(the)f(destination)f(bu\013er)h(for)g(things)f(lik)m(e)
-h(TCP)-8 b(,)32 b(IP)g(and)150 5121 y(Link)e(headers.)43
-b(This)29 b(then)i(has)g(the)g(pac)m(k)m(et)i(con)m(tained)f(in)e(a)h
-(single)f(bu\013er)g(whic)m(h)g(can)i(b)s(e)e(easier)h(to)150
-5230 y(DMA)f(to)g(the)g(NIC.)f(When)g(no)g(cop)m(y)i(is)d(p)s
-(erformed,)g(there)i(is)e(no)h(opp)s(ortunit)m(y)f(to)i(reserv)m(e)g
-(space)g(for)150 5340 y(headers)g(and)g(so)g(a)h(pac)m(k)m(et)i(will)27
-b(b)s(e)j(con)m(tained)h(in)e(t)m(w)m(o)i(or)g(more)f(bu\013ers.)p
-eop end
-%%Page: 22 26
-TeXDict begin 22 25 bop 150 -116 a Fn(Chapter)30 b(5:)41
-b(Using)29 b(Netp)s(erf)i(to)g(Measure)f(Bulk)g(Data)i(T)-8
-b(ransfer)1210 b(22)275 299 y(The)34 b(Section)h(4.2)h([Global)f
-(Options],)g(page)h(10)g(is)e(required)f(for)i(this)f(test)i(and)f(it)f
-(m)m(ust)h(sp)s(ecify)150 408 y(a)44 b(\014le)f(of)g(at)i(least)f(the)g
-(size)f(of)h(the)g(send)e(ring)h(\(See)h(Section)f(4.2)i([Global)e
-(Options],)j(page)e(10.\))150 518 y(m)m(ultiplied)36
-b(b)m(y)j(the)h(send)e(size)i(\(See)g(Section)f(5.2)h([Options)e
-(common)i(to)g(TCP)f(UDP)h(and)e(SCTP)150 628 y(tests],)32
-b(page)f(18.\).)42 b(All)29 b(other)i(TCP-sp)s(eci\014c)d(options)i
-(are)h(a)m(v)-5 b(ailable)29 b(and)h(optional.)275 768
-y(In)f(this)g(\014rst)h(example:)390 908 y Fj($)47 b(netperf)f(-H)h
-(lag)g(-F)h(../src/netperf)43 b(-t)48 b(TCP_SENDFILE)c(--)j(-s)g(128K)g
-(-S)g(128K)390 1018 y(TCP)g(SENDFILE)e(TEST)i(from)g(0.0.0.0)f
-(\(0.0.0.0\))f(port)h(0)i(AF_INET)e(to)h(lag.hpl.hp.com)d
-(\(15.4.89.214\))g(port)j(0)g(AF_INET)p 5260 1038 42
-84 v 390 1127 a(alloc_sendfile_buf_ring:)41 b(specified)k(file)i(too)g
-(small.)390 1237 y(file)g(must)f(be)h(larger)g(than)f(send_width)f(*)j
-(send_size)275 1377 y Fn(w)m(e)30 b(see)h(what)g(happ)s(ens)d(when)i
-(the)g(\014le)g(is)f(to)s(o)i(small.)39 b(Here:)390 1517
-y Fj($)47 b(../src/netperf)d(-H)k(lag)e(-F)i(/boot/vmlinuz-2.6.8-1-6)o
-(86)42 b(-t)47 b(TCP_SENDFILE)d(--)j(-s)h(128K)e(-S)h(128K)p
-4543 1537 V 390 1627 a(TCP)g(SENDFILE)e(TEST)i(from)g(0.0.0.0)f
-(\(0.0.0.0\))f(port)h(0)i(AF_INET)e(to)h(lag.hpl.hp.com)d
-(\(15.4.89.214\))g(port)j(0)g(AF_INET)p 5260 1647 V 390
-1736 a(Recv)142 b(Send)190 b(Send)390 1846 y(Socket)46
-b(Socket)94 b(Message)f(Elapsed)390 1955 y(Size)142 b(Size)190
-b(Size)237 b(Time)h(Throughput)390 2065 y(bytes)94 b(bytes)142
-b(bytes)189 b(secs.)h(10^6bits/sec)390 2284 y(131072)46
-b(221184)g(221184)189 b(10.02)285 b(81.83)275 2424 y
-Fn(w)m(e)30 b(resolv)m(e)h(that)g(issue)e(b)m(y)i(selecting)f(a)g
-(larger)h(\014le.)150 2629 y Fd(5.2.4)63 b(UDP)p 745
-2629 37 5 v 54 w(STREAM)150 2776 y Fn(A)34 b(UDP)p 457
-2776 28 4 v 40 w(STREAM)g(test)g(is)f(similar)e(to)k(a)f(Section)f
-(5.2.1)j([TCP)p 2460 2776 V 39 w(STREAM],)e(page)h(20)f(test)h(except)
-150 2886 y(UDP)c(is)e(used)h(as)g(the)h(transp)s(ort)e(rather)i(than)f
-(TCP)-8 b(.)275 3026 y(A)72 b(UDP)p 620 3026 V 40 w(STREAM)g(test)h
-(has)e(no)h(end-to-end)h(\015o)m(w)f(con)m(trol)g(-)h(UDP)f(pro)m
-(vides)f(none)150 3136 y(and)62 b(neither)f(do)s(es)h(netp)s(erf.)136
-b(Ho)m(w)m(ev)m(er,)72 b(if)62 b(y)m(ou)h(wish,)68 b(y)m(ou)63
-b(can)g(con\014gure)f(netp)s(erf)f(with)150 3245 y Fj
-(--enable-intervals=yes)22 b Fn(to)30 b(enable)e(the)g(global)g
-(command-line)f(`)p Fj(-b)p Fn(')i(and)f(`)p Fj(-w)p
-Fn(')g(options)g(to)h(pace)150 3355 y(bursts)g(of)i(tra\016c)f(on)m(to)
-i(the)f(net)m(w)m(ork.)275 3495 y(This)d(has)i(a)h(n)m(um)m(b)s(er)e
-(of)i(implications.)275 3635 y(The)e(biggest)h(of)g(these)g
-(implications)d(is)i(the)h(data)g(whic)m(h)e(is)h(sen)m(t)h(migh)m(t)g
-(not)g(b)s(e)f(receiv)m(ed)h(b)m(y)g(the)150 3745 y(remote.)47
-b(F)-8 b(or)32 b(this)f(reason,)i(the)g(output)e(of)h(a)h(UDP)p
-1994 3745 V 40 w(STREAM)f(test)h(sho)m(ws)f(b)s(oth)f(the)h(sending)f
-(and)150 3854 y(receiving)j(throughput.)53 b(On)34 b(some)h(platforms,)
-g(it)f(ma)m(y)i(b)s(e)e(p)s(ossible)e(for)j(the)g(sending)e(throughput)
-150 3964 y(to)28 b(b)s(e)e(rep)s(orted)g(as)h(a)g(v)-5
-b(alue)27 b(greater)h(than)f(the)g(maxim)m(um)e(rate)j(of)f(the)g
-(link.)38 b(This)25 b(is)h(common)h(when)150 4073 y(the)k(CPU\(s\))f
-(are)h(faster)g(than)f(the)g(net)m(w)m(ork)i(and)d(there)i(is)e(no)i
-Ff(in)m(tra-stac)m(k)37 b Fn(\015o)m(w-con)m(trol.)275
-4214 y(Here)g(is)e(an)i(example)f(of)h(a)g(UDP)p 1485
-4214 V 40 w(STREAM)f(test)i(b)s(et)m(w)m(een)f(t)m(w)m(o)h(systems)e
-(connected)i(b)m(y)e(a)h(10)150 4323 y(Gigabit)30 b(Ethernet)g(link:)
-390 4463 y Fj($)47 b(netperf)f(-t)h(UDP_STREAM)e(-H)j(192.168.2.125)c
-(--)j(-m)g(32768)390 4573 y(UDP)g(UNIDIRECTIONAL)d(SEND)i(TEST)h(from)g
-(0.0.0.0)f(\(0.0.0.0\))f(port)h(0)i(AF_INET)e(to)h(192.168.2.125)d
-(\(192.168.2.125\))g(port)i(0)i(AF_INET)p 5833 4593 42
-84 v 390 4682 a(Socket)94 b(Message)f(Elapsed)285 b(Messages)390
-4792 y(Size)190 b(Size)237 b(Time)429 b(Okay)46 b(Errors)142
-b(Throughput)390 4902 y(bytes)g(bytes)189 b(secs)572
-b(#)286 b(#)143 b(10^6bits/sec)390 5121 y(124928)f(32768)f(10.00)285
-b(105672)g(0)191 b(2770.20)390 5230 y(135168)523 b(10.00)285
-b(104844)524 b(2748.50)p eop end
-%%Page: 23 27
-TeXDict begin 23 26 bop 150 -116 a Fn(Chapter)30 b(5:)41
-b(Using)29 b(Netp)s(erf)i(to)g(Measure)f(Bulk)g(Data)i(T)-8
-b(ransfer)1210 b(23)275 299 y(The)29 b(\014rst)g(line)g(of)h(n)m(um)m
-(b)s(ers)f(are)h(statistics)g(from)g(the)g(sending)e(\(netp)s(erf)7
-b(\))30 b(side.)40 b(The)29 b(second)i(line)150 408 y(of)38
-b(n)m(um)m(b)s(ers)e(are)i(from)f(the)g(receiving)g(\(netserv)m(er\))i
-(side.)61 b(In)37 b(this)f(case,)41 b(105672)f(-)e(104844)i(or)e(828)
-150 518 y(messages)31 b(did)e(not)i(mak)m(e)g(it)f(all)f(the)i(w)m(a)m
-(y)g(to)g(the)g(remote)g(netserv)m(er)g(pro)s(cess.)275
-652 y(If)25 b(the)i(v)-5 b(alue)25 b(of)i(the)f(`)p Fj(-m)p
-Fn(')g(option)g(is)f(larger)h(than)f(the)i(lo)s(cal)e(send)h(so)s(c)m
-(k)m(et)i(bu\013er)d(size)h(\(`)p Fj(-s)p Fn(')g(option\))150
-762 y(netp)s(erf)j(will)f(lik)m(ely)h(ab)s(ort)h(with)f(an)i(error)f
-(message)h(ab)s(out)f(ho)m(w)h(the)f(send)g(call)f(failed:)390
-895 y Fj(netperf)46 b(-t)h(UDP_STREAM)e(-H)i(192.168.2.125)390
-1005 y(UDP)g(UNIDIRECTIONAL)d(SEND)i(TEST)h(from)g(0.0.0.0)f
-(\(0.0.0.0\))f(port)h(0)i(AF_INET)e(to)h(192.168.2.125)d
-(\(192.168.2.125\))g(port)i(0)i(AF_INET)p 5833 1025 42
-84 v 390 1115 a(udp_send:)d(data)i(send)g(error:)f(Message)f(too)i
-(long)275 1249 y Fn(If)23 b(the)i(v)-5 b(alue)23 b(of)i(the)f(`)p
-Fj(-m)p Fn(')g(option)g(is)f(larger)h(than)g(the)g(remote)h(so)s(c)m(k)
-m(et)i(receiv)m(e)e(bu\013er,)f(the)h(rep)s(orted)150
-1358 y(receiv)m(e)i(throughput)e(will)f(lik)m(ely)h(b)s(e)g(zero)i(as)g
-(the)g(remote)g(UDP)f(will)e(discard)h(the)h(messages)i(as)e(b)s(eing)
-150 1468 y(to)s(o)31 b(large)g(to)g(\014t)f(in)m(to)g(the)h(so)s(c)m(k)
-m(et)h(bu\013er.)390 1602 y Fj($)47 b(netperf)f(-t)h(UDP_STREAM)e(-H)j
-(192.168.2.125)c(--)j(-m)g(65000)g(-S)g(32768)390 1711
-y(UDP)g(UNIDIRECTIONAL)d(SEND)i(TEST)h(from)g(0.0.0.0)f(\(0.0.0.0\))f
-(port)h(0)i(AF_INET)e(to)h(192.168.2.125)d(\(192.168.2.125\))g(port)i
-(0)i(AF_INET)p 5833 1731 V 390 1821 a(Socket)94 b(Message)f(Elapsed)285
-b(Messages)390 1930 y(Size)190 b(Size)237 b(Time)429
-b(Okay)46 b(Errors)142 b(Throughput)390 2040 y(bytes)g(bytes)189
-b(secs)572 b(#)286 b(#)143 b(10^6bits/sec)390 2259 y(124928)f(65000)f
-(10.00)333 b(53595)285 b(0)191 b(2786.99)438 2369 y(65536)523
-b(10.00)h(0)668 b(0.00)275 2503 y Fn(The)24 b(example)g(ab)s(o)m(v)m(e)
-i(w)m(as)g(b)s(et)m(w)m(een)f(a)g(pair)f(of)h(systems)g(running)d(a)j
-(\\Lin)m(ux")f(k)m(ernel.)39 b(Notice)25 b(that)150 2612
-y(the)30 b(remote)h(Lin)m(ux)d(system)i(returned)f(a)h(v)-5
-b(alue)29 b(larger)h(than)f(that)i(passed-in)d(to)j(the)f(`)p
-Fj(-S)p Fn(')g(option.)40 b(In)150 2722 y(fact,)32 b(this)d(v)-5
-b(alue)30 b(w)m(as)h(larger)f(than)h(the)f(message)i(size)f(set)g(with)
-e(the)i(`)p Fj(-m)p Fn(')f(option.)41 b(That)30 b(the)h(remote)150
-2831 y(so)s(c)m(k)m(et)24 b(bu\013er)e(size)h(is)e(rep)s(orted)h(as)h
-(65536)i(b)m(ytes)e(w)m(ould)f(suggest)h(to)g(an)m(y)g(sane)g(p)s
-(erson)f(that)h(a)g(message)150 2941 y(of)38 b(65000)h(b)m(ytes)f(w)m
-(ould)e(\014t,)k(but)c(the)i(so)s(c)m(k)m(et)h(isn't)p
-2026 2941 28 4 v 77 w(really)p 2287 2941 V 76 w(65536)h(b)m(ytes,)g(ev)
-m(en)e(though)f(Lin)m(ux)f(is)150 3051 y(telling)29 b(us)g(so.)41
-b(Go)32 b(\014gure.)150 3249 y Fd(5.2.5)63 b(XTI)p 697
-3249 37 5 v 53 w(TCP)p 1008 3249 V 54 w(STREAM)150 3396
-y Fn(An)27 b(XTI)p 469 3396 28 4 v 39 w(TCP)p 702 3396
-V 39 w(STREAM)g(test)h(is)e(simply)e(a)k(Section)f(5.2.1)i([TCP)p
-2535 3396 V 39 w(STREAM],)e(page)h(20)g(test)f(using)150
-3505 y(the)g(XTI)f(rather)h(than)f(BSD)h(So)s(c)m(k)m(ets)i(in)m
-(terface.)40 b(The)26 b(test-sp)s(eci\014c)h(`)p Fj(-X)j(<devspec>)p
-Fn(')24 b(option)j(can)g(b)s(e)150 3615 y(used)k(to)h(sp)s(ecify)e(the)
-h(name)h(of)f(the)h(lo)s(cal)e(and/or)i(remote)g(XTI)f(device)g
-(\014les,)g(whic)m(h)f(is)g(required)g(b)m(y)150 3724
-y(the)h Fj(t_open\(\))d Fn(call)h(made)i(b)m(y)f(netp)s(erf)f(XTI)h
-(tests.)275 3858 y(The)e(XTI)p 633 3858 V 40 w(TCP)p
-867 3858 V 39 w(STREAM)h(test)h(is)f(only)g(presen)m(t)g(if)f(netp)s
-(erf)h(w)m(as)h(con\014gured)e(with)g Fj(--enable-)150
-3968 y(xti=yes)p Fn(.)39 b(The)30 b(remote)h(netserv)m(er)g(m)m(ust)f
-(ha)m(v)m(e)i(also)e(b)s(een)g(con\014gured)f(with)g
-Fj(--enable-xti=yes)p Fn(.)150 4166 y Fd(5.2.6)63 b(XTI)p
-697 4166 37 5 v 53 w(UDP)p 1022 4166 V 55 w(STREAM)150
-4313 y Fn(An)26 b(XTI)p 468 4313 28 4 v 39 w(UDP)p 706
-4313 V 41 w(STREAM)f(test)i(is)e(simply)f(a)i(Section)g(5.2.4)h([UDP)p
-2537 4313 V 41 w(STREAM],)f(page)h(22)g(test)f(using)150
-4423 y(the)36 b(XTI)g(rather)g(than)g(BSD)g(So)s(c)m(k)m(ets)i(In)m
-(terface.)59 b(The)36 b(test-sp)s(eci\014c)g(`)p Fj(-X)30
-b(<devspec>)p Fn(')k(option)i(can)150 4532 y(b)s(e)31
-b(used)g(to)h(sp)s(ecify)e(the)i(name)f(of)h(the)g(lo)s(cal)f(and/or)g
-(remote)h(XTI)g(device)f(\014les,)g(whic)m(h)f(is)h(required)150
-4642 y(b)m(y)f(the)h Fj(t_open\(\))d Fn(call)i(made)g(b)m(y)g(netp)s
-(erf)g(XTI)g(tests.)275 4776 y(The)e(XTI)p 633 4776 V
-40 w(UDP)p 872 4776 V 40 w(STREAM)g(test)i(is)e(only)g(presen)m(t)h(if)
-f(netp)s(erf)g(w)m(as)h(con\014gured)f(with)f Fj(--enable-)150
-4885 y(xti=yes)p Fn(.)39 b(The)30 b(remote)h(netserv)m(er)g(m)m(ust)f
-(ha)m(v)m(e)i(also)e(b)s(een)g(con\014gured)f(with)g
-Fj(--enable-xti=yes)p Fn(.)150 5083 y Fd(5.2.7)63 b(SCTP)p
-799 5083 37 5 v 54 w(STREAM)150 5230 y Fn(An)28 b(SCTP)p
-548 5230 28 4 v 38 w(STREAM)g(test)h(is)e(essen)m(tially)g(a)h(Section)
-g(5.2.1)i([TCP)p 2531 5230 V 39 w(STREAM],)e(page)h(20)g(test)f(using)
-150 5340 y(the)g(SCTP)e(rather)h(than)g(TCP)-8 b(.)27
-b(The)g(`)p Fj(-D)p Fn(')g(option)g(will)e(set)j(SCTP)p
-2488 5340 V 38 w(NODELA)-8 b(Y,)29 b(whic)m(h)d(is)g(m)m(uc)m(h)i(lik)m
-(e)p eop end
-%%Page: 24 28
-TeXDict begin 24 27 bop 150 -116 a Fn(Chapter)30 b(5:)41
-b(Using)29 b(Netp)s(erf)i(to)g(Measure)f(Bulk)g(Data)i(T)-8
-b(ransfer)1210 b(24)150 299 y(the)28 b(TCP)p 504 299
-28 4 v 39 w(NODELA)-8 b(Y)29 b(option)e(for)h(TCP)-8
-b(.)28 b(The)f(`)p Fj(-C)p Fn(')h(option)f(is)g(not)h(applicable)e(to)j
-(an)e(SCTP)g(test)i(as)150 408 y(there)35 b(is)f(no)g(corresp)s(onding)
-f(SCTP)p 1453 408 V 39 w(CORK)h(option.)53 b(The)34 b(author)h(is)f
-(still)e(\014guring-out)i(what)h(the)150 518 y(test-sp)s(eci\014c)30
-b(`)p Fj(-N)p Fn(')h(option)f(do)s(es)g(:\))275 655 y(The)43
-b(SCTP)p 726 655 V 38 w(STREAM)g(test)i(is)e(only)f(presen)m(t)i(if)f
-(netp)s(erf)f(w)m(as)i(con\014gured)f(with)f Fj(--enable-)150
-765 y(sctp=yes)p Fn(.)37 b(The)25 b(remote)i(netserv)m(er)f(m)m(ust)g
-(ha)m(v)m(e)h(also)f(b)s(een)f(con\014gured)g(with)f
-Fj(--enable-sctp=yes)p Fn(.)150 966 y Fd(5.2.8)63 b(DLCO)p
-822 966 37 5 v 53 w(STREAM)150 1113 y Fn(A)40 b(DLPI)g(Connection)f
-(Orien)m(ted)g(Stream)h(\(DLCO)p 2021 1113 28 4 v 40
-w(STREAM\))f(test)i(is)e(v)m(ery)h(similar)d(in)i(concept)150
-1223 y(to)f(a)g(Section)f(5.2.1)j([TCP)p 1126 1223 V
-39 w(STREAM],)d(page)i(20)f(test.)63 b(Both)38 b(use)f(reliable,)g
-(connection-orien)m(ted)150 1333 y(proto)s(cols.)i(The)25
-b(DLPI)h(test)h(di\013ers)d(from)h(the)h(TCP)f(test)i(in)d(that)i(its)f
-(proto)s(col)h(op)s(erates)g(only)f(at)i(the)150 1442
-y(link-lev)m(el)c(and)i(do)s(es)f(not)i(include)d(TCP-st)m(yle)i
-(segmen)m(tation)h(and)e(reassem)m(bly)-8 b(.)39 b(This)24
-b(last)g(di\013erence)150 1552 y(means)32 b(that)g(the)g(v)-5
-b(alue)31 b(passed-in)f(with)g(the)i(`)p Fj(-m)p Fn(')g(option)f(m)m
-(ust)g(b)s(e)g(less)g(than)h(the)f(in)m(terface)i(MTU.)150
-1661 y(Otherwise,)c(the)i(`)p Fj(-m)p Fn(')f(and)g(`)p
-Fj(-M)p Fn(')g(options)g(are)h(just)e(lik)m(e)h(their)g(TCP/UDP/SCTP)f
-(coun)m(terparts.)275 1798 y(Other)g(DLPI-sp)s(eci\014c)h(options)g
-(include:)150 1961 y Fj(-D)g(<devspec>)630 2071 y Fn(This)37
-b(option)i(is)f(used)g(to)i(pro)m(vide)e(the)i(fully-quali\014ed)35
-b(names)k(for)f(the)i(lo)s(cal)e(and/or)630 2181 y(remote)24
-b(DPLI)f(device)f(\014les.)38 b(The)22 b(syn)m(tax)i(is)d(otherwise)i
-(iden)m(tical)f(to)h(that)h(of)f(a)g Ff(sizesp)s(ec)p
-Fn(.)150 2342 y Fj(-p)30 b(<ppaspec>)630 2452 y Fn(This)25
-b(option)i(is)f(used)h(to)h(sp)s(ecify)e(the)h(lo)s(cal)g(and/or)g
-(remote)h(DLPI)f(PP)-8 b(A\(s\).)41 b(The)27 b(PP)-8
-b(A)630 2562 y(is)34 b(used)g(to)h(iden)m(tify)e(the)i(in)m(terface)g
-(o)m(v)m(er)h(whic)m(h)d(tra\016c)i(is)f(to)i(b)s(e)e(sen)m(t/receiv)m
-(ed.)54 b(The)630 2671 y(syn)m(tax)31 b(of)f(a)h Ff(ppasp)s(ec)k
-Fn(is)30 b(otherwise)f(the)i(same)g(as)f(a)h Ff(sizesp)s(ec)p
-Fn(.)150 2833 y Fj(-s)f(sap)210 b Fn(This)24 b(option)i(sp)s(eci\014es)
-f(the)h(802.2)j(SAP)c(for)h(the)h(test.)40 b(A)26 b(SAP)g(is)f
-(somewhat)i(lik)m(e)e(either)630 2943 y(the)e(p)s(ort)e(\014eld)g(of)i
-(a)f(TCP)g(or)g(UDP)h(header)f(or)g(the)h(proto)s(col)f(\014eld)f(of)h
-(an)h(IP)f(header.)37 b(The)630 3052 y(sp)s(eci\014ed)31
-b(SAP)h(should)f(not)i(con\015ict)g(with)e(an)m(y)j(other)f(activ)m(e)h
-(SAPs)e(on)h(the)g(sp)s(eci\014ed)630 3162 y(PP)-8 b(A's)31
-b(\(`)p Fj(-p)p Fn(')f(option\).)150 3324 y Fj(-w)g(<sizespec>)630
-3433 y Fn(This)e(option)g(sp)s(eci\014es)g(the)i(lo)s(cal)f(send)f(and)
-h(receiv)m(e)h(windo)m(w)e(sizes)h(in)f(units)g(of)h(frames)630
-3543 y(on)h(those)h(platforms)e(whic)m(h)h(supp)s(ort)e(setting)j(suc)m
-(h)f(things.)150 3705 y Fj(-W)g(<sizespec>)630 3814 y
-Fn(This)21 b(option)h(sp)s(eci\014es)f(the)i(remote)g(send)f(and)g
-(receiv)m(e)h(windo)m(w)e(sizes)h(in)g(units)e(of)j(frames)630
-3924 y(on)30 b(those)h(platforms)e(whic)m(h)h(supp)s(ort)e(setting)j
-(suc)m(h)f(things.)275 4087 y(The)41 b(DLCO)p 742 4087
-V 40 w(STREAM)g(test)i(is)e(only)g(presen)m(t)h(if)e(netp)s(erf)h(w)m
-(as)i(con\014gured)e(with)f Fj(--enable-)150 4197 y(dlpi=yes)p
-Fn(.)d(The)25 b(remote)i(netserv)m(er)f(m)m(ust)g(ha)m(v)m(e)h(also)f
-(b)s(een)f(con\014gured)g(with)f Fj(--enable-dlpi=yes)p
-Fn(.)150 4399 y Fd(5.2.9)63 b(DLCL)p 804 4399 37 5 v
-53 w(STREAM)150 4545 y Fn(A)42 b(DLPI)f(ConnectionLess)g(Stream)g
-(\(DLCL)p 1796 4545 28 4 v 40 w(STREAM\))g(test)i(is)d(analogous)i(to)g
-(a)g(Section)f(5.2.4)150 4655 y([UDP)p 380 4655 V 41
-w(STREAM],)28 b(page)i(22)f(test)h(in)d(that)j(b)s(oth)e(mak)m(e)i(use)
-e(of)h(unreliable/b)s(est-e\013ort,)e(connection-)150
-4765 y(less)i(transp)s(orts.)39 b(The)29 b(DLCL)p 1231
-4765 V 39 w(STREAM)g(test)h(di\013ers)e(from)h(the)g(Section)g(5.2.4)i
-([UDP)p 3268 4765 V 41 w(STREAM],)150 4874 y(page)g(22)h(test)g(in)d
-(that)i(the)g(message)h(size)f(\(`)p Fj(-m)p Fn(')f(option\))h(m)m(ust)
-g(alw)m(a)m(ys)g(b)s(e)f(less)g(than)g(the)h(link)e(MTU)150
-4984 y(as)f(there)g(is)e(no)i(IP-lik)m(e)e(fragmen)m(tation)j(and)e
-(reassem)m(bly)g(a)m(v)-5 b(ailable)26 b(and)h(netp)s(erf)g(do)s(es)g
-(not)h(presume)150 5093 y(to)j(pro)m(vide)f(one.)275
-5230 y(The)23 b(test-sp)s(eci\014c)i(command-line)e(options)g(for)h(a)h
-(DLCL)p 2293 5230 V 40 w(STREAM)f(test)h(are)g(the)f(same)h(as)f(those)
-150 5340 y(for)30 b(a)h(Section)f(5.2.8)i([DLCO)p 1194
-5340 V 40 w(STREAM],)e(page)i(24)f(test.)p eop end
-%%Page: 25 29
-TeXDict begin 25 28 bop 150 -116 a Fn(Chapter)30 b(5:)41
-b(Using)29 b(Netp)s(erf)i(to)g(Measure)f(Bulk)g(Data)i(T)-8
-b(ransfer)1210 b(25)275 299 y(The)42 b(DLCL)p 729 299
-28 4 v 40 w(STREAM)g(test)j(is)d(only)g(presen)m(t)h(if)f(netp)s(erf)h
-(w)m(as)g(con\014gured)g(with)e Fj(--enable-)150 408
-y(dlpi=yes)p Fn(.)c(The)25 b(remote)i(netserv)m(er)f(m)m(ust)g(ha)m(v)m
-(e)h(also)f(b)s(een)f(con\014gured)g(with)f Fj(--enable-dlpi=yes)p
-Fn(.)150 608 y Fd(5.2.10)63 b(STREAM)p 1069 608 37 5
-v 54 w(STREAM)150 755 y Fn(A)41 b(Unix)e(Domain)h(Stream)h(So)s(c)m(k)m
-(et)h(Stream)f(test)g(\(STREAM)p 2414 755 28 4 v 40 w(STREAM\))f(is)g
-(similar)e(in)h(concept)150 864 y(to)f(a)f(Section)g(5.2.1)i([TCP)p
-1124 864 V 39 w(STREAM],)e(page)h(20)g(test,)i(but)c(using)f(Unix)h
-(Domain)h(so)s(c)m(k)m(ets.)63 b(It)37 b(is,)150 974
-y(naturally)-8 b(,)26 b(limited)d(to)k(in)m(tra-mac)m(hine)e(tra\016c.)
-40 b(A)26 b(STREAM)p 2331 974 V 39 w(STREAM)g(test)g(shares)g(the)g(`)p
-Fj(-m)p Fn(',)h(`)p Fj(-M)p Fn(',)150 1083 y(`)p Fj(-s)p
-Fn(')42 b(and)g(`)p Fj(-S)p Fn(')h(options)f(of)g(the)h(other)p
-1587 1083 V 83 w(STREAM)f(tests.)78 b(In)42 b(a)h(STREAM)p
-2962 1083 V 39 w(STREAM)f(test)i(the)150 1193 y(`)p Fj(-p)p
-Fn(')31 b(option)g(sets)h(the)g(directory)f(in)f(whic)m(h)h(the)g(pip)s
-(es)f(will)f(b)s(e)i(created)h(rather)g(than)f(setting)h(a)g(p)s(ort)
-150 1303 y(n)m(um)m(b)s(er.)39 b(The)30 b(default)g(is)f(to)i(create)h
-(the)f(pip)s(es)d(in)h(the)i(system)f(default)g(for)g(the)h
-Fj(tempnam\(\))c Fn(call.)275 1437 y(The)i(STREAM)p 864
-1437 V 39 w(STREAM)g(test)i(is)e(only)g(presen)m(t)g(if)g(netp)s(erf)g
-(w)m(as)h(con\014gured)f(with)f Fj(--enable-)150 1547
-y(unix=yes)p Fn(.)37 b(The)25 b(remote)i(netserv)m(er)f(m)m(ust)g(ha)m
-(v)m(e)h(also)f(b)s(een)f(con\014gured)g(with)f Fj(--enable-unix=yes)p
-Fn(.)150 1746 y Fd(5.2.11)63 b(DG)p 724 1746 37 5 v 55
-w(STREAM)150 1893 y Fn(A)41 b(Unix)e(Domain)i(Datagram)h(So)s(c)m(k)m
-(et)g(Stream)f(test)h(\(SG)p 2255 1893 28 4 v 40 w(STREAM\))e(is)g(v)m
-(ery)h(m)m(uc)m(h)f(lik)m(e)g(a)h(Sec-)150 2002 y(tion)28
-b(5.2.1)i([TCP)p 775 2002 V 40 w(STREAM],)e(page)i(20)f(test)g(except)h
-(that)f(message)h(b)s(oundaries)c(are)j(preserv)m(ed.)40
-b(In)150 2112 y(this)32 b(w)m(a)m(y)-8 b(,)36 b(it)d(ma)m(y)h(also)f(b)
-s(e)g(considered)f(similar)f(to)j(certain)f(\015a)m(v)m(ors)h(of)g
-(SCTP)e(test)i(whic)m(h)e(can)i(also)150 2222 y(preserv)m(e)d(message)g
-(b)s(oundaries.)275 2356 y(All)c(the)i(options)f(of)h(a)g(Section)g
-(5.2.10)i([STREAM)p 2076 2356 V 40 w(STREAM],)d(page)i(25)g(test)f(are)
-g(applicable)e(to)150 2466 y(a)k(DG)p 372 2466 V 41 w(STREAM)e(test.)
-275 2600 y(The)52 b(DG)p 630 2600 V 41 w(STREAM)g(test)i(is)e(only)g
-(presen)m(t)h(if)f(netp)s(erf)g(w)m(as)i(con\014gured)e(with)f
-Fj(--enable-)150 2710 y(unix=yes)p Fn(.)37 b(The)25 b(remote)i(netserv)
-m(er)f(m)m(ust)g(ha)m(v)m(e)h(also)f(b)s(een)f(con\014gured)g(with)f
-Fj(--enable-unix=yes)p Fn(.)p eop end
-%%Page: 26 30
-TeXDict begin 26 29 bop 150 -116 a Fn(Chapter)30 b(6:)41
-b(Using)29 b(Netp)s(erf)i(to)g(Measure)f(Request/Resp)s(onse)1254
-b(26)150 299 y Fi(6)80 b(Using)54 b(Netp)t(erf)f(to)h(Measure)f
-(Request/Resp)t(onse)150 562 y Fn(Request/resp)s(onse)45
-b(p)s(erformance)g(is)f(often)i(o)m(v)m(erlo)s(ok)m(ed,)k(y)m(et)d(it)d
-(is)h(just)f(as)i(imp)s(ortan)m(t)e(as)h(bulk-)150 672
-y(transfer)32 b(p)s(erformance.)48 b(While)32 b(things)g(lik)m(e)g
-(larger)h(so)s(c)m(k)m(et)i(bu\013ers)c(and)i(TCP)f(windo)m(ws)f(can)i
-(co)m(v)m(er)150 781 y(a)49 b(m)m(ultitude)f(of)h(latency)g(and)f(ev)m
-(en)i(path-length)e(sins,)53 b(they)c(cannot)g(easily)f(hide)g(from)g
-(a)i(re-)150 891 y(quest/resp)s(onse)37 b(test.)62 b(The)37
-b(con)m(v)m(en)m(tion)i(for)e(a)h(request/resp)s(onse)f(test)h(is)e(to)
-i(ha)m(v)m(e)h(a)p 3310 891 28 4 v 78 w(RR)e(su\016x.)150
-1000 y(There)30 b(are)h(ho)m(w)m(ev)m(er)g(a)g(few)f(\\request/resp)s
-(onse")h(tests)g(that)g(ha)m(v)m(e)h(other)f(su\016xes.)275
-1144 y(A)h(request/resp)s(onse)f(test,)i(particularly)d(sync)m
-(hronous,)h(one)i(transaction)f(at)g(at)h(time)e(test)i(suc)m(h)150
-1254 y(as)42 b(those)g(found)e(in)g(netp)s(erf,)j(is)e(particularly)e
-(sensitiv)m(e)i(to)h(the)g(path-length)f(of)g(the)h(net)m(w)m(orking)
-150 1364 y(stac)m(k.)74 b(An)p 616 1364 V 80 w(RR)41
-b(test)h(can)f(also)g(unco)m(v)m(er)h(those)f(platforms)f(where)g(the)i
-(NIC's)e(are)h(strapp)s(ed)f(b)m(y)150 1473 y(default)35
-b(with)f(o)m(v)m(erb)s(earing)h(in)m(terrupt)g(a)m(v)m(oidance)h
-(settings)g(in)e(an)h(attempt)i(to)f(increase)g(the)f(bulk-)150
-1583 y(transfer)28 b(p)s(erformance)f(\(or)i(rather,)f(decrease)h(the)g
-(CPU)e(utilization)g(of)h(a)g(bulk-transfer)e(test\).)42
-b(This)150 1692 y(sensitivit)m(y)24 b(is)h(most)h(acute)h(for)e(small)g
-(request)g(and)h(resp)s(onse)e(sizes,)j(suc)m(h)e(as)h(the)g(single-b)m
-(yte)g(default)150 1802 y(for)k(a)h(netp)s(erf)p 685
-1802 V 69 w(RR)f(test.)275 1946 y(While)41 b(a)h(bulk-transfer)f(test)i
-(rep)s(orts)f(its)f(results)g(in)h(units)e(of)j(bits)e(or)h(b)m(ytes)h
-(transfered)f(p)s(er)150 2056 y(second,)35 b(a)g(m)m(um)m(ble)p
-873 2056 V 39 w(RR)f(test)h(rep)s(orts)f(transactions)g(p)s(er)f
-(second)h(where)g(a)h(transaction)f(is)f(de\014ned)150
-2165 y(as)27 b(the)g(completed)g(exc)m(hange)h(of)f(a)h(request)f(and)f
-(a)h(resp)s(onse.)39 b(One)26 b(can)h(in)m(v)m(ert)g(the)g(transaction)
-g(rate)150 2275 y(to)34 b(arriv)m(e)e(at)i(the)f(a)m(v)m(erage)i
-(round-trip)c(latency)-8 b(.)48 b(If)33 b(one)g(is)f(con\014den)m(t)h
-(ab)s(out)f(the)h(symmetry)g(of)g(the)150 2384 y(connection,)39
-b(the)f(a)m(v)m(erage)h(one-w)m(a)m(y)g(latency)f(can)f(b)s(e)g(tak)m
-(en)h(as)f(one-half)g(the)h(a)m(v)m(erage)h(round-trip)150
-2494 y(latency)-8 b(.)44 b(Netp)s(erf)31 b(do)s(es)f(not)i(do)f(either)
-g(of)g(these)g(on)h(its)e(o)m(wn)h(but)g(lea)m(v)m(es)h(them)f(as)h
-(exercises)f(to)h(the)150 2604 y(b)s(enc)m(hmark)m(er.)150
-2851 y Fm(6.1)68 b(Issues)45 b(in)g(Reqeust/Resp)t(onse)150
-3010 y Fn(Most)29 b(if)e(not)i(all)e(the)h(Section)g(5.1)h([Issues)f
-(in)f(Bulk)g(T)-8 b(ransfer],)28 b(page)h(17)g(apply)e(to)i
-(request/resp)s(onse.)150 3120 y(The)35 b(issue)f(of)i(round-trip)d
-(latency)i(is)g(ev)m(en)h(more)g(imp)s(ortan)m(t)e(as)i(netp)s(erf)e
-(generally)h(only)f(has)i(one)150 3229 y(transaction)31
-b(outstanding)e(at)i(a)g(time.)275 3373 y(A)h(single)g(instance)g(of)h
-(a)g(one)g(transaction)g(outstanding)p 2328 3373 V 72
-w(RR)g(test)g(should)p 3005 3373 V 71 w(nev)m(er)p 3256
-3373 V 73 w(completely)150 3483 y(saturate)j(the)f(CPU)f(of)h(a)g
-(system.)54 b(If)34 b(testing)h(b)s(et)m(w)m(een)g(otherwise)f(ev)m
-(enly)h(matc)m(hed)h(systems,)g(the)150 3592 y(symmetric)25
-b(nature)h(of)g(a)p 1049 3592 V 67 w(RR)g(test)h(with)d(equal)i
-(request)g(and)g(resp)s(onse)f(sizes)h(should)e(result)h(in)f(equal)150
-3702 y(CPU)e(loading)f(on)h(b)s(oth)f(systems.)38 b(Ho)m(w)m(ev)m(er,)
-26 b(this)21 b(ma)m(y)i(not)f(hold)f(true)h(on)g(MP)g(systems,)i
-(particularly)150 3812 y(if)29 b(one)i(CPU)f(binds)e(the)j(netp)s(erf)e
-(and)h(netserv)m(er)h(di\013eren)m(tly)e(via)h(the)g(global)g(`)p
-Fj(-T)p Fn(')g(option.)275 3956 y(F)-8 b(or)30 b(smaller)e(request)i
-(and)g(resp)s(onse)e(sizes)i(pac)m(k)m(et)i(loss)d(is)g(a)h(bigger)f
-(issue)g(as)h(there)g(is)f(no)h(opp)s(or-)150 4065 y(tunit)m(y)g(for)g
-(a)h Ff(fast)f(retransmit)i Fn(or)e(retransmission)e(prior)h(to)i(a)g
-(retransmission)d(timer)i(expiring.)275 4210 y(Certain)e(NICs)h(ha)m(v)
-m(e)i(w)m(a)m(ys)f(to)g(minimize)d(the)j(n)m(um)m(b)s(er)e(of)h(in)m
-(terrupts)f(sen)m(t)i(to)g(the)g(host.)41 b(If)28 b(these)150
-4319 y(are)f(strapp)s(ed)d(badly)h(they)h(can)h(signi\014can)m(tly)d
-(reduce)i(the)h(p)s(erformance)e(of)h(something)g(lik)m(e)f(a)i
-(single-)150 4429 y(b)m(yte)39 b(request/resp)s(onse)g(test.)67
-b(Suc)m(h)38 b(setups)g(are)h(distinguised)d(b)m(y)j(seriously)e(lo)m
-(w)h(rep)s(orted)g(CPU)150 4538 y(utilization)h(and)h(what)g(seems)h
-(lik)m(e)f(a)h(lo)m(w)g(\(ev)m(en)g(if)f(in)g(the)g(thousands\))g
-(transaction)h(p)s(er)f(second)150 4648 y(rate.)k(Also,)31
-b(if)g(y)m(ou)g(run)f(suc)m(h)h(an)g(OS/driv)m(er)f(com)m(bination)g
-(on)h(faster)h(or)f(slo)m(w)m(er)h(hardw)m(are)e(and)h(do)150
-4757 y(not)f(see)h(a)f(corresp)s(onding)e(c)m(hange)j(in)e(the)h
-(transaction)g(rate,)i(c)m(hances)e(are)h(go)s(o)s(d)f(that)g(the)h
-(drvier)d(is)150 4867 y(strapping)e(the)h(NIC)g(with)f(aggressiv)m(e)j
-(in)m(terrupt)d(a)m(v)m(oidance)i(settings.)40 b(Go)s(o)s(d)27
-b(for)g(bulk)f(throughput,)150 4977 y(but)k(bad)f(for)i(latency)-8
-b(.)275 5121 y(Some)32 b(driv)m(ers)e(ma)m(y)j(try)f(to)g
-(automagically)g(adjust)g(the)g(in)m(terrupt)e(a)m(v)m(oidance)k
-(settings.)45 b(If)32 b(they)150 5230 y(are)d(not)f(terribly)f(go)s(o)s
-(d)h(at)h(it,)f(y)m(ou)h(will)d(see)j(considerable)e(run-to-run)g(v)-5
-b(ariation)27 b(in)g(rep)s(orted)h(trans-)150 5340 y(action)j(rates.)41
-b(P)m(articularly)29 b(if)g(y)m(ou)i(\\mix-up")p 1846
-5340 V 69 w(STREAM)f(and)p 2489 5340 V 70 w(RR)g(tests.)p
-eop end
-%%Page: 27 31
-TeXDict begin 27 30 bop 150 -116 a Fn(Chapter)30 b(6:)41
-b(Using)29 b(Netp)s(erf)i(to)g(Measure)f(Request/Resp)s(onse)1254
-b(27)150 299 y Fm(6.2)68 b(Options)45 b(Common)h(to)f(TCP)f(UDP)i(and)e
-(SCTP)p 2976 299 41 6 v 104 w(RR)h(tests)150 458 y Fn(Man)m(y)28
-b(\\test-sp)s(eci\014c")g(options)f(are)g(actually)g(common)g(across)h
-(the)f(di\013eren)m(t)g(tests.)41 b(F)-8 b(or)27 b(those)h(tests)150
-568 y(in)m(v)m(olving)d(TCP)-8 b(,)27 b(UDP)g(and)f(SCTP)-8
-b(,)26 b(whether)g(using)f(the)i(BSD)g(So)s(c)m(k)m(ets)h(or)f(the)g
-(XTI)f(in)m(terface)h(those)150 677 y(common)k(options)e(include:)150
-854 y Fj(-h)384 b Fn(Displa)m(y)29 b(the)h(test-suite-sp)s(eci\014c)g
-(usage)h(string)e(and)g(exit.)41 b(F)-8 b(or)31 b(a)f(TCP)p
-3159 854 28 4 v 69 w(or)h(UDP)p 3539 854 V 70 w(test)630
-964 y(this)26 b(will)f(b)s(e)h(the)i(usage)g(string)e(from)h(the)g
-(source)h(\014le)e(`)p Fj(nettest_bsd.c)p Fn('.)37 b(F)-8
-b(or)28 b(an)f(XTI)p 3723 964 V 630 1074 a(test,)42 b(this)c(will)f(b)s
-(e)h(the)i(usage)f(string)f(from)h(the)g(source)h(\014le)e(`)p
-Fj(src/nettest_xti.c)p Fn('.)630 1183 y(F)-8 b(or)65
-b(an)g(SCTP)e(test,)74 b(this)63 b(will)f(b)s(e)i(the)h(usage)g(string)
-e(from)h(the)h(source)g(\014le)630 1293 y(`)p Fj(src/nettest_sctp.c)p
-Fn('.)150 1464 y Fj(-H)30 b(<optionspec>)630 1574 y Fn(Normally)-8
-b(,)28 b(the)f(remote)i(hostname)p Fj(|)p Fn(IP)e(and)g(address)f
-(family)g(information)g(is)g(inherited)630 1683 y(from)k(the)h
-(settings)g(for)g(the)g(con)m(trol)g(connection)g(\(eg)h(global)f
-(command-line)e(`)p Fj(-H)p Fn(',)i(`)p Fj(-4)p Fn(')630
-1793 y(and/or)36 b(`)p Fj(-6)p Fn(')g(options.)57 b(The)36
-b(test-sp)s(eci\014c)g(`)p Fj(-H)p Fn(')g(will)d(o)m(v)m(erride)j
-(those)h(settings)f(for)g(the)630 1902 y(data)41 b(\(ak)-5
-b(a)42 b(test\))g(connection)f(only)-8 b(.)71 b(Settings)40
-b(for)g(the)h(con)m(trol)g(connection)g(are)g(left)630
-2012 y(unc)m(hanged.)54 b(This)33 b(migh)m(t)h(b)s(e)g(used)g(to)i
-(cause)f(the)g(con)m(trol)h(and)e(data)h(connections)g(to)630
-2121 y(tak)m(e)d(di\013eren)m(t)e(paths)g(through)f(the)i(net)m(w)m
-(ork.)150 2293 y Fj(-L)f(<optionspec>)630 2402 y Fn(The)k(test-sp)s
-(eci\014c)h(`)p Fj(-L)p Fn(')g(option)f(is)g(iden)m(tical)f(to)i(the)g
-(test-sp)s(eci\014c)g(`)p Fj(-H)p Fn(')g(option)f(except)630
-2512 y(it)i(a\013ects)i(the)f(lo)s(cal)f(hostname)p Fj(|)p
-Fn(IP)g(and)g(address)f(family)g(information.)58 b(As)36
-b(with)g(its)630 2621 y(global)29 b(command-line)e(coun)m(terpart,)k
-(this)d(is)g(generally)h(only)f(useful)g(when)g(measuring)630
-2731 y(though)i(those)h(evil,)e(end-to-end)i(breaking)e(things)h
-(called)f(\014rew)m(alls.)150 2902 y Fj(-P)h(<optionspec>)630
-3012 y Fn(Set)h(the)f(lo)s(cal)g(and/or)g(remote)h(p)s(ort)f(n)m(um)m
-(b)s(ers)f(for)h(the)h(data)g(connection.)150 3183 y
-Fj(-r)f(<sizespec>)630 3292 y Fn(This)i(option)h(sets)i(the)f(request)g
-(\(\014rst)f(v)-5 b(alue\))34 b(and/or)f(resp)s(onse)g(\(second)i(v)-5
-b(alue\))33 b(sizes)630 3402 y(for)23 b(an)p 887 3402
-V 63 w(RR)g(test.)39 b(By)24 b(default)e(the)h(units)f(are)h(b)m(ytes,)
-j(but)c(a)i(su\016x)e(of)h(\\G,")i(\\M,")f(or)f(\\K")630
-3512 y(will)31 b(sp)s(ecify)h(the)i(units)e(to)j(b)s(e)e(2)p
-Fj(^)p Fn(30)i(\(GB\),)g(2)p Fj(^)p Fn(20)g(\(MB\))g(or)f(2)p
-Fj(^)p Fn(10)g(\(KB\))h(resp)s(ectiv)m(ely)-8 b(.)630
-3621 y(A)44 b(su\016x)g(of)g(\\g,")50 b(\\m")45 b(or)f(\\k")h(will)d
-(sp)s(ecify)h(units)g(of)h(10)p Fj(^)p Fn(9,)49 b(10)p
-Fj(^)p Fn(6)d(or)e(10)p Fj(^)p Fn(3)h(b)m(ytes)630 3731
-y(resp)s(ectiv)m(ely)-8 b(.)40 b(F)-8 b(or)32 b(example:)870
-3871 y Fj(-r)47 b(128,16K)630 4011 y Fn(Will)29 b(set)i(the)h(request)e
-(size)h(to)h(128)g(b)m(ytes)f(and)g(the)g(resp)s(onse)f(size)h(to)g(16)
-h(KB)f(or)g(16384)630 4121 y(b)m(ytes.)41 b([Default:)g(1)31
-b(-)g(a)f(single-b)m(yte)h(request)f(and)g(resp)s(onse)f(])150
-4292 y Fj(-s)h(<sizespec>)630 4402 y Fn(This)35 b(option)i(sets)g(the)g
-(lo)s(cal)f(send)g(and)h(receiv)m(e)g(so)s(c)m(k)m(et)i(bu\013er)d
-(sizes)h(for)f(the)h(con)m(trol)630 4511 y(connection)22
-b(to)h(the)f(v)-5 b(alue\(s\))22 b(sp)s(eci\014ed.)37
-b(Often,)23 b(this)e(will)e(a\013ect)24 b(the)e(adv)m(ertised)g(and/or)
-630 4621 y(e\013ectiv)m(e)33 b(TCP)d(or)h(other)g(windo)m(w,)f(but)g
-(on)h(some)g(platforms)f(it)h(ma)m(y)h(not.)42 b(By)32
-b(default)630 4730 y(the)h(units)f(are)i(b)m(ytes,)g(but)f(a)g(su\016x)
-f(of)i(\\G,")g(\\M,")h(or)e(\\K")h(will)c(sp)s(ecify)i(the)i(units)d
-(to)630 4840 y(b)s(e)i(2)p Fj(^)p Fn(30)i(\(GB\),)h(2)p
-Fj(^)p Fn(20)f(\(MB\))g(or)f(2)p Fj(^)p Fn(10)h(\(KB\))g(resp)s(ectiv)m
-(ely)-8 b(.)52 b(A)34 b(su\016x)f(of)h(\\g,")i(\\m")f(or)630
-4950 y(\\k")c(will)d(sp)s(ecify)h(units)g(of)h(10)p Fj(^)p
-Fn(9,)i(10)p Fj(^)p Fn(6)f(or)g(10)p Fj(^)p Fn(3)g(b)m(ytes)g(resp)s
-(ectiv)m(ely)-8 b(.)40 b(F)-8 b(or)32 b(example:)870
-5090 y Fj(-s)47 b(128K)630 5230 y Fn(Will)20 b(request)j(the)f(lo)s
-(cal)g(send)g(and)f(receiv)m(e)j(so)s(c)m(k)m(et)g(bu\013er)d(sizes)h
-(to)h(b)s(e)f(128KB)i(or)e(131072)630 5340 y(b)m(ytes.)p
-eop end
-%%Page: 28 32
-TeXDict begin 28 31 bop 150 -116 a Fn(Chapter)30 b(6:)41
-b(Using)29 b(Netp)s(erf)i(to)g(Measure)f(Request/Resp)s(onse)1254
-b(28)630 299 y(While)27 b(the)h(historic)f(exp)s(ectation)h(is)f(that)i
-(setting)f(the)g(so)s(c)m(k)m(et)i(bu\013er)d(size)h(has)g(a)g(direct)
-630 408 y(e\013ect)41 b(on)e(sa)m(y)h(the)f(TCP)g(windo)m(w,)h(to)s(da)
-m(y)g(that)g(ma)m(y)g(not)f(hold)f(true)h(for)g(all)f(stac)m(ks.)630
-518 y([Default:)j(0)31 b(-)f(use)h(the)f(system's)h(default)e(so)s(c)m
-(k)m(et)k(bu\013er)c(sizes])150 673 y Fj(-S)h(<sizespec>)630
-782 y Fn(This)19 b(option)g(sets)i(the)g(remote)g(send)f(and/or)g
-(receiv)m(e)h(so)s(c)m(k)m(et)h(bu\013er)e(sizes)g(for)g(the)g(con)m
-(trol)630 892 y(connection)i(to)h(the)f(v)-5 b(alue\(s\))22
-b(sp)s(eci\014ed.)37 b(Often,)23 b(this)e(will)e(a\013ect)24
-b(the)e(adv)m(ertised)g(and/or)630 1002 y(e\013ectiv)m(e)33
-b(TCP)d(or)h(other)g(windo)m(w,)f(but)g(on)h(some)g(platforms)f(it)h
-(ma)m(y)h(not.)42 b(By)32 b(default)630 1111 y(the)h(units)f(are)i(b)m
-(ytes,)g(but)f(a)g(su\016x)f(of)i(\\G,")g(\\M,")h(or)e(\\K")h(will)c
-(sp)s(ecify)i(the)i(units)d(to)630 1221 y(b)s(e)i(2)p
-Fj(^)p Fn(30)i(\(GB\),)h(2)p Fj(^)p Fn(20)f(\(MB\))g(or)f(2)p
-Fj(^)p Fn(10)h(\(KB\))g(resp)s(ectiv)m(ely)-8 b(.)52
-b(A)34 b(su\016x)f(of)h(\\g,")i(\\m")f(or)630 1330 y(\\k")c(will)d(sp)s
-(ecify)h(units)g(of)h(10)p Fj(^)p Fn(9,)i(10)p Fj(^)p
-Fn(6)f(or)g(10)p Fj(^)p Fn(3)g(b)m(ytes)g(resp)s(ectiv)m(ely)-8
-b(.)40 b(F)-8 b(or)32 b(example:)870 1462 y Fj(-s)47
-b(128K)630 1595 y Fn(Will)20 b(request)j(the)f(lo)s(cal)g(send)g(and)f
-(receiv)m(e)j(so)s(c)m(k)m(et)g(bu\013er)d(sizes)h(to)h(b)s(e)f(128KB)i
-(or)e(131072)630 1704 y(b)m(ytes.)630 1836 y(While)27
-b(the)h(historic)f(exp)s(ectation)h(is)f(that)i(setting)f(the)g(so)s(c)
-m(k)m(et)i(bu\013er)d(size)h(has)g(a)g(direct)630 1946
-y(e\013ect)41 b(on)e(sa)m(y)h(the)f(TCP)g(windo)m(w,)h(to)s(da)m(y)g
-(that)g(ma)m(y)g(not)f(hold)f(true)h(for)g(all)f(stac)m(ks.)630
-2056 y([Default:)j(0)31 b(-)f(use)h(the)f(system's)h(default)e(so)s(c)m
-(k)m(et)k(bu\013er)c(sizes])150 2210 y Fj(-4)384 b Fn(Set)23
-b(the)f(lo)s(cal)g(and)g(remote)h(address)f(family)f(for)h(the)g(data)h
-(connection)g(to)g(AF)p 3346 2210 28 4 v 41 w(INET)f(-)g(ie)630
-2320 y(use)28 b(IPv4)h(addressing)e(only)-8 b(.)40 b(Just)28
-b(as)h(with)e(their)h(global)g(command-line)g(coun)m(terparts)630
-2429 y(the)38 b(last)f(of)g(the)h(`)p Fj(-4)p Fn(',)h(`)p
-Fj(-6)p Fn(',)g(`)p Fj(-H)p Fn(')e(or)g(`)p Fj(-L)p Fn(')h(option)e
-(wins)g(for)h(their)f(resp)s(ectiv)m(e)i(address)630
-2539 y(families.)150 2694 y Fj(-6)384 b Fn(This)32 b(option)i(is)f
-(iden)m(tical)g(to)i(its)f(`)p Fj(-4)p Fn(')g(cousin,)g(but)g(requests)
-g(IPv6)g(addresses)g(for)g(the)630 2803 y(lo)s(cal)c(and)f(remote)j
-(ends)d(of)i(the)f(data)h(connection.)150 2998 y Fd(6.2.1)63
-b(TCP)p 731 2998 37 5 v 53 w(RR)150 3145 y Fn(A)35 b(TCP)p
-453 3145 28 4 v 39 w(RR)g(\(TCP)f(Request/Resp)s(onse\))i(test)g(is)e
-(requested)h(b)m(y)f(passing)g(a)i(v)-5 b(alue)34 b(of)h(\\TCP)p
-3537 3145 V 40 w(RR")150 3255 y(to)d(the)g(global)e(`)p
-Fj(-t)p Fn(')i(command-line)e(option.)43 b(A)31 b(TCP)p
-2073 3255 V 40 w(RR)g(test)h(can)g(b)s(e)f(though-of)g(as)h(a)g
-(user-space)150 3364 y(to)41 b(user-space)f Fj(ping)g
-Fn(with)e(no)j(think)d(time)i(-)h(it)f(is)f(a)h(sync)m(hronous,)i(one)f
-(transaction)f(at)h(a)g(time,)150 3474 y(request/resp)s(onse)30
-b(test.)275 3606 y(The)i(transaction)i(rate)g(is)e(the)i(n)m(um)m(b)s
-(er)e(of)h(complete)h(transactions)f(exc)m(hanged)i(divided)c(b)m(y)i
-(the)150 3715 y(length)d(of)g(time)g(it)g(to)s(ok)h(to)g(p)s(erform)e
-(those)i(transactions.)275 3848 y(If)j(the)i(t)m(w)m(o)g(Systems)f
-(Under)g(T)-8 b(est)35 b(are)h(otherwise)f(iden)m(tical,)g(a)h(TCP)p
-2795 3848 V 39 w(RR)f(test)h(with)e(the)i(same)150 3957
-y(request)f(and)f(resp)s(onse)g(size)g(should)f(b)s(e)h(symmetric)g(-)h
-(it)f(should)f(not)i(matter)g(whic)m(h)f(w)m(a)m(y)h(the)g(test)150
-4067 y(is)c(run,)g(and)g(the)h(CPU)f(utilization)f(measured)h(should)f
-(b)s(e)h(virtually)f(the)i(same)g(on)f(eac)m(h)i(system.)45
-b(If)150 4176 y(not,)27 b(it)f(suggests)g(that)h(the)f(CPU)f
-(utilization)f(mec)m(hanism)i(b)s(eing)e(used)h(ma)m(y)i(ha)m(v)m(e)g
-(some,)g(w)m(ell,)f(issues)150 4286 y(measuring)j(CPU)h(utilization)e
-(completely)j(and)e(accurately)-8 b(.)275 4418 y(Time)19
-b(to)j(establish)d(the)i(TCP)f(connection)h(is)f(not)h(coun)m(ted)g(in)
-f(the)h(result.)37 b(If)20 b(y)m(ou)h(w)m(an)m(t)h(connection)150
-4528 y(setup)30 b(o)m(v)m(erheads)h(included,)d(y)m(ou)j(should)d
-(consider)i(the)g(TCP)p 2370 4528 V 39 w(CC)g(or)g(TCP)p
-2876 4528 V 40 w(CRR)f(tests.)275 4660 y(If)36 b(sp)s(ecifying)e(the)j
-(`)p Fj(-D)p Fn(')g(option)f(to)h(set)g(TCP)p 1900 4660
-V 40 w(NODELA)-8 b(Y)37 b(and)f(disable)f(the)i(Nagle)g(Algorithm)150
-4769 y(increases)24 b(the)g(transaction)g(rate)h(rep)s(orted)e(b)m(y)h
-(a)g(TCP)p 2073 4769 V 40 w(RR)f(test,)k(it)c(implies)f(the)i(stac)m
-(k\(s\))i(o)m(v)m(er)f(whic)m(h)150 4879 y(the)k(TCP)p
-505 4879 V 39 w(RR)f(test)i(is)d(running)f(ha)m(v)m(e)k(a)f(brok)m(en)f
-(implemen)m(tation)f(of)i(the)g(Nagle)g(Algorithm.)39
-b(Lik)m(ely)150 4989 y(as)33 b(not)f(they)h(are)f(in)m(terpreting)f
-(Nagle)j(on)e(a)h(segmen)m(t)g(b)m(y)f(segmen)m(t)i(basis)d(rather)h
-(than)g(a)h(user)f(send)150 5098 y(b)m(y)26 b(user)f(send)h(basis.)38
-b(Y)-8 b(ou)26 b(should)e(con)m(tact)29 b(y)m(our)d(stac)m(k)h(v)m
-(endor\(s\))g(to)g(rep)s(ort)e(the)h(problem)f(to)i(them.)275
-5230 y(Here)42 b(is)e(an)i(example)f(of)g(t)m(w)m(o)i(systems)f
-(running)d(a)i(basic)g(TCP)p 2629 5230 V 40 w(RR)g(test)h(o)m(v)m(er)h
-(a)f(10)g(Gigabit)150 5340 y(Ethernet)30 b(link:)p eop
-end
-%%Page: 29 33
-TeXDict begin 29 32 bop 150 -116 a Fn(Chapter)30 b(6:)41
-b(Using)29 b(Netp)s(erf)i(to)g(Measure)f(Request/Resp)s(onse)1254
-b(29)390 299 y Fj(netperf)46 b(-t)h(TCP_RR)f(-H)h(192.168.2.125)390
-408 y(TCP)g(REQUEST/RESPONSE)c(TEST)k(from)g(0.0.0.0)e(\(0.0.0.0\))h
-(port)g(0)i(AF_INET)e(to)h(192.168.2.125)d(\(192.168.2.125\))f(port)k
-(0)h(AF_INET)p 5690 429 42 84 v 390 518 a(Local)e(/Remote)390
-628 y(Socket)g(Size)142 b(Request)94 b(Resp.)142 b(Elapsed)93
-b(Trans.)390 737 y(Send)142 b(Recv)g(Size)238 b(Size)190
-b(Time)237 b(Rate)390 847 y(bytes)94 b(Bytes)g(bytes)190
-b(bytes)142 b(secs.)189 b(per)47 b(sec)390 1066 y(16384)94
-b(87380)g(1)382 b(1)334 b(10.00)189 b(29150.15)390 1176
-y(16384)94 b(87380)275 1311 y Fn(In)36 b(this)g(example)g(the)h
-(request)g(and)g(resp)s(onse)f(sizes)g(w)m(ere)i(one)f(b)m(yte,)j(the)d
-(so)s(c)m(k)m(et)i(bu\013ers)c(w)m(ere)150 1421 y(left)27
-b(at)h(their)e(defaults,)h(and)f(the)h(test)h(ran)f(for)g(all)f(of)h
-(10)h(seconds.)39 b(The)27 b(transaction)g(p)s(er)f(second)h(rate)150
-1530 y(w)m(as)k(rather)f(go)s(o)s(d)g(:\))150 1731 y
-Fd(6.2.2)63 b(TCP)p 731 1731 37 5 v 53 w(CC)150 1878
-y Fn(A)26 b(TCP)p 444 1878 28 4 v 39 w(CC)f(\(TCP)h(Connect/Close\))g
-(test)h(is)e(requested)h(b)m(y)g(passing)e(a)i(v)-5 b(alue)26
-b(of)g(\\TCP)p 3281 1878 V 40 w(CC")f(to)i(the)150 1987
-y(global)h(`)p Fj(-t)p Fn(')h(option.)40 b(A)29 b(TCP)p
-1206 1987 V 39 w(CC)g(test)h(simply)c(measures)j(ho)m(w)g(fast)h(the)f
-(pair)f(of)h(systems)g(can)h(op)s(en)150 2097 y(and)25
-b(close)h(connections)f(b)s(et)m(w)m(een)i(one)e(another)h(in)e(a)i
-(sync)m(hronous)f(\(one)h(at)g(a)g(time\))g(manner.)38
-b(While)150 2206 y(this)29 b(is)h(considered)f(an)p 997
-2206 V 70 w(RR)h(test,)i(no)e(request)g(or)h(resp)s(onse)e(is)h(exc)m
-(hanged)h(o)m(v)m(er)h(the)e(connection.)275 2342 y(The)40
-b(issue)g(of)h(TIME)p 1065 2342 V 40 w(W)-10 b(AIT)41
-b(reuse)g(is)f(an)h(imp)s(ortan)m(t)f(one)h(for)g(a)h(TCP)p
-2927 2342 V 39 w(CC)e(test.)74 b(Basically)-8 b(,)150
-2452 y(TIME)p 400 2452 V 40 w(W)e(AIT)32 b(reuse)h(is)e(when)h(a)h
-(pair)e(of)i(systems)f(c)m(h)m(urn)g(through)g(connections)h(fast)g
-(enough)f(that)150 2561 y(they)i(wrap)f(the)h(16-bit)h(p)s(ort)e(n)m
-(um)m(b)s(er)g(space)h(in)f(less)g(time)h(than)f(the)i(length)e(of)h
-(the)g(TIME)p 3466 2561 V 40 w(W)-10 b(AIT)150 2671 y(state.)66
-b(While)37 b(it)h(is)f(indeed)g(theoretically)h(p)s(ossible)e(to)j
-(\\reuse")g(a)g(connection)f(in)f(TIME)p 3441 2671 V
-40 w(W)-10 b(AIT,)150 2780 y(the)36 b(conditions)d(under)h(whic)m(h)g
-(suc)m(h)h(reuse)g(is)g(p)s(ossible)d(are)k(rather)f(rare.)56
-b(An)35 b(attempt)h(to)h(reuse)e(a)150 2890 y(connection)c(in)e(TIME)p
-961 2890 V 39 w(W)-10 b(AIT)31 b(can)f(result)g(in)f(a)h(non-trivial)f
-(dela)m(y)h(in)f(connection)i(establishmen)m(t.)275 3026
-y(Basically)-8 b(,)30 b(an)m(y)h(time)f(the)g(connection)h(c)m(h)m(urn)
-e(rate)j(approac)m(hes:)275 3161 y(Sizeof\(clien)m(tp)s(ortspace\))e(/)
-h(Lengthof\(TIME)p 1915 3161 V 40 w(W)-10 b(AIT\))275
-3297 y(there)40 b(is)g(the)h(risk)f(of)h(TIME)p 1336
-3297 V 39 w(W)-10 b(AIT)41 b(reuse.)71 b(T)-8 b(o)42
-b(minimize)c(the)j(c)m(hances)h(of)e(this)g(happ)s(ening,)150
-3406 y(netp)s(erf)30 b(will)e(b)m(y)j(default)f(select)i(its)e(o)m(wn)h
-(clien)m(t)f(p)s(ort)h(n)m(um)m(b)s(ers)e(from)i(the)g(range)g(of)g
-(5000)i(to)e(65535.)150 3516 y(On)20 b(systems)h(with)e(a)i(60)h
-(second)f(TIME)p 1529 3516 V 39 w(W)-10 b(AIT)21 b(state,)j(this)c
-(should)f(allo)m(w)h(roughly)f(1000)k(transactions)150
-3626 y(p)s(er)k(second.)40 b(The)28 b(size)g(of)g(the)g(clien)m(t)g(p)s
-(ort)f(space)i(used)e(b)m(y)h(netp)s(erf)f(can)i(b)s(e)e(con)m(trolled)
-h(via)f(the)i(test-)150 3735 y(sp)s(eci\014c)d(`)p Fj(-p)p
-Fn(')i(option,)g(whic)m(h)e(tak)m(es)j(a)f Ff(sizesp)s(ec)33
-b Fn(as)28 b(a)g(v)-5 b(alue)27 b(setting)h(the)g(minim)m(um)d
-(\(\014rst)i(v)-5 b(alue\))28 b(and)150 3845 y(maxim)m(um)h(\(second)i
-(v)-5 b(alue\))30 b(p)s(ort)g(n)m(um)m(b)s(ers)f(used)g(b)m(y)i(netp)s
-(erf)e(at)i(the)g(clien)m(t)f(end.)275 3980 y(Since)c(no)i(requests)f
-(or)h(resp)s(onses)f(are)h(exc)m(hanged)h(during)c(a)j(TCP)p
-2636 3980 V 39 w(CC)f(test,)j(only)d(the)g(`)p Fj(-H)p
-Fn(',)i(`)p Fj(-L)p Fn(',)150 4090 y(`)p Fj(-4)p Fn(')c(and)g(`)p
-Fj(-6)p Fn(')g(of)g(the)h(\\common")g(test-sp)s(eci\014c)f(options)g
-(are)h(lik)m(ely)d(to)j(ha)m(v)m(e)h(an)e(e\013ect,)j(if)c(an)m(y)-8
-b(,)28 b(on)d(the)150 4200 y(results.)44 b(The)31 b(`)p
-Fj(-s)p Fn(')h(and)f(`)p Fj(-S)p Fn(')h(options)p 1528
-4200 V 71 w(ma)m(y)p 1733 4200 V 73 w(ha)m(v)m(e)h(some)f(e\013ect)i
-(if)c(they)j(alter)e(the)h(n)m(um)m(b)s(er)f(and/or)150
-4309 y(t)m(yp)s(e)j(of)h(options)e(carried)h(in)f(the)h(TCP)f(SYNc)m
-(hronize)h(segmen)m(ts.)54 b(The)33 b(`)p Fj(-P)p Fn(')h(and)g(`)p
-Fj(-r)p Fn(')g(options)g(are)150 4419 y(utterly)c(ignored.)275
-4554 y(Since)36 b(connection)i(establishmen)m(t)e(and)i(tear-do)m(wn)g
-(for)f(TCP)g(is)g(not)g(symmetric,)i(a)g(TCP)p 3586 4554
-V 39 w(CC)150 4664 y(test)31 b(is)f(not)g(symmetric)g(in)f(its)h
-(loading)f(of)i(the)f(t)m(w)m(o)i(systems)e(under)f(test.)150
-4864 y Fd(6.2.3)63 b(TCP)p 731 4864 37 5 v 53 w(CRR)150
-5011 y Fn(The)31 b(TCP)g(Connect/Request/Resp)s(onse)i(\(TCP)p
-1935 5011 28 4 v 39 w(CRR\))f(test)h(is)d(requested)i(b)m(y)g(passing)e
-(a)j(v)-5 b(alue)31 b(of)150 5121 y(\\TCP)p 395 5121
-V 40 w(CRR")d(to)h(the)f(global)g(`)p Fj(-t)p Fn(')g(command-line)f
-(option.)40 b(A)28 b(TCP)p 2603 5121 V 39 w(RR)g(test)i(is)d(lik)m(e)h
-(a)h(merger)f(of)h(a)150 5230 y(TCP)p 350 5230 V 39 w(RR)h(and)g(TCP)p
-924 5230 V 40 w(CC)f(test)j(whic)m(h)d(measures)h(the)h(p)s(erformance)
-f(of)h(establishing)d(a)j(connection,)150 5340 y(exc)m(hanging)h(a)g
-(single)e(request/resp)s(onse)h(transaction,)h(and)f(tearing-do)m(wn)g
-(that)h(connection.)45 b(This)p eop end
-%%Page: 30 34
-TeXDict begin 30 33 bop 150 -116 a Fn(Chapter)30 b(6:)41
-b(Using)29 b(Netp)s(erf)i(to)g(Measure)f(Request/Resp)s(onse)1254
-b(30)150 299 y(is)39 b(v)m(ery)h(m)m(uc)m(h)g(lik)m(e)f(what)h(happ)s
-(ens)e(in)h(an)h(HTTP)f(1.0)i(or)f(HTTP)f(1.1)i(connection)f(when)f
-(HTTP)150 408 y(Keepaliv)m(es)29 b(are)h(not)g(used.)40
-b(In)29 b(fact,)i(the)f(TCP)p 1827 408 28 4 v 39 w(CRR)f(test)h(w)m(as)
-g(added)f(to)i(netp)s(erf)d(to)j(sim)m(ulate)e(just)150
-518 y(that.)275 651 y(Since)i(a)i(request)f(and)g(resp)s(onse)g(are)h
-(exc)m(hanged)g(the)g(`)p Fj(-r)p Fn(',)g(`)p Fj(-s)p
-Fn(')f(and)g(`)p Fj(-S)p Fn(')h(options)f(can)g(ha)m(v)m(e)i(an)150
-761 y(e\013ect)e(on)e(the)h(p)s(erformance.)275 894 y(The)38
-b(issue)g(of)h(TIME)p 1059 894 V 40 w(W)-10 b(AIT)39
-b(reuse)g(exists)f(for)h(the)g(TCP)p 2396 894 V 39 w(CRR)g(test)h(just)
-e(as)i(it)e(do)s(es)h(for)g(the)150 1004 y(TCP)p 350
-1004 V 39 w(CC)33 b(test.)52 b(Similarly)-8 b(,)32 b(since)h
-(connection)h(establishmen)m(t)f(and)g(tear-do)m(wn)h(is)f(not)h
-(symmetric,)150 1113 y(a)c(TCP)p 425 1113 V 39 w(CRR)f(test)i(is)d(not)
-i(symmetric)f(ev)m(en)h(when)f(the)g(request)h(and)f(resp)s(onse)f
-(sizes)i(are)g(the)f(same.)150 1310 y Fd(6.2.4)63 b(UDP)p
-745 1310 37 5 v 54 w(RR)150 1457 y Fn(A)33 b(UDP)h(Request/Resp)s(onse)
-g(\(UDP)p 1489 1457 28 4 v 41 w(RR\))f(test)h(is)f(requested)g(b)m(y)g
-(passing)g(a)g(v)-5 b(alue)33 b(of)h(\\UDP)p 3536 1457
-V 41 w(RR")150 1567 y(to)i(a)f(global)f(`)p Fj(-t)p Fn(')h(option.)53
-b(It)35 b(is)f(v)m(ery)h(m)m(uc)m(h)g(the)g(same)g(as)g(a)g(TCP)p
-2569 1567 V 40 w(RR)f(test)i(except)g(UDP)f(is)f(used)150
-1676 y(rather)c(than)g(TCP)-8 b(.)275 1809 y(UDP)31 b(do)s(es)g(not)g
-(pro)m(vide)g(for)g(retransmission)e(of)i(lost)g(UDP)h(datagrams,)g
-(and)f(netp)s(erf)f(do)s(es)h(not)150 1919 y(add)41 b(an)m(ything)f
-(for)h(that)h(either.)73 b(This)39 b(means)i(that)h(if)p
-2227 1919 V 80 w(an)m(y)p 2407 1919 V 82 w(request)f(or)g(resp)s(onse)f
-(is)h(lost,)j(the)150 2029 y(exc)m(hange)36 b(of)g(requests)e(and)h
-(resp)s(onses)f(will)e(stop)j(from)g(that)g(p)s(oin)m(t)f(un)m(til)f
-(the)j(test)f(timer)g(expires.)150 2138 y(Netp)s(erf)d(will)d(not)j
-(really)f(\\kno)m(w")h(this)f(has)h(happ)s(ened)e(-)i(the)g(only)f
-(symptom)h(will)d(b)s(e)i(a)h(lo)m(w)g(trans-)150 2248
-y(action)f(p)s(er)e(second)i(rate.)275 2381 y(The)21
-b(netp)s(erf)g(side)g(of)h(a)g(UDP)p 1299 2381 V 40 w(RR)g(test)h(will)
-c(call)i Fj(connect\(\))e Fn(on)j(its)f(data)i(so)s(c)m(k)m(et)g(and)f
-(thenceforth)150 2491 y(use)29 b(the)g Fj(send\(\))e
-Fn(and)h Fj(recv\(\))f Fn(so)s(c)m(k)m(et)k(calls.)39
-b(The)28 b(netserv)m(er)i(side)d(of)i(a)h(UDP)p 2911
-2491 V 40 w(RR)f(test)g(will)e(not)i(call)150 2600 y
-Fj(connect\(\))19 b Fn(and)i(will)e(use)j Fj(recvfrom\(\))d
-Fn(and)i Fj(sendto\(\))e Fn(calls.)37 b(This)20 b(means)i(that)g(ev)m
-(en)g(if)f(the)h(request)150 2710 y(and)34 b(resp)s(onse)g(sizes)h(are)
-g(the)g(same,)i(a)e(UDP)p 1777 2710 V 41 w(RR)f(test)i(is)p
-2264 2710 V 74 w(not)p 2435 2710 V 75 w(symmetric)e(in)g(its)g(loading)
-g(of)h(the)150 2819 y(t)m(w)m(o)d(systems)e(under)f(test.)275
-2953 y(Here)c(is)f(an)h(example)f(of)h(a)g(UDP)p 1414
-2953 V 41 w(RR)f(test)i(b)s(et)m(w)m(een)g(t)m(w)m(o)g(otherwise)e
-(iden)m(tical)g(t)m(w)m(o-CPU)i(systems)150 3062 y(joined)j(via)h(a)h
-(1)g(Gigabit)f(Ethernet)g(net)m(w)m(ork:)390 3196 y Fj($)47
-b(netperf)f(-T)h(1)h(-H)f(192.168.1.213)d(-t)j(UDP_RR)g(-c)g(-C)390
-3305 y(UDP)g(REQUEST/RESPONSE)c(TEST)k(from)g(0.0.0.0)e(\(0.0.0.0\))h
-(port)g(0)i(AF_INET)e(to)h(192.168.1.213)d(\(192.168.1.213\))f(port)k
-(0)h(AF_INET)p 5690 3325 42 84 v 390 3415 a(Local)e(/Remote)390
-3524 y(Socket)g(Size)142 b(Request)46 b(Resp.)94 b(Elapsed)46
-b(Trans.)141 b(CPU)191 b(CPU)f(S.dem)141 b(S.dem)p 3875
-3544 42 76 v 390 3634 a(Send)h(Recv)g(Size)190 b(Size)142
-b(Time)190 b(Rate)237 b(local)95 b(remote)46 b(local)141
-b(remote)p 3923 3634 42 56 v 390 3743 a(bytes)94 b(bytes)g(bytes)142
-b(bytes)94 b(secs.)142 b(per)47 b(sec)94 b(\045)48 b(I)191
-b(\045)47 b(I)191 b(us/Tr)141 b(us/Tr)p 3875 3764 42
-84 v 390 3963 a(65535)94 b(65535)g(1)334 b(1)286 b(10.01)142
-b(15262.48)f(13.90)94 b(16.11)g(18.221)g(21.116)p 4019
-3963 42 56 v 390 4072 a(65535)g(65535)275 4205 y Fn(This)25
-b(example)i(includes)e(the)j(`)p Fj(-c)p Fn(')f(and)g(`)p
-Fj(-C)p Fn(')g(options)f(to)j(enable)d(CPU)h(utilization)f(rep)s
-(orting)g(and)150 4315 y(sho)m(ws)k(the)g(asymmetry)g(in)f(CPU)h
-(loading.)40 b(The)29 b(`)p Fj(-T)p Fn(')h(option)g(w)m(as)g(used)g(to)
-h(mak)m(e)g(sure)e(netp)s(erf)h(and)150 4425 y(netserv)m(er)h(ran)f(on)
-g(a)h(giv)m(en)f(CPU)g(and)g(did)f(not)h(mo)m(v)m(e)i(around)d(during)f
-(the)j(test.)150 4621 y Fd(6.2.5)63 b(XTI)p 697 4621
-37 5 v 53 w(TCP)p 1008 4621 V 54 w(RR)150 4768 y Fn(An)36
-b(XTI)p 478 4768 28 4 v 40 w(TCP)p 712 4768 V 39 w(RR)g(test)h(is)e
-(essen)m(tially)g(the)i(same)g(as)f(a)h(Section)f(6.2.1)i([TCP)p
-3004 4768 V 39 w(RR],)f(page)g(28)g(test)150 4878 y(only)c(using)f(the)
-i(XTI)g(rather)f(than)h(BSD)g(So)s(c)m(k)m(ets)h(in)m(terface.)52
-b(It)33 b(is)g(requested)h(b)m(y)g(passing)e(a)i(v)-5
-b(alue)150 4988 y(of)31 b(\\XTI)p 472 4988 V 40 w(TCP)p
-706 4988 V 39 w(RR")f(to)i(the)e(`)p Fj(-t)p Fn(')g(global)g
-(command-line)f(option.)275 5121 y(The)e(test-sp)s(eci\014c)g(options)g
-(for)h(an)f(XTI)p 1698 5121 V 40 w(TCP)p 1932 5121 V
-39 w(RR)h(test)g(are)g(the)g(same)g(as)g(those)g(for)g(a)g(TCP)p
-3583 5121 V 39 w(RR)150 5230 y(test)e(with)f(the)g(addition)f(of)i(the)
-f(`)p Fj(-X)30 b(<devspec>)p Fn(')24 b(option)g(to)j(sp)s(ecify)d(the)i
-(names)f(of)h(the)f(lo)s(cal)g(and/or)150 5340 y(remote)31
-b(XTI)f(device)h(\014le\(s\).)p eop end
-%%Page: 31 35
-TeXDict begin 31 34 bop 150 -116 a Fn(Chapter)30 b(6:)41
-b(Using)29 b(Netp)s(erf)i(to)g(Measure)f(Request/Resp)s(onse)1254
-b(31)150 299 y Fd(6.2.6)63 b(XTI)p 697 299 37 5 v 53
-w(TCP)p 1008 299 V 54 w(CC)150 511 y(6.2.7)g(XTI)p 697
-511 V 53 w(TCP)p 1008 511 V 54 w(CRR)150 722 y(6.2.8)g(XTI)p
-697 722 V 53 w(UDP)p 1022 722 V 55 w(RR)150 869 y Fn(An)27
-b(XTI)p 469 869 28 4 v 39 w(UDP)p 707 869 V 41 w(RR)g(test)h(is)e
-(essen)m(tially)g(the)h(same)g(as)h(a)f(UDP)p 2360 869
-V 41 w(RR)f(test)i(only)f(using)e(the)i(XTI)g(rather)150
-979 y(than)33 b(BSD)h(So)s(c)m(k)m(ets)h(in)m(terface.)50
-b(It)34 b(is)f(requested)g(b)m(y)g(passing)g(a)h(v)-5
-b(alue)33 b(of)g(\\XTI)p 3023 979 V 40 w(UDP)p 3262 979
-V 41 w(RR")h(to)g(the)150 1088 y(`)p Fj(-t)p Fn(')c(global)g
-(command-line)f(option.)275 1223 y(The)d(test-sp)s(eci\014c)h(options)f
-(for)g(an)h(XTI)p 1694 1223 V 40 w(UDP)p 1933 1223 V
-40 w(RR)g(test)g(are)h(the)e(same)i(as)f(those)g(for)g(a)g(UDP)p
-3582 1223 V 40 w(RR)150 1333 y(test)i(with)d(the)i(addition)f(of)h(the)
-g(`)p Fj(-X)i(<devspec>)p Fn(')25 b(option)j(to)g(sp)s(ecify)f(the)h
-(name)g(of)g(the)g(lo)s(cal)f(and/or)150 1442 y(remote)k(XTI)f(device)h
-(\014le\(s\).)150 1641 y Fd(6.2.9)63 b(DLCL)p 804 1641
-37 5 v 53 w(RR)150 1853 y(6.2.10)g(DLCO)p 883 1853 V
-54 w(RR)150 2065 y(6.2.11)g(SCTP)p 860 2065 V 54 w(RR)p
-eop end
-%%Page: 32 36
-TeXDict begin 32 35 bop 150 -116 a Fn(Chapter)30 b(7:)41
-b(Using)29 b(Netp)s(erf)i(to)g(Measure)f(Aggregate)k(P)m(erformance)
-1056 b(32)150 141 y Fi(7)80 b(Using)54 b(Netp)t(erf)f(to)h(Measure)f
-(Aggregate)311 299 y(P)l(erformance)150 539 y Fn(Chapter)30
-b(12)h([Netp)s(erf4],)h(page)f(42)h(is)d(the)i(preferred)f(b)s(enc)m
-(hmark)f(to)j(use)e(when)g(one)g(w)m(an)m(ts)i(to)f(mea-)150
-648 y(sure)g(aggregate)k(p)s(erformance)c(b)s(ecause)h(netp)s(erf)f
-(has)h(no)g(supp)s(ort)e(for)i(explicit)e(sync)m(hronization)h(of)150
-758 y(concurren)m(t)g(tests.)275 895 y(Basically)-8 b(,)30
-b(there)g(are)h(t)m(w)m(o)h(w)m(a)m(ys)f(to)g(measure)g(aggregate)i(p)s
-(erformance)d(with)f(netp)s(erf.)40 b(The)30 b(\014rst)150
-1004 y(is)h(to)h(run)e(m)m(ultiple,)g(concurren)m(t)i(netp)s(erf)f
-(tests)h(and)f(can)h(b)s(e)f(applied)e(to)k(an)m(y)f(of)f(the)h(netp)s
-(erf)f(tests.)150 1114 y(The)d(second)h(is)e(to)j(con\014gure)e(netp)s
-(erf)g(with)f Fj(--enable-burst)e Fn(and)j(is)f(applicable)g(to)i(the)g
-(TCP)p 3583 1114 28 4 v 39 w(RR)150 1223 y(test.)150
-1459 y Fm(7.1)68 b(Running)45 b(Concurren)l(t)g(Netp)t(erf)g(T)-11
-b(ests)150 1618 y Fn(Chapter)30 b(12)h([Netp)s(erf4],)h(page)f(42)h(is)
-d(the)i(preferred)f(b)s(enc)m(hmark)f(to)j(use)e(when)g(one)g(w)m(an)m
-(ts)i(to)f(mea-)150 1728 y(sure)g(aggregate)k(p)s(erformance)c(b)s
-(ecause)h(netp)s(erf)f(has)h(no)g(supp)s(ort)e(for)i(explicit)e(sync)m
-(hronization)h(of)150 1837 y(concurren)m(t)g(tests.)41
-b(This)29 b(lea)m(v)m(es)i(netp)s(erf2)f(results)f(vulnerable)f(to)j
-Ff(sk)m(ew)39 b Fn(errors.)275 1974 y(Ho)m(w)m(ev)m(er,)49
-b(since)43 b(there)h(are)g(times)f(when)g(netp)s(erf4)g(is)g(una)m(v)-5
-b(ailable)42 b(it)h(ma)m(y)h(b)s(e)f(necessary)h(to)150
-2083 y(run)37 b(netp)s(erf.)63 b(The)38 b(sk)m(ew)g(error)g(can)g(b)s
-(e)g(minimized)d(b)m(y)j(making)g(use)g(of)g(the)h(con\014dence)f(in)m
-(terv)-5 b(al)150 2193 y(functionalit)m(y)d(.)51 b(Then)33
-b(one)i(simply)d(launc)m(hes)h(m)m(ultiple)f(tests)j(from)f(the)g
-(shell)f(using)g(a)h Fj(for)g Fn(lo)s(op)f(or)150 2303
-y(the)e(lik)m(e:)390 2439 y Fj(for)47 b(i)g(in)h(1)f(2)g(3)h(4)390
-2549 y(do)390 2658 y(netperf)e(-t)h(TCP_STREAM)e(-H)i(tardy.cup.hp.com)
-d(-i)j(10)g(-P)g(0)h(&)390 2768 y(done)275 2904 y Fn(whic)m(h)33
-b(will)f(run)h(four,)i(concurren)m(t)f(Section)h(5.2.1)h([TCP)p
-2331 2904 V 39 w(STREAM],)f(page)g(20)g(tests)h(from)e(the)150
-3014 y(system)h(on)h(whic)m(h)d(it)i(is)g(executed)h(to)g(tardy)-8
-b(.cup.hp.com.)55 b(Eac)m(h)36 b(concurren)m(t)f(netp)s(erf)g(will)d
-(iterate)150 3123 y(10)g(times)f(thanks)f(to)i(the)g(`)p
-Fj(-i)p Fn(')f(option)f(and)h(will)d(omit)j(the)h(test)g(banners)e
-(\(option)g(`)p Fj(-P)p Fn('\))i(for)f(brevit)m(y)-8
-b(.)150 3233 y(The)30 b(output)g(lo)s(oks)g(something)g(lik)m(e)f
-(this:)438 3369 y Fj(87380)94 b(16384)g(16384)189 b(10.03)238
-b(235.15)438 3479 y(87380)94 b(16384)g(16384)189 b(10.03)238
-b(235.09)438 3589 y(87380)94 b(16384)g(16384)189 b(10.03)238
-b(235.38)438 3698 y(87380)94 b(16384)g(16384)189 b(10.03)238
-b(233.96)275 3835 y Fn(W)-8 b(e)44 b(can)f(tak)m(e)i(the)f(sum)e(of)h
-(the)h(results)e(and)g(b)s(e)h(reasonably)f(con\014den)m(t)i(that)g
-(the)f(aggregate)150 3944 y(p)s(erformance)30 b(w)m(as)g(940)i
-(Mbits/s.)275 4081 y(If)e(y)m(ou)h(see)g(w)m(arnings)f(ab)s(out)g(netp)
-s(erf)g(not)h(ac)m(hieving)g(the)g(con\014dence)f(in)m(terv)-5
-b(als,)31 b(the)g(b)s(est)f(thing)150 4190 y(to)38 b(do)g(is)e(to)j
-(increase)e(the)h(n)m(um)m(b)s(er)e(of)i(iterations)f(with)f(`)p
-Fj(-i)p Fn(')h(and/or)h(increase)f(the)h(run)e(length)h(of)150
-4300 y(eac)m(h)32 b(iteration)d(with)h(`)p Fj(-l)p Fn('.)275
-4436 y(Y)-8 b(ou)30 b(can)h(also)f(enable)g(lo)s(cal)g(\(`)p
-Fj(-c)p Fn('\))h(and/or)f(remote)h(\(`)p Fj(-C)p Fn('\))g(CPU)f
-(utilization:)390 4573 y Fj(for)47 b(i)g(in)h(1)f(2)g(3)h(4)390
-4682 y(do)390 4792 y(netperf)e(-t)h(TCP_STREAM)e(-H)i(tardy.cup.hp.com)
-d(-i)j(10)g(-P)g(0)h(-c)f(-C)g(&)390 4902 y(done)390
-5121 y(87380)94 b(16384)g(16384)190 b(10.03)332 b(235.47)142
-b(3.67)238 b(5.09)f(10.226)94 b(14.180)p 4019 5121 42
-56 v 390 5230 a(87380)g(16384)g(16384)190 b(10.03)332
-b(234.73)142 b(3.67)238 b(5.09)f(10.260)94 b(14.225)p
-4019 5230 V 390 5340 a(87380)g(16384)g(16384)190 b(10.03)332
-b(234.64)142 b(3.67)238 b(5.10)f(10.263)94 b(14.231)p
-4019 5340 V eop end
-%%Page: 33 37
-TeXDict begin 33 36 bop 150 -116 a Fn(Chapter)30 b(7:)41
-b(Using)29 b(Netp)s(erf)i(to)g(Measure)f(Aggregate)k(P)m(erformance)
-1056 b(33)390 299 y Fj(87380)94 b(16384)g(16384)190 b(10.03)332
-b(234.87)142 b(3.67)238 b(5.09)f(10.253)94 b(14.215)p
-4019 299 42 56 v 275 437 a Fn(If)36 b(the)i(CPU)f(utilizations)e(rep)s
-(orted)i(for)g(the)h(same)g(system)f(are)h(the)g(same)g(or)f(v)m(ery)h
-(v)m(ery)g(close)150 547 y(y)m(ou)28 b(can)g(b)s(e)e(reasonably)h
-(con\014den)m(t)h(that)g(sk)m(ew)g(error)f(is)f(minimized.)37
-b(Presumeably)26 b(one)i(could)e(then)150 657 y(omit)k(`)p
-Fj(-i)p Fn(')f(but)h(that)g(is)f(not)h(advised,)f(particularly)e
-(when/if)i(the)h(CPU)f(utilization)f(approac)m(hes)j(100)150
-766 y(p)s(ercen)m(t.)40 b(In)26 b(the)i(example)f(ab)s(o)m(v)m(e)h(w)m
-(e)g(see)g(that)f(the)h(CPU)f(utilization)e(on)i(the)g(lo)s(cal)g
-(system)g(remains)150 876 y(the)k(same)f(for)g(all)g(four)f(tests,)j
-(and)e(is)f(only)g(o\013)i(b)m(y)g(0.01)g(out)g(of)g(5.09)g(on)g(the)f
-(remote)i(system.)390 1014 y Fc(NOTE:)g(It)f(is)h(v)m(ery)f(imp)s
-(ortan)m(t)h(to)g(rememeb)s(er)f(that)h(netp)s(erf)f(is)g(calculating)i
-(system-)390 1124 y(wide)38 b(CPU)f(utilization.)65 b(When)37
-b(calculating)j(the)e(service)h(demand)e(\(those)i(last)f(t)m(w)m(o)390
-1233 y(columns)26 b(in)f(the)i(output)e(ab)s(o)m(v)m(e\))j(eac)m(h)f
-(netp)s(erf)e(assumes)g(it)i(is)f(the)g(only)g(thing)g(running)390
-1343 y(on)44 b(the)h(system.)84 b(This)44 b(means)h(that)g(for)f
-(concurren)m(t)i(tests)g(the)e(service)i(demands)390
-1452 y(rep)s(orted)34 b(b)m(y)h(netp)s(erf)f(will)g(b)s(e)g(wrong.)53
-b(One)34 b(has)g(to)h(compute)g(service)h(demands)d(for)390
-1562 y(concurren)m(t)e(tests)h(b)m(y)e(hand.)275 1701
-y Fn(If)j(y)m(ou)i(wish)e(y)m(ou)h(can)h(add)e(a)i(unique,)f(global)f
-(`)p Fj(-B)p Fn(')i(option)e(to)i(eac)m(h)h(command)e(line)f(to)i(app)s
-(end)150 1810 y(the)c(giv)m(en)f(string)f(to)i(the)g(output:)390
-1949 y Fj(for)47 b(i)g(in)h(1)f(2)g(3)h(4)390 2058 y(do)390
-2168 y(netperf)e(-t)h(TCP_STREAM)e(-H)i(tardy.cup.hp.com)d(-B)j("this)f
-(is)h(test)g($i")g(-i)g(10)g(-P)g(0)h(&)p 3970 2188 42
-84 v 390 2277 a(done)390 2497 y(87380)94 b(16384)g(16384)190
-b(10.03)237 b(234.90)142 b(this)46 b(is)h(test)g(4)390
-2606 y(87380)94 b(16384)g(16384)190 b(10.03)237 b(234.41)142
-b(this)46 b(is)h(test)g(2)390 2716 y(87380)94 b(16384)g(16384)190
-b(10.03)237 b(235.26)142 b(this)46 b(is)h(test)g(1)390
-2825 y(87380)94 b(16384)g(16384)190 b(10.03)237 b(235.09)142
-b(this)46 b(is)h(test)g(3)275 2964 y Fn(Y)-8 b(ou)32
-b(will)d(notice)j(that)g(the)g(tests)h(completed)e(in)g(an)g(order)h
-(other)g(than)f(they)h(w)m(ere)g(started)g(from)150 3073
-y(the)39 b(shell.)63 b(This)37 b(underscores)h(wh)m(y)g(there)h(is)e(a)
-i(threat)g(of)g(sk)m(ew)g(error)f(and)g(wh)m(y)g(netp)s(erf4)g(is)g
-(the)150 3183 y(preferred)32 b(to)s(ol)h(for)g(aggregate)k(tests.)50
-b(Ev)m(en)33 b(if)f(y)m(ou)i(see)g(the)f(Netp)s(erf)g(Con)m(tributing)e
-(Editor)i(acting)150 3292 y(to)e(the)g(con)m(trary!-\))150
-3531 y Fm(7.2)68 b(Using)46 b({enable-burst)150 3690
-y Fn(If)30 b(one)h(con\014gures)f(netp)s(erf)f(with)g
-Fj(--enable-burst)p Fn(:)390 3829 y Fj(configure)45 b(--enable-burst)
-275 3967 y Fn(Then)36 b(a)j(test-sp)s(eci\014c)f(`)p
-Fj(-b)30 b(num)p Fn(')37 b(option)g(is)g(added)h(to)g(the)g(Section)g
-(6.2.1)i([TCP)p 3184 3967 28 4 v 39 w(RR],)e(page)h(28)150
-4077 y(and)30 b(Section)g(6.2.4)i([UDP)p 1092 4077 V
-41 w(RR],)e(page)h(30)g(tests.)42 b(This)28 b(option)i(causes)h(TCP)p
-2892 4077 V 39 w(RR)f(and)g(UDP)p 3471 4077 V 40 w(RR)g(to)150
-4186 y(quic)m(kly)f(w)m(ork)i(their)e(w)m(a)m(y)i(up)f(to)h(ha)m(ving)f
-(at)h(least)f(`)p Fj(num)p Fn(')g(transactions)h(in)e(\015igh)m(t)h(at)
-h(one)g(time.)275 4325 y(This)i(is)h(used)g(as)h(an)g(alternativ)m(e)g
-(to)g(or)g(ev)m(en)h(in)e(conjunction)f(with)h(m)m(ultiple-concurren)m
-(t)p 3583 4325 V 73 w(RR)150 4434 y(tests.)44 b(When)31
-b(run)f(with)g(just)h(a)h(single)e(instance)h(of)g(netp)s(erf,)g
-(increasing)f(the)i(burst)e(size)h(can)g(deter-)150 4544
-y(mine)e(the)h(maxim)m(um)f(n)m(um)m(b)s(er)f(of)j(transactions)f(p)s
-(er)e(second)i(can)h(b)s(e)e(serviced)g(b)m(y)h(a)h(single)d(pro)s
-(cess:)390 4682 y Fj(for)47 b(b)g(in)h(0)f(1)g(2)h(4)f(8)h(16)f(32)390
-4792 y(do)438 4902 y(netperf)f(-v)h(0)g(-t)g(TCP_RR)f(-B)i("-b)f($b")f
-(-H)i(hpcpc108)d(-P)i(0)h(--)f(-b)g($b)390 5011 y(done)390
-5230 y(9457.59)f(-b)h(0)390 5340 y(9975.37)f(-b)h(1)p
-eop end
-%%Page: 34 38
-TeXDict begin 34 37 bop 150 -116 a Fn(Chapter)30 b(7:)41
-b(Using)29 b(Netp)s(erf)i(to)g(Measure)f(Aggregate)k(P)m(erformance)
-1056 b(34)390 299 y Fj(10000.61)46 b(-b)h(2)390 408 y(20084.47)f(-b)h
-(4)390 518 y(29965.31)f(-b)h(8)390 628 y(71929.27)f(-b)h(16)390
-737 y(109718.17)e(-b)i(32)275 878 y Fn(The)33 b(global)h(`)p
-Fj(-v)p Fn(')g(and)g(`)p Fj(-P)p Fn(')g(options)f(w)m(ere)i(used)e(to)i
-(minimize)d(the)i(output)g(to)h(the)g(single)e(\014gure)150
-988 y(of)k(merit)e(whic)m(h)h(in)f(this)g(case)j(the)e(transaction)h
-(rate.)60 b(The)36 b(global)f Fj(-B)h Fn(option)g(w)m(as)h(used)f(to)h
-(more)150 1097 y(clearly)d(lab)s(el)f(the)i(output,)h(and)e(the)h
-(test-sp)s(eci\014c)g(`)p Fj(-b)p Fn(')g(option)f(enabled)g(b)m(y)g
-Fj(--enable-burst)d Fn(set)150 1207 y(the)g(n)m(um)m(b)s(er)e(of)h
-(transactions)h(in)e(\015igh)m(t)g(at)j(one)e(time.)275
-1348 y(No)m(w,)39 b(since)e(the)h(test-sp)s(eci\014c)f(`)p
-Fj(-D)p Fn(')g(option)g(w)m(as)g(not)h(sp)s(eci\014ed)d(to)j(set)g(TCP)
-p 3072 1348 28 4 v 39 w(NODELA)-8 b(Y,)39 b(the)150 1457
-y(stac)m(k)44 b(w)m(as)g(free)f(to)g(\\bundle")f(requests)h(and/or)f
-(resp)s(onses)g(in)m(to)h(TCP)f(segmen)m(ts)i(as)f(it)g(sa)m(w)g
-(\014t,)150 1567 y(and)38 b(since)g(the)g(default)g(request)h(and)e
-(resp)s(onse)h(size)g(is)g(one)g(b)m(yte,)k(there)d(could)e(ha)m(v)m(e)
-j(b)s(een)e(some)150 1677 y(considerable)27 b(bundling.)37
-b(If)28 b(one)h(w)m(an)m(ts)g(to)g(try)g(to)g(ac)m(hiev)m(e)h(a)f
-(closer)f(to)i(one-to-one)g(corresp)s(ondence)150 1786
-y(b)s(et)m(w)m(een)h(a)g(request)f(and)g(resp)s(onse)f(and)h(a)h(TCP)e
-(segmen)m(t,)j(add)e(the)g(test-sp)s(eci\014c)h(`)p Fj(-D)p
-Fn(')f(option:)390 1927 y Fj(for)47 b(b)g(in)h(0)f(1)g(2)h(4)f(8)h(16)f
-(32)390 2037 y(do)438 2146 y(netperf)f(-v)h(0)g(-t)g(TCP_RR)f(-B)i("-b)
-f($b)g(-D")g(-H)g(hpcpc108)e(-P)j(0)f(--)g(-b)g($b)h(-D)390
-2256 y(done)438 2475 y(8695.12)e(-b)h(0)g(-D)438 2585
-y(19966.48)e(-b)i(1)h(-D)438 2694 y(20691.07)d(-b)i(2)h(-D)438
-2804 y(49893.58)d(-b)i(4)h(-D)438 2913 y(62057.31)d(-b)i(8)h(-D)438
-3023 y(108416.88)d(-b)i(16)g(-D)438 3133 y(114411.66)e(-b)i(32)g(-D)275
-3273 y Fn(Y)-8 b(ou)42 b(can)g(see)h(that)f(this)f(has)h(a)g(rather)g
-(large)g(e\013ect)h(on)f(the)g(rep)s(orted)f(transaction)i(rate.)76
-b(In)150 3383 y(this)31 b(particular)f(instance,)j(the)f(author)g(b)s
-(eliev)m(es)f(it)h(relates)g(to)h(in)m(teractions)f(b)s(et)m(w)m(een)g
-(the)h(test)g(and)150 3493 y(in)m(terrupt)c(coalescing)i(settings)f(in)
-f(the)i(driv)m(er)e(for)h(the)g(NICs)g(used.)390 3634
-y Fc(NOTE:)35 b(Ev)m(en)f(if)h(y)m(ou)g(set)g(the)g(`)p
-Fj(-D)p Fc(')g(option)g(that)g(is)g(still)g(not)g(a)g(guaran)m(tee)h
-(that)f(eac)m(h)390 3743 y(transaction)45 b(is)f(in)f(its)h(o)m(wn)g
-(TCP)f(segmen)m(ts.)82 b(Y)-8 b(ou)44 b(should)e(get)j(in)m(to)g(the)f
-(habit)g(of)390 3853 y(v)m(erifying)28 b(the)g(relationship)g(b)s(et)m
-(w)m(een)h(the)f(transaction)h(rate)f(and)f(the)h(pac)m(k)m(et)h(rate)g
-(via)390 3962 y(other)i(means)275 4103 y Fn(Y)-8 b(ou)25
-b(can)h(also)f(com)m(bine)h Fj(--enable-burst)21 b Fn(functionalit)m(y)
-j(with)g(concurren)m(t)i(netp)s(erf)e(tests.)40 b(This)150
-4213 y(w)m(ould)29 b(then)h(b)s(e)g(an)g(\\aggregate)k(of)d
-(aggregates")i(if)d(y)m(ou)g(lik)m(e:)390 4463 y Fj(for)47
-b(i)g(in)h(1)f(2)g(3)h(4)390 4573 y(do)438 4682 y(netperf)e(-H)h
-(hpcpc108)e(-v)i(0)h(-P)f(0)h(-i)f(10)g(-B)g("aggregate)e($i)i(-b)g(8)h
-(-D")f(-t)g(TCP_RR)f(--)h(-b)g(8)h(-D)f(&)p 4447 4703
-42 84 v 390 4792 a(done)438 5011 y(46668.38)e(aggregate)h(4)h(-b)g(8)h
-(-D)438 5121 y(44890.64)d(aggregate)h(2)h(-b)g(8)h(-D)438
-5230 y(45702.04)d(aggregate)h(1)h(-b)g(8)h(-D)438 5340
-y(46352.48)d(aggregate)h(3)h(-b)g(8)h(-D)p eop end
-%%Page: 35 39
-TeXDict begin 35 38 bop 150 -116 a Fn(Chapter)30 b(7:)41
-b(Using)29 b(Netp)s(erf)i(to)g(Measure)f(Aggregate)k(P)m(erformance)
-1056 b(35)275 438 y(Since)24 b(eac)m(h)j(netp)s(erf)d(did)g(hit)h(the)g
-(con\014dence)h(in)m(terv)-5 b(als,)26 b(w)m(e)g(can)f(b)s(e)g
-(reasonably)g(certain)h(that)g(the)150 548 y(aggregate)i(transaction)d
-(p)s(er)f(second)h(rate)h(w)m(as)f(the)g(sum)f(of)h(all)f(four)g
-(concurren)m(t)h(tests,)j(or)c(something)150 658 y(just)34
-b(sh)m(y)g(of)h(184,000)i(transactions)d(p)s(er)g(second.)53
-b(T)-8 b(o)34 b(get)i(some)f(idea)f(if)f(that)i(w)m(as)g(also)f(the)h
-(pac)m(k)m(et)150 767 y(p)s(er)25 b(second)h(rate,)i(w)m(e)f(could)e
-(brac)m(k)m(et)j(that)f Fj(for)e Fn(lo)s(op)g(with)g(something)h(to)h
-(gather)g(statistics)f(and)f(run)150 877 y(the)31 b(results)e(through)g
-(b)s(eforeafter)i(\()p Fj(ftp://ftp.cup.hp.com/dist)o(/net)o(work)o
-(ing)o(/too)o(ls)p Fn(\):)390 1016 y Fj(/usr/sbin/ethtool)43
-b(-S)k(eth2)g(>)g(before)390 1126 y(for)g(i)g(in)h(1)f(2)g(3)h(4)390
-1235 y(do)438 1345 y(netperf)e(-H)h(192.168.2.108)d(-l)j(60)g(-v)g(0)h
-(-P)f(0)h(-B)f("aggregate)e($i)i(-b)g(8)h(-D")e(-t)i(TCP_RR)e(--)h(-b)g
-(8)g(-D)h(&)p 4686 1365 42 84 v 390 1455 a(done)390 1564
-y(wait)390 1674 y(/usr/sbin/ethtool)43 b(-S)k(eth2)g(>)g(after)438
-1893 y(52312.62)e(aggregate)h(2)h(-b)g(8)h(-D)438 2002
-y(50105.65)d(aggregate)h(4)h(-b)g(8)h(-D)438 2112 y(50890.82)d
-(aggregate)h(1)h(-b)g(8)h(-D)438 2222 y(50869.20)d(aggregate)h(3)h(-b)g
-(8)h(-D)390 2441 y(beforeafter)d(before)h(after)g(>)i(delta)390
-2660 y(grep)f(packets)e(delta)629 2770 y(rx_packets:)f(12251544)629
-2879 y(tx_packets:)g(12251550)275 3128 y Fn(This)39 b(example)i(uses)f
-Fj(ethtool)g Fn(b)s(ecause)h(the)g(system)g(b)s(eing)f(used)g(is)h
-(running)d(Lin)m(ux.)71 b(Other)150 3238 y(platforms)29
-b(ha)m(v)m(e)j(other)f(to)s(ols)f(-)g(for)g(example)h(HP-UX)g(has)f
-(lanadmin:)390 3377 y Fj(lanadmin)46 b(-g)h(mibstats)e(<ppa>)275
-3517 y Fn(and)29 b(of)i(course)f(one)h(could)e(instead)h(use)g
-Fj(netstat)p Fn(.)275 3656 y(The)c Fj(wait)h Fn(is)f(imp)s(ortan)m(t)g
-(b)s(ecause)i(w)m(e)f(are)h(launc)m(hing)e(concurren)m(t)h(netp)s(erfs)
-f(in)g(the)i(bac)m(kground.)150 3766 y(Without)d(it,)h(the)f(second)g
-(eth)m(to)s(ol)g(command)g(w)m(ould)f(b)s(e)g(run)g(b)s(efore)g(the)h
-(tests)h(\014nished)c(and)j(p)s(erhaps)150 3875 y(ev)m(en)31
-b(b)s(efore)f(the)h(last)f(of)g(them)h(got)g(started!)275
-4015 y(The)e(sum)f(of)i(the)g(rep)s(orted)f(transaction)h(rates)g(is)f
-(204178)j(o)m(v)m(er)f(60)f(seconds,)g(whic)m(h)f(is)f(a)i(total)h(of)
-150 4125 y(12250680)g(transactions.)40 b(Eac)m(h)28 b(transaction)g(is)
-f(the)h(exc)m(hange)h(of)f(a)g(request)g(and)f(a)h(resp)s(onse,)g(so)f
-(w)m(e)150 4234 y(m)m(ultiply)h(that)j(b)m(y)f(2)h(to)g(arriv)m(e)f(at)
-h(24501360.)275 4374 y(The)j(sum)h(of)g(the)h(eth)m(to)s(ol)g(stats)g
-(is)f(24503094)j(pac)m(k)m(ets)g(whic)m(h)c(matc)m(hes)i(what)g(netp)s
-(erf)e(w)m(as)i(re-)150 4483 y(p)s(orting)29 b(v)m(ery)i(w)m(ell.)275
-4623 y(Had)d(the)h(request)g(or)f(resp)s(onse)g(size)h(di\013ered,)f(w)
-m(e)h(w)m(ould)e(need)i(to)g(kno)m(w)g(ho)m(w)f(it)h(compared)f(with)
-150 4732 y(the)j Ff(MSS)k Fn(for)30 b(the)g(connection.)275
-4872 y(Just)f(for)h(grins,)g(here)g(is)f(the)i(excercise)g(rep)s
-(eated,)g(using)d Fj(netstat)h Fn(instead)g(of)i Fj(ethtool)390
-5011 y(netstat)46 b(-s)h(-t)g(>)h(before)390 5121 y(for)f(i)g(in)h(1)f
-(2)g(3)h(4)390 5230 y(do)438 5340 y(netperf)e(-l)h(60)g(-H)g
-(192.168.2.108)d(-v)j(0)h(-P)f(0)h(-B)f("aggregate)e($i)i(-b)g(8)h(-D")
-e(-t)i(TCP_RR)e(--)h(-b)g(8)g(-D)h(&)f(done)p 4925 5360
-V eop end
-%%Page: 36 40
-TeXDict begin 36 39 bop 150 -116 a Fn(Chapter)30 b(7:)41
-b(Using)29 b(Netp)s(erf)i(to)g(Measure)f(Aggregate)k(P)m(erformance)
-1056 b(36)390 299 y Fj(wait)390 408 y(netstat)46 b(-s)h(-t)g(>)h(after)
-438 628 y(51305.88)d(aggregate)h(4)h(-b)g(8)h(-D)438
-737 y(51847.73)d(aggregate)h(2)h(-b)g(8)h(-D)438 847
-y(50648.19)d(aggregate)h(3)h(-b)g(8)h(-D)438 956 y(53605.86)d
-(aggregate)h(1)h(-b)g(8)h(-D)390 1176 y(beforeafter)d(before)h(after)g
-(>)i(delta)390 1395 y(grep)f(segments)e(delta)581 1504
-y(12445708)g(segments)h(received)581 1614 y(12445730)f(segments)h(send)
-h(out)581 1724 y(1)g(segments)f(retransmited)581 1833
-y(0)h(bad)g(segments)f(received.)275 1968 y Fn(The)29
-b(sums)h(are)g(left)h(as)f(an)g(excercise)h(to)h(the)e(reader)g(:\))275
-2102 y(Things)18 b(b)s(ecome)j(considerably)e(more)i(complicated)f(if)g
-(there)h(are)g(non-trvial)e(pac)m(k)m(et)k(losses)d(and/or)150
-2212 y(retransmissions.)275 2346 y(Of)36 b(course)h(all)g(this)f(c)m
-(hec)m(king)i(is)e(unnecessary)g(if)h(the)g(test)h(is)e(a)i(UDP)p
-2818 2346 28 4 v 40 w(RR)f(test)h(b)s(ecause)g(UDP)150
-2456 y(\\nev)m(er")k(aggregates)i(m)m(ultiple)38 b(sends)i(in)m(to)h
-(the)g(same)h(UDP)f(datagram,)k(and)40 b(there)h(are)h(no)e(A)m(C-)150
-2565 y(Kno)m(wledgemen)m(ts)32 b(in)e(UDP)-8 b(.)32 b(The)f(loss)g(of)h
-(a)g(single)e(request)h(or)h(resp)s(onse)e(will)f(not)j(bring)d(a)j
-(\\burst")150 2675 y(UDP)p 355 2675 V 40 w(RR)23 b(test)h(to)g(a)f
-(screec)m(hing)g(halt,)h(but)f(it)f(will)e(reduce)j(the)g(n)m(um)m(b)s
-(er)f(of)h(transactions)g(outstanding)150 2785 y(at)28
-b(an)m(y)f(one)g(time.)39 b(A)27 b(\\burst")g(UDP)p 1456
-2785 V 40 w(RR)g(test)g Fc(will)h Fn(come)f(to)h(a)f(halt)g(if)e(the)i
-(sum)f(of)h(the)g(lost)g(requests)150 2894 y(and)j(resp)s(onses)f(reac)
-m(hes)i(the)g(v)-5 b(alue)30 b(sp)s(eci\014ed)f(in)g(the)h(test-sp)s
-(eci\014c)h(`)p Fj(-b)p Fn(')f(option.)p eop end
-%%Page: 37 41
-TeXDict begin 37 40 bop 150 -116 a Fn(Chapter)30 b(8:)41
-b(Using)29 b(Netp)s(erf)i(to)g(Measure)f(Bidirectional)f(T)-8
-b(ransfer)1115 b(37)150 141 y Fi(8)80 b(Using)54 b(Netp)t(erf)f(to)h
-(Measure)f(Bidirectional)311 299 y(T)-13 b(ransfer)150
-559 y Fn(There)26 b(are)h(t)m(w)m(o)g(w)m(a)m(ys)h(to)f(use)f(netp)s
-(erf)f(to)i(measure)g(the)f(p)s(erfomance)g(of)h(bidirectional)d
-(transfer.)38 b(The)150 669 y(\014rst)31 b(is)h(to)g(run)f(concurren)m
-(t)h(netp)s(erf)f(tests)i(from)f(the)g(command)g(line.)44
-b(The)32 b(second)g(is)f(to)i(con\014gure)150 779 y(netp)s(erf)40
-b(with)f Fj(--enable-burst)e Fn(and)k(use)f(a)i(single)d(instance)i(of)
-g(the)g(Section)g(6.2.1)h([TCP)p 3532 779 28 4 v 40 w(RR],)150
-888 y(page)31 b(28)g(test.)275 1031 y(While)21 b(neither)h(metho)s(d)h
-(is)f(more)h(\\correct")i(than)e(the)g(other,)i(eac)m(h)f(is)e(doing)g
-(so)i(in)d(di\013eren)m(t)i(w)m(a)m(ys,)150 1141 y(and)34
-b(that)h(has)g(p)s(ossible)d(implications.)51 b(F)-8
-b(or)35 b(instance,)h(using)d(the)i(concurren)m(t)g(netp)s(erf)f(test)h
-(mec)m(h-)150 1251 y(anism)c(means)h(that)g(m)m(ultiple)e(TCP)h
-(connections)h(and)g(m)m(ultiple)d(pro)s(cesses)j(are)h(in)m(v)m(olv)m
-(ed,)f(whereas)150 1360 y(using)27 b(the)i(single)e(instance)h(of)h
-(TCP)p 1446 1360 V 39 w(RR)g(there)f(is)g(only)g(one)h(TCP)e
-(connection)i(and)f(one)h(pro)s(cess)f(on)150 1470 y(eac)m(h)k(end.)40
-b(They)29 b(ma)m(y)i(b)s(eha)m(v)m(e)g(di\013eren)m(tly)-8
-b(,)30 b(esp)s(ecially)f(on)h(an)g(MP)h(system.)150 1715
-y Fm(8.1)68 b(Bidirectional)46 b(T)-11 b(ransfer)45 b(with)g(Concurren)
-l(t)g(T)-11 b(ests)150 1875 y Fn(If)57 b(w)m(e)h(had)e(t)m(w)m(o)j
-(hosts)e(F)-8 b(red)58 b(and)f(Ethel,)63 b(w)m(e)58 b(could)e(simply)f
-(run)h(a)i(netp)s(erf)e(Section)h(5.2.1)150 1984 y([TCP)p
-375 1984 V 39 w(STREAM],)e(page)g(20)g(test)g(on)f(F)-8
-b(red)54 b(p)s(oin)m(ting)f(at)i(Ethel,)k(and)54 b(a)h(concurren)m(t)f
-(netp)s(erf)150 2094 y(TCP)p 350 2094 V 39 w(STREAM)45
-b(test)i(on)f(Ethel)f(p)s(oin)m(ting)f(at)j(F)-8 b(red,)50
-b(but)45 b(since)g(there)h(are)g(no)g(mec)m(hanisms)f(to)150
-2204 y(sync)m(hronize)31 b(netp)s(erf)g(tests)i(and)e(w)m(e)i(w)m(ould)
-d(b)s(e)i(starting)f(tests)i(from)e(t)m(w)m(o)j(di\013eren)m(t)d
-(systems,)i(there)150 2313 y(is)c(a)i(considerable)e(risk)g(of)i(sk)m
-(ew)f(error.)275 2457 y(F)-8 b(ar)80 b(b)s(etter)f(w)m(ould)f(b)s(e)h
-(to)h(run)e(sim)m(ultaneous)f(TCP)p 2461 2457 V 40 w(STREAM)h(and)h
-(Section)g(5.2.2)150 2566 y([TCP)p 375 2566 V 39 w(MAER)-8
-b(TS],)37 b(page)f(21)h(tests)f(from)g(just)f Fc(one)h
-Fn(system,)i(using)c(the)i(concepts)h(and)e(pro)s(cedures)150
-2676 y(outlined)42 b(in)h(Section)h(7.1)h([Running)c(Concurren)m(t)j
-(Netp)s(erf)f(T)-8 b(ests],)49 b(page)c(32.)82 b(Here)44
-b(then)g(is)f(an)150 2785 y(example:)390 2929 y Fj(for)k(i)g(in)h(1)390
-3038 y(do)438 3148 y(netperf)e(-H)h(192.168.2.108)d(-t)j(TCP_STREAM)e
-(-B)i("outbound")e(-i)i(10)h(-P)f(0)g(-v)g(0)h(--)f(-s)g(256K)g(-S)g
-(256K)g(&)p 4686 3168 42 76 v 438 3257 a(netperf)f(-H)h(192.168.2.108)d
-(-t)j(TCP_MAERTS)e(-B)i("inbound")93 b(-i)47 b(10)h(-P)f(0)g(-v)g(0)h
-(--)f(-s)g(256K)g(-S)g(256K)g(&)p 4686 3278 V 390 3367
-a(done)438 3586 y(892.66)f(outbound)438 3696 y(891.34)g(inbound)275
-3949 y Fn(W)-8 b(e)32 b(ha)m(v)m(e)h(used)e(a)h Fj(for)e
-Fn(lo)s(op)h(in)f(the)i(shell)d(with)i(just)g(one)g(iteration)h(b)s
-(ecause)f(that)h(will)d(b)s(e)i Fc(m)m(uc)m(h)150 4058
-y Fn(easier)h(to)i(get)f(b)s(oth)f(tests)h(started)g(at)g(more)g(or)g
-(less)e(the)i(same)g(time)f(than)g(doing)g(it)g(b)m(y)g(hand.)46
-b(The)150 4168 y(global)35 b(`)p Fj(-P)p Fn(')g(and)g(`)p
-Fj(-v)p Fn(')g(options)g(are)h(used)e(b)s(ecause)h(w)m(e)h(aren't)g(in)
-m(terested)g(in)e(an)m(ything)h(other)g(than)150 4277
-y(the)h(throughput,)h(and)f(the)g(global)g(`)p Fj(-B)p
-Fn(')g(option)g(is)f(used)h(to)h(tag)g(eac)m(h)h(output)e(so)g(w)m(e)h
-(kno)m(w)f(whic)m(h)150 4387 y(w)m(as)27 b(in)m(b)s(ound)e(and)h(whic)m
-(h)g(outb)s(ound)f(relativ)m(e)i(to)h(the)f(system)h(on)f(whic)m(h)e(w)
-m(e)j(w)m(ere)f(running)e(netp)s(erf.)150 4497 y(Of)32
-b(course)h(that)h(sense)f(is)f(switc)m(hed)g(on)h(the)g(system)g
-(running)e(netserv)m(er)i(:\))46 b(The)33 b(use)f(of)h(the)h(global)150
-4606 y(`)p Fj(-i)p Fn(')c(option)g(is)g(explained)e(in)h(Section)h(7.1)
-i([Running)c(Concurren)m(t)i(Netp)s(erf)g(T)-8 b(ests],)31
-b(page)g(32.)150 4852 y Fm(8.2)68 b(Bidirectional)46
-b(T)-11 b(ransfer)45 b(with)g(TCP)p 2320 4852 41 6 v
-59 w(RR)150 5011 y Fn(If)24 b(one)h(con\014gures)f(netp)s(erf)f(with)g
-Fj(--enable-burst)e Fn(then)j(one)g(can)h(use)f(the)h(test-sp)s
-(eci\014c)f(`)p Fj(-b)p Fn(')g(option)150 5121 y(to)33
-b(increase)g(the)g(n)m(um)m(b)s(er)e(of)i(transactions)f(in)g(\015igh)m
-(t)g(at)h(one)g(time.)47 b(If)32 b(one)h(also)g(uses)f(the)h(-r)f
-(option)150 5230 y(to)e(mak)m(e)g(those)f(transactions)g(larger)g(the)g
-(test)h(starts)f(to)h(lo)s(ok)f(more)g(and)f(more)h(lik)m(e)f(a)i
-(bidirectional)150 5340 y(transfer)g(than)g(a)h(request/resp)s(onse)f
-(test.)p eop end
-%%Page: 38 42
-TeXDict begin 38 41 bop 150 -116 a Fn(Chapter)30 b(8:)41
-b(Using)29 b(Netp)s(erf)i(to)g(Measure)f(Bidirectional)f(T)-8
-b(ransfer)1115 b(38)275 299 y(No)m(w,)30 b(the)h(logic)e(b)s(ehing)f
-Fj(--enable-burst)e Fn(is)j(v)m(ery)h(simple,)f(and)g(there)h(are)g(no)
-g(calls)f(to)i Fj(poll\(\))150 408 y Fn(or)g Fj(select\(\))d
-Fn(whic)m(h)i(means)h(w)m(e)g(w)m(an)m(t)h(to)f(mak)m(e)h(sure)e(that)i
-(the)f Fj(send\(\))e Fn(calls)h(will)e(nev)m(er)j(blo)s(c)m(k,)g(or)150
-518 y(w)m(e)j(run)e(the)h(risk)f(of)i(deadlo)s(c)m(k)f(with)f(eac)m(h)j
-(side)d(stuc)m(k)i(trying)f(to)h(call)f Fj(send\(\))e
-Fn(and)i(neither)f(calling)150 628 y Fj(recv\(\))p Fn(.)275
-762 y(F)-8 b(ortunately)g(,)40 b(this)c(is)h(easily)f(accomplished)g(b)
-m(y)i(setting)f(a)h(\\large)g(enough")f(so)s(c)m(k)m(et)j(bu\013er)c
-(size)150 872 y(with)31 b(the)h(test-sp)s(eci\014c)g(`)p
-Fj(-s)p Fn(')g(and)g(`)p Fj(-S)p Fn(')f(options.)46 b(Presen)m(tly)31
-b(this)g(m)m(ust)h(b)s(e)g(p)s(erformed)e(b)m(y)i(the)g(user.)150
-981 y(F)-8 b(uture)24 b(v)m(ersions)g(of)h(netp)s(erf)e(migh)m(t)h
-(attempt)i(to)f(do)f(this)f(automagically)-8 b(,)26 b(but)e(there)h
-(are)f(some)h(issues)150 1091 y(to)31 b(b)s(e)f(w)m(ork)m(ed-out.)275
-1225 y(Here)i(then)g(is)f(an)h(example)f(of)i(a)f(bidirectional)d
-(transfer)j(test)h(using)d Fj(--enable-burst)e Fn(and)k(the)150
-1335 y(Section)e(6.2.1)i([TCP)p 910 1335 28 4 v 40 w(RR],)e(page)i(28)f
-(test:)390 1469 y Fj(netperf)46 b(-t)h(TCP_RR)f(-H)h(hpcpc108)f(--)h
-(-b)g(6)h(-r)f(32K)g(-s)g(256K)g(-S)g(256K)390 1579 y(TCP)g
-(REQUEST/RESPONSE)c(TEST)k(from)g(0.0.0.0)e(\(0.0.0.0\))h(port)g(0)i
-(AF_INET)e(to)h(hpcpc108.cup.hp.com)42 b(\(16.89.84.108\))i(port)j(0)g
-(AF_INET)f(:)h(first)g(burst)f(6)p 6690 1599 42 84 v
-390 1689 a(Local)g(/Remote)390 1798 y(Socket)g(Size)142
-b(Request)94 b(Resp.)142 b(Elapsed)93 b(Trans.)390 1908
-y(Send)142 b(Recv)g(Size)238 b(Size)190 b(Time)237 b(Rate)390
-2017 y(bytes)94 b(Bytes)g(bytes)190 b(bytes)142 b(secs.)189
-b(per)47 b(sec)390 2237 y(524288)f(524288)g(32768)190
-b(32768)142 b(10.01)189 b(3525.97)390 2346 y(524288)46
-b(524288)275 2590 y Fn(No)m(w,)41 b(at)e(presen)m(t)g(netp)s(erf)e(do)s
-(es)i(not)f(include)f(a)i(bit)e(or)i(b)m(yte)g(rate)g(in)e(the)i
-(output)f(of)h(an)p 3583 2590 28 4 v 78 w(RR)150 2700
-y(test)29 b(whic)m(h)d(means)i(w)m(e)g(m)m(ust)g(calculate)g(it)g
-(ourselv)m(es.)39 b(Eac)m(h)29 b(transaction)f(is)e(the)i(exc)m(hange)i
-(of)e(32768)150 2809 y(b)m(ytes)35 b(of)g(request)g(and)f(32768)j(b)m
-(ytes)e(of)g(resp)s(onse,)g(or)f(65536)j(b)m(ytes.)54
-b(Multiply)32 b(that)k(b)m(y)e(8)h(and)f(w)m(e)150 2919
-y(arriv)m(e)24 b(at)h(524288)i(bits)d(p)s(er)f(transaction.)39
-b(Multiply)22 b(that)j(b)m(y)f(3525.97)j(and)d(w)m(e)h(arriv)m(e)f(at)h
-(1848623759)150 3029 y(bits)g(p)s(er)g(second.)39 b(Since)26
-b(things)e(w)m(ere)j(uniform,)e(w)m(e)i(can)f(divide)e(that)j(b)m(y)f
-(t)m(w)m(o)h(and)f(arriv)m(e)f(at)i(roughly)150 3138
-y(924311879)48 b(bits)43 b(p)s(er)g(second)h(eac)m(h)h(w)m(a)m(y)-8
-b(.)83 b(That)44 b(corresp)s(onds)f(to)i(\\link-rate")f(for)f(a)i(1)f
-(Gigiabit)150 3248 y(Ethernet)30 b(whic)m(h)f(happ)s(ens)g(to)i(b)s(e)f
-(the)g(t)m(yp)s(e)h(of)f(netp)m(wrk)g(used)g(in)f(the)h(example.)275
-3382 y(A)38 b(future)f(v)m(ersion)h(of)g(netp)s(erf)f(ma)m(y)i(p)s
-(erform)e(the)h(calculation)g(on)g(b)s(ehalf)e(of)j(the)f(user,)i(but)d
-(it)150 3492 y(w)m(ould)c(lik)m(ely)g(not)h(emit)g(it)f(unless)g(the)h
-(user)g(sp)s(eci\014ed)e(a)i(v)m(erb)s(osit)m(y)g(of)h(2)f(or)g(more)h
-(with)d(the)j(global)150 3601 y(`)p Fj(-v)p Fn(')30 b(option.)p
-eop end
-%%Page: 39 43
-TeXDict begin 39 42 bop 150 -116 a Fn(Chapter)30 b(9:)41
-b(Other)30 b(Netp)s(erf)g(T)-8 b(ests)2245 b(39)150 299
-y Fi(9)80 b(Other)53 b(Netp)t(erf)h(T)-13 b(ests)150
-533 y Fn(Apart)27 b(from)g(the)g(t)m(ypical)g(p)s(erformance)g(tests,)i
-(netp)s(erf)d(con)m(tains)h(some)h(tests)g(whic)m(h)e(can)h(b)s(e)g
-(used)f(to)150 643 y(streamline)h(measuremen)m(ts)i(and)f(rep)s
-(orting.)39 b(These)28 b(include)f(CPU)h(rate)h(calibration)e(\(presen)
-m(t\))j(and)150 752 y(host)g(iden)m(ti\014cation)f(\(future)h
-(enhancemen)m(t\).)150 985 y Fm(9.1)68 b(CPU)45 b(rate)h(calibration)
-150 1144 y Fn(Some)34 b(of)g(the)g(CPU)g(utilization)e(measuremen)m(t)i
-(mec)m(hanisms)f(of)i(netp)s(erf)e(w)m(ork)h(b)m(y)f(comparing)h(the)
-150 1254 y(rate)c(at)g(whic)m(h)e(some)i(coun)m(ter)g(incremen)m(ts)f
-(when)f(the)h(system)h(is)e(idle)g(with)g(the)h(rate)h(at)g(whic)m(h)e
-(that)150 1363 y(same)d(coun)m(ter)h(incremen)m(ts)e(when)g(the)i
-(system)f(is)f(running)e(a)j(netp)s(erf)f(test.)40 b(The)25
-b(ratio)g(of)g(those)g(rates)150 1473 y(is)k(used)h(to)h(arriv)m(e)f
-(at)h(a)g(CPU)f(utilization)e(p)s(ercen)m(tage.)275 1607
-y(This)g(means)i(that)h(netp)s(erf)e(m)m(ust)h(kno)m(w)g(the)h(rate)g
-(at)g(whic)m(h)e(the)h(coun)m(ter)h(incremen)m(ts)f(when)f(the)150
-1717 y(system)42 b(is)f(presumed)f(to)j(b)s(e)e(\\idle.")74
-b(If)42 b(it)f(do)s(es)h(not)g(kno)m(w)g(the)g(rate,)k(netp)s(erf)40
-b(will)g(measure)h(it)150 1826 y(b)s(efore)33 b(starting)f(a)i(data)f
-(transfer)g(test.)49 b(This)31 b(calibration)h(step)h(tak)m(es)h(40)g
-(seconds)f(for)f(eac)m(h)j(of)e(the)150 1936 y(lo)s(cal)g(or)i(remote)g
-(ystems,)g(and)f(if)f(rep)s(eated)h(for)g(eac)m(h)h(netp)s(erf)f(test)h
-(w)m(ould)e(mak)m(e)i(taking)f(rep)s(eated)150 2046 y(measuremen)m(ts)d
-(rather)f(slo)m(w.)275 2180 y(Th)m(us,)25 b(the)g(netp)s(erf)e(CPU)i
-(utilization)e(options)h(`)p Fj(-c)p Fn(')g(and)h(and)f(`)p
-Fj(-C)p Fn(')h(can)g(tak)m(e)h(an)f(optional)f(calibra-)150
-2290 y(tion)31 b(v)-5 b(alue.)44 b(This)29 b(v)-5 b(alue)31
-b(is)g(used)f(as)i(the)g(\\idle)e(rate")j(and)e(the)g(calibration)f
-(step)i(is)e(not)i(p)s(erformed.)150 2399 y(T)-8 b(o)33
-b(determine)f(the)h(idle)f(rate,)i(netp)s(erf)e(can)h(b)s(e)g(used)f
-(to)h(run)f(sp)s(ecial)f(tests)j(whic)m(h)d(only)h(rep)s(ort)h(the)150
-2509 y(v)-5 b(alue)33 b(of)g(the)h(calibration)d(-)j(they)f(are)h(the)f
-(LOC)p 1896 2509 28 4 v 40 w(CPU)g(and)f(REM)p 2556 2509
-V 40 w(CPU)h(tests.)51 b(These)33 b(return)f(the)150
-2619 y(calibration)27 b(v)-5 b(alue)28 b(for)h(the)g(lo)s(cal)f(and)g
-(remote)h(system)g(resp)s(ectiv)m(ely)-8 b(.)40 b(A)29
-b(common)g(w)m(a)m(y)h(to)f(use)f(these)150 2728 y(tests)c(is)e(to)j
-(store)e(their)g(results)f(in)m(to)h(an)h(en)m(vironmen)m(t)e(v)-5
-b(ariable)23 b(and)f(use)h(that)h(in)e(subsequen)m(t)h(netp)s(erf)150
-2838 y(commands:)390 2972 y Fj(LOC_RATE=`netperf)43 b(-t)k(LOC_CPU`)390
-3082 y(REM_RATE=`netperf)c(-H)k(<remote>)f(-t)h(REM_CPU`)390
-3191 y(netperf)f(-H)h(<remote>)f(-c)h($LOC_RATE)e(-C)i($REM_RATE)e(...)
-i(--)h(...)390 3301 y(...)390 3411 y(netperf)e(-H)h(<remote>)f(-c)h
-($LOC_RATE)e(-C)i($REM_RATE)e(...)i(--)h(...)275 3545
-y Fn(If)32 b(y)m(ou)h(are)h(going)f(to)g(use)g(netp)s(erf)f(to)i
-(measure)e(aggregate)k(results,)d(it)f(is)g(imp)s(ortan)m(t)g(to)i(use)
-f(the)150 3655 y(LOC)p 350 3655 V 39 w(CPU)25 b(and)g(REM)p
-994 3655 V 40 w(CPU)g(tests)h(to)h(get)f(the)g(calibration)e(v)-5
-b(alues)24 b(\014rst)h(to)h(a)m(v)m(oid)g(issues)e(with)h(some)150
-3764 y(of)35 b(the)h(aggregate)i(netp)s(erf)c(tests)i(transferring)e
-(data)i(while)d(others)i(are)h(\\idle")e(and)h(getting)h(b)s(ogus)150
-3874 y(calibration)e(v)-5 b(alues.)55 b(When)36 b(running)d(aggregate)
-38 b(tests,)g(it)d(is)g(v)m(ery)g(imp)s(ortan)m(t)g(to)h(remem)m(b)s
-(er)f(that)150 3983 y(an)m(y)40 b(one)f(instance)g(of)g(netp)s(erf)g
-(do)s(es)f(not)i(kno)m(w)f(ab)s(out)g(the)g(other)h(instances)f(of)g
-(netp)s(erf.)66 b(It)40 b(will)150 4093 y(rep)s(ort)34
-b(global)g(CPU)g(utilization)e(and)i(will)e(calculate)j(service)g
-(demand)e(b)s(elieving)f(it)i(w)m(as)h(the)g(only)150
-4203 y(thing)22 b(causing)h(that)h(CPU)f(utilization.)36
-b(So,)25 b(y)m(ou)e(can)h(use)f(the)g(CPU)g(utilization)e(rep)s(orted)i
-(b)m(y)g(netp)s(erf)150 4312 y(in)29 b(an)h(aggregate)k(test,)d(but)f
-(y)m(ou)h(ha)m(v)m(e)g(to)g(calculate)g(service)f(demands)g(b)m(y)g
-(hand.)p eop end
-%%Page: 40 44
-TeXDict begin 40 43 bop 150 -116 a Fn(Chapter)30 b(10:)41
-b(Address)30 b(Resolution)2229 b(40)150 299 y Fi(10)80
-b(Address)52 b(Resolution)150 533 y Fn(Netp)s(erf)26
-b(v)m(ersions)f(2.4.0)i(and)f(later)g(ha)m(v)m(e)h(merged)f(IPv4)f(and)
-h(IPv6)g(tests)g(so)g(the)g(functionalit)m(y)f(of)h(the)150
-643 y(tests)33 b(in)f(`)p Fj(src/nettest_ipv6.c)p Fn(')c(has)k(b)s(een)
-g(subsumed)e(in)m(to)j(the)g(tests)g(in)e(`)p Fj(src/nettest_bsd.c)p
-Fn(')150 752 y(This)25 b(has)i(b)s(een)f(accomplished)g(in)f(part)i(b)m
-(y)g(switc)m(hing)f(from)g Fj(gethostbyname\(\))p Fn(to)e
-Fj(getaddrinfo\(\))150 862 y Fn(exclusiv)m(ely)-8 b(.)41
-b(While)29 b(it)h(w)m(as)h(theoretically)g(p)s(ossible)d(to)j(get)h(m)m
-(ultiple)d(results)g(for)h(a)i(hostname)e(from)150 971
-y Fj(gethostbyname\(\))f Fn(it)k(w)m(as)h(generally)f(unlik)m(ely)d
-(and)j(netp)s(erf)7 b('s)33 b(ignoring)f(of)h(the)h(second)f(and)g
-(later)150 1081 y(results)c(w)m(as)i(not)g(m)m(uc)m(h)f(of)g(an)h
-(issue.)275 1215 y(No)m(w)22 b(with)e Fj(getaddrinfo)e
-Fn(and)j(particularly)e(with)h(AF)p 2200 1215 28 4 v
-40 w(UNSPEC)h(it)g(is)f(increasingly)g(lik)m(ely)g(that)i(a)150
-1325 y(giv)m(en)h(hostname)g(will)e(ha)m(v)m(e)j(m)m(ultiple)d(asso)s
-(ciated)j(addresses.)37 b(The)23 b Fj(establish_control\(\))18
-b Fn(routine)150 1435 y(of)31 b(`)p Fj(src/netlib.c)p
-Fn(')c(will)h(indeed)h(attempt)i(to)h(c)m(hose)f(from)f(among)h(all)e
-(the)i(matc)m(hing)f(IP)h(addresses)150 1544 y(when)42
-b(establishing)f(the)i(con)m(trol)h(connection.)79 b(Netp)s(erf)43
-b(do)s(es)g(not)p 2667 1544 V 83 w(really)p 2928 1544
-V 82 w(care)h(if)e(the)h(con)m(trol)150 1654 y(connection)31
-b(is)e(IPv4)h(or)h(IPv6)f(or)h(ev)m(en)g(mixed)e(on)h(either)g(end.)275
-1788 y(Ho)m(w)m(ev)m(er,)h(the)f(individual)25 b(tests)30
-b(still)d(ass-u-me)i(that)h(the)g(\014rst)e(result)h(in)f(the)h
-(address)f(list)g(is)h(the)150 1898 y(one)h(to)h(b)s(e)f(used.)40
-b(Whether)30 b(or)g(not)g(this)f(will)f(turn-out)h(to)i(b)s(e)f(an)g
-(issue)f(has)g(y)m(et)j(to)f(b)s(e)e(determined.)275
-2032 y(If)45 b(y)m(ou)i(do)f(run)e(in)m(to)i(problems)f(with)g(this,)k
-(the)d(easiest)h(w)m(ork)-5 b(around)45 b(is)g(to)i(sp)s(ecify)e(IP)h
-(ad-)150 2142 y(dresses)d(for)h(the)g(data)h(connection)f(explicitly)d
-(in)i(the)h(test-sp)s(eci\014c)g(`)p Fj(-H)p Fn(')g(and)f(`)p
-Fj(-L)p Fn(')h(options.)81 b(A)m(t)150 2252 y(some)28
-b(p)s(oin)m(t,)g(the)g(netp)s(erf)f(tests)p 1317 2252
-V 68 w(ma)m(y)p 1523 2252 V 68 w(try)h(to)h(b)s(e)e(more)h
-(sophisticated)f(in)f(their)h(parsing)f(of)i(returns)150
-2361 y(from)40 b Fj(getaddrinfo\(\))e Fn(-)j(stra)m(w-man)g(patc)m(hes)
-g(to)h Fj(netperf-feedback@netperf.)o(org)34 b Fn(w)m(ould)40
-b(of)150 2471 y(course)31 b(b)s(e)e(most)i(w)m(elcome)g(:\))275
-2605 y(Netp)s(erf)42 b(has)h(lev)m(eraged)h(co)s(de)f(from)f(other)i
-(op)s(en-source)e(pro)5 b(jects)44 b(with)d(amenable)i(licensing)150
-2715 y(to)h(pro)m(vide)f(a)h(replacemen)m(t)g Fj(getaddrinfo\(\))39
-b Fn(call)k(on)g(those)h(platforms)f(where)g(the)g Fj(configure)150
-2824 y Fn(script)g(b)s(eliev)m(es)h(there)g(is)g(no)g(nativ)m(e)h
-(getaddrinfo)f(call.)82 b(As)45 b(of)f(this)g(writing,)i(the)e
-(replacemen)m(t)150 2934 y Fj(getaddrinfo\(\))27 b Fn(as)j(b)s(een)g
-(tested)h(on)f(HP-UX)h(11.0)h(and)e(then)g(presumed)f(to)i(run)e
-(elsewhere.)p eop end
-%%Page: 41 45
-TeXDict begin 41 44 bop 150 -116 a Fn(Chapter)30 b(11:)41
-b(Enhancing)29 b(Netp)s(erf)2247 b(41)150 299 y Fi(11)80
-b(Enhancing)53 b(Netp)t(erf)150 533 y Fn(Netp)s(erf)32
-b(is)f(constan)m(tly)i(ev)m(olving.)46 b(If)32 b(y)m(ou)g(\014nd)f(y)m
-(ou)h(w)m(an)m(t)h(to)g(mak)m(e)g(enhancemen)m(ts)g(to)g(netp)s(erf,)f
-(b)m(y)150 643 y(all)d(means)i(do)f(so.)41 b(If)30 b(y)m(ou)g(wish)f
-(to)i(add)f(a)h(new)e(\\suite")i(of)g(tests)g(to)g(netp)s(erf)e(the)i
-(general)f(idea)g(is)g(to)199 777 y(1.)61 b(Add)28 b(\014les)f(`)p
-Fj(src/nettest_mumble.c)p Fn(')d(and)k(`)p Fj(src/nettest_mumble.h)p
-Fn(')c(where)k(m)m(um)m(ble)g(is)g(re-)330 887 y(placed)i(with)f
-(something)h(meaningful)e(for)i(the)h(test-suite.)199
-1021 y(2.)61 b(Add)29 b(supp)s(ort)g(for)h(an)h(apropriate)e(`)p
-Fj(--enable-mumble)p Fn(')e(option)j(in)f(`)p Fj(configure.ac)p
-Fn('.)199 1156 y(3.)61 b(Edit)h(`)p Fj(src/netperf.c)p
-Fn(',)69 b(`)p Fj(netsh.c)p Fn(',)h(and)63 b(`)p Fj(netserver.c)p
-Fn(')e(as)j(required,)70 b(using)62 b(#ifdef)330 1265
-y(W)-10 b(ANT)p 621 1265 28 4 v 40 w(MUMBLE.)199 1400
-y(4.)61 b(Compile)29 b(and)g(test)275 1559 y(If)42 b(y)m(ou)i(wish)d
-(to)j(submit)e(y)m(our)h(c)m(hanges)h(for)f(p)s(ossible)e(inclusion)f
-(in)m(to)k(the)f(mainline)e(sources,)150 1669 y(please)35
-b(try)g(to)i(base)e(y)m(our)h(c)m(hanges)g(on)f(the)h(latest)g(a)m(v)-5
-b(ailable)35 b(sources.)55 b(\(See)36 b(Section)g(2.1)g([Getting)150
-1778 y(Netp)s(erf)44 b(Bits],)j(page)e(3.\))82 b(and)44
-b(then)g(send)f(email)g(describing)f(the)i(c)m(hanges)h(at)f(a)h(high)d
-(lev)m(el)i(to)150 1888 y Fj(netperf-feedback@netperf)o(.org)27
-b Fn(or)33 b(p)s(erhaps)f Fj(netperf-talk@netperf.or)o(g)p
-Fn(.)44 b(If)32 b(the)i(concen-)150 1998 y(sus)k(is)g(p)s(ositiv)m(e,)i
-(then)e(sending)g(con)m(text)i Fj(diff)e Fn(results)f(to)j
-Fj(netperf-feedback@netperf)o(.or)o(g)33 b Fn(is)150
-2107 y(the)c(next)g(step.)40 b(F)-8 b(rom)29 b(that)g(p)s(oin)m(t,)g
-(it)f(is)f(a)j(matter)f(of)g(p)s(estering)e(the)i(Netp)s(erf)f(Con)m
-(tributing)f(Editor)150 2217 y(un)m(til)i(he)h(gets)h(the)g(c)m(hanges)
-g(incorp)s(orated)e(:\))p eop end
-%%Page: 42 46
-TeXDict begin 42 45 bop 150 -116 a Fn(Chapter)30 b(12:)41
-b(Netp)s(erf4)2653 b(42)150 299 y Fi(12)80 b(Netp)t(erf4)150
-533 y Fn(Netp)s(erf4)29 b(is)f(the)h(shorthand)e(name)i(giv)m(en)g(to)g
-(v)m(ersion)f(4.X.X)i(of)f(netp)s(erf.)39 b(This)27 b(is)h(really)g(a)h
-(separate)150 643 y(b)s(enc)m(hmark)35 b(more)i(than)f(a)g(new)m(er)g
-(v)m(ersion)g(of)g(netp)s(erf,)h(but)f(it)f(is)h(a)g(decendan)m(t)h(of)
-f(netp)s(erf)f(so)i(the)150 752 y(netp)s(erf)31 b(name)h(is)g(k)m(ept.)
-47 b(The)31 b(facitious)h(w)m(a)m(y)h(to)g(describ)s(e)e(netp)s(erf4)g
-(is)g(to)i(sa)m(y)g(it)f(is)f(the)i(egg-la)m(ying-)150
-862 y(w)m(olly-milk-pig)24 b(v)m(ersion)j(of)g(netp)s(erf)f(:\))39
-b(The)26 b(more)i(resp)s(ectful)d(w)m(a)m(y)j(to)g(describ)s(e)d(it)i
-(is)f(to)h(sa)m(y)h(it)f(is)f(the)150 971 y(v)m(ersion)34
-b(of)h(netp)s(erf)e(with)h(supp)s(ort)e(for)j(sync)m(hronized,)f(m)m
-(ultiple-thread,)g(m)m(ultiple-test,)h(m)m(ultiple-)150
-1081 y(system,)c(net)m(w)m(ork-orien)m(ted)g(b)s(enc)m(hmarking.)275
-1215 y(Netp)s(erf4)e(is)g(still)e(undergoing)h(rapid)g(ev)m(olution.)40
-b(Those)29 b(wishing)e(to)k(w)m(ork)e(with)g(or)g(on)g(netp)s(erf4)150
-1325 y(are)21 b(encouraged)g(to)g(join)e(the)h(netp)s(erf-dev)g(\()p
-Fj(http://www.netperf.org/cg)o(i-b)o(in/m)o(ail)o(man/)o(list)o(inf)o
-(o/ne)o(tper)o(f-d)o(ev)p Fn(\))p 4538 1348 42 91 v 150
-1435 a(mailing)e(list)h(and/or)h(p)s(eruse)f(the)i(curren)m(t)f
-(sources)g(\()p Fj(http://www.netperf.org/svn)o(/ne)o(tper)o(f4/t)o
-(run)o(k)p Fn(\).)p 3989 1457 V eop end
-%%Page: 43 47
-TeXDict begin 43 46 bop 150 -116 a Fn(Chapter)30 b(12:)41
-b(Index)2776 b(43)150 299 y Fi(Index)150 610 y Fb(c)n(hapter,)26
-b(Installing)g(Netp)r(erf)10 b Fa(.)j(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g
-(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)36 b Fb(3)150
-704 y(c)n(hapter,)26 b(In)n(tro)r(duction)d Fa(.)12 b(.)h(.)f(.)g(.)h
-(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)
-h(.)f(.)50 b Fb(1)2025 610 y(c)n(hapter,)25 b(The)h(Design)g(of)h(Netp)
-r(erf)22 b Fa(.)13 b(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)f(.)g(.)h(.)
-f(.)g(.)49 b Fb(7)p eop end
-%%Trailer
-
-userdict /end-hook known{end-hook}if
-%%EOF
diff --git a/doc/netperf.texi b/doc/netperf.texi
index 62b6037..8c3fd60 100644
--- a/doc/netperf.texi
+++ b/doc/netperf.texi
@@ -1005,6 +1005,8 @@ or more of:
 @item P50_LATENCY
 @item P90_LATENCY
 @item P99_LATENCY
+@item P999_LATENCY
+@item P9999_LATENCY
 @item MEAN_LATENCY
 @item STDDEV_LATENCY
 @end itemize
@@ -3964,6 +3966,16 @@ The 99th percentile value of ``latency'' or operation time (send, receive or
 request/response exchange depending on the test) as measured on the
 netperf side when the global @option{-j} option was specified. Units:
 Microseconds.
+@item P999_LATENCY
+The 99.9th percentile value of ``latency'' or operation time (send, receive or
+request/response exchange depending on the test) as measured on the
+netperf side when the global @option{-j} option was specified. Units:
+Microseconds.
+@item P9999_LATENCY
+The 99.99th percentile value of ``latency'' or operation time (send, receive or
+request/response exchange depending on the test) as measured on the
+netperf side when the global @option{-j} option was specified. Units:
+Microseconds.
 @item MEAN_LATENCY
 The average ``latency'' or operation time (send, receive or
 request/response exchange depending on the test) as measured on the
diff --git a/doc/netperf.txt b/doc/netperf.txt
deleted file mode 100644
index abde83a..0000000
--- a/doc/netperf.txt
+++ /dev/null
@@ -1,3962 +0,0 @@
-Table of Contents
-*****************
-
-Netperf Manual
-1 Introduction
-  1.1 Conventions
-2 Installing Netperf
-  2.1 Getting Netperf Bits
-  2.2 Installing Netperf
-  2.3 Verifying Installation
-3 The Design of Netperf
-  3.1 CPU Utilization
-    3.1.1 CPU Utilization in a Virtual Guest
-4 Global Command-line Options
-  4.1 Command-line Options Syntax
-  4.2 Global Options
-5 Using Netperf to Measure Bulk Data Transfer
-  5.1 Issues in Bulk Transfer
-  5.2 Options common to TCP UDP and SCTP tests
-    5.2.1 TCP_STREAM
-    5.2.2 TCP_MAERTS
-    5.2.3 TCP_SENDFILE
-    5.2.4 UDP_STREAM
-    5.2.5 XTI_TCP_STREAM
-    5.2.6 XTI_UDP_STREAM
-    5.2.7 SCTP_STREAM
-    5.2.8 DLCO_STREAM
-    5.2.9 DLCL_STREAM
-    5.2.10 STREAM_STREAM
-    5.2.11 DG_STREAM
-6 Using Netperf to Measure Request/Response
-  6.1 Issues in Request/Response
-  6.2 Options Common to TCP UDP and SCTP _RR tests
-    6.2.1 TCP_RR
-    6.2.2 TCP_CC
-    6.2.3 TCP_CRR
-    6.2.4 UDP_RR
-    6.2.5 XTI_TCP_RR
-    6.2.6 XTI_TCP_CC
-    6.2.7 XTI_TCP_CRR
-    6.2.8 XTI_UDP_RR
-    6.2.9 DLCL_RR
-    6.2.10 DLCO_RR
-    6.2.11 SCTP_RR
-7 Using Netperf to Measure Aggregate Performance
-  7.1 Running Concurrent Netperf Tests
-    7.1.1 Issues in Running Concurrent Tests
-  7.2 Using - -enable-burst
-  7.3 Using - -enable-demo
-8 Using Netperf to Measure Bidirectional Transfer
-  8.1 Bidirectional Transfer with Concurrent Tests
-  8.2 Bidirectional Transfer with TCP_RR
-  8.3 Implications of Concurrent Tests vs Burst Request/Response
-9 The Omni Tests
-  9.1 Native Omni Tests
-  9.2 Migrated Tests
-  9.3 Omni Output Selection
-    9.3.1 Omni Output Selectors
-10 Other Netperf Tests
-  10.1 CPU rate calibration
-  10.2 UUID Generation
-11 Address Resolution
-12 Enhancing Netperf
-13 Netperf4
-Concept Index
-Option Index
-
-
-Netperf Manual
-**************
-
-This is Rick Jones' feeble attempt at a Texinfo-based manual for the
-netperf benchmark.
-
-   Copyright (C) 2005-2012 Hewlett-Packard Company
-
-     Permission is granted to copy, distribute and/or modify this
-     document per the terms of the netperf source license, a copy of
-     which can be found in the file `COPYING' of the basic netperf
-     distribution.
-
-1 Introduction
-**************
-
-Netperf is a benchmark that can be use to measure various aspect of
-networking performance.  The primary foci are bulk (aka unidirectional)
-data transfer and request/response performance using either TCP or UDP
-and the Berkeley Sockets interface.  As of this writing, the tests
-available either unconditionally or conditionally include:
-
-   * TCP and UDP unidirectional transfer and request/response over IPv4
-     and IPv6 using the Sockets interface.
-
-   * TCP and UDP unidirectional transfer and request/response over IPv4
-     using the XTI interface.
-
-   * Link-level unidirectional transfer and request/response using the
-     DLPI interface.
-
-   * Unix domain sockets
-
-   * SCTP unidirectional transfer and request/response over IPv4 and
-     IPv6 using the sockets interface.
-
-   While not every revision of netperf will work on every platform
-listed, the intention is that at least some version of netperf will
-work on the following platforms:
-
-   * Unix - at least all the major variants.
-
-   * Linux
-
-   * Windows
-
-   * Others
-
-   Netperf is maintained and informally supported primarily by Rick
-Jones, who can perhaps be best described as Netperf Contributing
-Editor.  Non-trivial and very appreciated assistance comes from others
-in the network performance community, who are too numerous to mention
-here. While it is often used by them, netperf is NOT supported via any
-of the formal Hewlett-Packard support channels.  You should feel free
-to make enhancements and modifications to netperf to suit your
-nefarious porpoises, so long as you stay within the guidelines of the
-netperf copyright.  If you feel so inclined, you can send your changes
-to netperf-feedback <netperf-feedback@netperf.org> for possible
-inclusion into subsequent versions of netperf.
-
-   It is the Contributing Editor's belief that the netperf license walks
-like open source and talks like open source. However, the license was
-never submitted for "certification" as an open source license.  If you
-would prefer to make contributions to a networking benchmark using a
-certified open source license, please consider netperf4, which is
-distributed under the terms of the GPLv2.
-
-   The netperf-talk <netperf-talk@netperf.org> mailing list is
-available to discuss the care and feeding of netperf with others who
-share your interest in network performance benchmarking. The
-netperf-talk mailing list is a closed list (to deal with spam) and you
-must first subscribe by sending email to netperf-talk-request
-<netperf-talk-request@netperf.org>.
-
-1.1 Conventions
-===============
-
-A "sizespec" is a one or two item, comma-separated list used as an
-argument to a command-line option that can set one or two, related
-netperf parameters.  If you wish to set both parameters to separate
-values, items should be separated by a comma:
-
-     parameter1,parameter2
-
-   If you wish to set the first parameter without altering the value of
-the second from its default, you should follow the first item with a
-comma:
-
-     parameter1,
-
-   Likewise, precede the item with a comma if you wish to set only the
-second parameter:
-
-     ,parameter2
-
-   An item with no commas:
-
-     parameter1and2
-
-   will set both parameters to the same value.  This last mode is one of
-the most frequently used.
-
-   There is another variant of the comma-separated, two-item list called
-a "optionspec" which is like a sizespec with the exception that a
-single item with no comma:
-
-     parameter1
-
-   will only set the value of the first parameter and will leave the
-second parameter at its default value.
-
-   Netperf has two types of command-line options.  The first are global
-command line options.  They are essentially any option not tied to a
-particular test or group of tests.  An example of a global command-line
-option is the one which sets the test type - `-t'.
-
-   The second type of options are test-specific options.  These are
-options which are only applicable to a particular test or set of tests.
-An example of a test-specific option would be the send socket buffer
-size for a TCP_STREAM test.
-
-   Global command-line options are specified first with test-specific
-options following after a `--' as in:
-
-     netperf <global> -- <test-specific>
-
-2 Installing Netperf
-********************
-
-Netperf's primary form of distribution is source code.  This allows
-installation on systems other than those to which the authors have
-ready access and thus the ability to create binaries.  There are two
-styles of netperf installation.  The first runs the netperf server
-program - netserver - as a child of inetd.  This requires the installer
-to have sufficient privileges to edit the files `/etc/services' and
-`/etc/inetd.conf' or their platform-specific equivalents.
-
-   The second style is to run netserver as a standalone daemon.  This
-second method does not require edit privileges on `/etc/services' and
-`/etc/inetd.conf' but does mean you must remember to run the netserver
-program explicitly after every system reboot.
-
-   This manual assumes that those wishing to measure networking
-performance already know how to use anonymous FTP and/or a web browser.
-It is also expected that you have at least a passing familiarity with
-the networking protocols and interfaces involved. In all honesty, if
-you do not have such familiarity, likely as not you have some
-experience to gain before attempting network performance measurements.
-The excellent texts by authors such as Stevens, Fenner and Rudoff
-and/or Stallings would be good starting points. There are likely other
-excellent sources out there as well.
-
-2.1 Getting Netperf Bits
-========================
-
-Gzipped tar files of netperf sources can be retrieved via anonymous FTP
-(ftp://ftp.netperf.org/netperf) for "released" versions of the bits.
-Pre-release versions of the bits can be retrieved via anonymous FTP
-from the experimental (ftp://ftp.netperf.org/netperf/experimental)
-subdirectory.
-
-   For convenience and ease of remembering, a link to the download site
-is provided via the NetperfPage (http://www.netperf.org/)
-
-   The bits corresponding to each discrete release of netperf are
-tagged (http://www.netperf.org/svn/netperf2/tags) for retrieval via
-subversion.  For example, there is a tag for the first version
-corresponding to this version of the manual - netperf 2.6.0
-(http://www.netperf.org/svn/netperf2/tags/netperf-2.6.0).  Those
-wishing to be on the bleeding edge of netperf development can use
-subversion to grab the top of trunk
-(http://www.netperf.org/svn/netperf2/trunk).  When fixing bugs or
-making enhancements, patches against the top-of-trunk are preferred.
-
-   There are likely other places around the Internet from which one can
-download netperf bits.  These may be simple mirrors of the main netperf
-site, or they may be local variants on netperf.  As with anything one
-downloads from the Internet, take care to make sure it is what you
-really wanted and isn't some malicious Trojan or whatnot.  Caveat
-downloader.
-
-   As a general rule, binaries of netperf and netserver are not
-distributed from ftp.netperf.org.  From time to time a kind soul or
-souls has packaged netperf as a Debian package available via the
-apt-get mechanism or as an RPM.  I would be most interested in learning
-how to enhance the makefiles to make that easier for people.
-
-2.2 Installing Netperf
-======================
-
-Once you have downloaded the tar file of netperf sources onto your
-system(s), it is necessary to unpack the tar file, cd to the netperf
-directory, run configure and then make.  Most of the time it should be
-sufficient to just:
-
-     gzcat netperf-<version>.tar.gz | tar xf -
-     cd netperf-<version>
-     ./configure
-     make
-     make install
-
-   Most of the "usual" configure script options should be present
-dealing with where to install binaries and whatnot.
-     ./configure --help
-   should list all of those and more.  You may find the `--prefix'
-option helpful in deciding where the binaries and such will be put
-during the `make install'.
-
-   If the netperf configure script does not know how to automagically
-detect which CPU utilization mechanism to use on your platform you may
-want to add a `--enable-cpuutil=mumble' option to the configure
-command.   If you have knowledge and/or experience to contribute to
-that area, feel free to contact <netperf-feedback@netperf.org>.
-
-   Similarly, if you want tests using the XTI interface, Unix Domain
-Sockets, DLPI or SCTP it will be necessary to add one or more
-`--enable-[xti|unixdomain|dlpi|sctp]=yes' options to the configure
-command.  As of this writing, the configure script will not include
-those tests automagically.
-
-   Starting with version 2.5.0, netperf began migrating most of the
-"classic" netperf tests found in `src/nettest_bsd.c' to the so-called
-"omni" tests (aka "two routines to run them all") found in
-`src/nettest_omni.c'.  This migration enables a number of new features
-such as greater control over what output is included, and new things to
-output.  The "omni" test is enabled by default in 2.5.0 and a number of
-the classic tests are migrated - you can tell if a test has been
-migrated from the presence of `MIGRATED' in the test banner.  If you
-encounter problems with either the omni or migrated tests, please first
-attempt to obtain resolution via <netperf-talk@netperf.org> or
-<netperf-feedback@netperf.org>.  If that is unsuccessful, you can add a
-`--enable-omni=no' to the configure command and the omni tests will not
-be compiled-in and the classic tests will not be migrated.
-
-   Starting with version 2.5.0, netperf includes the "burst mode"
-functionality in a default compilation of the bits.  If you encounter
-problems with this, please first attempt to obtain help via
-<netperf-talk@netperf.org> or <netperf-feedback@netperf.org>.  If that
-is unsuccessful, you can add a `--enable-burst=no' to the configure
-command and the burst mode functionality will not be compiled-in.
-
-   On some platforms, it may be necessary to precede the configure
-command with a CFLAGS and/or LIBS variable as the netperf configure
-script is not yet smart enough to set them itself.  Whenever possible,
-these requirements will be found in `README.PLATFORM' files.  Expertise
-and assistance in making that more automagic in the configure script
-would be most welcome.
-
-   Other optional configure-time settings include
-`--enable-intervals=yes' to give netperf the ability to "pace" its
-_STREAM tests and `--enable-histogram=yes' to have netperf keep a
-histogram of interesting times.  Each of these will have some effect on
-the measured result.  If your system supports `gethrtime()' the effect
-of the histogram measurement should be minimized but probably still
-measurable.  For example, the histogram of a netperf TCP_RR test will
-be of the individual transaction times:
-     netperf -t TCP_RR -H lag -v 2
-     TCP REQUEST/RESPONSE TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to lag.hpl.hp.com (15.4.89.214) port 0 AF_INET : histogram
-     Local /Remote
-     Socket Size   Request  Resp.   Elapsed  Trans.
-     Send   Recv   Size     Size    Time     Rate
-     bytes  Bytes  bytes    bytes   secs.    per sec
-
-     16384  87380  1        1       10.00    3538.82
-     32768  32768
-     Alignment      Offset
-     Local  Remote  Local  Remote
-     Send   Recv    Send   Recv
-         8      0       0      0
-     Histogram of request/response times
-     UNIT_USEC     :    0:    0:    0:    0:    0:    0:    0:    0:    0:    0
-     TEN_USEC      :    0:    0:    0:    0:    0:    0:    0:    0:    0:    0
-     HUNDRED_USEC  :    0: 34480:  111:   13:   12:    6:    9:    3:    4:    7
-     UNIT_MSEC     :    0:   60:   50:   51:   44:   44:   72:  119:  100:  101
-     TEN_MSEC      :    0:  105:    0:    0:    0:    0:    0:    0:    0:    0
-     HUNDRED_MSEC  :    0:    0:    0:    0:    0:    0:    0:    0:    0:    0
-     UNIT_SEC      :    0:    0:    0:    0:    0:    0:    0:    0:    0:    0
-     TEN_SEC       :    0:    0:    0:    0:    0:    0:    0:    0:    0:    0
-     >100_SECS: 0
-     HIST_TOTAL:      35391
-
-   The histogram you see above is basically a base-10 log histogram
-where we can see that most of the transaction times were on the order
-of one hundred to one-hundred, ninety-nine microseconds, but they were
-occasionally as long as ten to nineteen milliseconds
-
-   The `--enable-demo=yes' configure option will cause code to be
-included to report interim results during a test run.  The rate at
-which interim results are reported can then be controlled via the
-global `-D' option.  Here is an example of `-D' output:
-
-     $ src/netperf -D 1.35 -H tardy.hpl.hp.com -f M
-     MIGRATED TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to tardy.hpl.hp.com (15.9.116.144) port 0 AF_INET : demo
-     Interim result:    5.41 MBytes/s over 1.35 seconds ending at 1308789765.848
-     Interim result:   11.07 MBytes/s over 1.36 seconds ending at 1308789767.206
-     Interim result:   16.00 MBytes/s over 1.36 seconds ending at 1308789768.566
-     Interim result:   20.66 MBytes/s over 1.36 seconds ending at 1308789769.922
-     Interim result:   22.74 MBytes/s over 1.36 seconds ending at 1308789771.285
-     Interim result:   23.07 MBytes/s over 1.36 seconds ending at 1308789772.647
-     Interim result:   23.77 MBytes/s over 1.37 seconds ending at 1308789774.016
-     Recv   Send    Send
-     Socket Socket  Message  Elapsed
-     Size   Size    Size     Time     Throughput
-     bytes  bytes   bytes    secs.    MBytes/sec
-
-      87380  16384  16384    10.06      17.81
-
-   Notice how the units of the interim result track that requested by
-the `-f' option.  Also notice that sometimes the interval will be
-longer than the value specified in the `-D' option.  This is normal and
-stems from how demo mode is implemented not by relying on interval
-timers or frequent calls to get the current time, but by calculating
-how many units of work must be performed to take at least the desired
-interval.
-
-   Those familiar with this option in earlier versions of netperf will
-note the addition of the "ending at" text.  This is the time as
-reported by a `gettimeofday()' call (or its emulation) with a `NULL'
-timezone pointer.  This addition is intended to make it easier to
-insert interim results into an rrdtool
-(http://oss.oetiker.ch/rrdtool/doc/rrdtool.en.html) Round-Robin
-Database (RRD).  A likely bug-riddled example of doing so can be found
-in `doc/examples/netperf_interim_to_rrd.sh'.  The time is reported out
-to milliseconds rather than microseconds because that is the most
-rrdtool understands as of the time of this writing.
-
-   As of this writing, a `make install' will not actually update the
-files `/etc/services' and/or `/etc/inetd.conf' or their
-platform-specific equivalents.  It remains necessary to perform that
-bit of installation magic by hand.  Patches to the makefile sources to
-effect an automagic editing of the necessary files to have netperf
-installed as a child of inetd would be most welcome.
-
-   Starting the netserver as a standalone daemon should be as easy as:
-     $ netserver
-     Starting netserver at port 12865
-     Starting netserver at hostname 0.0.0.0 port 12865 and family 0
-
-   Over time the specifics of the messages netserver prints to the
-screen may change but the gist will remain the same.
-
-   If the compilation of netperf or netserver happens to fail, feel free
-to contact <netperf-feedback@netperf.org> or join and ask in
-<netperf-talk@netperf.org>.  However, it is quite important that you
-include the actual compilation errors and perhaps even the configure
-log in your email.  Otherwise, it will be that much more difficult for
-someone to assist you.
-
-2.3 Verifying Installation
-==========================
-
-Basically, once netperf is installed and netserver is configured as a
-child of inetd, or launched as a standalone daemon, simply typing:
-     netperf
-   should result in output similar to the following:
-     $ netperf
-     TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to localhost.localdomain (127.0.0.1) port 0 AF_INET
-     Recv   Send    Send
-     Socket Socket  Message  Elapsed
-     Size   Size    Size     Time     Throughput
-     bytes  bytes   bytes    secs.    10^6bits/sec
-
-      87380  16384  16384    10.00    2997.84
-
-3 The Design of Netperf
-***********************
-
-Netperf is designed around a basic client-server model.  There are two
-executables - netperf and netserver.  Generally you will only execute
-the netperf program, with the netserver program being invoked by the
-remote system's inetd or having been previously started as its own
-standalone daemon.
-
-   When you execute netperf it will establish a "control connection" to
-the remote system.  This connection will be used to pass test
-configuration information and results to and from the remote system.
-Regardless of the type of test to be run, the control connection will
-be a TCP connection using BSD sockets.  The control connection can use
-either IPv4 or IPv6.
-
-   Once the control connection is up and the configuration information
-has been passed, a separate "data" connection will be opened for the
-measurement itself using the API's and protocols appropriate for the
-specified test.  When the test is completed, the data connection will
-be torn-down and results from the netserver will be passed-back via the
-control connection and combined with netperf's result for display to
-the user.
-
-   Netperf places no traffic on the control connection while a test is
-in progress.  Certain TCP options, such as SO_KEEPALIVE, if set as your
-systems' default, may put packets out on the control connection while a
-test is in progress.  Generally speaking this will have no effect on
-the results.
-
-3.1 CPU Utilization
-===================
-
-CPU utilization is an important, and alas all-too infrequently reported
-component of networking performance.  Unfortunately, it can be one of
-the most difficult metrics to measure accurately and portably.  Netperf
-will do its level best to report accurate CPU utilization figures, but
-some combinations of processor, OS and configuration may make that
-difficult.
-
-   CPU utilization in netperf is reported as a value between 0 and 100%
-regardless of the number of CPUs involved.  In addition to CPU
-utilization, netperf will report a metric called a "service demand".
-The service demand is the normalization of CPU utilization and work
-performed.  For a _STREAM test it is the microseconds of CPU time
-consumed to transfer on KB (K == 1024) of data.  For a _RR test it is
-the microseconds of CPU time consumed processing a single transaction.
-For both CPU utilization and service demand, lower is better.
-
-   Service demand can be particularly useful when trying to gauge the
-effect of a performance change.  It is essentially a measure of
-efficiency, with smaller values being more efficient and thus "better."
-
-   Netperf is coded to be able to use one of several, generally
-platform-specific CPU utilization measurement mechanisms.  Single
-letter codes will be included in the CPU portion of the test banner to
-indicate which mechanism was used on each of the local (netperf) and
-remote (netserver) system.
-
-   As of this writing those codes are:
-
-`U'
-     The CPU utilization measurement mechanism was unknown to netperf or
-     netperf/netserver was not compiled to include CPU utilization
-     measurements. The code for the null CPU utilization mechanism can
-     be found in `src/netcpu_none.c'.
-
-`I'
-     An HP-UX-specific CPU utilization mechanism whereby the kernel
-     incremented a per-CPU counter by one for each trip through the idle
-     loop. This mechanism was only available on specially-compiled HP-UX
-     kernels prior to HP-UX 10 and is mentioned here only for the sake
-     of historical completeness and perhaps as a suggestion to those
-     who might be altering other operating systems. While rather
-     simple, perhaps even simplistic, this mechanism was quite robust
-     and was not affected by the concerns of statistical methods, or
-     methods attempting to track time in each of user, kernel,
-     interrupt and idle modes which require quite careful accounting.
-     It can be thought-of as the in-kernel version of the looper `L'
-     mechanism without the context switch overhead. This mechanism
-     required calibration.
-
-`P'
-     An HP-UX-specific CPU utilization mechanism whereby the kernel
-     keeps-track of time (in the form of CPU cycles) spent in the kernel
-     idle loop (HP-UX 10.0 to 11.31 inclusive), or where the kernel
-     keeps track of time spent in idle, user, kernel and interrupt
-     processing (HP-UX 11.23 and later).  The former requires
-     calibration, the latter does not.  Values in either case are
-     retrieved via one of the pstat(2) family of calls, hence the use
-     of the letter `P'.  The code for these mechanisms is found in
-     `src/netcpu_pstat.c' and `src/netcpu_pstatnew.c' respectively.
-
-`K'
-     A Solaris-specific CPU utilization mechanism whereby the kernel
-     keeps track of ticks (eg HZ) spent in the idle loop.  This method
-     is statistical and is known to be inaccurate when the interrupt
-     rate is above epsilon as time spent processing interrupts is not
-     subtracted from idle.  The value is retrieved via a kstat() call -
-     hence the use of the letter `K'.  Since this mechanism uses units
-     of ticks (HZ) the calibration value should invariably match HZ.
-     (Eg 100) The code for this mechanism is implemented in
-     `src/netcpu_kstat.c'.
-
-`M'
-     A Solaris-specific mechanism available on Solaris 10 and latter
-     which uses the new microstate accounting mechanisms.  There are
-     two, alas, overlapping, mechanisms.  The first tracks nanoseconds
-     spent in user, kernel, and idle modes. The second mechanism tracks
-     nanoseconds spent in interrupt.  Since the mechanisms overlap,
-     netperf goes through some hand-waving to try to "fix" the problem.
-     Since the accuracy of the handwaving cannot be completely
-     determined, one must presume that while better than the `K'
-     mechanism, this mechanism too is not without issues.  The values
-     are retrieved via kstat() calls, but the letter code is set to `M'
-     to distinguish this mechanism from the even less accurate `K'
-     mechanism.  The code for this mechanism is implemented in
-     `src/netcpu_kstat10.c'.
-
-`L'
-     A mechanism based on "looper"or "soaker" processes which sit in
-     tight loops counting as fast as they possibly can. This mechanism
-     starts a looper process for each known CPU on the system.  The
-     effect of processor hyperthreading on the mechanism is not yet
-     known.  This mechanism definitely requires calibration.  The code
-     for the "looper"mechanism can be found in `src/netcpu_looper.c'
-
-`N'
-     A Microsoft Windows-specific mechanism, the code for which can be
-     found in `src/netcpu_ntperf.c'.  This mechanism too is based on
-     what appears to be a form of micro-state accounting and requires no
-     calibration.  On laptops, or other systems which may dynamically
-     alter the CPU frequency to minimize power consumption, it has been
-     suggested that this mechanism may become slightly confused, in
-     which case using BIOS/uEFI settings to disable the power saving
-     would be indicated.
-
-`S'
-     This mechanism uses `/proc/stat' on Linux to retrieve time (ticks)
-     spent in idle mode.  It is thought but not known to be reasonably
-     accurate.  The code for this mechanism can be found in
-     `src/netcpu_procstat.c'.
-
-`C'
-     A mechanism somewhat similar to `S' but using the sysctl() call on
-     BSD-like Operating systems (*BSD and MacOS X).  The code for this
-     mechanism can be found in `src/netcpu_sysctl.c'.
-
-`Others'
-     Other mechanisms included in netperf in the past have included
-     using the times() and getrusage() calls.  These calls are actually
-     rather poorly suited to the task of measuring CPU overhead for
-     networking as they tend to be process-specific and much
-     network-related processing can happen outside the context of a
-     process, in places where it is not a given it will be charged to
-     the correct, or even a process.  They are mentioned here as a
-     warning to anyone seeing those mechanisms used in other networking
-     benchmarks.  These mechanisms are not available in netperf 2.4.0
-     and later.
-
-   For many platforms, the configure script will chose the best
-available CPU utilization mechanism.  However, some platforms have no
-particularly good mechanisms.  On those platforms, it is probably best
-to use the "LOOPER" mechanism which is basically some number of
-processes (as many as there are processors) sitting in tight little
-loops counting as fast as they can.  The rate at which the loopers
-count when the system is believed to be idle is compared with the rate
-when the system is running netperf and the ratio is used to compute CPU
-utilization.
-
-   In the past, netperf included some mechanisms that only reported CPU
-time charged to the calling process.  Those mechanisms have been
-removed from netperf versions 2.4.0 and later because they are
-hopelessly inaccurate.  Networking can and often results in CPU time
-being spent in places - such as interrupt contexts - that do not get
-charged to a or the correct process.
-
-   In fact, time spent in the processing of interrupts is a common issue
-for many CPU utilization mechanisms.  In particular, the "PSTAT"
-mechanism was eventually known to have problems accounting for certain
-interrupt time prior to HP-UX 11.11 (11iv1).  HP-UX 11iv2 and later are
-known/presumed to be good. The "KSTAT" mechanism is known to have
-problems on all versions of Solaris up to and including Solaris 10.
-Even the microstate accounting available via kstat in Solaris 10 has
-issues, though perhaps not as bad as those of prior versions.
-
-   The /proc/stat mechanism under Linux is in what the author would
-consider an "uncertain" category as it appears to be statistical, which
-may also have issues with time spent processing interrupts.
-
-   In summary, be sure to "sanity-check" the CPU utilization figures
-with other mechanisms.  However, platform tools such as top, vmstat or
-mpstat are often based on the same mechanisms used by netperf.
-
-3.1.1 CPU Utilization in a Virtual Guest
-----------------------------------------
-
-The CPU utilization mechanisms used by netperf are "inline" in that
-they are run by the same netperf or netserver process as is running the
-test itself.  This works just fine for "bare iron" tests but runs into
-a problem when using virtual machines.
-
-   The relationship between virtual guest and hypervisor can be thought
-of as being similar to that between a process and kernel in a bare iron
-system.  As such, (m)any CPU utilization mechanisms used in the virtual
-guest are similar to "process-local" mechanisms in a bare iron
-situation.  However, just as with bare iron and process-local
-mechanisms, much networking processing happens outside the context of
-the virtual guest.  It takes place in the hypervisor, and is not
-visible to mechanisms running in the guest(s).  For this reason, one
-should not really trust CPU utilization figures reported by netperf or
-netserver when running in a virtual guest.
-
-   If one is looking to measure the added overhead of a virtualization
-mechanism, rather than rely on CPU utilization, one can rely instead on
-netperf _RR tests - path-lengths and overheads can be a significant
-fraction of the latency, so increases in overhead should appear as
-decreases in transaction rate.  Whatever you do, DO NOT rely on the
-throughput of a _STREAM test.  Achieving link-rate can be done via a
-multitude of options that mask overhead rather than eliminate it.
-
-4 Global Command-line Options
-*****************************
-
-This section describes each of the global command-line options
-available in the netperf and netserver binaries.  Essentially, it is an
-expanded version of the usage information displayed by netperf or
-netserver when invoked with the `-h' global command-line option.
-
-4.1 Command-line Options Syntax
-===============================
-
-Revision 1.8 of netperf introduced enough new functionality to overrun
-the English alphabet for mnemonic command-line option names, and the
-author was not and is not quite ready to switch to the contemporary
-`--mumble' style of command-line options. (Call him a Luddite if you
-wish :).
-
-   For this reason, the command-line options were split into two parts -
-the first are the global command-line options.  They are options that
-affect nearly any and every test type of netperf.  The second type are
-the test-specific command-line options.  Both are entered on the same
-command line, but they must be separated from one another by a `--' for
-correct parsing.  Global command-line options come first, followed by
-the `--' and then test-specific command-line options.  If there are no
-test-specific options to be set, the `--' may be omitted.  If there are
-no global command-line options to be set, test-specific options must
-still be preceded by a `--'.  For example:
-     netperf <global> -- <test-specific>
-   sets both global and test-specific options:
-     netperf <global>
-   sets just global options and:
-     netperf -- <test-specific>
-   sets just test-specific options.
-
-4.2 Global Options
-==================
-
-`-a <sizespec>'
-     This option allows you to alter the alignment of the buffers used
-     in the sending and receiving calls on the local system.. Changing
-     the alignment of the buffers can force the system to use different
-     copy schemes, which can have a measurable effect on performance.
-     If the page size for the system were 4096 bytes, and you want to
-     pass page-aligned buffers beginning on page boundaries, you could
-     use `-a 4096'.  By default the units are bytes, but suffix of "G,"
-     "M," or "K" will specify the units to be 2^30 (GB), 2^20 (MB) or
-     2^10 (KB) respectively. A suffix of "g," "m" or "k" will specify
-     units of 10^9, 10^6 or 10^3 bytes respectively. [Default: 8 bytes]
-
-`-A <sizespec>'
-     This option is identical to the `-a' option with the difference
-     being it affects alignments for the remote system.
-
-`-b <size>'
-     This option is only present when netperf has been configure with
-     -enable-intervals=yes prior to compilation.  It sets the size of
-     the burst of send calls in a _STREAM test.  When used in
-     conjunction with the `-w' option it can cause the rate at which
-     data is sent to be "paced."
-
-`-B <string>'
-     This option will cause `<string>' to be appended to the brief (see
-     -P) output of netperf.
-
-`-c [rate]'
-     This option will ask that CPU utilization and service demand be
-     calculated for the local system.  For those CPU utilization
-     mechanisms requiring calibration, the options rate parameter may
-     be specified to preclude running another calibration step, saving
-     40 seconds of time.  For those CPU utilization mechanisms
-     requiring no calibration, the optional rate parameter will be
-     utterly and completely ignored.  [Default: no CPU measurements]
-
-`-C [rate]'
-     This option requests CPU utilization and service demand
-     calculations for the remote system.  It is otherwise identical to
-     the `-c' option.
-
-`-d'
-     Each instance of this option will increase the quantity of
-     debugging output displayed during a test.  If the debugging output
-     level is set high enough, it may have a measurable effect on
-     performance.  Debugging information for the local system is
-     printed to stdout.  Debugging information for the remote system is
-     sent by default to the file `/tmp/netperf.debug'. [Default: no
-     debugging output]
-
-`-D [interval,units]'
-     This option is only available when netperf is configured with
-     -enable-demo=yes.  When set, it will cause netperf to emit periodic
-     reports of performance during the run.  [INTERVAL,UNITS] follow
-     the semantics of an optionspec. If specified, INTERVAL gives the
-     minimum interval in real seconds, it does not have to be whole
-     seconds.  The UNITS value can be used for the first guess as to
-     how many units of work (bytes or transactions) must be done to
-     take at least INTERVAL seconds. If omitted, INTERVAL defaults to
-     one second and UNITS to values specific to each test type.
-
-`-f G|M|K|g|m|k|x'
-     This option can be used to change the reporting units for _STREAM
-     tests.  Arguments of "G," "M," or "K" will set the units to 2^30,
-     2^20 or 2^10 bytes/s respectively (EG power of two GB, MB or KB).
-     Arguments of "g," ",m" or "k" will set the units to 10^9, 10^6 or
-     10^3 bits/s respectively.  An argument of "x" requests the units
-     be transactions per second and is only meaningful for a
-     request-response test. [Default: "m" or 10^6 bits/s]
-
-`-F <fillfile>'
-     This option specified the file from which send which buffers will
-     be pre-filled .  While the buffers will contain data from the
-     specified file, the file is not fully transferred to the remote
-     system as the receiving end of the test will not write the
-     contents of what it receives to a file.  This can be used to
-     pre-fill the send buffers with data having different
-     compressibility and so is useful when measuring performance over
-     mechanisms which perform compression.
-
-     While previously required for a TCP_SENDFILE test, later versions
-     of netperf removed that restriction, creating a temporary file as
-     needed.  While the author cannot recall exactly when that took
-     place, it is known to be unnecessary in version 2.5.0 and later.
-
-`-h'
-     This option causes netperf to display its "global" usage string and
-     exit to the exclusion of all else.
-
-`-H <optionspec>'
-     This option will set the name of the remote system and or the
-     address family used for the control connection.  For example:
-          -H linger,4
-     will set the name of the remote system to "linger" and tells
-     netperf to use IPv4 addressing only.
-          -H ,6
-     will leave the name of the remote system at its default, and
-     request that only IPv6 addresses be used for the control
-     connection.
-          -H lag
-     will set the name of the remote system to "lag" and leave the
-     address family to AF_UNSPEC which means selection of IPv4 vs IPv6
-     is left to the system's address resolution.
-
-     A value of "inet" can be used in place of "4" to request IPv4 only
-     addressing.  Similarly, a value of "inet6" can be used in place of
-     "6" to request IPv6 only addressing.  A value of "0" can be used
-     to request either IPv4 or IPv6 addressing as name resolution
-     dictates.
-
-     By default, the options set with the global `-H' option are
-     inherited by the test for its data connection, unless a
-     test-specific `-H' option is specified.
-
-     If a `-H' option follows either the `-4' or `-6' options, the
-     family setting specified with the -H option will override the `-4'
-     or `-6' options for the remote address family. If no address
-     family is specified, settings from a previous `-4' or `-6' option
-     will remain.  In a nutshell, the last explicit global command-line
-     option wins.
-
-     [Default:  "localhost" for the remote name/IP address and "0" (eg
-     AF_UNSPEC) for the remote address family.]
-
-`-I <optionspec>'
-     This option enables the calculation of confidence intervals and
-     sets the confidence and width parameters with the first half of the
-     optionspec being either 99 or 95 for 99% or 95% confidence
-     respectively.  The second value of the optionspec specifies the
-     width of the desired confidence interval.  For example
-          -I 99,5
-     asks netperf to be 99% confident that the measured mean values for
-     throughput and CPU utilization are within +/- 2.5% of the "real"
-     mean values.  If the `-i' option is specified and the `-I' option
-     is omitted, the confidence defaults to 99% and the width to 5%
-     (giving +/- 2.5%)
-
-     If classic netperf test calculates that the desired confidence
-     intervals have not been met, it emits a noticeable warning that
-     cannot be suppressed with the `-P' or `-v' options:
-
-          netperf -H tardy.cup -i 3 -I 99,5
-          TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to tardy.cup.hp.com (15.244.44.58) port 0 AF_INET : +/-2.5%  99% conf.
-          !!! WARNING
-          !!! Desired confidence was not achieved within the specified iterations.
-          !!! This implies that there was variability in the test environment that
-          !!! must be investigated before going further.
-          !!! Confidence intervals: Throughput      :  6.8%
-          !!!                       Local CPU util  :  0.0%
-          !!!                       Remote CPU util :  0.0%
-
-          Recv   Send    Send
-          Socket Socket  Message  Elapsed
-          Size   Size    Size     Time     Throughput
-          bytes  bytes   bytes    secs.    10^6bits/sec
-
-           32768  16384  16384    10.01      40.23
-
-     In the example above we see that netperf did not meet the desired
-     confidence intervals.  Instead of being 99% confident it was within
-     +/- 2.5% of the real mean value of throughput it is only confident
-     it was within +/-3.4%.  In this example, increasing the `-i'
-     option (described below) and/or increasing the iteration length
-     with the `-l' option might resolve the situation.
-
-     In an explicit "omni" test, failure to meet the confidence
-     intervals will not result in netperf emitting a warning.  To
-     verify the hitting, or not, of the confidence intervals one will
-     need to include them as part of an *note output selection: Omni
-     Output Selection. in the test-specific `-o', `-O' or `k' output
-     selection options.  The warning about not hitting the confidence
-     intervals will remain in a "migrated" classic netperf test.
-
-`-i <sizespec>'
-     This option enables the calculation of confidence intervals and
-     sets the minimum and maximum number of iterations to run in
-     attempting to achieve the desired confidence interval.  The first
-     value sets the maximum number of iterations to run, the second,
-     the minimum.  The maximum number of iterations is silently capped
-     at 30 and the minimum is silently floored at 3.  Netperf repeats
-     the measurement the minimum number of iterations and continues
-     until it reaches either the desired confidence interval, or the
-     maximum number of iterations, whichever comes first.  A classic or
-     migrated netperf test will not display the actual number of
-     iterations run. An *note omni test: The Omni Tests. will emit the
-     number of iterations run if the `CONFIDENCE_ITERATION' output
-     selector is included in the *note output selection: Omni Output
-     Selection.
-
-     If the `-I' option is specified and the `-i' option omitted the
-     maximum number of iterations is set to 10 and the minimum to three.
-
-     Output of a warning upon not hitting the desired confidence
-     intervals follows the description provided for the `-I' option.
-
-     The total test time will be somewhere between the minimum and
-     maximum number of iterations multiplied by the test length
-     supplied by the `-l' option.
-
-`-j'
-     This option instructs netperf to keep additional timing statistics
-     when explicitly running an *note omni test: The Omni Tests.  These
-     can be output when the test-specific `-o', `-O' or `-k' *note
-     output selectors: Omni Output Selectors. include one or more of:
-
-        * MIN_LATENCY
-
-        * MAX_LATENCY
-
-        * P50_LATENCY
-
-        * P90_LATENCY
-
-        * P99_LATENCY
-
-        * MEAN_LATENCY
-
-        * STDDEV_LATENCY
-
-     These statistics will be based on an expanded (100 buckets per row
-     rather than 10) histogram of times rather than a terribly long
-     list of individual times.  As such, there will be some slight
-     error thanks to the bucketing. However, the reduction in storage
-     and processing overheads is well worth it.  When running a
-     request/response test, one might get some idea of the error by
-     comparing the *note `MEAN_LATENCY': Omni Output Selectors.
-     calculated from the histogram with the `RT_LATENCY' calculated
-     from the number of request/response transactions and the test run
-     time.
-
-     In the case of a request/response test the latencies will be
-     transaction latencies.  In the case of a receive-only test they
-     will be time spent in the receive call.  In the case of a
-     send-only test they will be time spent in the send call. The units
-     will be microseconds. Added in netperf 2.5.0.
-
-`-l testlen'
-     This option controls the length of any one iteration of the
-     requested test.  A positive value for TESTLEN will run each
-     iteration of the test for at least TESTLEN seconds.  A negative
-     value for TESTLEN will run each iteration for the absolute value of
-     TESTLEN transactions for a _RR test or bytes for a _STREAM test.
-     Certain tests, notably those using UDP can only be timed, they
-     cannot be limited by transaction or byte count.  This limitation
-     may be relaxed in an *note omni: The Omni Tests. test.
-
-     In some situations, individual iterations of a test may run for
-     longer for the number of seconds specified by the `-l' option.  In
-     particular, this may occur for those tests where the socket buffer
-     size(s) are significantly longer than the bandwidthXdelay product
-     of the link(s) over which the data connection passes, or those
-     tests where there may be non-trivial numbers of retransmissions.
-
-     If confidence intervals are enabled via either `-I' or `-i' the
-     total length of the netperf test will be somewhere between the
-     minimum and maximum iteration count multiplied by TESTLEN.
-
-`-L <optionspec>'
-     This option is identical to the `-H' option with the difference
-     being it sets the _local_ hostname/IP and/or address family
-     information.  This option is generally unnecessary, but can be
-     useful when you wish to make sure that the netperf control and data
-     connections go via different paths.  It can also come-in handy if
-     one is trying to run netperf through those evil, end-to-end
-     breaking things known as firewalls.
-
-     [Default: 0.0.0.0 (eg INADDR_ANY) for IPv4 and ::0 for IPv6 for the
-     local name.  AF_UNSPEC for the local address family.]
-
-`-n numcpus'
-     This option tells netperf how many CPUs it should ass-u-me are
-     active on the system running netperf.  In particular, this is used
-     for the *note CPU utilization: CPU Utilization. and service demand
-     calculations.  On certain systems, netperf is able to determine
-     the number of CPU's automagically. This option will override any
-     number netperf might be able to determine on its own.
-
-     Note that this option does _not_ set the number of CPUs on the
-     system running netserver.  When netperf/netserver cannot
-     automagically determine the number of CPUs that can only be set
-     for netserver via a netserver `-n' command-line option.
-
-     As it is almost universally possible for netperf/netserver to
-     determine the number of CPUs on the system automagically, 99 times
-     out of 10 this option should not be necessary and may be removed
-     in a future release of netperf.
-
-`-N'
-     This option tells netperf to forgo establishing a control
-     connection. This makes it is possible to run some limited netperf
-     tests without a corresponding netserver on the remote system.
-
-     With this option set, the test to be run is to get all the
-     addressing information it needs to establish its data connection
-     from the command line or internal defaults.  If not otherwise
-     specified by test-specific command line options, the data
-     connection for a "STREAM" or "SENDFILE" test will be to the
-     "discard" port, an "RR" test will be to the "echo" port, and a
-     "MEARTS" test will be to the chargen port.
-
-     The response size of an "RR" test will be silently set to be the
-     same as the request size.  Otherwise the test would hang if the
-     response size was larger than the request size, or would report an
-     incorrect, inflated transaction rate if the response size was less
-     than the request size.
-
-     Since there is no control connection when this option is
-     specified, it is not possible to set "remote" properties such as
-     socket buffer size and the like via the netperf command line. Nor
-     is it possible to retrieve such interesting remote information as
-     CPU utilization.  These items will be displayed as values which
-     should make it immediately obvious that was the case.
-
-     The only way to change remote characteristics such as socket buffer
-     size or to obtain information such as CPU utilization is to employ
-     platform-specific methods on the remote system.  Frankly, if one
-     has access to the remote system to employ those methods one aught
-     to be able to run a netserver there.  However, that ability may
-     not be present in certain "support" situations, hence the addition
-     of this option.
-
-     Added in netperf 2.4.3.
-
-`-o <sizespec>'
-     The value(s) passed-in with this option will be used as an offset
-     added to the alignment specified with the `-a' option.  For
-     example:
-          -o 3 -a 4096
-     will cause the buffers passed to the local (netperf) send and
-     receive calls to begin three bytes past an address aligned to 4096
-     bytes. [Default: 0 bytes]
-
-`-O <sizespec>'
-     This option behaves just as the `-o' option but on the remote
-     (netserver) system and in conjunction with the `-A' option.
-     [Default: 0 bytes]
-
-`-p <optionspec>'
-     The first value of the optionspec passed-in with this option tells
-     netperf the port number at which it should expect the remote
-     netserver to be listening for control connections.  The second
-     value of the optionspec will request netperf to bind to that local
-     port number before establishing the control connection.  For
-     example
-          -p 12345
-     tells netperf that the remote netserver is listening on port 12345
-     and leaves selection of the local port number for the control
-     connection up to the local TCP/IP stack whereas
-          -p ,32109
-     leaves the remote netserver port at the default value of 12865 and
-     causes netperf to bind to the local port number 32109 before
-     connecting to the remote netserver.
-
-     In general, setting the local port number is only necessary when
-     one is looking to run netperf through those evil, end-to-end
-     breaking things known as firewalls.
-
-`-P 0|1'
-     A value of "1" for the `-P' option will enable display of the test
-     banner.  A value of "0" will disable display of the test banner.
-     One might want to disable display of the test banner when running
-     the same basic test type (eg TCP_STREAM) multiple times in
-     succession where the test banners would then simply be redundant
-     and unnecessarily clutter the output. [Default: 1 - display test
-     banners]
-
-`-s <seconds>'
-     This option will cause netperf to sleep `<seconds>' before
-     actually transferring data over the data connection.  This may be
-     useful in situations where one wishes to start a great many netperf
-     instances and do not want the earlier ones affecting the ability of
-     the later ones to get established.
-
-     Added somewhere between versions 2.4.3 and 2.5.0.
-
-`-S'
-     This option will cause an attempt to be made to set SO_KEEPALIVE on
-     the data socket of a test using the BSD sockets interface.  The
-     attempt will be made on the netperf side of all tests, and will be
-     made on the netserver side of an *note omni: The Omni Tests. or
-     *note migrated: Migrated Tests. test.  No indication of failure is
-     given unless debug output is enabled with the global `-d' option.
-
-     Added in version 2.5.0.
-
-`-t testname'
-     This option is used to tell netperf which test you wish to run.
-     As of this writing, valid values for TESTNAME include:
-        * *note TCP_STREAM::, *note TCP_MAERTS::, *note TCP_SENDFILE::,
-          *note TCP_RR::, *note TCP_CRR::, *note TCP_CC::
-
-        * *note UDP_STREAM::, *note UDP_RR::
-
-        * *note XTI_TCP_STREAM::,  *note XTI_TCP_RR::, *note
-          XTI_TCP_CRR::, *note XTI_TCP_CC::
-
-        * *note XTI_UDP_STREAM::, *note XTI_UDP_RR::
-
-        * *note SCTP_STREAM::, *note SCTP_RR::
-
-        * *note DLCO_STREAM::, *note DLCO_RR::,  *note DLCL_STREAM::,
-          *note DLCL_RR::
-
-        * *note LOC_CPU: Other Netperf Tests, *note REM_CPU: Other
-          Netperf Tests.
-
-        * *note OMNI: The Omni Tests.
-     Not all tests are always compiled into netperf.  In particular, the
-     "XTI," "SCTP," "UNIXDOMAIN," and "DL*" tests are only included in
-     netperf when configured with
-     `--enable-[xti|sctp|unixdomain|dlpi]=yes'.
-
-     Netperf only runs one type of test no matter how many `-t' options
-     may be present on the command-line.  The last `-t' global
-     command-line option will determine the test to be run. [Default:
-     TCP_STREAM]
-
-`-T <optionspec>'
-     This option controls the CPU, and probably by extension memory,
-     affinity of netperf and/or netserver.
-          netperf -T 1
-     will bind both netperf and netserver to "CPU 1" on their respective
-     systems.
-          netperf -T 1,
-     will bind just netperf to "CPU 1" and will leave netserver unbound.
-          netperf -T ,2
-     will leave netperf unbound and will bind netserver to "CPU 2."
-          netperf -T 1,2
-     will bind netperf to "CPU 1" and netserver to "CPU 2."
-
-     This can be particularly useful when investigating performance
-     issues involving where processes run relative to where NIC
-     interrupts are processed or where NICs allocate their DMA buffers.
-
-`-v verbosity'
-     This option controls how verbose netperf will be in its output,
-     and is often used in conjunction with the `-P' option. If the
-     verbosity is set to a value of "0" then only the test's SFM (Single
-     Figure of Merit) is displayed.  If local *note CPU utilization:
-     CPU Utilization. is requested via the `-c' option then the SFM is
-     the local service demand.  Othersise, if remote CPU utilization is
-     requested via the `-C' option then the SFM is the remote service
-     demand.  If neither local nor remote CPU utilization are requested
-     the SFM will be the measured throughput or transaction rate as
-     implied by the test specified with the `-t' option.
-
-     If the verbosity level is set to "1" then the "normal" netperf
-     result output for each test is displayed.
-
-     If the verbosity level is set to "2" then "extra" information will
-     be displayed.  This may include, but is not limited to the number
-     of send or recv calls made and the average number of bytes per
-     send or recv call, or a histogram of the time spent in each send()
-     call or for each transaction if netperf was configured with
-     `--enable-histogram=yes'. [Default: 1 - normal verbosity]
-
-     In an *note omni: The Omni Tests. test the verbosity setting is
-     largely ignored, save for when asking for the time histogram to be
-     displayed.  In version 2.5.0 and later there is no *note output
-     selector: Omni Output Selectors. for the histogram and so it
-     remains displayed only when the verbosity level is set to 2.
-
-`-V'
-     This option displays the netperf version and then exits.
-
-     Added in netperf 2.4.4.
-
-`-w time'
-     If netperf was configured with `--enable-intervals=yes' then this
-     value will set the inter-burst time to time milliseconds, and the
-     `-b' option will set the number of sends per burst.  The actual
-     inter-burst time may vary depending on the system's timer
-     resolution.
-
-`-W <sizespec>'
-     This option controls the number of buffers in the send (first or
-     only value) and or receive (second or only value) buffer rings.
-     Unlike some benchmarks, netperf does not continuously send or
-     receive from a single buffer.  Instead it rotates through a ring of
-     buffers. [Default: One more than the size of the send or receive
-     socket buffer sizes (`-s' and/or `-S' options) divided by the send
-     `-m' or receive `-M' buffer size respectively]
-
-`-4'
-     Specifying this option will set both the local and remote address
-     families to AF_INET - that is use only IPv4 addresses on the
-     control connection.  This can be overridden by a subsequent `-6',
-     `-H' or `-L' option.  Basically, the last option explicitly
-     specifying an address family wins.  Unless overridden by a
-     test-specific option, this will be inherited for the data
-     connection as well.
-
-`-6'
-     Specifying this option will set both local and and remote address
-     families to AF_INET6 - that is use only IPv6 addresses on the
-     control connection.  This can be overridden by a subsequent `-4',
-     `-H' or `-L' option.  Basically, the last address family
-     explicitly specified wins.  Unless overridden by a test-specific
-     option, this will be inherited for the data connection as well.
-
-
-5 Using Netperf to Measure Bulk Data Transfer
-*********************************************
-
-The most commonly measured aspect of networked system performance is
-that of bulk or unidirectional transfer performance.  Everyone wants to
-know how many bits or bytes per second they can push across the
-network. The classic netperf convention for a bulk data transfer test
-name is to tack a "_STREAM" suffix to a test name.
-
-5.1 Issues in Bulk Transfer
-===========================
-
-There are any number of things which can affect the performance of a
-bulk transfer test.
-
-   Certainly, absent compression, bulk-transfer tests can be limited by
-the speed of the slowest link in the path from the source to the
-destination.  If testing over a gigabit link, you will not see more
-than a gigabit :) Such situations can be described as being
-"network-limited" or "NIC-limited".
-
-   CPU utilization can also affect the results of a bulk-transfer test.
-If the networking stack requires a certain number of instructions or
-CPU cycles per KB of data transferred, and the CPU is limited in the
-number of instructions or cycles it can provide, then the transfer can
-be described as being "CPU-bound".
-
-   A bulk-transfer test can be CPU bound even when netperf reports less
-than 100% CPU utilization.  This can happen on an MP system where one
-or more of the CPUs saturate at 100% but other CPU's remain idle.
-Typically, a single flow of data, such as that from a single instance
-of a netperf _STREAM test cannot make use of much more than the power
-of one CPU. Exceptions to this generally occur when netperf and/or
-netserver run on CPU(s) other than the CPU(s) taking interrupts from
-the NIC(s). In that case, one might see as much as two CPUs' worth of
-processing being used to service the flow of data.
-
-   Distance and the speed-of-light can affect performance for a
-bulk-transfer; often this can be mitigated by using larger windows.
-One common limit to the performance of a transport using window-based
-flow-control is:
-     Throughput <= WindowSize/RoundTripTime
-   As the sender can only have a window's-worth of data outstanding on
-the network at any one time, and the soonest the sender can receive a
-window update from the receiver is one RoundTripTime (RTT).  TCP and
-SCTP are examples of such protocols.
-
-   Packet losses and their effects can be particularly bad for
-performance.  This is especially true if the packet losses result in
-retransmission timeouts for the protocol(s) involved.  By the time a
-retransmission timeout has happened, the flow or connection has sat
-idle for a considerable length of time.
-
-   On many platforms, some variant on the `netstat' command can be used
-to retrieve statistics about packet loss and retransmission. For
-example:
-     netstat -p tcp
-   will retrieve TCP statistics on the HP-UX Operating System.  On other
-platforms, it may not be possible to retrieve statistics for a specific
-protocol and something like:
-     netstat -s
-   would be used instead.
-
-   Many times, such network statistics are keep since the time the stack
-started, and we are only really interested in statistics from when
-netperf was running.  In such situations something along the lines of:
-     netstat -p tcp > before
-     netperf -t TCP_mumble...
-     netstat -p tcp > after
-   is indicated.  The beforeafter
-(ftp://ftp.cup.hp.com/dist/networking/tools/) utility can be used to
-subtract the statistics in `before' from the statistics in `after':
-     beforeafter before after > delta
-   and then one can look at the statistics in `delta'.  Beforeafter is
-distributed in source form so one can compile it on the platform(s) of
-interest.
-
-   If running a version 2.5.0 or later "omni" test under Linux one can
-include either or both of:
-   * LOCAL_TRANSPORT_RETRANS
-
-   * REMOTE_TRANSPORT_RETRANS
-
-   in the values provided via a test-specific `-o', `-O', or `-k'
-output selction option and netperf will report the retransmissions
-experienced on the data connection, as reported via a
-`getsockopt(TCP_INFO)' call.  If confidence intervals have been
-requested via the global `-I' or `-i' options, the reported value(s)
-will be for the last iteration.  If the test is over a protocol other
-than TCP, or on a platform other than Linux, the results are undefined.
-
-   While it was written with HP-UX's netstat in mind, the annotated
-netstat
-(ftp://ftp.cup.hp.com/dist/networking/briefs/annotated_netstat.txt)
-writeup may be helpful with other platforms as well.
-
-5.2 Options common to TCP UDP and SCTP tests
-============================================
-
-Many "test-specific" options are actually common across the different
-tests.  For those tests involving TCP, UDP and SCTP, whether using the
-BSD Sockets or the XTI interface those common options include:
-
-`-h'
-     Display the test-suite-specific usage string and exit.  For a TCP_
-     or UDP_ test this will be the usage string from the source file
-     nettest_bsd.c.  For an XTI_ test, this will be the usage string
-     from the source file nettest_xti.c.  For an SCTP test, this will
-     be the usage string from the source file nettest_sctp.c.
-
-`-H <optionspec>'
-     Normally, the remote hostname|IP and address family information is
-     inherited from the settings for the control connection (eg global
-     command-line `-H', `-4' and/or `-6' options).  The test-specific
-     `-H' will override those settings for the data (aka test)
-     connection only.  Settings for the control connection are left
-     unchanged.
-
-`-L <optionspec>'
-     The test-specific `-L' option is identical to the test-specific
-     `-H' option except it affects the local hostname|IP and address
-     family information.  As with its global command-line counterpart,
-     this is generally only useful when measuring though those evil,
-     end-to-end breaking things called firewalls.
-
-`-m bytes'
-     Set the size of the buffer passed-in to the "send" calls of a
-     _STREAM test.  Note that this may have only an indirect effect on
-     the size of the packets sent over the network, and certain Layer 4
-     protocols do _not_ preserve or enforce message boundaries, so
-     setting `-m' for the send size does not necessarily mean the
-     receiver will receive that many bytes at any one time. By default
-     the units are bytes, but suffix of "G," "M," or "K" will specify
-     the units to be 2^30 (GB), 2^20 (MB) or 2^10 (KB) respectively. A
-     suffix of "g," "m" or "k" will specify units of 10^9, 10^6 or 10^3
-     bytes respectively. For example:
-          `-m 32K'
-     will set the size to 32KB or 32768 bytes. [Default: the local send
-     socket buffer size for the connection - either the system's
-     default or the value set via the `-s' option.]
-
-`-M bytes'
-     Set the size of the buffer passed-in to the "recv" calls of a
-     _STREAM test.  This will be an upper bound on the number of bytes
-     received per receive call. By default the units are bytes, but
-     suffix of "G," "M," or "K" will specify the units to be 2^30 (GB),
-     2^20 (MB) or 2^10 (KB) respectively.  A suffix of "g," "m" or "k"
-     will specify units of 10^9, 10^6 or 10^3 bytes respectively. For
-     example:
-          `-M 32K'
-     will set the size to 32KB or 32768 bytes. [Default: the remote
-     receive socket buffer size for the data connection - either the
-     system's default or the value set via the `-S' option.]
-
-`-P <optionspec>'
-     Set the local and/or remote port numbers for the data connection.
-
-`-s <sizespec>'
-     This option sets the local (netperf) send and receive socket buffer
-     sizes for the data connection to the value(s) specified.  Often,
-     this will affect the advertised and/or effective TCP or other
-     window, but on some platforms it may not. By default the units are
-     bytes, but suffix of "G," "M," or "K" will specify the units to be
-     2^30 (GB), 2^20 (MB) or 2^10 (KB) respectively.  A suffix of "g,"
-     "m" or "k" will specify units of 10^9, 10^6 or 10^3 bytes
-     respectively. For example:
-          `-s 128K'
-     Will request the local send and receive socket buffer sizes to be
-     128KB or 131072 bytes.
-
-     While the historic expectation is that setting the socket buffer
-     size has a direct effect on say the TCP window, today that may not
-     hold true for all stacks. Further, while the historic expectation
-     is that the value specified in a `setsockopt()' call will be the
-     value returned via a `getsockopt()' call, at least one stack is
-     known to deliberately ignore history.  When running under Windows
-     a value of 0 may be used which will be an indication to the stack
-     the user wants to enable a form of copy avoidance. [Default: -1 -
-     use the system's default socket buffer sizes]
-
-`-S <sizespec>'
-     This option sets the remote (netserver) send and/or receive socket
-     buffer sizes for the data connection to the value(s) specified.
-     Often, this will affect the advertised and/or effective TCP or
-     other window, but on some platforms it may not. By default the
-     units are bytes, but suffix of "G," "M," or "K" will specify the
-     units to be 2^30 (GB), 2^20 (MB) or 2^10 (KB) respectively.  A
-     suffix of "g," "m" or "k" will specify units of 10^9, 10^6 or 10^3
-     bytes respectively.  For example:
-          `-S 128K'
-     Will request the remote send and receive socket buffer sizes to be
-     128KB or 131072 bytes.
-
-     While the historic expectation is that setting the socket buffer
-     size has a direct effect on say the TCP window, today that may not
-     hold true for all stacks.  Further, while the historic expectation
-     is that the value specified in a `setsockopt()' call will be the
-     value returned via a `getsockopt()' call, at least one stack is
-     known to deliberately ignore history.  When running under Windows
-     a value of 0 may be used which will be an indication to the stack
-     the user wants to enable a form of copy avoidance. [Default: -1 -
-     use the system's default socket buffer sizes]
-
-`-4'
-     Set the local and remote address family for the data connection to
-     AF_INET - ie use IPv4 addressing only.  Just as with their global
-     command-line counterparts the last of the `-4', `-6', `-H' or `-L'
-     option wins for their respective address families.
-
-`-6'
-     This option is identical to its `-4' cousin, but requests IPv6
-     addresses for the local and remote ends of the data connection.
-
-
-5.2.1 TCP_STREAM
-----------------
-
-The TCP_STREAM test is the default test in netperf.  It is quite
-simple, transferring some quantity of data from the system running
-netperf to the system running netserver.  While time spent establishing
-the connection is not included in the throughput calculation, time
-spent flushing the last of the data to the remote at the end of the
-test is.  This is how netperf knows that all the data it sent was
-received by the remote.  In addition to the *note options common to
-STREAM tests: Options common to TCP UDP and SCTP tests, the following
-test-specific options can be included to possibly alter the behavior of
-the test:
-
-`-C'
-     This option will set TCP_CORK mode on the data connection on those
-     systems where TCP_CORK is defined (typically Linux).  A full
-     description of TCP_CORK is beyond the scope of this manual, but in
-     a nutshell it forces sub-MSS sends to be buffered so every segment
-     sent is Maximum Segment Size (MSS) unless the application performs
-     an explicit flush operation or the connection is closed.  At
-     present netperf does not perform any explicit flush operations.
-     Setting TCP_CORK may improve the bitrate of tests where the "send
-     size" (`-m' option) is smaller than the MSS.  It should also
-     improve (make smaller) the service demand.
-
-     The Linux tcp(7) manpage states that TCP_CORK cannot be used in
-     conjunction with TCP_NODELAY (set via the `-d' option), however
-     netperf does not validate command-line options to enforce that.
-
-`-D'
-     This option will set TCP_NODELAY on the data connection on those
-     systems where TCP_NODELAY is defined.  This disables something
-     known as the Nagle Algorithm, which is intended to make the
-     segments TCP sends as large as reasonably possible.  Setting
-     TCP_NODELAY for a TCP_STREAM test should either have no effect
-     when the send size (`-m' option) is larger than the MSS or will
-     decrease reported bitrate and increase service demand when the
-     send size is smaller than the MSS.  This stems from TCP_NODELAY
-     causing each sub-MSS send to be its own TCP segment rather than
-     being aggregated with other small sends.  This means more trips up
-     and down the protocol stack per KB of data transferred, which
-     means greater CPU utilization.
-
-     If setting TCP_NODELAY with `-D' affects throughput and/or service
-     demand for tests where the send size (`-m') is larger than the MSS
-     it suggests the TCP/IP stack's implementation of the Nagle
-     Algorithm _may_ be broken, perhaps interpreting the Nagle
-     Algorithm on a segment by segment basis rather than the proper user
-     send by user send basis.  However, a better test of this can be
-     achieved with the *note TCP_RR:: test.
-
-
-   Here is an example of a basic TCP_STREAM test, in this case from a
-Debian Linux (2.6 kernel) system to an HP-UX 11iv2 (HP-UX 11.23) system:
-
-     $ netperf -H lag
-     TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to lag.hpl.hp.com (15.4.89.214) port 0 AF_INET
-     Recv   Send    Send
-     Socket Socket  Message  Elapsed
-     Size   Size    Size     Time     Throughput
-     bytes  bytes   bytes    secs.    10^6bits/sec
-
-      32768  16384  16384    10.00      80.42
-
-   We see that the default receive socket buffer size for the receiver
-(lag - HP-UX 11.23) is 32768 bytes, and the default socket send buffer
-size for the sender (Debian 2.6 kernel) is 16384 bytes, however Linux
-does "auto tuning" of socket buffer and TCP window sizes, which means
-the send socket buffer size may be different at the end of the test
-than it was at the beginning.  This is addressed in the *note omni
-tests: The Omni Tests. added in version 2.5.0 and *note output
-selection: Omni Output Selection.  Throughput is expressed as 10^6 (aka
-Mega) bits per second, and the test ran for 10 seconds.  IPv4 addresses
-(AF_INET) were used.
-
-5.2.2 TCP_MAERTS
-----------------
-
-A TCP_MAERTS (MAERTS is STREAM backwards) test is "just like" a *note
-TCP_STREAM:: test except the data flows from the netserver to the
-netperf. The global command-line `-F' option is ignored for this test
-type.  The test-specific command-line `-C' option is ignored for this
-test type.
-
-   Here is an example of a TCP_MAERTS test between the same two systems
-as in the example for the *note TCP_STREAM:: test.  This time we request
-larger socket buffers with `-s' and `-S' options:
-
-     $ netperf -H lag -t TCP_MAERTS -- -s 128K -S 128K
-     TCP MAERTS TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to lag.hpl.hp.com (15.4.89.214) port 0 AF_INET
-     Recv   Send    Send
-     Socket Socket  Message  Elapsed
-     Size   Size    Size     Time     Throughput
-     bytes  bytes   bytes    secs.    10^6bits/sec
-
-     221184 131072 131072    10.03      81.14
-
-   Where we see that Linux, unlike HP-UX, may not return the same value
-in a `getsockopt()' as was requested in the prior `setsockopt()'.
-
-   This test is included more for benchmarking convenience than anything
-else.
-
-5.2.3 TCP_SENDFILE
-------------------
-
-The TCP_SENDFILE test is "just like" a *note TCP_STREAM:: test except
-netperf the platform's `sendfile()' call instead of calling `send()'.
-Often this results in a "zero-copy" operation where data is sent
-directly from the filesystem buffer cache.  This _should_ result in
-lower CPU utilization and possibly higher throughput.  If it does not,
-then you may want to contact your vendor(s) because they have a problem
-on their hands.
-
-   Zero-copy mechanisms may also alter the characteristics (size and
-number of buffers per) of packets passed to the NIC.  In many stacks,
-when a copy is performed, the stack can "reserve" space at the
-beginning of the destination buffer for things like TCP, IP and Link
-headers.  This then has the packet contained in a single buffer which
-can be easier to DMA to the NIC.  When no copy is performed, there is
-no opportunity to reserve space for headers and so a packet will be
-contained in two or more buffers.
-
-   As of some time before version 2.5.0, the *note global `-F' option:
-Global Options. is no longer required for this test.  If it is not
-specified, netperf will create a temporary file, which it will delete
-at the end of the test.  If the `-F' option is specified it must
-reference a file of at least the size of the send ring (*Note the
-global `-W' option: Global Options.) multiplied by the send size (*Note
-the test-specific `-m' option: Options common to TCP UDP and SCTP
-tests.).  All other TCP-specific options remain available and optional.
-
-   In this first example:
-     $ netperf -H lag -F ../src/netperf -t TCP_SENDFILE -- -s 128K -S 128K
-     TCP SENDFILE TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to lag.hpl.hp.com (15.4.89.214) port 0 AF_INET
-     alloc_sendfile_buf_ring: specified file too small.
-     file must be larger than send_width * send_size
-
-   we see what happens when the file is too small.  Here:
-
-     $ netperf -H lag -F /boot/vmlinuz-2.6.8-1-686 -t TCP_SENDFILE -- -s 128K -S 128K
-     TCP SENDFILE TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to lag.hpl.hp.com (15.4.89.214) port 0 AF_INET
-     Recv   Send    Send
-     Socket Socket  Message  Elapsed
-     Size   Size    Size     Time     Throughput
-     bytes  bytes   bytes    secs.    10^6bits/sec
-
-     131072 221184 221184    10.02      81.83
-
-   we resolve that issue by selecting a larger file.
-
-5.2.4 UDP_STREAM
-----------------
-
-A UDP_STREAM test is similar to a *note TCP_STREAM:: test except UDP is
-used as the transport rather than TCP.
-
-   A UDP_STREAM test has no end-to-end flow control - UDP provides none
-and neither does netperf.  However, if you wish, you can configure
-netperf with `--enable-intervals=yes' to enable the global command-line
-`-b' and `-w' options to pace bursts of traffic onto the network.
-
-   This has a number of implications.
-
-   The biggest of these implications is the data which is sent might not
-be received by the remote.  For this reason, the output of a UDP_STREAM
-test shows both the sending and receiving throughput.  On some
-platforms, it may be possible for the sending throughput to be reported
-as a value greater than the maximum rate of the link.  This is common
-when the CPU(s) are faster than the network and there is no
-"intra-stack" flow-control.
-
-   Here is an example of a UDP_STREAM test between two systems connected
-by a 10 Gigabit Ethernet link:
-     $ netperf -t UDP_STREAM -H 192.168.2.125 -- -m 32768
-     UDP UNIDIRECTIONAL SEND TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 192.168.2.125 (192.168.2.125) port 0 AF_INET
-     Socket  Message  Elapsed      Messages
-     Size    Size     Time         Okay Errors   Throughput
-     bytes   bytes    secs            #      #   10^6bits/sec
-
-     124928   32768   10.00      105672      0    2770.20
-     135168           10.00      104844           2748.50
-
-   The first line of numbers are statistics from the sending (netperf)
-side. The second line of numbers are from the receiving (netserver)
-side.  In this case, 105672 - 104844 or 828 messages did not make it
-all the way to the remote netserver process.
-
-   If the value of the `-m' option is larger than the local send socket
-buffer size (`-s' option) netperf will likely abort with an error
-message about how the send call failed:
-
-     netperf -t UDP_STREAM -H 192.168.2.125
-     UDP UNIDIRECTIONAL SEND TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 192.168.2.125 (192.168.2.125) port 0 AF_INET
-     udp_send: data send error: Message too long
-
-   If the value of the `-m' option is larger than the remote socket
-receive buffer, the reported receive throughput will likely be zero as
-the remote UDP will discard the messages as being too large to fit into
-the socket buffer.
-
-     $ netperf -t UDP_STREAM -H 192.168.2.125 -- -m 65000 -S 32768
-     UDP UNIDIRECTIONAL SEND TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 192.168.2.125 (192.168.2.125) port 0 AF_INET
-     Socket  Message  Elapsed      Messages
-     Size    Size     Time         Okay Errors   Throughput
-     bytes   bytes    secs            #      #   10^6bits/sec
-
-     124928   65000   10.00       53595      0    2786.99
-      65536           10.00           0              0.00
-
-   The example above was between a pair of systems running a "Linux"
-kernel. Notice that the remote Linux system returned a value larger
-than that passed-in to the `-S' option.  In fact, this value was larger
-than the message size set with the `-m' option.  That the remote socket
-buffer size is reported as 65536 bytes would suggest to any sane person
-that a message of 65000 bytes would fit, but the socket isn't _really_
-65536 bytes, even though Linux is telling us so.  Go figure.
-
-5.2.5 XTI_TCP_STREAM
---------------------
-
-An XTI_TCP_STREAM test is simply a *note TCP_STREAM:: test using the XTI
-rather than BSD Sockets interface.  The test-specific `-X <devspec>'
-option can be used to specify the name of the local and/or remote XTI
-device files, which is required by the `t_open()' call made by netperf
-XTI tests.
-
-   The XTI_TCP_STREAM test is only present if netperf was configured
-with `--enable-xti=yes'.  The remote netserver must have also been
-configured with `--enable-xti=yes'.
-
-5.2.6 XTI_UDP_STREAM
---------------------
-
-An XTI_UDP_STREAM test is simply a *note UDP_STREAM:: test using the XTI
-rather than BSD Sockets Interface.  The test-specific `-X <devspec>'
-option can be used to specify the name of the local and/or remote XTI
-device files, which is required by the `t_open()' call made by netperf
-XTI tests.
-
-   The XTI_UDP_STREAM test is only present if netperf was configured
-with `--enable-xti=yes'. The remote netserver must have also been
-configured with `--enable-xti=yes'.
-
-5.2.7 SCTP_STREAM
------------------
-
-An SCTP_STREAM test is essentially a *note TCP_STREAM:: test using the
-SCTP rather than TCP.  The `-D' option will set SCTP_NODELAY, which is
-much like the TCP_NODELAY option for TCP.  The `-C' option is not
-applicable to an SCTP test as there is no corresponding SCTP_CORK
-option.  The author is still figuring-out what the test-specific `-N'
-option does :)
-
-   The SCTP_STREAM test is only present if netperf was configured with
-`--enable-sctp=yes'. The remote netserver must have also been
-configured with `--enable-sctp=yes'.
-
-5.2.8 DLCO_STREAM
------------------
-
-A DLPI Connection Oriented Stream (DLCO_STREAM) test is very similar in
-concept to a *note TCP_STREAM:: test.  Both use reliable,
-connection-oriented protocols.  The DLPI test differs from the TCP test
-in that its protocol operates only at the link-level and does not
-include TCP-style segmentation and reassembly.  This last difference
-means that the value  passed-in  with the `-m' option must be less than
-the interface MTU.  Otherwise, the `-m' and `-M' options are just like
-their TCP/UDP/SCTP counterparts.
-
-   Other DLPI-specific options include:
-
-`-D <devspec>'
-     This option is used to provide the fully-qualified names for the
-     local and/or remote DLPI device files.  The syntax is otherwise
-     identical to that of a "sizespec".
-
-`-p <ppaspec>'
-     This option is used to specify the local and/or remote DLPI PPA(s).
-     The PPA is used to identify the interface over which traffic is to
-     be sent/received. The syntax of a "ppaspec" is otherwise the same
-     as a "sizespec".
-
-`-s sap'
-     This option specifies the 802.2 SAP for the test.  A SAP is
-     somewhat like either the port field of a TCP or UDP header or the
-     protocol field of an IP header.  The specified SAP should not
-     conflict with any other active SAPs on the specified PPA's (`-p'
-     option).
-
-`-w <sizespec>'
-     This option specifies the local send and receive window sizes in
-     units of frames on those platforms which support setting such
-     things.
-
-`-W <sizespec>'
-     This option specifies the remote send and receive window sizes in
-     units of frames on those platforms which support setting such
-     things.
-
-   The DLCO_STREAM test is only present if netperf was configured with
-`--enable-dlpi=yes'. The remote netserver must have also been
-configured with `--enable-dlpi=yes'.
-
-5.2.9 DLCL_STREAM
------------------
-
-A DLPI ConnectionLess Stream (DLCL_STREAM) test is analogous to a *note
-UDP_STREAM:: test in that both make use of unreliable/best-effort,
-connection-less transports.  The DLCL_STREAM test differs from the
-*note UDP_STREAM:: test in that the message size (`-m' option) must
-always be less than the link MTU as there is no IP-like fragmentation
-and reassembly available and netperf does not presume to provide one.
-
-   The test-specific command-line options for a DLCL_STREAM test are the
-same as those for a *note DLCO_STREAM:: test.
-
-   The DLCL_STREAM test is only present if netperf was configured with
-`--enable-dlpi=yes'. The remote netserver must have also been
-configured with `--enable-dlpi=yes'.
-
-5.2.10 STREAM_STREAM
---------------------
-
-A Unix Domain Stream Socket Stream test (STREAM_STREAM) is similar in
-concept to a *note TCP_STREAM:: test, but using Unix Domain sockets.
-It is, naturally, limited to intra-machine traffic.  A STREAM_STREAM
-test shares the `-m', `-M', `-s' and `-S' options of the other _STREAM
-tests.  In a STREAM_STREAM test the `-p' option sets the directory in
-which the pipes will be created rather than setting a port number.  The
-default is to create the pipes in the system default for the
-`tempnam()' call.
-
-   The STREAM_STREAM test is only present if netperf was configured with
-`--enable-unixdomain=yes'. The remote netserver must have also been
-configured with `--enable-unixdomain=yes'.
-
-5.2.11 DG_STREAM
-----------------
-
-A Unix Domain Datagram Socket Stream test (SG_STREAM) is very much like
-a *note TCP_STREAM:: test except that message boundaries are preserved.
-In this way, it may also be considered similar to certain flavors of
-SCTP test which can also preserve message boundaries.
-
-   All the options of a *note STREAM_STREAM:: test are applicable to a
-DG_STREAM test.
-
-   The DG_STREAM test is only present if netperf was configured with
-`--enable-unixdomain=yes'. The remote netserver must have also been
-configured with `--enable-unixdomain=yes'.
-
-6 Using Netperf to Measure Request/Response
-*******************************************
-
-Request/response performance is often overlooked, yet it is just as
-important as bulk-transfer performance.  While things like larger
-socket buffers and TCP windows, and stateless offloads like TSO and LRO
-can cover a multitude of latency and even path-length sins, those sins
-cannot easily hide from a request/response test.  The convention for a
-request/response test is to have a _RR suffix.  There are however a few
-"request/response" tests that have other suffixes.
-
-   A request/response test, particularly synchronous, one transaction at
-a time test such as those found by default in netperf, is particularly
-sensitive to the path-length of the networking stack.  An _RR test can
-also uncover those platforms where the NICs are strapped by default
-with overbearing interrupt avoidance settings in an attempt to increase
-the bulk-transfer performance (or rather, decrease the CPU utilization
-of a bulk-transfer test).  This sensitivity is most acute for small
-request and response sizes, such as the single-byte default for a
-netperf _RR test.
-
-   While a bulk-transfer test reports its results in units of bits or
-bytes transferred per second, by default a mumble_RR test reports
-transactions per second where a transaction is defined as the completed
-exchange of a request and a response.  One can invert the transaction
-rate to arrive at the average round-trip latency.  If one is confident
-about the symmetry of the connection, the average one-way latency can
-be taken as one-half the average round-trip latency. As of version
-2.5.0 (actually slightly before) netperf still does not do the latter,
-but will do the former if one sets the verbosity to 2 for a classic
-netperf test, or includes the appropriate *note output selector: Omni
-Output Selectors. in an *note omni test: The Omni Tests.  It will also
-allow the user to switch the throughput units from transactions per
-second to bits or bytes per second with the global `-f' option.
-
-6.1 Issues in Request/Response
-==============================
-
-Most if not all the *note Issues in Bulk Transfer:: apply to
-request/response.  The issue of round-trip latency is even more
-important as netperf generally only has one transaction outstanding at
-a time.
-
-   A single instance of a one transaction outstanding _RR test should
-_never_ completely saturate the CPU of a system.  If testing between
-otherwise evenly matched systems, the symmetric nature of a _RR test
-with equal request and response sizes should result in equal CPU
-loading on both systems. However, this may not hold true on MP systems,
-particularly if one CPU binds the netperf and netserver differently via
-the global `-T' option.
-
-   For smaller request and response sizes packet loss is a bigger issue
-as there is no opportunity for a "fast retransmit" or retransmission
-prior to a retransmission timer expiring.
-
-   Virtualization may considerably increase the effective path length of
-a networking stack.  While this may not preclude achieving link-rate on
-a comparatively slow link (eg 1 Gigabit Ethernet) on a _STREAM test, it
-can show-up as measurably fewer transactions per second on an _RR test.
-However, this may still be masked by interrupt coalescing in the
-NIC/driver.
-
-   Certain NICs have ways to minimize the number of interrupts sent to
-the host.  If these are strapped badly they can significantly reduce
-the performance of something like a single-byte request/response test.
-Such setups are distinguished by seriously low reported CPU utilization
-and what seems like a low (even if in the thousands) transaction per
-second rate.  Also, if you run such an OS/driver combination on faster
-or slower hardware and do not see a corresponding change in the
-transaction rate, chances are good that the driver is strapping the NIC
-with aggressive interrupt avoidance settings.  Good for bulk
-throughput, but bad for latency.
-
-   Some drivers may try to automagically adjust the interrupt avoidance
-settings.  If they are not terribly good at it, you will see
-considerable run-to-run variation in reported transaction rates.
-Particularly if you "mix-up" _STREAM and _RR tests.
-
-6.2 Options Common to TCP UDP and SCTP _RR tests
-================================================
-
-Many "test-specific" options are actually common across the different
-tests.  For those tests involving TCP, UDP and SCTP, whether using the
-BSD Sockets or the XTI interface those common options include:
-
-`-h'
-     Display the test-suite-specific usage string and exit.  For a TCP_
-     or UDP_ test this will be the usage string from the source file
-     `nettest_bsd.c'.  For an XTI_ test, this will be the usage string
-     from the source file `src/nettest_xti.c'.  For an SCTP test, this
-     will be the usage string from the source file `src/nettest_sctp.c'.
-
-`-H <optionspec>'
-     Normally, the remote hostname|IP and address family information is
-     inherited from the settings for the control connection (eg global
-     command-line `-H', `-4' and/or `-6' options.  The test-specific
-     `-H' will override those settings for the data (aka test)
-     connection only.  Settings for the control connection are left
-     unchanged.  This might be used to cause the control and data
-     connections to take different paths through the network.
-
-`-L <optionspec>'
-     The test-specific `-L' option is identical to the test-specific
-     `-H' option except it affects the local hostname|IP and address
-     family information.  As with its global command-line counterpart,
-     this is generally only useful when measuring though those evil,
-     end-to-end breaking things called firewalls.
-
-`-P <optionspec>'
-     Set the local and/or remote port numbers for the data connection.
-
-`-r <sizespec>'
-     This option sets the request (first value) and/or response (second
-     value) sizes for an _RR test. By default the units are bytes, but a
-     suffix of "G," "M," or "K" will specify the units to be 2^30 (GB),
-     2^20 (MB) or 2^10 (KB) respectively.  A suffix of "g," "m" or "k"
-     will specify units of 10^9, 10^6 or 10^3 bytes respectively. For
-     example:
-          `-r 128,16K'
-     Will set the request size to 128 bytes and the response size to 16
-     KB or 16384 bytes. [Default: 1 - a single-byte request and
-     response ]
-
-`-s <sizespec>'
-     This option sets the local (netperf) send and receive socket buffer
-     sizes for the data connection to the value(s) specified.  Often,
-     this will affect the advertised and/or effective TCP or other
-     window, but on some platforms it may not. By default the units are
-     bytes, but a suffix of "G," "M," or "K" will specify the units to
-     be 2^30 (GB), 2^20 (MB) or 2^10 (KB) respectively.  A suffix of
-     "g," "m" or "k" will specify units of 10^9, 10^6 or 10^3 bytes
-     respectively. For example:
-          `-s 128K'
-     Will request the local send (netperf) and receive socket buffer
-     sizes to be 128KB or 131072 bytes.
-
-     While the historic expectation is that setting the socket buffer
-     size has a direct effect on say the TCP window, today that may not
-     hold true for all stacks.  When running under Windows a value of 0
-     may be used which will be an indication to the stack the user
-     wants to enable a form of copy avoidance. [Default: -1 - use the
-     system's default socket buffer sizes]
-
-`-S <sizespec>'
-     This option sets the remote (netserver) send and/or receive socket
-     buffer sizes for the data connection to the value(s) specified.
-     Often, this will affect the advertised and/or effective TCP or
-     other window, but on some platforms it may not. By default the
-     units are bytes, but a suffix of "G," "M," or "K" will specify the
-     units to be 2^30 (GB), 2^20 (MB) or 2^10 (KB) respectively.  A
-     suffix of "g," "m" or "k" will specify units of 10^9, 10^6 or 10^3
-     bytes respectively.  For example:
-          `-S 128K'
-     Will request the remote (netserver) send and receive socket buffer
-     sizes to be 128KB or 131072 bytes.
-
-     While the historic expectation is that setting the socket buffer
-     size has a direct effect on say the TCP window, today that may not
-     hold true for all stacks.  When running under Windows a value of 0
-     may be used which will be an indication to the stack the user
-     wants to enable a form of copy avoidance.  [Default: -1 - use the
-     system's default socket buffer sizes]
-
-`-4'
-     Set the local and remote address family for the data connection to
-     AF_INET - ie use IPv4 addressing only.  Just as with their global
-     command-line counterparts the last of the `-4', `-6', `-H' or `-L'
-     option wins for their respective address families.
-
-`-6'
-     This option is identical to its `-4' cousin, but requests IPv6
-     addresses for the local and remote ends of the data connection.
-
-
-6.2.1 TCP_RR
-------------
-
-A TCP_RR (TCP Request/Response) test is requested by passing a value of
-"TCP_RR" to the global `-t' command-line option.  A TCP_RR test can be
-thought-of as a user-space to user-space `ping' with no think time - it
-is by default a synchronous, one transaction at a time,
-request/response test.
-
-   The transaction rate is the number of complete transactions exchanged
-divided by the length of time it took to perform those transactions.
-
-   If the two Systems Under Test are otherwise identical, a TCP_RR test
-with the same request and response size should be symmetric - it should
-not matter which way the test is run, and the CPU utilization measured
-should be virtually the same on each system.  If not, it suggests that
-the CPU utilization mechanism being used may have some, well, issues
-measuring CPU utilization completely and accurately.
-
-   Time to establish the TCP connection is not counted in the result.
-If you want connection setup overheads included, you should consider the
-*note TPC_CC: TCP_CC. or *note TCP_CRR: TCP_CRR. tests.
-
-   If specifying the `-D' option to set TCP_NODELAY and disable the
-Nagle Algorithm increases the transaction rate reported by a TCP_RR
-test, it implies the stack(s) over which the TCP_RR test is running
-have a broken implementation of the Nagle Algorithm.  Likely as not
-they are interpreting Nagle on a segment by segment basis rather than a
-user send by user send basis.  You should contact your stack vendor(s)
-to report the problem to them.
-
-   Here is an example of two systems running a basic TCP_RR test over a
-10 Gigabit Ethernet link:
-
-     netperf -t TCP_RR -H 192.168.2.125
-     TCP REQUEST/RESPONSE TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 192.168.2.125 (192.168.2.125) port 0 AF_INET
-     Local /Remote
-     Socket Size   Request  Resp.   Elapsed  Trans.
-     Send   Recv   Size     Size    Time     Rate
-     bytes  Bytes  bytes    bytes   secs.    per sec
-
-     16384  87380  1        1       10.00    29150.15
-     16384  87380
-
-   In this example the request and response sizes were one byte, the
-socket buffers were left at their defaults, and the test ran for all of
-10 seconds.  The transaction per second rate was rather good for the
-time :)
-
-6.2.2 TCP_CC
-------------
-
-A TCP_CC (TCP Connect/Close) test is requested by passing a value of
-"TCP_CC" to the global `-t' option.  A TCP_CC test simply measures how
-fast the pair of systems can open and close connections between one
-another in a synchronous (one at a time) manner.  While this is
-considered an _RR test, no request or response is exchanged over the
-connection.
-
-   The issue of TIME_WAIT reuse is an important one for a TCP_CC test.
-Basically, TIME_WAIT reuse is when a pair of systems churn through
-connections fast enough that they wrap the 16-bit port number space in
-less time than the length of the TIME_WAIT state.  While it is indeed
-theoretically possible to "reuse" a connection in TIME_WAIT, the
-conditions under which such reuse is possible are rather rare.  An
-attempt to reuse a connection in TIME_WAIT can result in a non-trivial
-delay in connection establishment.
-
-   Basically, any time the connection churn rate approaches:
-
-   Sizeof(clientportspace) / Lengthof(TIME_WAIT)
-
-   there is the risk of TIME_WAIT reuse.  To minimize the chances of
-this happening, netperf will by default select its own client port
-numbers from the range of 5000 to 65535.  On systems with a 60 second
-TIME_WAIT state, this should allow roughly 1000 transactions per
-second.  The size of the client port space used by netperf can be
-controlled via the test-specific `-p' option, which takes a "sizespec"
-as a value setting the minimum (first value) and maximum (second value)
-port numbers used by netperf at the client end.
-
-   Since no requests or responses are exchanged during a TCP_CC test,
-only the `-H', `-L', `-4' and `-6' of the "common" test-specific
-options are likely to have an effect, if any, on the results.  The `-s'
-and `-S' options _may_ have some effect if they alter the number and/or
-type of options carried in the TCP SYNchronize segments, such as Window
-Scaling or Timestamps.  The `-P' and `-r' options are utterly ignored.
-
-   Since connection establishment and tear-down for TCP is not
-symmetric, a TCP_CC test is not symmetric in its loading of the two
-systems under test.
-
-6.2.3 TCP_CRR
--------------
-
-The TCP Connect/Request/Response (TCP_CRR) test is requested by passing
-a value of "TCP_CRR" to the global `-t' command-line option.  A TCP_CRR
-test is like a merger of a *note TCP_RR:: and *note TCP_CC:: test which
-measures the performance of establishing a connection, exchanging a
-single request/response transaction, and tearing-down that connection.
-This is very much like what happens in an HTTP 1.0 or HTTP 1.1
-connection when HTTP Keepalives are not used.  In fact, the TCP_CRR
-test was added to netperf to simulate just that.
-
-   Since a request and response are exchanged the `-r', `-s' and `-S'
-options can have an effect on the performance.
-
-   The issue of TIME_WAIT reuse exists for the TCP_CRR test just as it
-does for the TCP_CC test.  Similarly, since connection establishment
-and tear-down is not symmetric, a TCP_CRR test is not symmetric even
-when the request and response sizes are the same.
-
-6.2.4 UDP_RR
-------------
-
-A UDP Request/Response (UDP_RR) test is requested by passing a value of
-"UDP_RR" to a global `-t' option.  It is very much the same as a TCP_RR
-test except UDP is used rather than TCP.
-
-   UDP does not provide for retransmission of lost UDP datagrams, and
-netperf does not add anything for that either.  This means that if
-_any_ request or response is lost, the exchange of requests and
-responses will stop from that point until the test timer expires.
-Netperf will not really "know" this has happened - the only symptom
-will be a low transaction per second rate.  If `--enable-burst' was
-included in the `configure' command and a test-specific `-b' option
-used, the UDP_RR test will "survive" the loss of requests and responses
-until the sum is one more than the value passed via the `-b' option. It
-will though almost certainly run more slowly.
-
-   The netperf side of a UDP_RR test will call `connect()' on its data
-socket and thenceforth use the `send()' and `recv()' socket calls.  The
-netserver side of a UDP_RR test will not call `connect()' and will use
-`recvfrom()' and `sendto()' calls.  This means that even if the request
-and response sizes are the same, a UDP_RR test is _not_ symmetric in
-its loading of the two systems under test.
-
-   Here is an example of a UDP_RR test between two otherwise identical
-two-CPU systems joined via a 1 Gigabit Ethernet network:
-
-     $ netperf -T 1 -H 192.168.1.213 -t UDP_RR -c -C
-     UDP REQUEST/RESPONSE TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 192.168.1.213 (192.168.1.213) port 0 AF_INET
-     Local /Remote
-     Socket Size   Request Resp.  Elapsed Trans.   CPU    CPU    S.dem   S.dem
-     Send   Recv   Size    Size   Time    Rate     local  remote local   remote
-     bytes  bytes  bytes   bytes  secs.   per sec  % I    % I    us/Tr   us/Tr
-
-     65535  65535  1       1      10.01   15262.48   13.90  16.11  18.221  21.116
-     65535  65535
-
-   This example includes the `-c' and `-C' options to enable CPU
-utilization reporting and shows the asymmetry in CPU loading.  The `-T'
-option was used to make sure netperf and netserver ran on a given CPU
-and did not move around during the test.
-
-6.2.5 XTI_TCP_RR
-----------------
-
-An XTI_TCP_RR test is essentially the same as a *note TCP_RR:: test only
-using the XTI rather than BSD Sockets interface. It is requested by
-passing a value of "XTI_TCP_RR" to the `-t' global command-line option.
-
-   The test-specific options for an XTI_TCP_RR test are the same as
-those for a TCP_RR test with the addition of the `-X <devspec>' option
-to specify the names of the local and/or remote XTI device file(s).
-
-6.2.6 XTI_TCP_CC
-----------------
-
-An XTI_TCP_CC test is essentially the same as a *note TCP_CC: TCP_CC.
-test, only using the XTI rather than BSD Sockets interface.
-
-   The test-specific options for an XTI_TCP_CC test are the same as
-those for a TCP_CC test with the addition of the `-X <devspec>' option
-to specify the names of the local and/or remote XTI device file(s).
-
-6.2.7 XTI_TCP_CRR
------------------
-
-The XTI_TCP_CRR test is essentially the same as a *note TCP_CRR:
-TCP_CRR. test, only using the XTI rather than BSD Sockets interface.
-
-   The test-specific options for an XTI_TCP_CRR test are the same as
-those for a TCP_RR test with the addition of the `-X <devspec>' option
-to specify the names of the local and/or remote XTI device file(s).
-
-6.2.8 XTI_UDP_RR
-----------------
-
-An XTI_UDP_RR test is essentially the same as a UDP_RR test only using
-the XTI rather than BSD Sockets interface.  It is requested by passing
-a value of "XTI_UDP_RR" to the `-t' global command-line option.
-
-   The test-specific options for an XTI_UDP_RR test are the same as
-those for a UDP_RR test with the addition of the `-X <devspec>' option
-to specify the name of the local and/or remote XTI device file(s).
-
-6.2.9 DLCL_RR
--------------
-
-6.2.10 DLCO_RR
---------------
-
-6.2.11 SCTP_RR
---------------
-
-7 Using Netperf to Measure Aggregate Performance
-************************************************
-
-Ultimately, *note Netperf4: Netperf4. will be the preferred benchmark to
-use when one wants to measure aggregate performance because netperf has
-no support for explicit synchronization of concurrent tests. Until
-netperf4 is ready for prime time, one can make use of the heuristics
-and procedures mentioned here for the 85% solution.
-
-   There are a few ways to measure aggregate performance with netperf.
-The first is to run multiple, concurrent netperf tests and can be
-applied to any of the netperf tests.  The second is to configure
-netperf with `--enable-burst' and is applicable to the TCP_RR test. The
-third is a variation on the first.
-
-7.1 Running Concurrent Netperf Tests
-====================================
-
-*note Netperf4: Netperf4. is the preferred benchmark to use when one
-wants to measure aggregate performance because netperf has no support
-for explicit synchronization of concurrent tests.  This leaves netperf2
-results vulnerable to "skew" errors.
-
-   However, since there are times when netperf4 is unavailable it may be
-necessary to run netperf. The skew error can be minimized by making use
-of the confidence interval functionality.  Then one simply launches
-multiple tests from the shell using a `for' loop or the like:
-
-     for i in 1 2 3 4
-     do
-     netperf -t TCP_STREAM -H tardy.cup.hp.com -i 10 -P 0 &
-     done
-
-   which will run four, concurrent *note TCP_STREAM: TCP_STREAM. tests
-from the system on which it is executed to tardy.cup.hp.com.  Each
-concurrent netperf will iterate 10 times thanks to the `-i' option and
-will omit the test banners (option `-P') for brevity.  The output looks
-something like this:
-
-      87380  16384  16384    10.03     235.15
-      87380  16384  16384    10.03     235.09
-      87380  16384  16384    10.03     235.38
-      87380  16384  16384    10.03     233.96
-
-   We can take the sum of the results and be reasonably confident that
-the aggregate performance was 940 Mbits/s.  This method does not need
-to be limited to one system speaking to one other system.  It can be
-extended to one system talking to N other systems.  It could be as
-simple as:
-     for host in 'foo bar baz bing'
-     do
-     netperf -t TCP_STREAM -H $hosts -i 10 -P 0 &
-     done
-   A more complicated/sophisticated example can be found in
-`doc/examples/runemomniagg2.sh' where.
-
-   If you see warnings about netperf not achieving the confidence
-intervals, the best thing to do is to increase the number of iterations
-with `-i' and/or increase the run length of each iteration with `-l'.
-
-   You can also enable local (`-c') and/or remote (`-C') CPU
-utilization:
-
-     for i in 1 2 3 4
-     do
-     netperf -t TCP_STREAM -H tardy.cup.hp.com -i 10 -P 0 -c -C &
-     done
-
-     87380  16384  16384    10.03       235.47   3.67     5.09     10.226  14.180
-     87380  16384  16384    10.03       234.73   3.67     5.09     10.260  14.225
-     87380  16384  16384    10.03       234.64   3.67     5.10     10.263  14.231
-     87380  16384  16384    10.03       234.87   3.67     5.09     10.253  14.215
-
-   If the CPU utilizations reported for the same system are the same or
-very very close you can be reasonably confident that skew error is
-minimized.  Presumably one could then omit `-i' but that is not
-advised, particularly when/if the CPU utilization approaches 100
-percent.  In the example above we see that the CPU utilization on the
-local system remains the same for all four tests, and is only off by
-0.01 out of 5.09 on the remote system.  As the number of CPUs in the
-system increases, and so too the odds of saturating a single CPU, the
-accuracy of similar CPU utilization implying little skew error is
-diminished.  This is also the case for those increasingly rare single
-CPU systems if the utilization is reported as 100% or very close to it.
-
-     NOTE: It is very important to remember that netperf is calculating
-     system-wide CPU utilization.  When calculating the service demand
-     (those last two columns in the output above) each netperf assumes
-     it is the only thing running on the system.  This means that for
-     concurrent tests the service demands reported by netperf will be
-     wrong.  One has to compute service demands for concurrent tests by
-     hand.
-
-   If you wish you can add a unique, global `-B' option to each command
-line to append the given string to the output:
-
-     for i in 1 2 3 4
-     do
-     netperf -t TCP_STREAM -H tardy.cup.hp.com -B "this is test $i" -i 10 -P 0 &
-     done
-
-     87380  16384  16384    10.03     234.90   this is test 4
-     87380  16384  16384    10.03     234.41   this is test 2
-     87380  16384  16384    10.03     235.26   this is test 1
-     87380  16384  16384    10.03     235.09   this is test 3
-
-   You will notice that the tests completed in an order other than they
-were started from the shell.  This underscores why there is a threat of
-skew error and why netperf4 will eventually be the preferred tool for
-aggregate tests.  Even if you see the Netperf Contributing Editor
-acting to the contrary!-)
-
-7.1.1 Issues in Running Concurrent Tests
-----------------------------------------
-
-In addition to the aforementioned issue of skew error, there can be
-other issues to consider when running concurrent netperf tests.
-
-   For example, when running concurrent tests over multiple interfaces,
-one is not always assured that the traffic one thinks went over a given
-interface actually did so.  In particular, the Linux networking stack
-takes a particularly strong stance on its following the so called `weak
-end system model'.  As such, it is willing to answer ARP requests for
-any of its local IP addresses on any of its interfaces.  If multiple
-interfaces are connected to the same broadcast domain, then even if
-they are configured into separate IP subnets there is no a priori way
-of knowing which interface was actually used for which connection(s).
-This can be addressed by setting the `arp_ignore' sysctl before
-configuring interfaces.
-
-   As it is quite important, we will repeat that it is very important to
-remember that each concurrent netperf instance is calculating
-system-wide CPU utilization.  When calculating the service demand each
-netperf assumes it is the only thing running on the system.  This means
-that for concurrent tests the service demands reported by netperf will
-be wrong.  One has to compute service demands for concurrent tests by
-hand
-
-   Running concurrent tests can also become difficult when there is no
-one "central" node.  Running tests between pairs of systems may be more
-difficult, calling for remote shell commands in the for loop rather
-than netperf commands.  This introduces more skew error, which the
-confidence intervals may not be able to sufficiently mitigate.  One
-possibility is to actually run three consecutive netperf tests on each
-node - the first being a warm-up, the last being a cool-down.  The idea
-then is to ensure that the time it takes to get all the netperfs
-started is less than the length of the first netperf command in the
-sequence of three.  Similarly, it assumes that all "middle" netperfs
-will complete before the first of the "last" netperfs complete.
-
-7.2 Using - -enable-burst
-=========================
-
-Starting in version 2.5.0 `--enable-burst=yes' is the default, which
-means one no longer must:
-
-     configure --enable-burst
-
-   To have burst-mode functionality present in netperf.  This enables a
-test-specific `-b num' option in *note TCP_RR: TCP_RR, *note UDP_RR:
-UDP_RR. and *note omni: The Omni Tests. tests.
-
-   Normally, netperf will attempt to ramp-up the number of outstanding
-requests to `num' plus one transactions in flight at one time.  The
-ramp-up is to avoid transactions being smashed together into a smaller
-number of segments when the transport's congestion window (if any) is
-smaller at the time than what netperf wants to have outstanding at one
-time. If, however, the user specifies a negative value for `num' this
-ramp-up is bypassed and the burst of sends is made without
-consideration of transport congestion window.
-
-   This burst-mode is used as an alternative to or even in conjunction
-with multiple-concurrent _RR tests and as a way to implement a
-single-connection, bidirectional bulk-transfer test.  When run with
-just a single instance of netperf, increasing the burst size can
-determine the maximum number of transactions per second which can be
-serviced by a single process:
-
-     for b in 0 1 2 4 8 16 32
-     do
-      netperf -v 0 -t TCP_RR -B "-b $b" -H hpcpc108 -P 0 -- -b $b
-     done
-
-     9457.59 -b 0
-     9975.37 -b 1
-     10000.61 -b 2
-     20084.47 -b 4
-     29965.31 -b 8
-     71929.27 -b 16
-     109718.17 -b 32
-
-   The global `-v' and `-P' options were used to minimize the output to
-the single figure of merit which in this case the transaction rate.
-The global `-B' option was used to more clearly label the output, and
-the test-specific `-b' option enabled by `--enable-burst' increase the
-number of transactions in flight at one time.
-
-   Now, since the test-specific `-D' option was not specified to set
-TCP_NODELAY, the stack was free to "bundle" requests and/or responses
-into TCP segments as it saw fit, and since the default request and
-response size is one byte, there could have been some considerable
-bundling even in the absence of transport congestion window issues.  If
-one wants to try to achieve a closer to one-to-one correspondence
-between a request and response and a TCP segment, add the test-specific
-`-D' option:
-
-     for b in 0 1 2 4 8 16 32
-     do
-      netperf -v 0 -t TCP_RR -B "-b $b -D" -H hpcpc108 -P 0 -- -b $b -D
-     done
-
-      8695.12 -b 0 -D
-      19966.48 -b 1 -D
-      20691.07 -b 2 -D
-      49893.58 -b 4 -D
-      62057.31 -b 8 -D
-      108416.88 -b 16 -D
-      114411.66 -b 32 -D
-
-   You can see that this has a rather large effect on the reported
-transaction rate.  In this particular instance, the author believes it
-relates to interactions between the test and interrupt coalescing
-settings in the driver for the NICs used.
-
-     NOTE: Even if you set the `-D' option that is still not a
-     guarantee that each transaction is in its own TCP segments.  You
-     should get into the habit of verifying the relationship between the
-     transaction rate and the packet rate via other means.
-
-   You can also combine `--enable-burst' functionality with concurrent
-netperf tests.  This would then be an "aggregate of aggregates" if you
-like:
-
-
-     for i in 1 2 3 4
-     do
-      netperf -H hpcpc108 -v 0 -P 0 -i 10 -B "aggregate $i -b 8 -D" -t TCP_RR -- -b 8 -D &
-     done
-
-      46668.38 aggregate 4 -b 8 -D
-      44890.64 aggregate 2 -b 8 -D
-      45702.04 aggregate 1 -b 8 -D
-      46352.48 aggregate 3 -b 8 -D
-
-   Since each netperf did hit the confidence intervals, we can be
-reasonably certain that the aggregate transaction per second rate was
-the sum of all four concurrent tests, or something just shy of 184,000
-transactions per second.  To get some idea if that was also the packet
-per second rate, we could bracket that `for' loop with something to
-gather statistics and run the results through beforeafter
-(ftp://ftp.cup.hp.com/dist/networking/tools):
-
-     /usr/sbin/ethtool -S eth2 > before
-     for i in 1 2 3 4
-     do
-      netperf -H 192.168.2.108 -l 60 -v 0 -P 0 -B "aggregate $i -b 8 -D" -t TCP_RR -- -b 8 -D &
-     done
-     wait
-     /usr/sbin/ethtool -S eth2 > after
-
-      52312.62 aggregate 2 -b 8 -D
-      50105.65 aggregate 4 -b 8 -D
-      50890.82 aggregate 1 -b 8 -D
-      50869.20 aggregate 3 -b 8 -D
-
-     beforeafter before after > delta
-
-     grep packets delta
-          rx_packets: 12251544
-          tx_packets: 12251550
-
-   This example uses `ethtool' because the system being used is running
-Linux.  Other platforms have other tools - for example HP-UX has
-lanadmin:
-
-     lanadmin -g mibstats <ppa>
-
-   and of course one could instead use `netstat'.
-
-   The `wait' is important because we are launching concurrent netperfs
-in the background.  Without it, the second ethtool command would be run
-before the tests finished and perhaps even before the last of them got
-started!
-
-   The sum of the reported transaction rates is 204178 over 60 seconds,
-which is a total of 12250680 transactions.  Each transaction is the
-exchange of a request and a response, so we multiply that by 2 to
-arrive at 24501360.
-
-   The sum of the ethtool stats is 24503094 packets which matches what
-netperf was reporting very well.
-
-   Had the request or response size differed, we would need to know how
-it compared with the "MSS" for the connection.
-
-   Just for grins, here is the exercise repeated, using `netstat'
-instead of `ethtool'
-
-     netstat -s -t > before
-     for i in 1 2 3 4
-     do
-      netperf -l 60 -H 192.168.2.108 -v 0 -P 0 -B "aggregate $i -b 8 -D" -t TCP_RR -- -b 8 -D & done
-     wait
-     netstat -s -t > after
-
-      51305.88 aggregate 4 -b 8 -D
-      51847.73 aggregate 2 -b 8 -D
-      50648.19 aggregate 3 -b 8 -D
-      53605.86 aggregate 1 -b 8 -D
-
-     beforeafter before after > delta
-
-     grep segments delta
-         12445708 segments received
-         12445730 segments send out
-         1 segments retransmited
-         0 bad segments received.
-
-   The sums are left as an exercise to the reader :)
-
-   Things become considerably more complicated if there are non-trvial
-packet losses and/or retransmissions.
-
-   Of course all this checking is unnecessary if the test is a UDP_RR
-test because UDP "never" aggregates multiple sends into the same UDP
-datagram, and there are no ACKnowledgements in UDP.  The loss of a
-single request or response will not bring a "burst" UDP_RR test to a
-screeching halt, but it will reduce the number of transactions
-outstanding at any one time.  A "burst" UDP_RR test will come to a halt
-if the sum of the lost requests and responses reaches the value
-specified in the test-specific `-b' option.
-
-7.3 Using - -enable-demo
-========================
-
-One can
-     configure --enable-demo
-   and compile netperf to enable netperf to emit "interim results" at
-semi-regular intervals.  This enables a global `-D' option which takes
-a reporting interval as an argument.  With that specified, the output
-of netperf will then look something like
-
-     $ src/netperf -D 1.25
-     MIGRATED TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to localhost.localdomain () port 0 AF_INET : demo
-     Interim result: 25425.52 10^6bits/s over 1.25 seconds ending at 1327962078.405
-     Interim result: 25486.82 10^6bits/s over 1.25 seconds ending at 1327962079.655
-     Interim result: 25474.96 10^6bits/s over 1.25 seconds ending at 1327962080.905
-     Interim result: 25523.49 10^6bits/s over 1.25 seconds ending at 1327962082.155
-     Interim result: 25053.57 10^6bits/s over 1.27 seconds ending at 1327962083.429
-     Interim result: 25349.64 10^6bits/s over 1.25 seconds ending at 1327962084.679
-     Interim result: 25292.84 10^6bits/s over 1.25 seconds ending at 1327962085.932
-     Recv   Send    Send
-     Socket Socket  Message  Elapsed
-     Size   Size    Size     Time     Throughput
-     bytes  bytes   bytes    secs.    10^6bits/sec
-
-      87380  16384  16384    10.00    25375.66
-   The units of the "Interim result" lines will follow the units
-selected via the global `-f' option.  If the test-specific `-o' option
-is specified on the command line, the format will be CSV:
-     ...
-     2978.81,MBytes/s,1.25,1327962298.035
-     ...
-   If the test-specific `-k' option is used the format will be keyval
-with each keyval being given an index:
-     ...
-     NETPERF_INTERIM_RESULT[2]=25.00
-     NETPERF_UNITS[2]=10^9bits/s
-     NETPERF_INTERVAL[2]=1.25
-     NETPERF_ENDING[2]=1327962357.249
-     ...
-   The expectation is it may be easier to utilize the keyvals if they
-have indices.
-
-   But how does this help with aggregate tests?  Well, what one can do
-is start the netperfs via a script, giving each a Very Long (tm) run
-time.  Direct the output to a file per instance.  Then, once all the
-netperfs have been started, take a timestamp and wait for some desired
-test interval.  Once that interval expires take another timestamp and
-then start terminating the netperfs by sending them a SIGALRM signal
-via the likes of the `kill' or `pkill' command.  The netperfs will
-terminate and emit the rest of the "usual" output, and you can then
-bring the files to a central location for post processing to find the
-aggregate performance over the "test interval."
-
-   This method has the advantage that it does not require advance
-knowledge of how long it takes to get netperf tests started and/or
-stopped.  It does though require sufficiently synchronized clocks on
-all the test systems.
-
-   While calls to get the current time can be inexpensive, that neither
-has been nor is universally true.  For that reason netperf tries to
-minimize the number of such "timestamping" calls (eg `gettimeofday')
-calls it makes when in demo mode.  Rather than take a timestamp after
-each `send' or `recv' call completes netperf tries to guess how many
-units of work will be performed over the desired interval.  Only once
-that many units of work have been completed will netperf check the
-time.  If the reporting interval has passed, netperf will emit an
-"interim result."  If the interval has not passed, netperf will update
-its estimate for units and continue.
-
-   After a bit of thought one can see that if things "speed-up" netperf
-will still honor the interval.  However, if things "slow-down" netperf
-may be late with an "interim result."  Here is an example of both of
-those happening during a test - with the interval being honored while
-throughput increases, and then about half-way through when another
-netperf (not shown) is started we see things slowing down and netperf
-not hitting the interval as desired.
-     $ src/netperf -D 2 -H tardy.hpl.hp.com -l 20
-     MIGRATED TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to tardy.hpl.hp.com () port 0 AF_INET : demo
-     Interim result:   36.46 10^6bits/s over 2.01 seconds ending at 1327963880.565
-     Interim result:   59.19 10^6bits/s over 2.00 seconds ending at 1327963882.569
-     Interim result:   73.39 10^6bits/s over 2.01 seconds ending at 1327963884.576
-     Interim result:   84.01 10^6bits/s over 2.03 seconds ending at 1327963886.603
-     Interim result:   75.63 10^6bits/s over 2.21 seconds ending at 1327963888.814
-     Interim result:   55.52 10^6bits/s over 2.72 seconds ending at 1327963891.538
-     Interim result:   70.94 10^6bits/s over 2.11 seconds ending at 1327963893.650
-     Interim result:   80.66 10^6bits/s over 2.13 seconds ending at 1327963895.777
-     Interim result:   86.42 10^6bits/s over 2.12 seconds ending at 1327963897.901
-     Recv   Send    Send
-     Socket Socket  Message  Elapsed
-     Size   Size    Size     Time     Throughput
-     bytes  bytes   bytes    secs.    10^6bits/sec
-
-      87380  16384  16384    20.34      68.87
-   So long as your post-processing mechanism can account for that, there
-should be no problem.  As time passes there may be changes to try to
-improve the netperf's honoring the interval but one should not ass-u-me
-it will always do so.  One should not assume the precision will remain
-fixed - future versions may change it - perhaps going beyond tenths of
-seconds in reporting the interval length etc.
-
-8 Using Netperf to Measure Bidirectional Transfer
-*************************************************
-
-There are two ways to use netperf to measure the performance of
-bidirectional transfer.  The first is to run concurrent netperf tests
-from the command line.  The second is to configure netperf with
-`--enable-burst' and use a single instance of the *note TCP_RR: TCP_RR.
-test.
-
-   While neither method is more "correct" than the other, each is doing
-so in different ways, and that has possible implications.  For
-instance, using the concurrent netperf test mechanism means that
-multiple TCP connections and multiple processes are involved, whereas
-using the single instance of TCP_RR there is only one TCP connection
-and one process on each end.  They may behave differently, especially
-on an MP system.
-
-8.1 Bidirectional Transfer with Concurrent Tests
-================================================
-
-If we had two hosts Fred and Ethel, we could simply run a netperf *note
-TCP_STREAM: TCP_STREAM. test on Fred pointing at Ethel, and a
-concurrent netperf TCP_STREAM test on Ethel pointing at Fred, but since
-there are no mechanisms to synchronize netperf tests and we would be
-starting tests from two different systems, there is a considerable risk
-of skew error.
-
-   Far better would be to run simultaneous TCP_STREAM and *note
-TCP_MAERTS: TCP_MAERTS. tests from just one system, using the concepts
-and procedures outlined in *note Running Concurrent Netperf Tests:
-Running Concurrent Netperf Tests. Here then is an example:
-
-     for i in 1
-     do
-      netperf -H 192.168.2.108 -t TCP_STREAM -B "outbound" -i 10 -P 0 -v 0 \
-        -- -s 256K -S 256K &
-      netperf -H 192.168.2.108 -t TCP_MAERTS -B "inbound"  -i 10 -P 0 -v 0 \
-        -- -s 256K -S 256K &
-     done
-
-      892.66 outbound
-      891.34 inbound
-
-   We have used a `for' loop in the shell with just one iteration
-because that will be much easier to get both tests started at more or
-less the same time than doing it by hand.  The global `-P' and `-v'
-options are used because we aren't interested in anything other than
-the throughput, and the global `-B' option is used to tag each output
-so we know which was inbound and which outbound relative to the system
-on which we were running netperf.  Of course that sense is switched on
-the system running netserver :)  The use of the global `-i' option is
-explained in *note Running Concurrent Netperf Tests: Running Concurrent
-Netperf Tests.
-
-   Beginning with version 2.5.0 we can accomplish a similar result with
-the *note the omni tests: The Omni Tests. and *note output selectors:
-Omni Output Selectors.:
-
-     for i in 1
-     do
-       netperf -H 192.168.1.3 -t omni -l 10 -P 0 -- \
-         -d stream -s 256K -S 256K -o throughput,direction &
-       netperf -H 192.168.1.3 -t omni -l 10 -P 0 -- \
-         -d maerts -s 256K -S 256K -o throughput,direction &
-     done
-
-     805.26,Receive
-     828.54,Send
-
-8.2 Bidirectional Transfer with TCP_RR
-======================================
-
-Starting with version 2.5.0 the `--enable-burst' configure option
-defaults to `yes', and starting some time before version 2.5.0 but
-after 2.4.0 the global `-f' option would affect the "throughput"
-reported by request/response tests.  If one uses the test-specific `-b'
-option to have several "transactions" in flight at one time and the
-test-specific `-r' option to increase their size, the test looks more
-and more like a single-connection bidirectional transfer than a simple
-request/response test.
-
-   So, putting it all together one can do something like:
-
-     netperf -f m -t TCP_RR -H 192.168.1.3 -v 2 -- -b 6 -r 32K -S 256K -S 256K
-     MIGRATED TCP REQUEST/RESPONSE TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 192.168.1.3 (192.168.1.3) port 0 AF_INET : interval : first burst 6
-     Local /Remote
-     Socket Size   Request  Resp.   Elapsed
-     Send   Recv   Size     Size    Time     Throughput
-     bytes  Bytes  bytes    bytes   secs.    10^6bits/sec
-
-     16384  87380  32768    32768   10.00    1821.30
-     524288 524288
-     Alignment      Offset         RoundTrip  Trans    Throughput
-     Local  Remote  Local  Remote  Latency    Rate     10^6bits/s
-     Send   Recv    Send   Recv    usec/Tran  per sec  Outbound   Inbound
-         8      0       0      0   2015.402   3473.252 910.492    910.492
-
-   to get a bidirectional bulk-throughput result. As one can see, the -v
-2 output will include a number of interesting, related values.
-
-     NOTE: The logic behind `--enable-burst' is very simple, and there
-     are no calls to `poll()' or `select()' which means we want to make
-     sure that the `send()' calls will never block, or we run the risk
-     of deadlock with each side stuck trying to call `send()' and
-     neither calling `recv()'.
-
-   Fortunately, this is easily accomplished by setting a "large enough"
-socket buffer size with the test-specific `-s' and `-S' options.
-Presently this must be performed by the user.  Future versions of
-netperf might attempt to do this automagically, but there are some
-issues to be worked-out.
-
-8.3 Implications of Concurrent Tests vs Burst Request/Response
-==============================================================
-
-There are perhaps subtle but important differences between using
-concurrent unidirectional tests vs a burst-mode request to measure
-bidirectional performance.
-
-   Broadly speaking, a single "connection" or "flow" of traffic cannot
-make use of the services of more than one or two CPUs at either end.
-Whether one or two CPUs will be used processing a flow will depend on
-the specifics of the stack(s) involved and whether or not the global
-`-T' option has been used to bind netperf/netserver to specific CPUs.
-
-   When using concurrent tests there will be two concurrent connections
-or flows, which means that upwards of four CPUs will be employed
-processing the packets (global `-T' used, no more than two if not),
-however, with just a single, bidirectional request/response test no
-more than two CPUs will be employed (only one if the global `-T' is not
-used).
-
-   If there is a CPU bottleneck on either system this may result in
-rather different results between the two methods.
-
-   Also, with a bidirectional request/response test there is something
-of a natural balance or synchronization between inbound and outbound - a
-response will not be sent until a request is received, and (once the
-burst level is reached) a subsequent request will not be sent until a
-response is received.  This may mask favoritism in the NIC between
-inbound and outbound processing.
-
-   With two concurrent unidirectional tests there is no such
-synchronization or balance and any favoritism in the NIC may be exposed.
-
-9 The Omni Tests
-****************
-
-Beginning with version 2.5.0, netperf begins a migration to the `omni'
-tests or "Two routines to measure them all."  The code for the omni
-tests can be found in `src/nettest_omni.c' and the goal is to make it
-easier for netperf to support multiple protocols and report a great
-many additional things about the systems under test.  Additionally, a
-flexible output selection mechanism is present which allows the user to
-chose specifically what values she wishes to have reported and in what
-format.
-
-   The omni tests are included by default in version 2.5.0.  To disable
-them, one must:
-     ./configure --enable-omni=no ...
-
-   and remake netperf.  Remaking netserver is optional because even in
-2.5.0 it has "unmigrated" netserver side routines for the classic (eg
-`src/nettest_bsd.c') tests.
-
-9.1 Native Omni Tests
-=====================
-
-One access the omni tests "natively" by using a value of "OMNI" with
-the global `-t' test-selection option.  This will then cause netperf to
-use the code in `src/nettest_omni.c' and in particular the
-test-specific options parser for the omni tests.  The test-specific
-options for the omni tests are a superset of those for "classic" tests.
-The options added by the omni tests are:
-
-`-c'
-     This explicitly declares that the test is to include connection
-     establishment and tear-down as in either a TCP_CRR or TCP_CC test.
-
-`-d <direction>'
-     This option sets the direction of the test relative to the netperf
-     process.  As of version 2.5.0 one can use the following in a
-     case-insensitive manner:
-
-    `send, stream, transmit, xmit or 2'
-          Any of which will cause netperf to send to the netserver.
-
-    `recv, receive, maerts or 4'
-          Any of which will cause netserver to send to netperf.
-
-    `rr or 6'
-          Either of which will cause a request/response test.
-
-     Additionally, one can specify two directions separated by a '|'
-     character and they will be OR'ed together.  In this way one can use
-     the "Send|Recv" that will be emitted by the *note DIRECTION: Omni
-     Output Selectors. *note output selector: Omni Output Selection.
-     when used with a request/response test.
-
-`-k [*note output selector: Omni Output Selection.]'
-     This option sets the style of output to "keyval" where each line of
-     output has the form:
-          key=value
-     For example:
-          $ netperf -t omni -- -d rr -k "THROUGHPUT,THROUGHPUT_UNITS"
-          OMNI TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to localhost.localdomain (127.0.0.1) port 0 AF_INET : demo
-          THROUGHPUT=59092.65
-          THROUGHPUT_UNITS=Trans/s
-
-     Using the `-k' option will override any previous, test-specific
-     `-o' or `-O' option.
-
-`-o [*note output selector: Omni Output Selection.]'
-     This option sets the style of output to "CSV" where there will be
-     one line of comma-separated values, preceded by one line of column
-     names unless the global `-P' option is used with a value of 0:
-          $ netperf -t omni -- -d rr -o "THROUGHPUT,THROUGHPUT_UNITS"
-          OMNI TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to localhost.localdomain (127.0.0.1) port 0 AF_INET : demo
-          Throughput,Throughput Units
-          60999.07,Trans/s
-
-     Using the `-o' option will override any previous, test-specific
-     `-k' or `-O' option.
-
-`-O [*note output selector: Omni Output Selection.]'
-     This option sets the style of output to "human readable" which will
-     look quite similar to classic netperf output:
-          $ netperf -t omni -- -d rr -O "THROUGHPUT,THROUGHPUT_UNITS"
-          OMNI TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to localhost.localdomain (127.0.0.1) port 0 AF_INET : demo
-          Throughput Throughput
-                     Units
-
-
-          60492.57   Trans/s
-
-     Using the `-O' option will override any previous, test-specific
-     `-k' or `-o' option.
-
-`-t'
-     This option explicitly sets the socket type for the test's data
-     connection. As of version 2.5.0 the known socket types include
-     "stream" and "dgram" for SOCK_STREAM and SOCK_DGRAM respectively.
-
-`-T <protocol>'
-     This option is used to explicitly set the protocol used for the
-     test. It is case-insensitive. As of version 2.5.0 the protocols
-     known to netperf include:
-    `TCP'
-          Select the Transmission Control Protocol
-
-    `UDP'
-          Select the User Datagram Protocol
-
-    `SDP'
-          Select the Sockets Direct Protocol
-
-    `DCCP'
-          Select the Datagram Congestion Control Protocol
-
-    `SCTP'
-          Select the Stream Control Transport Protocol
-
-    `udplite'
-          Select UDP Lite
-
-     The default is implicit based on other settings.
-
-   The omni tests also extend the interpretation of some of the classic,
-test-specific options for the BSD Sockets tests:
-
-`-m <optionspec>'
-     This can set the send size for either or both of the netperf and
-     netserver sides of the test:
-          -m 32K
-     sets only the netperf-side send size to 32768 bytes, and or's-in
-     transmit for the direction. This is effectively the same behaviour
-     as for the classic tests.
-          -m ,32K
-     sets only the netserver side send size to 32768 bytes and or's-in
-     receive for the direction.
-          -m 16K,32K
-          sets the netperf side send size to 16284 bytes, the netserver side
-          send size to 32768 bytes and the direction will be "Send|Recv."
-
-`-M <optionspec>'
-     This can set the receive size for either or both of the netperf and
-     netserver sides of the test:
-          -M 32K
-     sets only the netserver side receive size to 32768 bytes and
-     or's-in send for the test direction.
-          -M ,32K
-     sets only the netperf side receive size to 32768 bytes and or's-in
-     receive for the test direction.
-          -M 16K,32K
-     sets the netserver side receive size to 16384 bytes and the netperf
-     side receive size to 32768 bytes and the direction will be
-     "Send|Recv."
-
-9.2 Migrated Tests
-==================
-
-As of version 2.5.0 several tests have been migrated to use the omni
-code in `src/nettest_omni.c' for the core of their testing.  A migrated
-test retains all its previous output code and so should still "look and
-feel" just like a pre-2.5.0 test with one exception - the first line of
-the test banners will include the word "MIGRATED" at the beginning as
-in:
-
-     $ netperf
-     MIGRATED TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to localhost.localdomain (127.0.0.1) port 0 AF_INET : demo
-     Recv   Send    Send
-     Socket Socket  Message  Elapsed
-     Size   Size    Size     Time     Throughput
-     bytes  bytes   bytes    secs.    10^6bits/sec
-
-      87380  16384  16384    10.00    27175.27
-
-   The tests migrated in version 2.5.0 are:
-   * TCP_STREAM
-
-   * TCP_MAERTS
-
-   * TCP_RR
-
-   * TCP_CRR
-
-   * UDP_STREAM
-
-   * UDP_RR
-
-   It is expected that future releases will have additional tests
-migrated to use the "omni" functionality.
-
-   If one uses "omni-specific" test-specific options in conjunction
-with a migrated test, instead of using the classic output code, the new
-omni output code will be used. For example if one uses the `-k'
-test-specific option with a value of "MIN_LATENCY,MAX_LATENCY" with a
-migrated TCP_RR test one will see:
-
-     $ netperf -t tcp_rr -- -k THROUGHPUT,THROUGHPUT_UNITS
-     MIGRATED TCP REQUEST/RESPONSE TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to localhost.localdomain (127.0.0.1) port 0 AF_INET : demo
-     THROUGHPUT=60074.74
-     THROUGHPUT_UNITS=Trans/s
-   rather than:
-     $ netperf -t tcp_rr
-     MIGRATED TCP REQUEST/RESPONSE TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to localhost.localdomain (127.0.0.1) port 0 AF_INET : demo
-     Local /Remote
-     Socket Size   Request  Resp.   Elapsed  Trans.
-     Send   Recv   Size     Size    Time     Rate
-     bytes  Bytes  bytes    bytes   secs.    per sec
-
-     16384  87380  1        1       10.00    59421.52
-     16384  87380
-
-9.3 Omni Output Selection
-=========================
-
-The omni test-specific `-k', `-o' and `-O' options take an optional
-`output selector' by which the user can configure what values are
-reported.  The output selector can take several forms:
-
-``filename''
-     The output selections will be read from the named file. Within the
-     file there can be up to four lines of comma-separated output
-     selectors. This controls how many multi-line blocks of output are
-     emitted when the `-O' option is used.  This output, while not
-     identical to "classic" netperf output, is inspired by it.
-     Multiple lines have no effect for `-k' and `-o' options.  Putting
-     output selections in a file can be useful when the list of
-     selections is long.
-
-`comma and/or semi-colon-separated list'
-     The output selections will be parsed from a comma and/or
-     semi-colon-separated list of output selectors. When the list is
-     given to a `-O' option a semi-colon specifies a new output block
-     should be started.  Semi-colons have the same meaning as commas
-     when used with the `-k' or `-o' options.  Depending on the command
-     interpreter being used, the semi-colon may have to be escaped
-     somehow to keep it from being interpreted by the command
-     interpreter.  This can often be done by enclosing the entire list
-     in quotes.
-
-`all'
-     If the keyword all is specified it means that all known output
-     values should be displayed at the end of the test.  This can be a
-     great deal of output.  As of version 2.5.0 there are 157 different
-     output selectors.
-
-`?'
-     If a "?" is given as the output selection, the list of all known
-     output selectors will be displayed and no test actually run.  When
-     passed to the `-O' option they will be listed one per line.
-     Otherwise they will be listed as a comma-separated list.  It may
-     be necessary to protect the "?" from the command interpreter by
-     escaping it or enclosing it in quotes.
-
-`no selector'
-     If nothing is given to the `-k', `-o' or `-O' option then the code
-     selects a default set of output selectors inspired by classic
-     netperf output. The format will be the `human readable' format
-     emitted by the test-specific `-O' option.
-
-   The order of evaluation will first check for an output selection.  If
-none is specified with the `-k', `-o' or `-O' option netperf will
-select a default based on the characteristics of the test.  If there is
-an output selection, the code will first check for `?', then check to
-see if it is the magic `all' keyword.  After that it will check for
-either `,' or `;' in the selection and take that to mean it is a comma
-and/or semi-colon-separated list. If none of those checks match,
-netperf will then assume the output specification is a filename and
-attempt to open and parse the file.
-
-9.3.1 Omni Output Selectors
----------------------------
-
-As of version 2.5.0 the output selectors are:
-
-`OUTPUT_NONE'
-     This is essentially a null output.  For `-k' output it will simply
-     add a line that reads "OUTPUT_NONE=" to the output. For `-o' it
-     will cause an empty "column" to be included. For `-O' output it
-     will cause extra spaces to separate "real" output.
-
-`SOCKET_TYPE'
-     This will cause the socket type (eg SOCK_STREAM, SOCK_DGRAM) for
-     the data connection to be output.
-
-`PROTOCOL'
-     This will cause the protocol used for the data connection to be
-     displayed.
-
-`DIRECTION'
-     This will display the data flow direction relative to the netperf
-     process. Units: Send or Recv for a unidirectional bulk-transfer
-     test, or Send|Recv for a request/response test.
-
-`ELAPSED_TIME'
-     This will display the elapsed time in seconds for the test.
-
-`THROUGHPUT'
-     This will display the throughput for the test. Units: As requested
-     via the global `-f' option and displayed by the THROUGHPUT_UNITS
-     output selector.
-
-`THROUGHPUT_UNITS'
-     This will display the units for what is displayed by the
-     `THROUGHPUT' output selector.
-
-`LSS_SIZE_REQ'
-     This will display the local (netperf) send socket buffer size (aka
-     SO_SNDBUF) requested via the command line. Units: Bytes.
-
-`LSS_SIZE'
-     This will display the local (netperf) send socket buffer size
-     (SO_SNDBUF) immediately after the data connection socket was
-     created.  Peculiarities of different networking stacks may lead to
-     this differing from the size requested via the command line.
-     Units: Bytes.
-
-`LSS_SIZE_END'
-     This will display the local (netperf) send socket buffer size
-     (SO_SNDBUF) immediately before the data connection socket is
-     closed.  Peculiarities of different networking stacks may lead
-     this to differ from the size requested via the command line and/or
-     the size immediately after the data connection socket was created.
-     Units: Bytes.
-
-`LSR_SIZE_REQ'
-     This will display the local (netperf) receive socket buffer size
-     (aka SO_RCVBUF) requested via the command line. Units: Bytes.
-
-`LSR_SIZE'
-     This will display the local (netperf) receive socket buffer size
-     (SO_RCVBUF) immediately after the data connection socket was
-     created.  Peculiarities of different networking stacks may lead to
-     this differing from the size requested via the command line.
-     Units: Bytes.
-
-`LSR_SIZE_END'
-     This will display the local (netperf) receive socket buffer size
-     (SO_RCVBUF) immediately before the data connection socket is
-     closed.  Peculiarities of different networking stacks may lead
-     this to differ from the size requested via the command line and/or
-     the size immediately after the data connection socket was created.
-     Units: Bytes.
-
-`RSS_SIZE_REQ'
-     This will display the remote (netserver) send socket buffer size
-     (aka SO_SNDBUF) requested via the command line. Units: Bytes.
-
-`RSS_SIZE'
-     This will display the remote (netserver) send socket buffer size
-     (SO_SNDBUF) immediately after the data connection socket was
-     created.  Peculiarities of different networking stacks may lead to
-     this differing from the size requested via the command line.
-     Units: Bytes.
-
-`RSS_SIZE_END'
-     This will display the remote (netserver) send socket buffer size
-     (SO_SNDBUF) immediately before the data connection socket is
-     closed.  Peculiarities of different networking stacks may lead
-     this to differ from the size requested via the command line and/or
-     the size immediately after the data connection socket was created.
-     Units: Bytes.
-
-`RSR_SIZE_REQ'
-     This will display the remote (netserver) receive socket buffer
-     size (aka SO_RCVBUF) requested via the command line. Units: Bytes.
-
-`RSR_SIZE'
-     This will display the remote (netserver) receive socket buffer size
-     (SO_RCVBUF) immediately after the data connection socket was
-     created.  Peculiarities of different networking stacks may lead to
-     this differing from the size requested via the command line.
-     Units: Bytes.
-
-`RSR_SIZE_END'
-     This will display the remote (netserver) receive socket buffer size
-     (SO_RCVBUF) immediately before the data connection socket is
-     closed.  Peculiarities of different networking stacks may lead
-     this to differ from the size requested via the command line and/or
-     the size immediately after the data connection socket was created.
-     Units: Bytes.
-
-`LOCAL_SEND_SIZE'
-     This will display the size of the buffers netperf passed in any
-     "send" calls it made on the data connection for a
-     non-request/response test. Units: Bytes.
-
-`LOCAL_RECV_SIZE'
-     This will display the size of the buffers netperf passed in any
-     "receive" calls it made on the data connection for a
-     non-request/response test. Units: Bytes.
-
-`REMOTE_SEND_SIZE'
-     This will display the size of the buffers netserver passed in any
-     "send" calls it made on the data connection for a
-     non-request/response test. Units: Bytes.
-
-`REMOTE_RECV_SIZE'
-     This will display the size of the buffers netserver passed in any
-     "receive" calls it made on the data connection for a
-     non-request/response test. Units: Bytes.
-
-`REQUEST_SIZE'
-     This will display the size of the requests netperf sent in a
-     request-response test. Units: Bytes.
-
-`RESPONSE_SIZE'
-     This will display the size of the responses netserver sent in a
-     request-response test. Units: Bytes.
-
-`LOCAL_CPU_UTIL'
-     This will display the overall CPU utilization during the test as
-     measured by netperf. Units: 0 to 100 percent.
-
-`LOCAL_CPU_METHOD'
-     This will display the method used by netperf to measure CPU
-     utilization. Units: single character denoting method.
-
-`LOCAL_SD'
-     This will display the service demand, or units of CPU consumed per
-     unit of work, as measured by netperf. Units: microseconds of CPU
-     consumed per either KB (K==1024) of data transferred or
-     request/response transaction.
-
-`REMOTE_CPU_UTIL'
-     This will display the overall CPU utilization during the test as
-     measured by netserver. Units 0 to 100 percent.
-
-`REMOTE_CPU_METHOD'
-     This will display the method used by netserver to measure CPU
-     utilization. Units: single character denoting method.
-
-`REMOTE_SD'
-     This will display the service demand, or units of CPU consumed per
-     unit of work, as measured by netserver. Units: microseconds of CPU
-     consumed per either KB (K==1024) of data transferred or
-     request/response transaction.
-
-`SD_UNITS'
-     This will display the units for LOCAL_SD and REMOTE_SD
-
-`CONFIDENCE_LEVEL'
-     This will display the confidence level requested by the user either
-     explicitly via the global `-I' option, or implicitly via the
-     global `-i' option.  The value will be either 95 or 99 if
-     confidence intervals have been requested or 0 if they were not.
-     Units: Percent
-
-`CONFIDENCE_INTERVAL'
-     This will display the width of the confidence interval requested
-     either explicitly via the global `-I' option or implicitly via the
-     global `-i' option.  Units: Width in percent of mean value
-     computed. A value of -1.0 means that confidence intervals were not
-     requested.
-
-`CONFIDENCE_ITERATION'
-     This will display the number of test iterations netperf undertook,
-     perhaps while attempting to achieve the requested confidence
-     interval and level. If confidence intervals were requested via the
-     command line then the value will be between 3 and 30.  If
-     confidence intervals were not requested the value will be 1.
-     Units: Iterations
-
-`THROUGHPUT_CONFID'
-     This will display the width of the confidence interval actually
-     achieved for `THROUGHPUT' during the test.  Units: Width of
-     interval as percentage of reported throughput value.
-
-`LOCAL_CPU_CONFID'
-     This will display the width of the confidence interval actually
-     achieved for overall CPU utilization on the system running netperf
-     (`LOCAL_CPU_UTIL') during the test, if CPU utilization measurement
-     was enabled.  Units: Width of interval as percentage of reported
-     CPU utilization.
-
-`REMOTE_CPU_CONFID'
-     This will display the width of the confidence interval actually
-     achieved for overall CPU utilization on the system running
-     netserver (`REMOTE_CPU_UTIL') during the test, if CPU utilization
-     measurement was enabled. Units: Width of interval as percentage of
-     reported CPU utilization.
-
-`TRANSACTION_RATE'
-     This will display the transaction rate in transactions per second
-     for a request/response test even if the user has requested a
-     throughput in units of bits or bytes per second via the global `-f'
-     option. It is undefined for a non-request/response test. Units:
-     Transactions per second.
-
-`RT_LATENCY'
-     This will display the average round-trip latency for a
-     request/response test, accounting for number of transactions in
-     flight at one time. It is undefined for a non-request/response
-     test. Units: Microseconds per transaction
-
-`BURST_SIZE'
-     This will display the "burst size" or added transactions in flight
-     in a request/response test as requested via a test-specific `-b'
-     option.  The number of transactions in flight at one time will be
-     one greater than this value.  It is undefined for a
-     non-request/response test. Units: added Transactions in flight.
-
-`LOCAL_TRANSPORT_RETRANS'
-     This will display the number of retransmissions experienced on the
-     data connection during the test as determined by netperf.  A value
-     of -1 means the attempt to determine the number of retransmissions
-     failed or the concept was not valid for the given protocol or the
-     mechanism is not known for the platform. A value of -2 means it
-     was not attempted. As of version 2.5.0 the meaning of values are
-     in flux and subject to change.  Units: number of retransmissions.
-
-`REMOTE_TRANSPORT_RETRANS'
-     This will display the number of retransmissions experienced on the
-     data connection during the test as determined by netserver.  A
-     value of -1 means the attempt to determine the number of
-     retransmissions failed or the concept was not valid for the given
-     protocol or the mechanism is not known for the platform. A value
-     of -2 means it was not attempted. As of version 2.5.0 the meaning
-     of values are in flux and subject to change.  Units: number of
-     retransmissions.
-
-`TRANSPORT_MSS'
-     This will display the Maximum Segment Size (aka MSS) or its
-     equivalent for the protocol being used during the test.  A value
-     of -1 means either the concept of an MSS did not apply to the
-     protocol being used, or there was an error in retrieving it.
-     Units: Bytes.
-
-`LOCAL_SEND_THROUGHPUT'
-     The throughput as measured by netperf for the successful "send"
-     calls it made on the data connection. Units: as requested via the
-     global `-f' option and displayed via the `THROUGHPUT_UNITS' output
-     selector.
-
-`LOCAL_RECV_THROUGHPUT'
-     The throughput as measured by netperf for the successful "receive"
-     calls it made on the data connection. Units: as requested via the
-     global `-f' option and displayed via the `THROUGHPUT_UNITS' output
-     selector.
-
-`REMOTE_SEND_THROUGHPUT'
-     The throughput as measured by netserver for the successful "send"
-     calls it made on the data connection. Units: as requested via the
-     global `-f' option and displayed via the `THROUGHPUT_UNITS' output
-     selector.
-
-`REMOTE_RECV_THROUGHPUT'
-     The throughput as measured by netserver for the successful
-     "receive" calls it made on the data connection. Units: as
-     requested via the global `-f' option and displayed via the
-     `THROUGHPUT_UNITS' output selector.
-
-`LOCAL_CPU_BIND'
-     The CPU to which netperf was bound, if at all, during the test. A
-     value of -1 means that netperf was not explicitly bound to a CPU
-     during the test. Units: CPU ID
-
-`LOCAL_CPU_COUNT'
-     The number of CPUs (cores, threads) detected by netperf. Units:
-     CPU count.
-
-`LOCAL_CPU_PEAK_UTIL'
-     The utilization of the CPU most heavily utilized during the test,
-     as measured by netperf. This can be used to see if any one CPU of a
-     multi-CPU system was saturated even though the overall CPU
-     utilization as reported by `LOCAL_CPU_UTIL' was low. Units: 0 to
-     100%
-
-`LOCAL_CPU_PEAK_ID'
-     The id of the CPU most heavily utilized during the test as
-     determined by netperf. Units: CPU ID.
-
-`LOCAL_CPU_MODEL'
-     Model information for the processor(s) present on the system
-     running netperf. Assumes all processors in the system (as
-     perceived by netperf) on which netperf is running are the same
-     model. Units: Text
-
-`LOCAL_CPU_FREQUENCY'
-     The frequency of the processor(s) on the system running netperf, at
-     the time netperf made the call.  Assumes that all processors
-     present in the system running netperf are running at the same
-     frequency. Units: MHz
-
-`REMOTE_CPU_BIND'
-     The CPU to which netserver was bound, if at all, during the test. A
-     value of -1 means that netperf was not explicitly bound to a CPU
-     during the test. Units: CPU ID
-
-`REMOTE_CPU_COUNT'
-     The number of CPUs (cores, threads) detected by netserver. Units:
-     CPU count.
-
-`REMOTE_CPU_PEAK_UTIL'
-     The utilization of the CPU most heavily utilized during the test,
-     as measured by netserver. This can be used to see if any one CPU
-     of a multi-CPU system was saturated even though the overall CPU
-     utilization as reported by `REMOTE_CPU_UTIL' was low. Units: 0 to
-     100%
-
-`REMOTE_CPU_PEAK_ID'
-     The id of the CPU most heavily utilized during the test as
-     determined by netserver. Units: CPU ID.
-
-`REMOTE_CPU_MODEL'
-     Model information for the processor(s) present on the system
-     running netserver. Assumes all processors in the system (as
-     perceived by netserver) on which netserver is running are the same
-     model. Units: Text
-
-`REMOTE_CPU_FREQUENCY'
-     The frequency of the processor(s) on the system running netserver,
-     at the time netserver made the call.  Assumes that all processors
-     present in the system running netserver are running at the same
-     frequency. Units: MHz
-
-`SOURCE_PORT'
-     The port ID/service name to which the data socket created by
-     netperf was bound.  A value of 0 means the data socket was not
-     explicitly bound to a port number. Units: ASCII text.
-
-`SOURCE_ADDR'
-     The name/address to which the data socket created by netperf was
-     bound. A value of 0.0.0.0 means the data socket was not explicitly
-     bound to an address. Units: ASCII text.
-
-`SOURCE_FAMILY'
-     The address family to which the data socket created by netperf was
-     bound.  A value of 0 means the data socket was not explicitly
-     bound to a given address family. Units: ASCII text.
-
-`DEST_PORT'
-     The port ID to which the data socket created by netserver was
-     bound. A value of 0 means the data socket was not explicitly bound
-     to a port number.  Units: ASCII text.
-
-`DEST_ADDR'
-     The name/address of the data socket created by netserver.  Units:
-     ASCII text.
-
-`DEST_FAMILY'
-     The address family to which the data socket created by netserver
-     was bound. A value of 0 means the data socket was not explicitly
-     bound to a given address family. Units: ASCII text.
-
-`LOCAL_SEND_CALLS'
-     The number of successful "send" calls made by netperf against its
-     data socket. Units: Calls.
-
-`LOCAL_RECV_CALLS'
-     The number of successful "receive" calls made by netperf against
-     its data socket. Units: Calls.
-
-`LOCAL_BYTES_PER_RECV'
-     The average number of bytes per "receive" call made by netperf
-     against its data socket. Units: Bytes.
-
-`LOCAL_BYTES_PER_SEND'
-     The average number of bytes per "send" call made by netperf against
-     its data socket. Units: Bytes.
-
-`LOCAL_BYTES_SENT'
-     The number of bytes successfully sent by netperf through its data
-     socket. Units: Bytes.
-
-`LOCAL_BYTES_RECVD'
-     The number of bytes successfully received by netperf through its
-     data socket. Units: Bytes.
-
-`LOCAL_BYTES_XFERD'
-     The sum of bytes sent and received by netperf through its data
-     socket. Units: Bytes.
-
-`LOCAL_SEND_OFFSET'
-     The offset from the alignment of the buffers passed by netperf in
-     its "send" calls. Specified via the global `-o' option and
-     defaults to 0. Units: Bytes.
-
-`LOCAL_RECV_OFFSET'
-     The offset from the alignment of the buffers passed by netperf in
-     its "receive" calls. Specified via the global `-o' option and
-     defaults to 0. Units: Bytes.
-
-`LOCAL_SEND_ALIGN'
-     The alignment of the buffers passed by netperf in its "send" calls
-     as specified via the global `-a' option. Defaults to 8. Units:
-     Bytes.
-
-`LOCAL_RECV_ALIGN'
-     The alignment of the buffers passed by netperf in its "receive"
-     calls as specified via the global `-a' option. Defaults to 8.
-     Units: Bytes.
-
-`LOCAL_SEND_WIDTH'
-     The "width" of the ring of buffers through which netperf cycles as
-     it makes its "send" calls.  Defaults to one more than the local
-     send socket buffer size divided by the send size as determined at
-     the time the data socket is created. Can be used to make netperf
-     more processor data cache unfriendly. Units: number of buffers.
-
-`LOCAL_RECV_WIDTH'
-     The "width" of the ring of buffers through which netperf cycles as
-     it makes its "receive" calls.  Defaults to one more than the local
-     receive socket buffer size divided by the receive size as
-     determined at the time the data socket is created. Can be used to
-     make netperf more processor data cache unfriendly. Units: number
-     of buffers.
-
-`LOCAL_SEND_DIRTY_COUNT'
-     The number of bytes to "dirty" (write to) before netperf makes a
-     "send" call. Specified via the global `-k' option, which requires
-     that -enable-dirty=yes was specified with the configure command
-     prior to building netperf. Units: Bytes.
-
-`LOCAL_RECV_DIRTY_COUNT'
-     The number of bytes to "dirty" (write to) before netperf makes a
-     "recv" call. Specified via the global `-k' option which requires
-     that -enable-dirty was specified with the configure command prior
-     to building netperf. Units: Bytes.
-
-`LOCAL_RECV_CLEAN_COUNT'
-     The number of bytes netperf should read "cleanly" before making a
-     "receive" call. Specified via the global `-k' option which
-     requires that -enable-dirty was specified with configure command
-     prior to building netperf.  Clean reads start were dirty writes
-     ended.  Units: Bytes.
-
-`LOCAL_NODELAY'
-     Indicates whether or not setting the test protocol-specific "no
-     delay" (eg TCP_NODELAY) option on the data socket used by netperf
-     was requested by the test-specific `-D' option and successful.
-     Units: 0 means no, 1 means yes.
-
-`LOCAL_CORK'
-     Indicates whether or not TCP_CORK was set on the data socket used
-     by netperf as requested via the test-specific `-C' option. 1 means
-     yes, 0 means no/not applicable.
-
-`REMOTE_SEND_CALLS'
-
-`REMOTE_RECV_CALLS'
-
-`REMOTE_BYTES_PER_RECV'
-
-`REMOTE_BYTES_PER_SEND'
-
-`REMOTE_BYTES_SENT'
-
-`REMOTE_BYTES_RECVD'
-
-`REMOTE_BYTES_XFERD'
-
-`REMOTE_SEND_OFFSET'
-
-`REMOTE_RECV_OFFSET'
-
-`REMOTE_SEND_ALIGN'
-
-`REMOTE_RECV_ALIGN'
-
-`REMOTE_SEND_WIDTH'
-
-`REMOTE_RECV_WIDTH'
-
-`REMOTE_SEND_DIRTY_COUNT'
-
-`REMOTE_RECV_DIRTY_COUNT'
-
-`REMOTE_RECV_CLEAN_COUNT'
-
-`REMOTE_NODELAY'
-
-`REMOTE_CORK'
-     These are all like their "LOCAL_" counterparts only for the
-     netserver rather than netperf.
-
-`LOCAL_SYSNAME'
-     The name of the OS (eg "Linux") running on the system on which
-     netperf was running. Units: ASCII Text
-
-`LOCAL_SYSTEM_MODEL'
-     The model name of the system on which netperf was running. Units:
-     ASCII Text.
-
-`LOCAL_RELEASE'
-     The release name/number of the OS running on the system on which
-     netperf  was running. Units: ASCII Text
-
-`LOCAL_VERSION'
-     The version number of the OS running on the system on which netperf
-     was running. Units: ASCII Text
-
-`LOCAL_MACHINE'
-     The machine architecture of the machine on which netperf was
-     running. Units: ASCII Text.
-
-`REMOTE_SYSNAME'
-
-`REMOTE_SYSTEM_MODEL'
-
-`REMOTE_RELEASE'
-
-`REMOTE_VERSION'
-
-`REMOTE_MACHINE'
-     These are all like their "LOCAL_" counterparts only for the
-     netserver rather than netperf.
-
-`LOCAL_INTERFACE_NAME'
-     The name of the probable egress interface through which the data
-     connection went on the system running netperf. Example: eth0.
-     Units: ASCII Text.
-
-`LOCAL_INTERFACE_VENDOR'
-     The vendor ID of the probable egress interface through which
-     traffic on the data connection went on the system running netperf.
-     Units: Hexadecimal IDs as might be found in a `pci.ids' file or at
-     the PCI ID Repository (http://pciids.sourceforge.net/).
-
-`LOCAL_INTERFACE_DEVICE'
-     The device ID of the probable egress interface through which
-     traffic on the data connection went on the system running netperf.
-     Units: Hexadecimal IDs as might be found in a `pci.ids' file or at
-     the PCI ID Repository (http://pciids.sourceforge.net/).
-
-`LOCAL_INTERFACE_SUBVENDOR'
-     The sub-vendor ID of the probable egress interface through which
-     traffic on the data connection went on the system running netperf.
-     Units: Hexadecimal IDs as might be found in a `pci.ids' file or at
-     the PCI ID Repository (http://pciids.sourceforge.net/).
-
-`LOCAL_INTERFACE_SUBDEVICE'
-     The sub-device ID of the probable egress interface through which
-     traffic on the data connection went on the system running netperf.
-     Units: Hexadecimal IDs as might be found in a `pci.ids' file or at
-     the PCI ID Repository (http://pciids.sourceforge.net/).
-
-`LOCAL_DRIVER_NAME'
-     The name of the driver used for the probable egress interface
-     through which traffic on the data connection went on the system
-     running netperf. Units: ASCII Text.
-
-`LOCAL_DRIVER_VERSION'
-     The version string for the driver used for the probable egress
-     interface through which traffic on the data connection went on the
-     system running netperf. Units: ASCII Text.
-
-`LOCAL_DRIVER_FIRMWARE'
-     The firmware version for the driver used for the probable egress
-     interface through which traffic on the data connection went on the
-     system running netperf. Units: ASCII Text.
-
-`LOCAL_DRIVER_BUS'
-     The bus address of the probable egress interface through which
-     traffic on the data connection went on the system running netperf.
-     Units: ASCII Text.
-
-`LOCAL_INTERFACE_SLOT'
-     The slot ID of the probable egress interface through which traffic
-     on the data connection went on the system running netperf. Units:
-     ASCII Text.
-
-`REMOTE_INTERFACE_NAME'
-
-`REMOTE_INTERFACE_VENDOR'
-
-`REMOTE_INTERFACE_DEVICE'
-
-`REMOTE_INTERFACE_SUBVENDOR'
-
-`REMOTE_INTERFACE_SUBDEVICE'
-
-`REMOTE_DRIVER_NAME'
-
-`REMOTE_DRIVER_VERSION'
-
-`REMOTE_DRIVER_FIRMWARE'
-
-`REMOTE_DRIVER_BUS'
-
-`REMOTE_INTERFACE_SLOT'
-     These are all like their "LOCAL_" counterparts only for the
-     netserver rather than netperf.
-
-`LOCAL_INTERVAL_USECS'
-     The interval at which bursts of operations (sends, receives,
-     transactions) were attempted by netperf.  Specified by the global
-     `-w' option which requires -enable-intervals to have been
-     specified with the configure command prior to building netperf.
-     Units: Microseconds (though specified by default in milliseconds
-     on the command line)
-
-`LOCAL_INTERVAL_BURST'
-     The number of operations (sends, receives, transactions depending
-     on the test) which were attempted by netperf each
-     LOCAL_INTERVAL_USECS units of time. Specified by the global `-b'
-     option which requires -enable-intervals to have been specified
-     with the configure command prior to building netperf.  Units:
-     number of operations per burst.
-
-`REMOTE_INTERVAL_USECS'
-     The interval at which bursts of operations (sends, receives,
-     transactions) were attempted by netserver.  Specified by the
-     global `-w' option which requires -enable-intervals to have been
-     specified with the configure command prior to building netperf.
-     Units: Microseconds (though specified by default in milliseconds
-     on the command line)
-
-`REMOTE_INTERVAL_BURST'
-     The number of operations (sends, receives, transactions depending
-     on the test) which were attempted by netperf each
-     LOCAL_INTERVAL_USECS units of time. Specified by the global `-b'
-     option which requires -enable-intervals to have been specified
-     with the configure command prior to building netperf.  Units:
-     number of operations per burst.
-
-`LOCAL_SECURITY_TYPE_ID'
-
-`LOCAL_SECURITY_TYPE'
-
-`LOCAL_SECURITY_ENABLED_NUM'
-
-`LOCAL_SECURITY_ENABLED'
-
-`LOCAL_SECURITY_SPECIFIC'
-
-`REMOTE_SECURITY_TYPE_ID'
-
-`REMOTE_SECURITY_TYPE'
-
-`REMOTE_SECURITY_ENABLED_NUM'
-
-`REMOTE_SECURITY_ENABLED'
-
-`REMOTE_SECURITY_SPECIFIC'
-     A bunch of stuff related to what sort of security mechanisms (eg
-     SELINUX) were enabled on the systems during the test.
-
-`RESULT_BRAND'
-     The string specified by the user with the global `-B' option.
-     Units: ASCII Text.
-
-`UUID'
-     The universally unique identifier associated with this test, either
-     generated automagically by netperf, or passed to netperf via an
-     omni test-specific `-u' option. Note: Future versions may make this
-     a global command-line option. Units: ASCII Text.
-
-`MIN_LATENCY'
-     The minimum "latency" or operation time (send, receive or
-     request/response exchange depending on the test) as measured on the
-     netperf side when the global `-j' option was specified. Units:
-     Microseconds.
-
-`MAX_LATENCY'
-     The maximum "latency" or operation time (send, receive or
-     request/response exchange depending on the test) as measured on the
-     netperf side when the global `-j' option was specified. Units:
-     Microseconds.
-
-`P50_LATENCY'
-     The 50th percentile value of "latency" or operation time (send,
-     receive or request/response exchange depending on the test) as
-     measured on the netperf side when the global `-j' option was
-     specified. Units: Microseconds.
-
-`P90_LATENCY'
-     The 90th percentile value of "latency" or operation time (send,
-     receive or request/response exchange depending on the test) as
-     measured on the netperf side when the global `-j' option was
-     specified. Units: Microseconds.
-
-`P99_LATENCY'
-     The 99th percentile value of "latency" or operation time (send,
-     receive or request/response exchange depending on the test) as
-     measured on the netperf side when the global `-j' option was
-     specified. Units: Microseconds.
-
-`MEAN_LATENCY'
-     The average "latency" or operation time (send, receive or
-     request/response exchange depending on the test) as measured on the
-     netperf side when the global `-j' option was specified. Units:
-     Microseconds.
-
-`STDDEV_LATENCY'
-     The standard deviation of "latency" or operation time (send,
-     receive or request/response exchange depending on the test) as
-     measured on the netperf side when the global `-j' option was
-     specified. Units: Microseconds.
-
-`COMMAND_LINE'
-     The full command line used when invoking netperf. Units: ASCII
-     Text.
-
-`OUTPUT_END'
-     While emitted with the list of output selectors, it is ignored when
-     specified as an output selector.
-
-10 Other Netperf Tests
-**********************
-
-Apart from the typical performance tests, netperf contains some tests
-which can be used to streamline measurements and reporting.  These
-include CPU rate calibration (present) and host identification (future
-enhancement).
-
-10.1 CPU rate calibration
-=========================
-
-Some of the CPU utilization measurement mechanisms of netperf work by
-comparing the rate at which some counter increments when the system is
-idle with the rate at which that same counter increments when the
-system is running a netperf test.  The ratio of those rates is used to
-arrive at a CPU utilization percentage.
-
-   This means that netperf must know the rate at which the counter
-increments when the system is presumed to be "idle."  If it does not
-know the rate, netperf will measure it before starting a data transfer
-test.  This calibration step takes 40 seconds for each of the local or
-remote systems, and if repeated for each netperf test would make taking
-repeated measurements rather slow.
-
-   Thus, the netperf CPU utilization options `-c' and and `-C' can take
-an optional calibration value.  This value is used as the "idle rate"
-and the calibration step is not performed. To determine the idle rate,
-netperf can be used to run special tests which only report the value of
-the calibration - they are the LOC_CPU and REM_CPU tests.  These return
-the calibration value for the local and remote system respectively.  A
-common way to use these tests is to store their results into an
-environment variable and use that in subsequent netperf commands:
-
-     LOC_RATE=`netperf -t LOC_CPU`
-     REM_RATE=`netperf -H <remote> -t REM_CPU`
-     netperf -H <remote> -c $LOC_RATE -C $REM_RATE ... -- ...
-     ...
-     netperf -H <remote> -c $LOC_RATE -C $REM_RATE ... -- ...
-
-   If you are going to use netperf to measure aggregate results, it is
-important to use the LOC_CPU and REM_CPU tests to get the calibration
-values first to avoid issues with some of the aggregate netperf tests
-transferring data while others are "idle" and getting bogus calibration
-values.  When running aggregate tests, it is very important to remember
-that any one instance of netperf does not know about the other
-instances of netperf.  It will report global CPU utilization and will
-calculate service demand believing it was the only thing causing that
-CPU utilization.  So, you can use the CPU utilization reported by
-netperf in an aggregate test, but you have to calculate service demands
-by hand.
-
-10.2 UUID Generation
-====================
-
-Beginning with version 2.5.0 netperf can generate Universally Unique
-IDentifiers (UUIDs).  This can be done explicitly via the "UUID" test:
-     $ netperf -t UUID
-     2c8561ae-9ebd-11e0-a297-0f5bfa0349d0
-
-   In and of itself, this is not terribly useful, but used in
-conjunction with the test-specific `-u' option of an "omni" test to set
-the UUID emitted by the *note UUID: Omni Output Selectors. output
-selector, it can be used to tie-together the separate instances of an
-aggregate netperf test.  Say, for instance if they were inserted into a
-database of some sort.
-
-11 Address Resolution
-*********************
-
-Netperf versions 2.4.0 and later have merged IPv4 and IPv6 tests so the
-functionality of the tests in `src/nettest_ipv6.c' has been subsumed
-into the tests in `src/nettest_bsd.c'  This has been accomplished in
-part by switching from `gethostbyname()'to `getaddrinfo()' exclusively.
-While it was theoretically possible to get multiple results for a
-hostname from `gethostbyname()' it was generally unlikely and netperf's
-ignoring of the second and later results was not much of an issue.
-
-   Now with `getaddrinfo' and particularly with AF_UNSPEC it is
-increasingly likely that a given hostname will have multiple associated
-addresses.  The `establish_control()' routine of `src/netlib.c' will
-indeed attempt to chose from among all the matching IP addresses when
-establishing the control connection.  Netperf does not _really_ care if
-the control connection is IPv4 or IPv6 or even mixed on either end.
-
-   However, the individual tests still ass-u-me that the first result in
-the address list is the one to be used.  Whether or not this will
-turn-out to be an issue has yet to be determined.
-
-   If you do run into problems with this, the easiest workaround is to
-specify IP addresses for the data connection explicitly in the
-test-specific `-H' and `-L' options.  At some point, the netperf tests
-_may_ try to be more sophisticated in their parsing of returns from
-`getaddrinfo()' - straw-man patches to <netperf-feedback@netperf.org>
-would of course be most welcome :)
-
-   Netperf has leveraged code from other open-source projects with
-amenable licensing to provide a replacement `getaddrinfo()' call on
-those platforms where the `configure' script believes there is no
-native getaddrinfo call.  As of this writing, the replacement
-`getaddrinfo()' as been tested on HP-UX 11.0 and then presumed to run
-elsewhere.
-
-12 Enhancing Netperf
-********************
-
-Netperf is constantly evolving.  If you find you want to make
-enhancements to netperf, by all means do so.  If you wish to add a new
-"suite" of tests to netperf the general idea is to:
-
-  1. Add files `src/nettest_mumble.c' and `src/nettest_mumble.h' where
-     mumble is replaced with something meaningful for the test-suite.
-
-  2. Add support for an appropriate `--enable-mumble' option in
-     `configure.ac'.
-
-  3. Edit `src/netperf.c', `netsh.c', and `netserver.c' as required,
-     using #ifdef WANT_MUMBLE.
-
-  4. Compile and test
-
-   However, with the addition of the "omni" tests in version 2.5.0 it
-is preferred that one attempt to make the necessary changes to
-`src/nettest_omni.c' rather than adding new source files, unless this
-would make the omni tests entirely too complicated.
-
-   If you wish to submit your changes for possible inclusion into the
-mainline sources, please try to base your changes on the latest
-available sources. (*Note Getting Netperf Bits::.) and then send email
-describing the changes at a high level to
-<netperf-feedback@netperf.org> or perhaps <netperf-talk@netperf.org>.
-If the consensus is positive, then sending context `diff' results to
-<netperf-feedback@netperf.org> is the next step.  From that point, it
-is a matter of pestering the Netperf Contributing Editor until he gets
-the changes incorporated :)
-
-13 Netperf4
-***********
-
-Netperf4 is the shorthand name given to version 4.X.X of netperf.  This
-is really a separate benchmark more than a newer version of netperf,
-but it is a descendant of netperf so the netperf name is kept.  The
-facetious way to describe netperf4 is to say it is the
-egg-laying-woolly-milk-pig version of netperf :)  The more respectful
-way to describe it is to say it is the version of netperf with support
-for synchronized, multiple-thread, multiple-test, multiple-system,
-network-oriented benchmarking.
-
-   Netperf4 is still undergoing evolution. Those wishing to work with or
-on netperf4 are encouraged to join the netperf-dev
-(http://www.netperf.org/cgi-bin/mailman/listinfo/netperf-dev) mailing
-list and/or peruse the current sources
-(http://www.netperf.org/svn/netperf4/trunk).
-
-Concept Index
-*************
-
-Aggregate Performance:                         See 7.        (line 2142)
-Bandwidth Limitation:                          See 2.2.      (line  317)
-Connection Latency:                            See 6.2.2.    (line 1985)
-CPU Utilization:                               See 3.1.      (line  466)
-Design of Netperf:                             See 3.        (line  436)
-Installation:                                  See 2.        (line  198)
-Introduction:                                  See 1.        (line   85)
-Latency, Connection Establishment <1>:         See 6.2.7.    (line 2112)
-Latency, Connection Establishment <2>:         See 6.2.6.    (line 2102)
-Latency, Connection Establishment <3>:         See 6.2.3.    (line 2028)
-Latency, Connection Establishment:             See 6.2.2.    (line 1985)
-Latency, Request-Response <1>:                 See 6.2.11.   (line 2139)
-Latency, Request-Response <2>:                 See 6.2.10.   (line 2136)
-Latency, Request-Response <3>:                 See 6.2.9.    (line 2133)
-Latency, Request-Response <4>:                 See 6.2.8.    (line 2122)
-Latency, Request-Response <5>:                 See 6.2.7.    (line 2112)
-Latency, Request-Response <6>:                 See 6.2.5.    (line 2091)
-Latency, Request-Response <7>:                 See 6.2.4.    (line 2048)
-Latency, Request-Response <8>:                 See 6.2.3.    (line 2028)
-Latency, Request-Response:                     See 6.2.1.    (line 1936)
-Limiting Bandwidth <1>:                        See 5.2.4.    (line 1564)
-Limiting Bandwidth:                            See 2.2.      (line  317)
-Measuring Latency:                             See 6.2.1.    (line 1936)
-Packet Loss:                                   See 6.2.4.    (line 2048)
-Port Reuse:                                    See 6.2.2.    (line 1992)
-TIME_WAIT:                                     See 6.2.2.    (line 1992)
-Option Index
-************
-
---enable-burst, Configure:                     See 7.        (line 2142)
---enable-cpuutil, Configure:                   See 2.2.      (line  277)
---enable-dlpi, Configure:                      See 2.2.      (line  283)
---enable-histogram, Configure:                 See 2.2.      (line  317)
---enable-intervals, Configure:                 See 2.2.      (line  317)
---enable-omni, Configure:                      See 2.2.      (line  289)
---enable-sctp, Configure:                      See 2.2.      (line  283)
---enable-unixdomain, Configure:                See 2.2.      (line  283)
---enable-xti, Configure:                       See 2.2.      (line  283)
--4, Global:                                    See 4.2.      (line 1174)
--4, Test-specific <1>:                         See 6.2.      (line 1922)
--4, Test-specific:                             See 5.2.      (line 1395)
--6 Test-specific:                              See 6.2.      (line 1928)
--6, Global:                                    See 4.2.      (line 1183)
--6, Test-specific:                             See 5.2.      (line 1401)
--A, Global:                                    See 4.2.      (line  703)
--a, Global:                                    See 4.2.      (line  691)
--B, Global:                                    See 4.2.      (line  714)
--b, Global:                                    See 4.2.      (line  707)
--C, Global:                                    See 4.2.      (line  727)
--c, Global:                                    See 4.2.      (line  718)
--c, Test-specific:                             See 9.1.      (line 2746)
--D, Global:                                    See 4.2.      (line  741)
--d, Global:                                    See 4.2.      (line  732)
--d, Test-specific:                             See 9.1.      (line 2750)
--F, Global:                                    See 4.2.      (line  761)
--f, Global:                                    See 4.2.      (line  752)
--H, Global:                                    See 4.2.      (line  780)
--h, Global:                                    See 4.2.      (line  776)
--H, Test-specific:                             See 6.2.      (line 1851)
--h, Test-specific <1>:                         See 6.2.      (line 1844)
--h, Test-specific:                             See 5.2.      (line 1295)
--i, Global:                                    See 4.2.      (line  864)
--I, Global:                                    See 4.2.      (line  815)
--j, Global:                                    See 4.2.      (line  890)
--k, Test-specific:                             See 9.1.      (line 2770)
--L, Global:                                    See 4.2.      (line  948)
--l, Global:                                    See 4.2.      (line  927)
--L, Test-specific <1>:                         See 6.2.      (line 1860)
--L, Test-specific:                             See 5.2.      (line 1310)
--M, Test-specific:                             See 5.2.      (line 1333)
--m, Test-specific:                             See 5.2.      (line 1317)
--N, Global:                                    See 4.2.      (line  978)
--n, Global:                                    See 4.2.      (line  960)
--O, Global:                                    See 4.2.      (line 1023)
--o, Global:                                    See 4.2.      (line 1014)
--O, Test-specific:                             See 9.1.      (line 2795)
--o, Test-specific:                             See 9.1.      (line 2783)
--P, Global:                                    See 4.2.      (line 1048)
--p, Global:                                    See 4.2.      (line 1028)
--P, Test-specific <1>:                         See 6.2.      (line 1867)
--P, Test-specific:                             See 5.2.      (line 1346)
--r, Test-specific:                             See 6.2.      (line 1870)
--S Test-specific:                              See 5.2.      (line 1372)
--S, Global:                                    See 4.2.      (line 1066)
--s, Global:                                    See 4.2.      (line 1057)
--S, Test-specific:                             See 6.2.      (line 1902)
--s, Test-specific <1>:                         See 6.2.      (line 1882)
--s, Test-specific:                             See 5.2.      (line 1349)
--T, Global:                                    See 4.2.      (line 1108)
--t, Global:                                    See 4.2.      (line 1076)
--T, Test-specific:                             See 9.1.      (line 2814)
--t, Test-specific:                             See 9.1.      (line 2809)
--V, Global:                                    See 4.2.      (line 1153)
--v, Global:                                    See 4.2.      (line 1125)
--W, Global:                                    See 4.2.      (line 1165)
--w, Global:                                    See 4.2.      (line 1158)
diff --git a/doc/netperf.xml b/doc/netperf.xml
deleted file mode 100644
index 10a17f1..0000000
--- a/doc/netperf.xml
+++ /dev/null
@@ -1,3196 +0,0 @@
-<?xml version="1.0"?>
-<!DOCTYPE texinfo PUBLIC "-//GNU//DTD TexinfoML V4.13//EN" "http://www.gnu.org/software/texinfo/dtd/4.13/texinfo.dtd">
-<texinfo xml:lang="en">
-  <setfilename>netperf.xml</setfilename>
-  <settitle>Care and Feeding of Netperf 2.5.X</settitle>
-<!-- %**end of header -->
-  <para>This is Rick Jones' feeble attempt at a Texinfo-based manual for the netperf benchmark.</para>
-  <para>Copyright &copyright; 2005-2011 Hewlett-Packard Company</para>
-  <quotation>
-    <para>Permission is granted to copy, distribute and/or modify this document per the terms of the netperf source license, a copy of which can be found in the file <file>COPYING</file> of the basic netperf distribution.</para>
-  </quotation>
-  <titlepage>
-    <booktitle>Care and Feeding of Netperf</booktitle>
-    <booksubtitle>Versions 2.5.0 and Later</booksubtitle>
-    <author>Rick Jones &lt;email&gt;&lt;emailaddress&gt;rick.jones2@hp.com&lt;/emailaddress&gt;&lt;/email&gt;</author>
-<!-- this is here to start the copyright page -->
-    <para>This is Rick Jones' feeble attempt at a Texinfo-based manual for the netperf benchmark.</para>
-    <para>Copyright &copyright; 2005-2011 Hewlett-Packard Company</para>
-    <quotation>
-      <para>Permission is granted to copy, distribute and/or modify this document per the terms of the netperf source license, a copy of which can be found in the file <file>COPYING</file> of the basic netperf distribution.</para>
-    </quotation>
-  </titlepage>
-<!-- begin with a table of contents -->
-  <contents></contents>
-  <node>
-    <nodename>Top</nodename>
-    <nodenext>Introduction</nodenext>
-    <nodeprev>(dir)</nodeprev>
-    <nodeup>(dir)</nodeup>
-    <unnumbered>
-      <title>Netperf Manual</title>
-      <para>This is Rick Jones' feeble attempt at a Texinfo-based manual for the netperf benchmark.</para>
-      <para>Copyright &copyright; 2005-2011 Hewlett-Packard Company</para>
-      <quotation>
-        <para>Permission is granted to copy, distribute and/or modify this document per the terms of the netperf source license, a copy of which can be found in the file <file>COPYING</file> of the basic netperf distribution.</para>
-      </quotation>
-      <menu>
-        <menuentry>
-          <menunode>Introduction</menunode>
-          <menutitle>Introduction</menutitle>
-          <menucomment>An introduction to netperf - what itis and what it is not.</menucomment>
-        </menuentry>
-        <menuentry>
-          <menunode>Installing Netperf</menunode>
-          <menutitle>Installing Netperf</menutitle>
-          <menucomment>How to go about installing netperf.</menucomment>
-        </menuentry>
-        <menuentry>
-          <menunode>The Design of Netperf</menunode>
-          <menutitle>The Design of Netperf</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-        <menuentry>
-          <menunode>Global Command-line Options</menunode>
-          <menutitle>Global Command-line Options</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-        <menuentry>
-          <menunode>Using Netperf to Measure Bulk Data Transfer</menunode>
-          <menutitle>Using Netperf to Measure Bulk Data Transfer</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-        <menuentry>
-          <menunode>Using Netperf to Measure Request/Response</menunode>
-          <menutitle>Using Netperf to Measure Request/Response </menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-        <menuentry>
-          <menunode>Using Netperf to Measure Aggregate Performance</menunode>
-          <menutitle>Using Netperf to Measure Aggregate Performance</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-        <menuentry>
-          <menunode>Using Netperf to Measure Bidirectional Transfer</menunode>
-          <menutitle>Using Netperf to Measure Bidirectional Transfer</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-        <menuentry>
-          <menunode>The Omni Tests</menunode>
-          <menutitle>The Omni Tests</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-        <menuentry>
-          <menunode>Other Netperf Tests</menunode>
-          <menutitle>Other Netperf Tests</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-        <menuentry>
-          <menunode>Address Resolution</menunode>
-          <menutitle>Address Resolution</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-        <menuentry>
-          <menunode>Enhancing Netperf</menunode>
-          <menutitle>Enhancing Netperf</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-        <menuentry>
-          <menunode>Netperf4</menunode>
-          <menutitle>Netperf4</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-        <menuentry>
-          <menunode>Concept Index</menunode>
-          <menutitle>Concept Index</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-        <menuentry>
-          <menunode>Option Index</menunode>
-          <menutitle>Option Index</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-      </menu>
-    </unnumbered>
-  </node>
-  <node>
-    <nodename>Introduction</nodename>
-    <nodenext>Installing Netperf</nodenext>
-    <nodeprev>Top</nodeprev>
-    <nodeup>Top</nodeup>
-    <chapter>
-      <title>Introduction</title>
-      <para><indexterm index="cp">Introduction</indexterm> Netperf is a benchmark that can be use to measure various aspect of networking performance.  The primary foci are bulk (aka unidirectional) data transfer and request/response performance using either TCP or UDP and the Berkeley Sockets interface.  As of this writing, the tests available either unconditionally or conditionally include:</para>
-      <itemize>
-        <itemfunction>&bullet;</itemfunction>
-        <item>
-          <para>TCP and UDP unidirectional transfer and request/response over IPv4 and IPv6 using the Sockets interface.</para>
-        </item>
-        <item>
-          <para>TCP and UDP unidirectional transfer and request/response over IPv4 using the XTI interface.</para>
-        </item>
-        <item>
-          <para>Link-level unidirectional transfer and request/response using the DLPI interface.</para>
-        </item>
-        <item>
-          <para>Unix domain sockets</para>
-        </item>
-        <item>
-          <para>SCTP unidirectional transfer and request/response over IPv4 and IPv6 using the sockets interface.</para>
-        </item>
-      </itemize>
-      <para>While not every revision of netperf will work on every platform listed, the intention is that at least some version of netperf will work on the following platforms:</para>
-      <itemize>
-        <itemfunction>&bullet;</itemfunction>
-        <item>
-          <para>Unix - at least all the major variants.</para>
-        </item>
-        <item>
-          <para>Linux</para>
-        </item>
-        <item>
-          <para>Windows</para>
-        </item>
-        <item>
-          <para>Others</para>
-        </item>
-      </itemize>
-      <para>Netperf is maintained and informally supported primarily by Rick Jones, who can perhaps be best described as Netperf Contributing Editor.  Non-trivial and very appreciated assistance comes from others in the network performance community, who are too numerous to mention here. While it is often used by them, netperf is NOT supported via any of the formal Hewlett-Packard support channels.  You should feel free to make enhancements and modifications to netperf to suit your nefarious porpoises, so long as you stay within the guidelines of the netperf copyright.  If you feel so inclined, you can send your changes to <email><emailaddress>netperf-feedback@netperf.org</emailaddress><emailname>netperf-feedback</emailname></email> for possible inclusion into subsequent versions of netperf.</para>
-      <para>It is the Contributing Editor's belief that the netperf license walks like open source and talks like open source. However, the license was never submitted for &ldquo;certification&rdquo; as an open source license.  If you would prefer to make contributions to a networking benchmark using a certified open source license, please consider netperf4, which is distributed under the terms of the GPLv2.</para>
-      <para>The <email><emailaddress>netperf-talk@netperf.org</emailaddress><emailname>netperf-talk</emailname></email> mailing list is available to discuss the care and feeding of netperf with others who share your interest in network performance benchmarking. The netperf-talk mailing list is a closed list (to deal with spam) and you must first subscribe by sending email to <email><emailaddress>netperf-talk-request@netperf.org</emailaddress><emailname>netperf-talk-request</emailname></email>.</para>
-      <menu>
-        <menuentry>
-          <menunode>Conventions</menunode>
-          <menutitle>Conventions</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-      </menu>
-    </chapter>
-  </node>
-  <node>
-    <nodename>Conventions</nodename>
-    <nodeprev>Introduction</nodeprev>
-    <nodeup>Introduction</nodeup>
-    <section>
-      <title>Conventions</title>
-      <para>A <dfn>sizespec</dfn> is a one or two item, comma-separated list used as an argument to a command-line option that can set one or two, related netperf parameters.  If you wish to set both parameters to separate values, items should be separated by a comma:</para>
-      <example xml:space="preserve">parameter1,parameter2</example>
-      <para>If you wish to set the first parameter without altering the value of the second from its default, you should follow the first item with a comma:</para>
-      <example xml:space="preserve">parameter1,</example>
-      <para>Likewise, precede the item with a comma if you wish to set only the second parameter:</para>
-      <example xml:space="preserve">,parameter2</example>
-      <para>An item with no commas:</para>
-      <example xml:space="preserve">parameter1and2</example>
-      <para>will set both parameters to the same value.  This last mode is one of the most frequently used.</para>
-      <para>There is another variant of the comma-separated, two-item list called a <dfn>optionspec</dfn> which is like a sizespec with the exception that a single item with no comma:</para>
-      <example xml:space="preserve">parameter1</example>
-      <para>will only set the value of the first parameter and will leave the second parameter at its default value.</para>
-      <para>Netperf has two types of command-line options.  The first are global command line options.  They are essentially any option not tied to a particular test or group of tests.  An example of a global command-line option is the one which sets the test type - <option>-t</option>.</para>
-      <para>The second type of options are test-specific options.  These are options which are only applicable to a particular test or set of tests.  An example of a test-specific option would be the send socket buffer size for a TCP_STREAM test.</para>
-      <para>Global command-line options are specified first with test-specific options following after a <code>--</code> as in:</para>
-      <example xml:space="preserve">netperf &lt;global&gt; -- &lt;test-specific&gt;</example>
-    </section>
-  </node>
-  <node>
-    <nodename>Installing Netperf</nodename>
-    <nodenext>The Design of Netperf</nodenext>
-    <nodeprev>Introduction</nodeprev>
-    <nodeup>Top</nodeup>
-    <chapter>
-      <title>Installing Netperf</title>
-      <para><indexterm index="cp">Installation</indexterm> Netperf's primary form of distribution is source code.  This allows installation on systems other than those to which the authors have ready access and thus the ability to create binaries.  There are two styles of netperf installation.  The first runs the netperf server program - netserver - as a child of inetd.  This requires the installer to have sufficient privileges to edit the files <file>/etc/services</file> and <file>/etc/inetd.conf</file> or their platform-specific equivalents.</para>
-      <para>The second style is to run netserver as a standalone daemon.  This second method does not require edit privileges on <file>/etc/services</file> and <file>/etc/inetd.conf</file> but does mean you must remember to run the netserver program explicitly after every system reboot.</para>
-      <para>This manual assumes that those wishing to measure networking performance already know how to use anonymous FTP and/or a web browser. It is also expected that you have at least a passing familiarity with the networking protocols and interfaces involved. In all honesty, if you do not have such familiarity, likely as not you have some experience to gain before attempting network performance measurements.  The excellent texts by authors such as Stevens, Fenner and Rudoff and/or Stallings would be good starting points. There are likely other excellent sources out there as well.</para>
-      <menu>
-        <menuentry>
-          <menunode>Getting Netperf Bits</menunode>
-          <menutitle>Getting Netperf Bits</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-        <menuentry>
-          <menunode>Installing Netperf Bits</menunode>
-          <menutitle>Installing Netperf Bits</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-        <menuentry>
-          <menunode>Verifying Installation</menunode>
-          <menutitle>Verifying Installation</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-      </menu>
-    </chapter>
-  </node>
-  <node>
-    <nodename>Getting Netperf Bits</nodename>
-    <nodenext>Installing Netperf Bits</nodenext>
-    <nodeprev>Installing Netperf</nodeprev>
-    <nodeup>Installing Netperf</nodeup>
-    <section>
-      <title>Getting Netperf Bits</title>
-      <para>Gzipped tar files of netperf sources can be retrieved via <uref><urefurl>ftp://ftp.netperf.org/netperf</urefurl><urefdesc>anonymous FTP</urefdesc></uref> for &ldquo;released&rdquo; versions of the bits.  Pre-release versions of the bits can be retrieved via anonymous FTP from the <uref><urefurl>ftp://ftp.netperf.org/netperf/experimental</urefurl><urefdesc>experimental</urefdesc></uref> subdirectory.</para>
-      <para>For convenience and ease of remembering, a link to the download site is provided via the <uref><urefurl>http://www.netperf.org/</urefurl><urefdesc>NetperfPage</urefdesc></uref></para>
-      <para>The bits corresponding to each discrete release of netperf are <uref><urefurl>http://www.netperf.org/svn/netperf2/tags</urefurl><urefdesc>tagged</urefdesc></uref> for retrieval via subversion.  For example, there is a tag for the first version corresponding to this version of the manual - <uref><urefurl>http://www.netperf.org/svn/netperf2/tags/netperf-2.5.0</urefurl><urefdesc>netperf 2.5.0</urefdesc></uref>.  Those wishing to be on the bleeding edge of netperf development can use subversion to grab the <uref><urefurl>http://www.netperf.org/svn/netperf2/trunk</urefurl><urefdesc>top of trunk</urefdesc></uref>.  When fixing bugs or making enhancements, patches against the top-of-trunk are preferred.</para>
-      <para>There are likely other places around the Internet from which one can download netperf bits.  These may be simple mirrors of the main netperf site, or they may be local variants on netperf.  As with anything one downloads from the Internet, take care to make sure it is what you really wanted and isn't some malicious Trojan or whatnot. Caveat downloader.</para>
-      <para>As a general rule, binaries of netperf and netserver are not distributed from ftp.netperf.org.  From time to time a kind soul or souls has packaged netperf as a Debian package available via the apt-get mechanism or as an RPM.  I would be most interested in learning how to enhance the makefiles to make that easier for people.</para>
-    </section>
-  </node>
-  <node>
-    <nodename>Installing Netperf Bits</nodename>
-    <nodenext>Verifying Installation</nodenext>
-    <nodeprev>Getting Netperf Bits</nodeprev>
-    <nodeup>Installing Netperf</nodeup>
-    <section>
-      <title>Installing Netperf</title>
-      <para>Once you have downloaded the tar file of netperf sources onto your system(s), it is necessary to unpack the tar file, cd to the netperf directory, run configure and then make.  Most of the time it should be sufficient to just:</para>
-      <example xml:space="preserve">gzcat netperf-&lt;version&gt;.tar.gz | tar xf -
-cd netperf-&lt;version&gt;
-./configure
-make
-make install</example>
-      <para>Most of the &ldquo;usual&rdquo; configure script options should be present dealing with where to install binaries and whatnot.</para>
-      <example xml:space="preserve">./configure --help</example>
-      <para>should list all of those and more.  You may find the <code>--prefix</code> option helpful in deciding where the binaries and such will be put during the <code>make install</code>.</para>
-      <para><indexterm index="vr">&ndash;enable-cpuutil, Configure</indexterm>If the netperf configure script does not know how to automagically detect which CPU utilization mechanism to use on your platform you may want to add a <code>--enable-cpuutil=mumble</code> option to the configure command.   If you have knowledge and/or experience to contribute to that area, feel free to contact <email><emailaddress>netperf-feedback@netperf.org</emailaddress></email>.</para>
-      <para><indexterm index="vr">&ndash;enable-xti, Configure</indexterm><indexterm index="vr">&ndash;enable-unixdomain, Configure</indexterm><indexterm index="vr">&ndash;enable-dlpi, Configure</indexterm><indexterm index="vr">&ndash;enable-sctp, Configure</indexterm>Similarly, if you want tests using the XTI interface, Unix Domain Sockets, DLPI or SCTP it will be necessary to add one or more <code>--enable-[xti|unixdomain|dlpi|sctp]=yes</code> options to the configure command.  As of this writing, the configure script will not include those tests automagically.</para>
-      <para><indexterm index="vr">&ndash;enable-omni, Configure</indexterm>Starting with version 2.5.0, netperf is migrating most of the &ldquo;classic&rdquo; netperf tests found in <file>src/nettest_bsd.c</file> to the so-called &ldquo;omni&rdquo; tests (aka &ldquo;two routines to run them all&rdquo;) found in <file>src/nettest_omni.c</file>.  This migration enables a number of new features such as greater control over what output is included, and new things to output.  The &ldquo;omni&rdquo; test is enabled by default in 2.5.0 and a number of the classic tests are migrated - you can tell if a test has been migrated from the presence of <code>MIGRATED</code> in the test banner.  If you encounter problems with either the omni or migrated tests, please first attempt to obtain resolution via <email><emailaddress>netperf-talk@netperf.org</emailaddress></email> or <email><emailaddress>netperf-feedback@netperf.org</emailaddress></email>.  If that is unsuccessful, you can add a <code>--enable-omni=no</code> to the configure command and the omni tests will not be compiled-in and the classic tests will not be migrated.</para>
-      <para>Starting with version 2.5.0, netperf will include the &ldquo;burst mode&rdquo; functionality in a default compilation of the bits.  If you encounter problems with this, please first attempt to obtain help via <email><emailaddress>netperf-talk@netperf.org</emailaddress></email> or <email><emailaddress>netperf-feedback@netperf.org</emailaddress></email>.  If that is unsuccessful, you can add a <code>--enable-burst=no</code> to the configure command and the burst mode functionality will not be compiled-in.</para>
-      <para>On some platforms, it may be necessary to precede the configure command with a CFLAGS and/or LIBS variable as the netperf configure script is not yet smart enough to set them itself.  Whenever possible, these requirements will be found in <file>README.<var>platform</var></file> files. Expertise and assistance in making that more automagic in the configure script would be most welcome.</para>
-      <para><indexterm index="cp">Limiting Bandwidth</indexterm><indexterm index="cp">Bandwidth Limitation</indexterm><indexterm index="vr">&ndash;enable-intervals, Configure</indexterm><indexterm index="vr">&ndash;enable-histogram, Configure</indexterm>Other optional configure-time settings include <code>--enable-intervals=yes</code> to give netperf the ability to &ldquo;pace&rdquo; its _STREAM tests and <code>--enable-histogram=yes</code> to have netperf keep a histogram of interesting times.  Each of these will have some effect on the measured result.  If your system supports <code>gethrtime()</code> the effect of the histogram measurement should be minimized but probably still measurable.  For example, the histogram of a netperf TCP_RR test will be of the individual transaction times:</para>
-      <example xml:space="preserve">netperf -t TCP_RR -H lag -v 2
-TCP REQUEST/RESPONSE TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to lag.hpl.hp.com (15.4.89.214) port 0 AF_INET : histogram
-Local /Remote
-Socket Size   Request  Resp.   Elapsed  Trans.
-Send   Recv   Size     Size    Time     Rate
-bytes  Bytes  bytes    bytes   secs.    per sec
-
-16384  87380  1        1       10.00    3538.82
-32768  32768
-Alignment      Offset
-Local  Remote  Local  Remote
-Send   Recv    Send   Recv
-    8      0       0      0
-Histogram of request/response times
-UNIT_USEC     :    0:    0:    0:    0:    0:    0:    0:    0:    0:    0
-TEN_USEC      :    0:    0:    0:    0:    0:    0:    0:    0:    0:    0
-HUNDRED_USEC  :    0: 34480:  111:   13:   12:    6:    9:    3:    4:    7
-UNIT_MSEC     :    0:   60:   50:   51:   44:   44:   72:  119:  100:  101
-TEN_MSEC      :    0:  105:    0:    0:    0:    0:    0:    0:    0:    0
-HUNDRED_MSEC  :    0:    0:    0:    0:    0:    0:    0:    0:    0:    0
-UNIT_SEC      :    0:    0:    0:    0:    0:    0:    0:    0:    0:    0
-TEN_SEC       :    0:    0:    0:    0:    0:    0:    0:    0:    0:    0
-&gt;100_SECS: 0
-HIST_TOTAL:      35391</example>
-      <para>The histogram you see above is basically a base-10 log histogram where we can see that most of the transaction times were on the order of one hundred to one-hundred, ninety-nine microseconds, but they were occasionally as long as ten to nineteen milliseconds</para>
-      <para>The <option>--enable-demo=yes</option> configure option will cause code to be included to report interim results during a test run.  The rate at which interim results are reported can then be controlled via the global <option>-D</option> option.  Here is an example of <option>-D</option> output:</para>
-      <example xml:space="preserve">$ src/netperf -D 1.35 -H tardy.hpl.hp.com -f M
-MIGRATED TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to tardy.hpl.hp.com (15.9.116.144) port 0 AF_INET : demo
-Interim result:    5.41 MBytes/s over 1.35 seconds ending at 1308789765.848
-Interim result:   11.07 MBytes/s over 1.36 seconds ending at 1308789767.206
-Interim result:   16.00 MBytes/s over 1.36 seconds ending at 1308789768.566
-Interim result:   20.66 MBytes/s over 1.36 seconds ending at 1308789769.922
-Interim result:   22.74 MBytes/s over 1.36 seconds ending at 1308789771.285
-Interim result:   23.07 MBytes/s over 1.36 seconds ending at 1308789772.647
-Interim result:   23.77 MBytes/s over 1.37 seconds ending at 1308789774.016
-Recv   Send    Send
-Socket Socket  Message  Elapsed
-Size   Size    Size     Time     Throughput
-bytes  bytes   bytes    secs.    MBytes/sec
-
- 87380  16384  16384    10.06      17.81</example>
-      <para>Notice how the units of the interim result track that requested by the <option>-f</option> option.  Also notice that sometimes the interval will be longer than the value specified in the <option>-D</option> option.  This is normal and stems from how demo mode is implemented not by relying on interval timers or frequent calls to get the current time, but by calculating how many units of work must be performed to take at least the desired interval.</para>
-      <para>Those familiar with this option in earlier versions of netperf will note the addition of the &ldquo;ending at&rdquo; text.  This is the time as reported by a <code>gettimeofday()</code> call (or its emulation) with a <code>NULL</code> timezone pointer.  This addition is intended to make it easier to insert interim results into an <uref><urefurl>http://oss.oetiker.ch/rrdtool/doc/rrdtool.en.html</urefurl><urefdesc>rrdtool</urefdesc></uref> Round-Robin Database (RRD).  A likely bug-riddled example of doing so can be found in <file>doc/examples/netperf_interim_to_rrd.sh</file>.  The time is reported out to milliseconds rather than microseconds because that is the most rrdtool understands as of the time of this writing.</para>
-      <para>As of this writing, a <code>make install</code> will not actually update the files <file>/etc/services</file> and/or <file>/etc/inetd.conf</file> or their platform-specific equivalents.  It remains necessary to perform that bit of installation magic by hand.  Patches to the makefile sources to effect an automagic editing of the necessary files to have netperf installed as a child of inetd would be most welcome.</para>
-      <para>Starting the netserver as a standalone daemon should be as easy as:</para>
-      <example xml:space="preserve">$ netserver
-Starting netserver at port 12865
-Starting netserver at hostname 0.0.0.0 port 12865 and family 0</example>
-      <para>Over time the specifics of the messages netserver prints to the screen may change but the gist will remain the same.</para>
-      <para>If the compilation of netperf or netserver happens to fail, feel free to contact <email><emailaddress>netperf-feedback@netperf.org</emailaddress></email> or join and ask in <email><emailaddress>netperf-talk@netperf.org</emailaddress></email>.  However, it is quite important that you include the actual compilation errors and perhaps even the configure log in your email.  Otherwise, it will be that much more difficult for someone to assist you.</para>
-    </section>
-  </node>
-  <node>
-    <nodename>Verifying Installation</nodename>
-    <nodeprev>Installing Netperf Bits</nodeprev>
-    <nodeup>Installing Netperf</nodeup>
-    <section>
-      <title>Verifying Installation</title>
-      <para>Basically, once netperf is installed and netserver is configured as a child of inetd, or launched as a standalone daemon, simply typing:</para>
-      <example xml:space="preserve">netperf</example>
-      <para>should result in output similar to the following:</para>
-      <example xml:space="preserve">$ netperf
-TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to localhost.localdomain (127.0.0.1) port 0 AF_INET
-Recv   Send    Send
-Socket Socket  Message  Elapsed
-Size   Size    Size     Time     Throughput
-bytes  bytes   bytes    secs.    10^6bits/sec
-
- 87380  16384  16384    10.00    2997.84</example>
-    </section>
-  </node>
-  <node>
-    <nodename>The Design of Netperf</nodename>
-    <nodenext>Global Command-line Options</nodenext>
-    <nodeprev>Installing Netperf</nodeprev>
-    <nodeup>Top</nodeup>
-    <chapter>
-      <title>The Design of Netperf</title>
-      <para><indexterm index="cp">Design of Netperf</indexterm> Netperf is designed around a basic client-server model.  There are two executables - netperf and netserver.  Generally you will only execute the netperf program, with the netserver program being invoked by the remote system's inetd or having been previously started as its own standalone daemon.</para>
-      <para>When you execute netperf it will establish a &ldquo;control connection&rdquo; to the remote system.  This connection will be used to pass test configuration information and results to and from the remote system. Regardless of the type of test to be run, the control connection will be a TCP connection using BSD sockets.  The control connection can use either IPv4 or IPv6.</para>
-      <para>Once the control connection is up and the configuration information has been passed, a separate &ldquo;data&rdquo; connection will be opened for the measurement itself using the API's and protocols appropriate for the specified test.  When the test is completed, the data connection will be torn-down and results from the netserver will be passed-back via the control connection and combined with netperf's result for display to the user.</para>
-      <para>Netperf places no traffic on the control connection while a test is in progress.  Certain TCP options, such as SO_KEEPALIVE, if set as your systems' default, may put packets out on the control connection while a test is in progress.  Generally speaking this will have no effect on the results.</para>
-      <menu>
-        <menuentry>
-          <menunode>CPU Utilization</menunode>
-          <menutitle>CPU Utilization</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-      </menu>
-    </chapter>
-  </node>
-  <node>
-    <nodename>CPU Utilization</nodename>
-    <nodeprev>The Design of Netperf</nodeprev>
-    <nodeup>The Design of Netperf</nodeup>
-    <section>
-      <title>CPU Utilization</title>
-      <para><indexterm index="cp">CPU Utilization</indexterm> CPU utilization is an important, and alas all-too infrequently reported component of networking performance.  Unfortunately, it can be one of the most difficult metrics to measure accurately and portably.  Netperf will do its level best to report accurate CPU utilization figures, but some combinations of processor, OS and configuration may make that difficult.</para>
-      <para>CPU utilization in netperf is reported as a value between 0 and 100% regardless of the number of CPUs involved.  In addition to CPU utilization, netperf will report a metric called a <dfn>service demand</dfn>.  The service demand is the normalization of CPU utilization and work performed.  For a _STREAM test it is the microseconds of CPU time consumed to transfer on KB (K == 1024) of data.  For a _RR test it is the microseconds of CPU time consumed processing a single transaction.   For both CPU utilization and service demand, lower is better.</para>
-      <para>Service demand can be particularly useful when trying to gauge the effect of a performance change.  It is essentially a measure of efficiency, with smaller values being more efficient and thus &ldquo;better.&rdquo;</para>
-      <para>Netperf is coded to be able to use one of several, generally platform-specific CPU utilization measurement mechanisms.  Single letter codes will be included in the CPU portion of the test banner to indicate which mechanism was used on each of the local (netperf) and remote (netserver) system.</para>
-      <para>As of this writing those codes are:</para>
-      <table>
-        <tableitem>
-          <tableterm><code>U</code></tableterm>
-          <item>
-            <para>The CPU utilization measurement mechanism was unknown to netperf or netperf/netserver was not compiled to include CPU utilization measurements. The code for the null CPU utilization mechanism can be found in <file>src/netcpu_none.c</file>.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>I</code></tableterm>
-          <item>
-            <para>An HP-UX-specific CPU utilization mechanism whereby the kernel incremented a per-CPU counter by one for each trip through the idle loop. This mechanism was only available on specially-compiled HP-UX kernels prior to HP-UX 10 and is mentioned here only for the sake of historical completeness and perhaps as a suggestion to those who might be altering other operating systems. While rather simple, perhaps even simplistic, this mechanism was quite robust and was not affected by the concerns of statistical methods, or methods attempting to track time in each of user, kernel, interrupt and idle modes which require quite careful accounting.  It can be thought-of as the in-kernel version of the looper <code>L</code> mechanism without the context switch overhead. This mechanism required calibration.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>P</code></tableterm>
-          <item>
-            <para>An HP-UX-specific CPU utilization mechanism whereby the kernel keeps-track of time (in the form of CPU cycles) spent in the kernel idle loop (HP-UX 10.0 to 11.31 inclusive), or where the kernel keeps track of time spent in idle, user, kernel and interrupt processing (HP-UX 11.23 and later).  The former requires calibration, the latter does not.  Values in either case are retrieved via one of the pstat(2) family of calls, hence the use of the letter <code>P</code>.  The code for these mechanisms is found in <file>src/netcpu_pstat.c</file> and <file>src/netcpu_pstatnew.c</file> respectively.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>K</code></tableterm>
-          <item>
-            <para>A Solaris-specific CPU utilization mechanism whereby the kernel keeps track of ticks (eg HZ) spent in the idle loop.  This method is statistical and is known to be inaccurate when the interrupt rate is above epsilon as time spent processing interrupts is not subtracted from idle.  The value is retrieved via a kstat() call - hence the use of the letter <code>K</code>.  Since this mechanism uses units of ticks (HZ) the calibration value should invariably match HZ. (Eg 100) The code for this mechanism is implemented in <file>src/netcpu_kstat.c</file>.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>M</code></tableterm>
-          <item>
-            <para>A Solaris-specific mechanism available on Solaris 10 and latter which uses the new microstate accounting mechanisms.  There are two, alas, overlapping, mechanisms.  The first tracks nanoseconds spent in user, kernel, and idle modes. The second mechanism tracks nanoseconds spent in interrupt.  Since the mechanisms overlap, netperf goes through some hand-waving to try to &ldquo;fix&rdquo; the problem.  Since the accuracy of the handwaving cannot be completely determined, one must presume that while better than the <code>K</code> mechanism, this mechanism too is not without issues.  The values are retrieved via kstat() calls, but the letter code is set to <code>M</code> to distinguish this mechanism from the even less accurate <code>K</code> mechanism.  The code for this mechanism is implemented in <file>src/netcpu_kstat10.c</file>.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>L</code></tableterm>
-          <item>
-            <para>A mechanism based on &ldquo;looper&rdquo;or &ldquo;soaker&rdquo; processes which sit in tight loops counting as fast as they possibly can. This mechanism starts a looper process for each known CPU on the system.  The effect of processor hyperthreading on the mechanism is not yet known.  This mechanism definitely requires calibration.  The code for the &ldquo;looper&rdquo;mechanism can be found in <file>src/netcpu_looper.c</file></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>N</code></tableterm>
-          <item>
-            <para>A Microsoft Windows-specific mechanism, the code for which can be found in <file>src/netcpu_ntperf.c</file>.  This mechanism too is based on what appears to be a form of micro-state accounting and requires no calibration.  On laptops, or other systems which may dynamically alter the CPU frequency to minimize power consumption, it has been suggested that this mechanism may become slightly confused, in which case using BIOS/uEFI settings to disable the power saving would be indicated.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>S</code></tableterm>
-          <item>
-            <para>This mechanism uses <file>/proc/stat</file> on Linux to retrieve time (ticks) spent in idle mode.  It is thought but not known to be reasonably accurate.  The code for this mechanism can be found in <file>src/netcpu_procstat.c</file>.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>C</code></tableterm>
-          <item>
-            <para>A mechanism somewhat similar to <code>S</code> but using the sysctl() call on BSD-like Operating systems (*BSD and MacOS X).  The code for this mechanism can be found in <file>src/netcpu_sysctl.c</file>.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>Others</code></tableterm>
-          <item>
-            <para>Other mechanisms included in netperf in the past have included using the times() and getrusage() calls.  These calls are actually rather poorly suited to the task of measuring CPU overhead for networking as they tend to be process-specific and much network-related processing can happen outside the context of a process, in places where it is not a given it will be charged to the correct, or even a process.  They are mentioned here as a warning to anyone seeing those mechanisms used in other networking benchmarks.  These mechanisms are not available in netperf 2.4.0 and later.</para>
-          </item>
-        </tableitem>
-      </table>
-      <para>For many platforms, the configure script will chose the best available CPU utilization mechanism.  However, some platforms have no particularly good mechanisms.  On those platforms, it is probably best to use the &ldquo;LOOPER&rdquo; mechanism which is basically some number of processes (as many as there are processors) sitting in tight little loops counting as fast as they can.  The rate at which the loopers count when the system is believed to be idle is compared with the rate when the system is running netperf and the ratio is used to compute CPU utilization.</para>
-      <para>In the past, netperf included some mechanisms that only reported CPU time charged to the calling process.  Those mechanisms have been removed from netperf versions 2.4.0 and later because they are hopelessly inaccurate.  Networking can and often results in CPU time being spent in places - such as interrupt contexts - that do not get charged to a or the correct process.</para>
-      <para>In fact, time spent in the processing of interrupts is a common issue for many CPU utilization mechanisms.  In particular, the &ldquo;PSTAT&rdquo; mechanism was eventually known to have problems accounting for certain interrupt time prior to HP-UX 11.11 (11iv1).  HP-UX 11iv2 and later are known/presumed to be good. The &ldquo;KSTAT&rdquo; mechanism is known to have problems on all versions of Solaris up to and including Solaris 10.  Even the microstate accounting available via kstat in Solaris 10 has issues, though perhaps not as bad as those of prior versions.</para>
-      <para>The /proc/stat mechanism under Linux is in what the author would consider an &ldquo;uncertain&rdquo; category as it appears to be statistical, which may also have issues with time spent processing interrupts.</para>
-      <para>In summary, be sure to &ldquo;sanity-check&rdquo; the CPU utilization figures with other mechanisms.  However, platform tools such as top, vmstat or mpstat are often based on the same mechanisms used by netperf.</para>
-      <menu>
-        <menuentry>
-          <menunode>CPU Utilization in a Virtual Guest</menunode>
-          <menutitle>CPU Utilization in a Virtual Guest</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-      </menu>
-    </section>
-  </node>
-  <node>
-    <nodename>CPU Utilization in a Virtual Guest</nodename>
-    <nodeprev>CPU Utilization</nodeprev>
-    <nodeup>CPU Utilization</nodeup>
-    <subsection>
-      <title>CPU Utilization in a Virtual Guest</title>
-      <para>The CPU utilization mechanisms used by netperf are &ldquo;inline&rdquo; in that they are run by the same netperf or netserver process as is running the test itself.  This works just fine for &ldquo;bare iron&rdquo; tests but runs into a problem when using virtual machines.</para>
-      <para>The relationship between virtual guest and hypervisor can be thought of as being similar to that between a process and kernel in a bare iron system.  As such, (m)any CPU utilization mechanisms used in the virtual guest are similar to &ldquo;process-local&rdquo; mechanisms in a bare iron situation.  However, just as with bare iron and process-local mechanisms, much networking processing happens outside the context of the virtual guest.  It takes place in the hypervisor, and is not visible to mechanisms running in the guest(s).  For this reason, one should not really trust CPU utilization figures reported by netperf or netserver when running in a virtual guest.</para>
-      <para>If one is looking to measure the added overhead of a virtualization mechanism, rather than rely on CPU utilization, one can rely instead on netperf _RR tests - path-lengths and overheads can be a significant fraction of the latency, so increases in overhead should appear as decreases in transaction rate.  Whatever you do, <b>DO NOT</b> rely on the throughput of a _STREAM test.  Achieving link-rate can be done via a multitude of options that mask overhead rather than eliminate it.</para>
-    </subsection>
-  </node>
-  <node>
-    <nodename>Global Command-line Options</nodename>
-    <nodenext>Using Netperf to Measure Bulk Data Transfer</nodenext>
-    <nodeprev>The Design of Netperf</nodeprev>
-    <nodeup>Top</nodeup>
-    <chapter>
-      <title>Global Command-line Options</title>
-      <para>This section describes each of the global command-line options available in the netperf and netserver binaries.  Essentially, it is an expanded version of the usage information displayed by netperf or netserver when invoked with the <option>-h</option> global command-line option.</para>
-      <menu>
-        <menuentry>
-          <menunode>Command-line Options Syntax</menunode>
-          <menutitle>Command-line Options Syntax</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-        <menuentry>
-          <menunode>Global Options</menunode>
-          <menutitle>Global Options</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-      </menu>
-    </chapter>
-  </node>
-  <node>
-    <nodename>Command-line Options Syntax</nodename>
-    <nodenext>Global Options</nodenext>
-    <nodeprev>Global Command-line Options</nodeprev>
-    <nodeup>Global Command-line Options</nodeup>
-<!-- node-name,  next,  previous,  up -->
-    <section>
-      <title>Command-line Options Syntax</title>
-      <para>Revision 1.8 of netperf introduced enough new functionality to overrun the English alphabet for mnemonic command-line option names, and the author was not and is not quite ready to switch to the contemporary <option>--mumble</option> style of command-line options. (Call him a Luddite if you wish :).</para>
-      <para>For this reason, the command-line options were split into two parts - the first are the global command-line options.  They are options that affect nearly any and every test type of netperf.  The second type are the test-specific command-line options.  Both are entered on the same command line, but they must be separated from one another by a <code>--</code> for correct parsing.  Global command-line options come first, followed by the <code>--</code> and then test-specific command-line options.  If there are no test-specific options to be set, the <code>--</code> may be omitted.  If there are no global command-line options to be set, test-specific options must still be preceded by a <code>--</code>.  For example:</para>
-      <example xml:space="preserve">netperf &lt;global&gt; -- &lt;test-specific&gt;</example>
-      <para>sets both global and test-specific options:</para>
-      <example xml:space="preserve">netperf &lt;global&gt;</example>
-      <para>sets just global options and:</para>
-      <example xml:space="preserve">netperf -- &lt;test-specific&gt;</example>
-      <para>sets just test-specific options.</para>
-    </section>
-  </node>
-  <node>
-    <nodename>Global Options</nodename>
-    <nodeprev>Command-line Options Syntax</nodeprev>
-    <nodeup>Global Command-line Options</nodeup>
-<!-- node-name,  next,  previous,  up -->
-    <section>
-      <title>Global Options</title>
-      <table><indexterm index="vr">-a, Global</indexterm>
-        <tableitem>
-          <tableterm><code>-a &lt;sizespec&gt;</code></tableterm>
-          <item>
-            <para>This option allows you to alter the alignment of the buffers used in the sending and receiving calls on the local system.. Changing the alignment of the buffers can force the system to use different copy schemes, which can have a measurable effect on performance.  If the page size for the system were 4096 bytes, and you want to pass page-aligned buffers beginning on page boundaries, you could use <samp>-a 4096</samp>.  By default the units are bytes, but suffix of &ldquo;G,&rdquo; &ldquo;M,&rdquo; or &ldquo;K&rdquo; will specify the units to be 2^30 (GB), 2^20 (MB) or 2^10 (KB) respectively. A suffix of &ldquo;g,&rdquo; &ldquo;m&rdquo; or &ldquo;k&rdquo; will specify units of 10^9, 10^6 or 10^3 bytes respectively. [Default: 8 bytes]</para>
-            <para><indexterm index="vr">-A, Global</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-A &lt;sizespec&gt;</code></tableterm>
-          <item>
-            <para>This option is identical to the <option>-a</option> option with the difference being it affects alignments for the remote system.</para>
-            <para><indexterm index="vr">-b, Global</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-b &lt;size&gt;</code></tableterm>
-          <item>
-            <para>This option is only present when netperf has been configure with &ndash;enable-intervals=yes prior to compilation.  It sets the size of the burst of send calls in a _STREAM test.  When used in conjunction with the <option>-w</option> option it can cause the rate at which data is sent to be &ldquo;paced.&rdquo;</para>
-            <para><indexterm index="vr">-B, Global</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-B &lt;string&gt;</code></tableterm>
-          <item>
-            <para>This option will cause <option>&lt;string&gt;</option> to be appended to the brief (see -P) output of netperf.</para>
-            <para><indexterm index="vr">-c, Global</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-c [rate]</code></tableterm>
-          <item>
-            <para>This option will ask that CPU utilization and service demand be calculated for the local system.  For those CPU utilization mechanisms requiring calibration, the options rate parameter may be specified to preclude running another calibration step, saving 40 seconds of time. For those CPU utilization mechanisms requiring no calibration, the optional rate parameter will be utterly and completely ignored. [Default: no CPU measurements]</para>
-            <para><indexterm index="vr">-C, Global</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-C [rate]</code></tableterm>
-          <item>
-            <para>This option requests CPU utilization and service demand calculations for the remote system.  It is otherwise identical to the <option>-c</option> option.</para>
-            <para><indexterm index="vr">-d, Global</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-d</code></tableterm>
-          <item>
-            <para>Each instance of this option will increase the quantity of debugging output displayed during a test.  If the debugging output level is set high enough, it may have a measurable effect on performance. Debugging information for the local system is printed to stdout. Debugging information for the remote system is sent by default to the file <file>/tmp/netperf.debug</file>. [Default: no debugging output]</para>
-            <para><indexterm index="vr">-D, Global</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-D [interval,units]</code></tableterm>
-          <item>
-            <para>This option is only available when netperf is configured with &ndash;enable-demo=yes.  When set, it will cause netperf to emit periodic reports of performance during the run.  [<var>interval</var>,<var>units</var>] follow the semantics of an optionspec. If specified, <var>interval</var> gives the minimum interval in real seconds, it does not have to be whole seconds.  The <var>units</var> value can be used for the first guess as to how many units of work (bytes or transactions) must be done to take at least <var>interval</var> seconds. If omitted, <var>interval</var> defaults to one second and <var>units</var> to values specific to each test type.</para>
-            <para><indexterm index="vr">-f, Global</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-f G|M|K|g|m|k|x</code></tableterm>
-          <item>
-            <para>This option can be used to change the reporting units for _STREAM tests.  Arguments of &ldquo;G,&rdquo; &ldquo;M,&rdquo; or &ldquo;K&rdquo; will set the units to 2^30, 2^20 or 2^10 bytes/s respectively (EG power of two GB, MB or KB).  Arguments of &ldquo;g,&rdquo; &ldquo;,m&rdquo; or &ldquo;k&rdquo; will set the units to 10^9, 10^6 or 10^3 bits/s respectively.  An argument of &ldquo;x&rdquo; requests the units be transactions per second and is only meaningful for a request-response test. [Default: &ldquo;m&rdquo; or 10^6 bits/s]</para>
-            <para><indexterm index="vr">-F, Global</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-F &lt;fillfile&gt;</code></tableterm>
-          <item>
-            <para>This option specified the file from which send which buffers will be pre-filled .  While the buffers will contain data from the specified file, the file is not fully transferred to the remote system as the receiving end of the test will not write the contents of what it receives to a file.  This can be used to pre-fill the send buffers with data having different compressibility and so is useful when measuring performance over mechanisms which perform compression.</para>
-            <para>While previously required for a TCP_SENDFILE test, later versions of netperf removed that restriction, creating a temporary file as needed.  While the author cannot recall exactly when that took place, it is known to be unnecessary in version 2.5.0 and later.</para>
-            <para><indexterm index="vr">-h, Global</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-h</code></tableterm>
-          <item>
-            <para>This option causes netperf to display its &ldquo;global&rdquo; usage string and exit to the exclusion of all else.</para>
-            <para><indexterm index="vr">-H, Global</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-H &lt;optionspec&gt;</code></tableterm>
-          <item>
-            <para>This option will set the name of the remote system and or the address family used for the control connection.  For example:</para>
-            <example xml:space="preserve">-H linger,4</example>
-            <para>will set the name of the remote system to &ldquo;linger&rdquo; and tells netperf to use IPv4 addressing only.</para>
-            <example xml:space="preserve">-H ,6</example>
-            <para>will leave the name of the remote system at its default, and request that only IPv6 addresses be used for the control connection.</para>
-            <example xml:space="preserve">-H lag</example>
-            <para>will set the name of the remote system to &ldquo;lag&rdquo; and leave the address family to AF_UNSPEC which means selection of IPv4 vs IPv6 is left to the system's address resolution.</para>
-            <para>A value of &ldquo;inet&rdquo; can be used in place of &ldquo;4&rdquo; to request IPv4 only addressing.  Similarly, a value of &ldquo;inet6&rdquo; can be used in place of &ldquo;6&rdquo; to request IPv6 only addressing.  A value of &ldquo;0&rdquo; can be used to request either IPv4 or IPv6 addressing as name resolution dictates.</para>
-            <para>By default, the options set with the global <option>-H</option> option are inherited by the test for its data connection, unless a test-specific <option>-H</option> option is specified.</para>
-            <para>If a <option>-H</option> option follows either the <option>-4</option> or <option>-6</option> options, the family setting specified with the -H option will override the <option>-4</option> or <option>-6</option> options for the remote address family. If no address family is specified, settings from a previous <option>-4</option> or <option>-6</option> option will remain.  In a nutshell, the last explicit global command-line option wins.</para>
-            <para>[Default:  &ldquo;localhost&rdquo; for the remote name/IP address and &ldquo;0&rdquo; (eg AF_UNSPEC) for the remote address family.]</para>
-            <para><indexterm index="vr">-I, Global</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-I &lt;optionspec&gt;</code></tableterm>
-          <item>
-            <para>This option enables the calculation of confidence intervals and sets the confidence and width parameters with the first half of the optionspec being either 99 or 95 for 99% or 95% confidence respectively.  The second value of the optionspec specifies the width of the desired confidence interval.  For example</para>
-            <example xml:space="preserve">-I 99,5</example>
-            <para>asks netperf to be 99% confident that the measured mean values for throughput and CPU utilization are within +/- 2.5% of the &ldquo;real&rdquo; mean values.  If the <option>-i</option> option is specified and the <option>-I</option> option is omitted, the confidence defaults to 99% and the width to 5% (giving +/- 2.5%)</para>
-            <para>If classic netperf test calculates that the desired confidence intervals have not been met, it emits a noticeable warning that cannot be suppressed with the <option>-P</option> or <option>-v</option> options:</para>
-            <example xml:space="preserve">netperf -H tardy.cup -i 3 -I 99,5
-TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to tardy.cup.hp.com (15.244.44.58) port 0 AF_INET : +/-2.5% &space;99% conf.
-!!! WARNING
-!!! Desired confidence was not achieved within the specified iterations.
-!!! This implies that there was variability in the test environment that
-!!! must be investigated before going further.
-!!! Confidence intervals: Throughput      :  6.8%
-!!!                       Local CPU util  :  0.0%
-!!!                       Remote CPU util :  0.0%
-
-Recv   Send    Send
-Socket Socket  Message  Elapsed
-Size   Size    Size     Time     Throughput
-bytes  bytes   bytes    secs.    10^6bits/sec
-
- 32768  16384  16384    10.01      40.23</example>
-            <para>In the example above we see that netperf did not meet the desired confidence intervals.  Instead of being 99% confident it was within +/- 2.5% of the real mean value of throughput it is only confident it was within +/-3.4%.  In this example, increasing the <option>-i</option> option (described below) and/or increasing the iteration length with the <option>-l</option> option might resolve the situation.</para>
-            <para>In an explicit &ldquo;omni&rdquo; test, failure to meet the confidence intervals will not result in netperf emitting a warning.  To verify the hitting, or not, of the confidence intervals one will need to include them as part of an <xref><xrefnodename>Omni Output Selection</xrefnodename><xrefinfoname>output selection</xrefinfoname></xref> in the test-specific <option>-o</option>, <option>-O</option> or <option>k</option> output selection options.  The warning about not hitting the confidence intervals will remain in a &ldquo;migrated&rdquo; classic netperf test.</para>
-            <para><indexterm index="vr">-i, Global</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-i &lt;sizespec&gt;</code></tableterm>
-          <item>
-            <para>This option enables the calculation of confidence intervals and sets the minimum and maximum number of iterations to run in attempting to achieve the desired confidence interval.  The first value sets the maximum number of iterations to run, the second, the minimum.  The maximum number of iterations is silently capped at 30 and the minimum is silently floored at 3.  Netperf repeats the measurement the minimum number of iterations and continues until it reaches either the desired confidence interval, or the maximum number of iterations, whichever comes first.  A classic or migrated netperf test will not display the actual number of iterations run. An <xref><xrefnodename>The Omni Tests</xrefnodename><xrefinfoname>omni test</xrefinfoname></xref> will emit the number of iterations run if the <code>CONFIDENCE_ITERATION</code> output selector is included in the <xref><xrefnodename>Omni Output Selection</xrefnodename><xrefinfoname>output selection</xrefinfoname></xref>.</para>
-            <para>If the <option>-I</option> option is specified and the <option>-i</option> option omitted the maximum number of iterations is set to 10 and the minimum to three.</para>
-            <para>Output of a warning upon not hitting the desired confidence intervals follows the description provided for the <option>-I</option> option.</para>
-            <para>The total test time will be somewhere between the minimum and maximum number of iterations multiplied by the test length supplied by the <option>-l</option> option.</para>
-            <para><indexterm index="vr">-j, Global</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-j</code></tableterm>
-          <item>
-            <para>This option instructs netperf to keep additional timing statistics when explicitly running an <xref><xrefnodename>The Omni Tests</xrefnodename><xrefinfoname>omni test</xrefinfoname></xref>.  These can be output when the test-specific <option>-o</option>, <option>-O</option> or <option>-k</option> <xref><xrefnodename>Omni Output Selectors</xrefnodename><xrefinfoname>output selectors</xrefinfoname></xref> include one or more of:</para>
-            <itemize>
-              <itemfunction>&bullet;</itemfunction>
-              <item>
-                <para>MIN_LATENCY</para>
-              </item>
-              <item>
-                <para>MAX_LATENCY</para>
-              </item>
-              <item>
-                <para>P50_LATENCY</para>
-              </item>
-              <item>
-                <para>P90_LATENCY</para>
-              </item>
-              <item>
-                <para>P99_LATENCY</para>
-              </item>
-              <item>
-                <para>MEAN_LATENCY</para>
-              </item>
-              <item>
-                <para>STDDEV_LATENCY</para>
-              </item>
-            </itemize>
-            <para>These statistics will be based on an expanded (100 buckets per row rather than 10) histogram of times rather than a terribly long list of individual times.  As such, there will be some slight error thanks to the bucketing. However, the reduction in storage and processing overheads is well worth it.  When running a request/response test, one might get some idea of the error by comparing the <xref><xrefnodename>Omni Output Selectors</xrefnodename><xrefinfoname><code>MEAN_LATENCY</code></xrefinfoname></xref> calculated from the histogram with the <code>RT_LATENCY</code> calculated from the number of request/response transactions and the test run time.</para>
-            <para>In the case of a request/response test the latencies will be transaction latencies.  In the case of a receive-only test they will be time spent in the receive call.  In the case of a send-only test they will be time spent in the send call. The units will be microseconds. Added in netperf 2.5.0.</para>
-            <para><indexterm index="vr">-l, Global</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-l testlen</code></tableterm>
-          <item>
-            <para>This option controls the length of any <b>one</b> iteration of the requested test.  A positive value for <var>testlen</var> will run each iteration of the test for at least <var>testlen</var> seconds.  A negative value for <var>testlen</var> will run each iteration for the absolute value of <var>testlen</var> transactions for a _RR test or bytes for a _STREAM test. Certain tests, notably those using UDP can only be timed, they cannot be limited by transaction or byte count.  This limitation may be relaxed in an <xref><xrefnodename>The Omni Tests</xrefnodename><xrefinfoname>omni</xrefinfoname></xref> test.</para>
-            <para>In some situations, individual iterations of a test may run for longer for the number of seconds specified by the <option>-l</option> option.  In particular, this may occur for those tests where the socket buffer size(s) are significantly longer than the bandwidthXdelay product of the link(s) over which the data connection passes, or those tests where there may be non-trivial numbers of retransmissions.</para>
-            <para>If confidence intervals are enabled via either <option>-I</option> or <option>-i</option> the total length of the netperf test will be somewhere between the minimum and maximum iteration count multiplied by <var>testlen</var>.</para>
-            <para><indexterm index="vr">-L, Global</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-L &lt;optionspec&gt;</code></tableterm>
-          <item>
-            <para>This option is identical to the <option>-H</option> option with the difference being it sets the _local_ hostname/IP and/or address family information.  This option is generally unnecessary, but can be useful when you wish to make sure that the netperf control and data connections go via different paths.  It can also come-in handy if one is trying to run netperf through those evil, end-to-end breaking things known as firewalls.</para>
-            <para>[Default: 0.0.0.0 (eg INADDR_ANY) for IPv4 and ::0 for IPv6 for the local name.  AF_UNSPEC for the local address family.]</para>
-            <para><indexterm index="vr">-n, Global</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-n numcpus</code></tableterm>
-          <item>
-            <para>This option tells netperf how many CPUs it should ass-u-me are active on the system running netperf.  In particular, this is used for the <xref><xrefnodename>CPU Utilization</xrefnodename><xrefinfoname>CPU utilization</xrefinfoname></xref> and service demand calculations. On certain systems, netperf is able to determine the number of CPU's automagically. This option will override any number netperf might be able to determine on its own.</para>
-            <para>Note that this option does _not_ set the number of CPUs on the system running netserver.  When netperf/netserver cannot automagically determine the number of CPUs that can only be set for netserver via a netserver <option>-n</option> command-line option.</para>
-            <para>As it is almost universally possible for netperf/netserver to determine the number of CPUs on the system automagically, 99 times out of 10 this option should not be necessary and may be removed in a future release of netperf.</para>
-            <para><indexterm index="vr">-N, Global</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-N</code></tableterm>
-          <item>
-            <para>This option tells netperf to forgo establishing a control connection. This makes it is possible to run some limited netperf tests without a corresponding netserver on the remote system.</para>
-            <para>With this option set, the test to be run is to get all the addressing information it needs to establish its data connection from the command line or internal defaults.  If not otherwise specified by test-specific command line options, the data connection for a &ldquo;STREAM&rdquo; or &ldquo;SENDFILE&rdquo; test will be to the &ldquo;discard&rdquo; port, an &ldquo;RR&rdquo; test will be to the &ldquo;echo&rdquo; port, and a &ldquo;MEARTS&rdquo; test will be to the chargen port.</para>
-            <para>The response size of an &ldquo;RR&rdquo; test will be silently set to be the same as the request size.  Otherwise the test would hang if the response size was larger than the request size, or would report an incorrect, inflated transaction rate if the response size was less than the request size.</para>
-            <para>Since there is no control connection when this option is specified, it is not possible to set &ldquo;remote&rdquo; properties such as socket buffer size and the like via the netperf command line. Nor is it possible to retrieve such interesting remote information as CPU utilization. These items will be displayed as values which should make it immediately obvious that was the case.</para>
-            <para>The only way to change remote characteristics such as socket buffer size or to obtain information such as CPU utilization is to employ platform-specific methods on the remote system.  Frankly, if one has access to the remote system to employ those methods one aught to be able to run a netserver there.  However, that ability may not be present in certain &ldquo;support&rdquo; situations, hence the addition of this option.</para>
-            <para>Added in netperf 2.4.3.</para>
-            <para><indexterm index="vr">-o, Global</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-o &lt;sizespec&gt;</code></tableterm>
-          <item>
-            <para>The value(s) passed-in with this option will be used as an offset added to the alignment specified with the <option>-a</option> option.  For example:</para>
-            <example xml:space="preserve">-o 3 -a 4096</example>
-            <para>will cause the buffers passed to the local (netperf) send and receive calls to begin three bytes past an address aligned to 4096 bytes. [Default: 0 bytes]</para>
-            <para><indexterm index="vr">-O, Global</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-O &lt;sizespec&gt;</code></tableterm>
-          <item>
-            <para>This option behaves just as the <option>-o</option> option but on the remote (netserver) system and in conjunction with the <option>-A</option> option. [Default: 0 bytes]</para>
-            <para><indexterm index="vr">-p, Global</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-p &lt;optionspec&gt;</code></tableterm>
-          <item>
-            <para>The first value of the optionspec passed-in with this option tells netperf the port number at which it should expect the remote netserver to be listening for control connections.  The second value of the optionspec will request netperf to bind to that local port number before establishing the control connection.  For example</para>
-            <example xml:space="preserve">-p 12345</example>
-            <para>tells netperf that the remote netserver is listening on port 12345 and leaves selection of the local port number for the control connection up to the local TCP/IP stack whereas</para>
-            <example xml:space="preserve">-p ,32109</example>
-            <para>leaves the remote netserver port at the default value of 12865 and causes netperf to bind to the local port number 32109 before connecting to the remote netserver.</para>
-            <para>In general, setting the local port number is only necessary when one is looking to run netperf through those evil, end-to-end breaking things known as firewalls.</para>
-            <para><indexterm index="vr">-P, Global</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-P 0|1</code></tableterm>
-          <item>
-            <para>A value of &ldquo;1&rdquo; for the <option>-P</option> option will enable display of the test banner.  A value of &ldquo;0&rdquo; will disable display of the test banner. One might want to disable display of the test banner when running the same basic test type (eg TCP_STREAM) multiple times in succession where the test banners would then simply be redundant and unnecessarily clutter the output. [Default: 1 - display test banners]</para>
-            <para><indexterm index="vr">-s, Global</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-s &lt;seconds&gt;</code></tableterm>
-          <item>
-            <para>This option will cause netperf to sleep <samp>&lt;seconds&gt;</samp> before actually transferring data over the data connection.  This may be useful in situations where one wishes to start a great many netperf instances and do not want the earlier ones affecting the ability of the later ones to get established.</para>
-            <para>Added somewhere between versions 2.4.3 and 2.5.0.</para>
-            <para><indexterm index="vr">-S, Global</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-S</code></tableterm>
-          <item>
-            <para>This option will cause an attempt to be made to set SO_KEEPALIVE on the data socket of a test using the BSD sockets interface.  The attempt will be made on the netperf side of all tests, and will be made on the netserver side of an <xref><xrefnodename>The Omni Tests</xrefnodename><xrefinfoname>omni</xrefinfoname></xref> or <xref><xrefnodename>Migrated Tests</xrefnodename><xrefinfoname>migrated</xrefinfoname></xref> test.  No indication of failure is given unless debug output is enabled with the global <option>-d</option> option.</para>
-            <para>Added in version 2.5.0.</para>
-            <para><indexterm index="vr">-t, Global</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-t testname</code></tableterm>
-          <item>
-            <para>This option is used to tell netperf which test you wish to run.  As of this writing, valid values for <var>testname</var> include:</para>
-            <itemize>
-              <itemfunction>&bullet;</itemfunction>
-              <item>
-                <para><xref><xrefnodename>TCP_STREAM</xrefnodename></xref>, <xref><xrefnodename>TCP_MAERTS</xrefnodename></xref>, <xref><xrefnodename>TCP_SENDFILE</xrefnodename></xref>, <xref><xrefnodename>TCP_RR</xrefnodename></xref>, <xref><xrefnodename>TCP_CRR</xrefnodename></xref>, <xref><xrefnodename>TCP_CC</xrefnodename></xref></para>
-              </item>
-              <item>
-                <para><xref><xrefnodename>UDP_STREAM</xrefnodename></xref>, <xref><xrefnodename>UDP_RR</xrefnodename></xref></para>
-              </item>
-              <item>
-                <para><xref><xrefnodename>XTI_TCP_STREAM</xrefnodename></xref>,  <xref><xrefnodename>XTI_TCP_RR</xrefnodename></xref>, <xref><xrefnodename>XTI_TCP_CRR</xrefnodename></xref>, <xref><xrefnodename>XTI_TCP_CC</xrefnodename></xref></para>
-              </item>
-              <item>
-                <para><xref><xrefnodename>XTI_UDP_STREAM</xrefnodename></xref>, <xref><xrefnodename>XTI_UDP_RR</xrefnodename></xref></para>
-              </item>
-              <item>
-                <para><xref><xrefnodename>SCTP_STREAM</xrefnodename></xref>, <xref><xrefnodename>SCTP_RR</xrefnodename></xref></para>
-              </item>
-              <item>
-                <para><xref><xrefnodename>DLCO_STREAM</xrefnodename></xref>, <xref><xrefnodename>DLCO_RR</xrefnodename></xref>,  <xref><xrefnodename>DLCL_STREAM</xrefnodename></xref>, <xref><xrefnodename>DLCL_RR</xrefnodename></xref></para>
-              </item>
-              <item>
-                <para><xref><xrefnodename>Other Netperf Tests</xrefnodename><xrefinfoname>LOC_CPU</xrefinfoname></xref>, <xref><xrefnodename>Other Netperf Tests</xrefnodename><xrefinfoname>REM_CPU</xrefinfoname></xref></para>
-              </item>
-              <item>
-                <para><xref><xrefnodename>The Omni Tests</xrefnodename><xrefinfoname>OMNI</xrefinfoname></xref></para>
-              </item>
-            </itemize>
-            <para>Not all tests are always compiled into netperf.  In particular, the &ldquo;XTI,&rdquo; &ldquo;SCTP,&rdquo; &ldquo;UNIXDOMAIN,&rdquo; and &ldquo;DL*&rdquo; tests are only included in netperf when configured with <option>--enable-[xti|sctp|unixdomain|dlpi]=yes</option>.</para>
-            <para>Netperf only runs one type of test no matter how many <option>-t</option> options may be present on the command-line.  The last <option>-t</option> global command-line option will determine the test to be run. [Default: TCP_STREAM]</para>
-            <para><indexterm index="vr">-T, Global</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-T &lt;optionspec&gt;</code></tableterm>
-          <item>
-            <para>This option controls the CPU, and probably by extension memory, affinity of netperf and/or netserver.</para>
-            <example xml:space="preserve">netperf -T 1</example>
-            <para>will bind both netperf and netserver to &ldquo;CPU 1&rdquo; on their respective systems.</para>
-            <example xml:space="preserve">netperf -T 1,</example>
-            <para>will bind just netperf to &ldquo;CPU 1&rdquo; and will leave netserver unbound.</para>
-            <example xml:space="preserve">netperf -T ,2</example>
-            <para>will leave netperf unbound and will bind netserver to &ldquo;CPU 2.&rdquo;</para>
-            <example xml:space="preserve">netperf -T 1,2</example>
-            <para>will bind netperf to &ldquo;CPU 1&rdquo; and netserver to &ldquo;CPU 2.&rdquo;</para>
-            <para>This can be particularly useful when investigating performance issues involving where processes run relative to where NIC interrupts are processed or where NICs allocate their DMA buffers.</para>
-            <para><indexterm index="vr">-v, Global</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-v verbosity</code></tableterm>
-          <item>
-            <para>This option controls how verbose netperf will be in its output, and is often used in conjunction with the <option>-P</option> option. If the verbosity is set to a value of &ldquo;0&rdquo; then only the test's SFM (Single Figure of Merit) is displayed.  If local <xref><xrefnodename>CPU Utilization</xrefnodename><xrefinfoname>CPU utilization</xrefinfoname></xref> is requested via the <option>-c</option> option then the SFM is the local service demand.  Othersise, if remote CPU utilization is requested via the <option>-C</option> option then the SFM is the remote service demand.  If neither local nor remote CPU utilization are requested the SFM will be the measured throughput or transaction rate as implied by the test specified with the <option>-t</option> option.</para>
-            <para>If the verbosity level is set to &ldquo;1&rdquo; then the &ldquo;normal&rdquo; netperf result output for each test is displayed.</para>
-            <para>If the verbosity level is set to &ldquo;2&rdquo; then &ldquo;extra&rdquo; information will be displayed.  This may include, but is not limited to the number of send or recv calls made and the average number of bytes per send or recv call, or a histogram of the time spent in each send() call or for each transaction if netperf was configured with <option>--enable-histogram=yes</option>. [Default: 1 - normal verbosity]</para>
-            <para>In an <xref><xrefnodename>The Omni Tests</xrefnodename><xrefinfoname>omni</xrefinfoname></xref> test the verbosity setting is largely ignored, save for when asking for the time histogram to be displayed. In version 2.5.0 there is no <xref><xrefnodename>Omni Output Selectors</xrefnodename><xrefinfoname>output selector</xrefinfoname></xref> for the histogram and so it remains displayed only when the verbosity level is set to 2.</para>
-            <para><indexterm index="vr">-V, Global</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-V</code></tableterm>
-          <item>
-            <para>This option displays the netperf version and then exits.</para>
-            <para>Added in netperf 2.4.4.</para>
-            <para><indexterm index="vr">-w, Global</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-w time</code></tableterm>
-          <item>
-            <para>If netperf was configured with <option>--enable-intervals=yes</option> then this value will set the inter-burst time to time milliseconds, and the <option>-b</option> option will set the number of sends per burst.  The actual inter-burst time may vary depending on the system's timer resolution.</para>
-            <para><indexterm index="vr">-W, Global</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-W &lt;sizespec&gt;</code></tableterm>
-          <item>
-            <para>This option controls the number of buffers in the send (first or only value) and or receive (second or only value) buffer rings.  Unlike some benchmarks, netperf does not continuously send or receive from a single buffer.  Instead it rotates through a ring of buffers. [Default: One more than the size of the send or receive socket buffer sizes (<option>-s</option> and/or <option>-S</option> options) divided by the send <option>-m</option> or receive <option>-M</option> buffer size respectively]</para>
-            <para><indexterm index="vr">-4, Global</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-4</code></tableterm>
-          <item>
-            <para>Specifying this option will set both the local and remote address families to AF_INET - that is use only IPv4 addresses on the control connection.  This can be overridden by a subsequent <option>-6</option>, <option>-H</option> or <option>-L</option> option.  Basically, the last option explicitly specifying an address family wins.  Unless overridden by a test-specific option, this will be inherited for the data connection as well.</para>
-            <para><indexterm index="vr">-6, Global</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-6</code></tableterm>
-          <item>
-            <para>Specifying this option will set both local and and remote address families to AF_INET6 - that is use only IPv6 addresses on the control connection.  This can be overridden by a subsequent <option>-4</option>, <option>-H</option> or <option>-L</option> option.  Basically, the last address family explicitly specified wins.  Unless overridden by a test-specific option, this will be inherited for the data connection as well.</para>
-          </item>
-        </tableitem>
-      </table>
-    </section>
-  </node>
-  <node>
-    <nodename>Using Netperf to Measure Bulk Data Transfer</nodename>
-    <nodenext>Using Netperf to Measure Request/Response</nodenext>
-    <nodeprev>Global Command-line Options</nodeprev>
-    <nodeup>Top</nodeup>
-    <chapter>
-      <title>Using Netperf to Measure Bulk Data Transfer</title>
-      <para>The most commonly measured aspect of networked system performance is that of bulk or unidirectional transfer performance.  Everyone wants to know how many bits or bytes per second they can push across the network. The classic netperf convention for a bulk data transfer test name is to tack a &ldquo;_STREAM&rdquo; suffix to a test name.</para>
-      <menu>
-        <menuentry>
-          <menunode>Issues in Bulk Transfer</menunode>
-          <menutitle>Issues in Bulk Transfer</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-        <menuentry>
-          <menunode>Options common to TCP UDP and SCTP tests</menunode>
-          <menutitle>Options common to TCP UDP and SCTP tests</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-      </menu>
-    </chapter>
-  </node>
-  <node>
-    <nodename>Issues in Bulk Transfer</nodename>
-    <nodenext>Options common to TCP UDP and SCTP tests</nodenext>
-    <nodeprev>Using Netperf to Measure Bulk Data Transfer</nodeprev>
-    <nodeup>Using Netperf to Measure Bulk Data Transfer</nodeup>
-<!-- node-name,  next,  previous,  up -->
-    <section>
-      <title>Issues in Bulk Transfer</title>
-      <para>There are any number of things which can affect the performance of a bulk transfer test.</para>
-      <para>Certainly, absent compression, bulk-transfer tests can be limited by the speed of the slowest link in the path from the source to the destination.  If testing over a gigabit link, you will not see more than a gigabit :) Such situations can be described as being <dfn>network-limited</dfn> or <dfn>NIC-limited</dfn>.</para>
-      <para>CPU utilization can also affect the results of a bulk-transfer test. If the networking stack requires a certain number of instructions or CPU cycles per KB of data transferred, and the CPU is limited in the number of instructions or cycles it can provide, then the transfer can be described as being <dfn>CPU-bound</dfn>.</para>
-      <para>A bulk-transfer test can be CPU bound even when netperf reports less than 100% CPU utilization.  This can happen on an MP system where one or more of the CPUs saturate at 100% but other CPU's remain idle. Typically, a single flow of data, such as that from a single instance of a netperf _STREAM test cannot make use of much more than the power of one CPU. Exceptions to this generally occur when netperf and/or netserver run on CPU(s) other than the CPU(s) taking interrupts from the NIC(s). In that case, one might see as much as two CPUs' worth of processing being used to service the flow of data.</para>
-      <para>Distance and the speed-of-light can affect performance for a bulk-transfer; often this can be mitigated by using larger windows. One common limit to the performance of a transport using window-based flow-control is:</para>
-      <example xml:space="preserve">Throughput &lt;= WindowSize/RoundTripTime</example>
-      <para>As the sender can only have a window's-worth of data outstanding on the network at any one time, and the soonest the sender can receive a window update from the receiver is one RoundTripTime (RTT).  TCP and SCTP are examples of such protocols.</para>
-      <para>Packet losses and their effects can be particularly bad for performance.  This is especially true if the packet losses result in retransmission timeouts for the protocol(s) involved.  By the time a retransmission timeout has happened, the flow or connection has sat idle for a considerable length of time.</para>
-      <para>On many platforms, some variant on the <command>netstat</command> command can be used to retrieve statistics about packet loss and retransmission. For example:</para>
-      <example xml:space="preserve">netstat -p tcp</example>
-      <para>will retrieve TCP statistics on the HP-UX Operating System.  On other platforms, it may not be possible to retrieve statistics for a specific protocol and something like:</para>
-      <example xml:space="preserve">netstat -s</example>
-      <para>would be used instead.</para>
-      <para>Many times, such network statistics are keep since the time the stack started, and we are only really interested in statistics from when netperf was running.  In such situations something along the lines of:</para>
-      <example xml:space="preserve">netstat -p tcp &gt; before
-netperf -t TCP_mumble...
-netstat -p tcp &gt; after</example>
-      <para>is indicated.  The <uref><urefurl>ftp://ftp.cup.hp.com/dist/networking/tools/</urefurl><urefdesc>beforeafter</urefdesc></uref> utility can be used to subtract the statistics in <file>before</file> from the statistics in <file>after</file>:</para>
-      <example xml:space="preserve">beforeafter before after &gt; delta</example>
-      <para>and then one can look at the statistics in <file>delta</file>.  Beforeafter is distributed in source form so one can compile it on the platform(s) of interest.</para>
-      <para>If running a version 2.5.0 or later &ldquo;omni&rdquo; test under Linux one can include either or both of:</para>
-      <itemize>
-        <itemfunction>&bullet;</itemfunction>
-        <item>
-          <para>LOCAL_TRANSPORT_RETRANS</para>
-        </item>
-        <item>
-          <para>REMOTE_TRANSPORT_RETRANS</para>
-        </item>
-      </itemize>
-      <para>in the values provided via a test-specific <option>-o</option>, <option>-O</option>, or <option>-k</option> output selction option and netperf will report the retransmissions experienced on the data connection, as reported via a <code>getsockopt(TCP_INFO)</code> call.  If confidence intervals have been requested via the global <option>-I</option> or <option>-i</option> options, the reported value(s) will be for the last iteration.  If the test is over a protocol other than TCP, or on a platform other than Linux, the results are undefined.</para>
-      <para>While it was written with HP-UX's netstat in mind, the <uref><urefurl>ftp://ftp.cup.hp.com/dist/networking/briefs/annotated_netstat.txt</urefurl><urefdesc>annotated netstat</urefdesc></uref> writeup may be helpful with other platforms as well.</para>
-    </section>
-  </node>
-  <node>
-    <nodename>Options common to TCP UDP and SCTP tests</nodename>
-    <nodeprev>Issues in Bulk Transfer</nodeprev>
-    <nodeup>Using Netperf to Measure Bulk Data Transfer</nodeup>
-<!-- node-name,  next,  previous,  up -->
-    <section>
-      <title>Options common to TCP UDP and SCTP tests</title>
-      <para>Many &ldquo;test-specific&rdquo; options are actually common across the different tests.  For those tests involving TCP, UDP and SCTP, whether using the BSD Sockets or the XTI interface those common options include:</para>
-      <table><indexterm index="vr">-h, Test-specific</indexterm>
-        <tableitem>
-          <tableterm><code>-h</code></tableterm>
-          <item>
-            <para>Display the test-suite-specific usage string and exit.  For a TCP_ or UDP_ test this will be the usage string from the source file nettest_bsd.c.  For an XTI_ test, this will be the usage string from the source file nettest_xti.c.  For an SCTP test, this will be the usage string from the source file nettest_sctp.c.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-H &lt;optionspec&gt;</code></tableterm>
-          <item>
-            <para>Normally, the remote hostname|IP and address family information is inherited from the settings for the control connection (eg global command-line <option>-H</option>, <option>-4</option> and/or <option>-6</option> options). The test-specific <option>-H</option> will override those settings for the data (aka test) connection only.  Settings for the control connection are left unchanged.</para>
-            <para><indexterm index="vr">-L, Test-specific</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-L &lt;optionspec&gt;</code></tableterm>
-          <item>
-            <para>The test-specific <option>-L</option> option is identical to the test-specific <option>-H</option> option except it affects the local hostname|IP and address family information.  As with its global command-line counterpart, this is generally only useful when measuring though those evil, end-to-end breaking things called firewalls.</para>
-            <para><indexterm index="vr">-m, Test-specific</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-m bytes</code></tableterm>
-          <item>
-            <para>Set the size of the buffer passed-in to the &ldquo;send&rdquo; calls of a _STREAM test.  Note that this may have only an indirect effect on the size of the packets sent over the network, and certain Layer 4 protocols do _not_ preserve or enforce message boundaries, so setting <option>-m</option> for the send size does not necessarily mean the receiver will receive that many bytes at any one time. By default the units are bytes, but suffix of &ldquo;G,&rdquo; &ldquo;M,&rdquo; or &ldquo;K&rdquo; will specify the units to be 2^30 (GB), 2^20 (MB) or 2^10 (KB) respectively. A suffix of &ldquo;g,&rdquo; &ldquo;m&rdquo; or &ldquo;k&rdquo; will specify units of 10^9, 10^6 or 10^3 bytes respectively. For example:</para>
-            <example xml:space="preserve"><code>-m 32K</code></example>
-            <para>will set the size to 32KB or 32768 bytes. [Default: the local send socket buffer size for the connection - either the system's default or the value set via the <option>-s</option> option.]</para>
-            <para><indexterm index="vr">-M, Test-specific</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-M bytes</code></tableterm>
-          <item>
-            <para>Set the size of the buffer passed-in to the &ldquo;recv&rdquo; calls of a _STREAM test.  This will be an upper bound on the number of bytes received per receive call. By default the units are bytes, but suffix of &ldquo;G,&rdquo; &ldquo;M,&rdquo; or &ldquo;K&rdquo; will specify the units to be 2^30 (GB), 2^20 (MB) or 2^10 (KB) respectively.  A suffix of &ldquo;g,&rdquo; &ldquo;m&rdquo; or &ldquo;k&rdquo; will specify units of 10^9, 10^6 or 10^3 bytes respectively. For example:</para>
-            <example xml:space="preserve"><code>-M 32K</code></example>
-            <para>will set the size to 32KB or 32768 bytes. [Default: the remote receive socket buffer size for the data connection - either the system's default or the value set via the <option>-S</option> option.]</para>
-            <para><indexterm index="vr">-P, Test-specific</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-P &lt;optionspec&gt;</code></tableterm>
-          <item>
-            <para>Set the local and/or remote port numbers for the data connection.</para>
-            <para><indexterm index="vr">-s, Test-specific</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-s &lt;sizespec&gt;</code></tableterm>
-          <item>
-            <para>This option sets the local (netperf) send and receive socket buffer sizes for the data connection to the value(s) specified.  Often, this will affect the advertised and/or effective TCP or other window, but on some platforms it may not. By default the units are bytes, but suffix of &ldquo;G,&rdquo; &ldquo;M,&rdquo; or &ldquo;K&rdquo; will specify the units to be 2^30 (GB), 2^20 (MB) or 2^10 (KB) respectively.  A suffix of &ldquo;g,&rdquo; &ldquo;m&rdquo; or &ldquo;k&rdquo; will specify units of 10^9, 10^6 or 10^3 bytes respectively. For example:</para>
-            <example xml:space="preserve"><code>-s 128K</code></example>
-            <para>Will request the local send and receive socket buffer sizes to be 128KB or 131072 bytes.</para>
-            <para>While the historic expectation is that setting the socket buffer size has a direct effect on say the TCP window, today that may not hold true for all stacks. Further, while the historic expectation is that the value specified in a <code>setsockopt()</code> call will be the value returned via a <code>getsockopt()</code> call, at least one stack is known to deliberately ignore history.  When running under Windows a value of 0 may be used which will be an indication to the stack the user wants to enable a form of copy avoidance. [Default: -1 - use the system's default socket buffer sizes]</para>
-            <para><indexterm index="vr">-S Test-specific</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-S &lt;sizespec&gt;</code></tableterm>
-          <item>
-            <para>This option sets the remote (netserver) send and/or receive socket buffer sizes for the data connection to the value(s) specified. Often, this will affect the advertised and/or effective TCP or other window, but on some platforms it may not. By default the units are bytes, but suffix of &ldquo;G,&rdquo; &ldquo;M,&rdquo; or &ldquo;K&rdquo; will specify the units to be 2^30 (GB), 2^20 (MB) or 2^10 (KB) respectively.  A suffix of &ldquo;g,&rdquo; &ldquo;m&rdquo; or &ldquo;k&rdquo; will specify units of 10^9, 10^6 or 10^3 bytes respectively.  For example:</para>
-            <example xml:space="preserve"><code>-s 128K</code></example>
-            <para>Will request the remote send and receive socket buffer sizes to be 128KB or 131072 bytes.</para>
-            <para>While the historic expectation is that setting the socket buffer size has a direct effect on say the TCP window, today that may not hold true for all stacks.  Further, while the historic expectation is that the value specified in a <code>setsockopt()</code> call will be the value returned via a <code>getsockopt()</code> call, at least one stack is known to deliberately ignore history.  When running under Windows a value of 0 may be used which will be an indication to the stack the user wants to enable a form of copy avoidance. [Default: -1 - use the system's default socket buffer sizes]</para>
-            <para><indexterm index="vr">-4, Test-specific</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-4</code></tableterm>
-          <item>
-            <para>Set the local and remote address family for the data connection to AF_INET - ie use IPv4 addressing only.  Just as with their global command-line counterparts the last of the <option>-4</option>, <option>-6</option>, <option>-H</option> or <option>-L</option> option wins for their respective address families.</para>
-            <para><indexterm index="vr">-6, Test-specific</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-6</code></tableterm>
-          <item>
-            <para>This option is identical to its <option>-4</option> cousin, but requests IPv6 addresses for the local and remote ends of the data connection.</para>
-          </item>
-        </tableitem>
-      </table>
-      <menu>
-        <menuentry>
-          <menunode>TCP_STREAM</menunode>
-          <menutitle>TCP_STREAM</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-        <menuentry>
-          <menunode>TCP_MAERTS</menunode>
-          <menutitle>TCP_MAERTS</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-        <menuentry>
-          <menunode>TCP_SENDFILE</menunode>
-          <menutitle>TCP_SENDFILE</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-        <menuentry>
-          <menunode>UDP_STREAM</menunode>
-          <menutitle>UDP_STREAM</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-        <menuentry>
-          <menunode>XTI_TCP_STREAM</menunode>
-          <menutitle>XTI_TCP_STREAM</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-        <menuentry>
-          <menunode>XTI_UDP_STREAM</menunode>
-          <menutitle>XTI_UDP_STREAM</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-        <menuentry>
-          <menunode>SCTP_STREAM</menunode>
-          <menutitle>SCTP_STREAM</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-        <menuentry>
-          <menunode>DLCO_STREAM</menunode>
-          <menutitle>DLCO_STREAM</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-        <menuentry>
-          <menunode>DLCL_STREAM</menunode>
-          <menutitle>DLCL_STREAM</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-        <menuentry>
-          <menunode>STREAM_STREAM</menunode>
-          <menutitle>STREAM_STREAM</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-        <menuentry>
-          <menunode>DG_STREAM</menunode>
-          <menutitle>DG_STREAM</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-      </menu>
-    </section>
-  </node>
-  <node>
-    <nodename>TCP_STREAM</nodename>
-    <nodenext>TCP_MAERTS</nodenext>
-    <nodeprev>Options common to TCP UDP and SCTP tests</nodeprev>
-    <nodeup>Options common to TCP UDP and SCTP tests</nodeup>
-    <subsection>
-      <title>TCP_STREAM</title>
-      <para>The TCP_STREAM test is the default test in netperf.  It is quite simple, transferring some quantity of data from the system running netperf to the system running netserver.  While time spent establishing the connection is not included in the throughput calculation, time spent flushing the last of the data to the remote at the end of the test is.  This is how netperf knows that all the data it sent was received by the remote.  In addition to the <xref><xrefnodename>Options common to TCP UDP and SCTP tests</xrefnodename><xrefinfoname>options common to STREAM tests</xrefinfoname></xref>, the following test-specific options can be included to possibly alter the behavior of the test:</para>
-      <table>
-        <tableitem>
-          <tableterm><code>-C</code></tableterm>
-          <item>
-            <para>This option will set TCP_CORK mode on the data connection on those systems where TCP_CORK is defined (typically Linux).  A full description of TCP_CORK is beyond the scope of this manual, but in a nutshell it forces sub-MSS sends to be buffered so every segment sent is Maximum Segment Size (MSS) unless the application performs an explicit flush operation or the connection is closed.  At present netperf does not perform any explicit flush operations.  Setting TCP_CORK may improve the bitrate of tests where the &ldquo;send size&rdquo; (<option>-m</option> option) is smaller than the MSS.  It should also improve (make smaller) the service demand.</para>
-            <para>The Linux tcp(7) manpage states that TCP_CORK cannot be used in conjunction with TCP_NODELAY (set via the <option>-d</option> option), however netperf does not validate command-line options to enforce that.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-D</code></tableterm>
-          <item>
-            <para>This option will set TCP_NODELAY on the data connection on those systems where TCP_NODELAY is defined.  This disables something known as the Nagle Algorithm, which is intended to make the segments TCP sends as large as reasonably possible.  Setting TCP_NODELAY for a TCP_STREAM test should either have no effect when the send size (<option>-m</option> option) is larger than the MSS or will decrease reported bitrate and increase service demand when the send size is smaller than the MSS.  This stems from TCP_NODELAY causing each sub-MSS send to be its own TCP segment rather than being aggregated with other small sends.  This means more trips up and down the protocol stack per KB of data transferred, which means greater CPU utilization.</para>
-            <para>If setting TCP_NODELAY with <option>-D</option> affects throughput and/or service demand for tests where the send size (<option>-m</option>) is larger than the MSS it suggests the TCP/IP stack's implementation of the Nagle Algorithm _may_ be broken, perhaps interpreting the Nagle Algorithm on a segment by segment basis rather than the proper user send by user send basis.  However, a better test of this can be achieved with the <xref><xrefnodename>TCP_RR</xrefnodename></xref> test.</para>
-          </item>
-        </tableitem>
-      </table>
-      <para>Here is an example of a basic TCP_STREAM test, in this case from a Debian Linux (2.6 kernel) system to an HP-UX 11iv2 (HP-UX 11.23) system:</para>
-      <example xml:space="preserve">$ netperf -H lag
-TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to lag.hpl.hp.com (15.4.89.214) port 0 AF_INET
-Recv   Send    Send
-Socket Socket  Message  Elapsed
-Size   Size    Size     Time     Throughput
-bytes  bytes   bytes    secs.    10^6bits/sec
-
- 32768  16384  16384    10.00      80.42</example>
-      <para>We see that the default receive socket buffer size for the receiver (lag - HP-UX 11.23) is 32768 bytes, and the default socket send buffer size for the sender (Debian 2.6 kernel) is 16384 bytes, however Linux does &ldquo;auto tuning&rdquo; of socket buffer and TCP window sizes, which means the send socket buffer size may be different at the end of the test than it was at the beginning.  This is addressed in the <xref><xrefnodename>The Omni Tests</xrefnodename><xrefinfoname>omni tests</xrefinfoname></xref> added in version 2.5.0 and <xref><xrefnodename>Omni Output Selection</xrefnodename><xrefinfoname>output selection</xrefinfoname></xref>.  Throughput is expressed as 10^6 (aka Mega) bits per second, and the test ran for 10 seconds.  IPv4 addresses (AF_INET) were used.</para>
-    </subsection>
-  </node>
-  <node>
-    <nodename>TCP_MAERTS</nodename>
-    <nodenext>TCP_SENDFILE</nodenext>
-    <nodeprev>TCP_STREAM</nodeprev>
-    <nodeup>Options common to TCP UDP and SCTP tests</nodeup>
-<!-- node-name,  next,  previous,  up -->
-    <subsection>
-      <title>TCP_MAERTS</title>
-      <para>A TCP_MAERTS (MAERTS is STREAM backwards) test is &ldquo;just like&rdquo; a <xref><xrefnodename>TCP_STREAM</xrefnodename></xref> test except the data flows from the netserver to the netperf. The global command-line <option>-F</option> option is ignored for this test type.  The test-specific command-line <option>-C</option> option is ignored for this test type.</para>
-      <para>Here is an example of a TCP_MAERTS test between the same two systems as in the example for the <xref><xrefnodename>TCP_STREAM</xrefnodename></xref> test.  This time we request larger socket buffers with <option>-s</option> and <option>-S</option> options:</para>
-      <example xml:space="preserve">$ netperf -H lag -t TCP_MAERTS -- -s 128K -S 128K
-TCP MAERTS TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to lag.hpl.hp.com (15.4.89.214) port 0 AF_INET
-Recv   Send    Send
-Socket Socket  Message  Elapsed
-Size   Size    Size     Time     Throughput
-bytes  bytes   bytes    secs.    10^6bits/sec
-
-221184 131072 131072    10.03      81.14</example>
-      <para>Where we see that Linux, unlike HP-UX, may not return the same value in a <code>getsockopt()</code> as was requested in the prior <code>setsockopt()</code>.</para>
-      <para>This test is included more for benchmarking convenience than anything else.</para>
-    </subsection>
-  </node>
-  <node>
-    <nodename>TCP_SENDFILE</nodename>
-    <nodenext>UDP_STREAM</nodenext>
-    <nodeprev>TCP_MAERTS</nodeprev>
-    <nodeup>Options common to TCP UDP and SCTP tests</nodeup>
-<!-- node-name,  next,  previous,  up -->
-    <subsection>
-      <title>TCP_SENDFILE</title>
-      <para>The TCP_SENDFILE test is &ldquo;just like&rdquo; a <xref><xrefnodename>TCP_STREAM</xrefnodename></xref> test except netperf the platform's <code>sendfile()</code> call instead of calling <code>send()</code>.  Often this results in a <dfn>zero-copy</dfn> operation where data is sent directly from the filesystem buffer cache.  This _should_ result in lower CPU utilization and possibly higher throughput.  If it does not, then you may want to contact your vendor(s) because they have a problem on their hands.</para>
-      <para>Zero-copy mechanisms may also alter the characteristics (size and number of buffers per) of packets passed to the NIC.  In many stacks, when a copy is performed, the stack can &ldquo;reserve&rdquo; space at the beginning of the destination buffer for things like TCP, IP and Link headers.  This then has the packet contained in a single buffer which can be easier to DMA to the NIC.  When no copy is performed, there is no opportunity to reserve space for headers and so a packet will be contained in two or more buffers.</para>
-      <para>As of some time before version 2.5.0, the <xref><xrefnodename>Global Options</xrefnodename><xrefinfoname>global <option>-F</option> option</xrefinfoname></xref> is no longer required for this test.  If it is not specified, netperf will create a temporary file, which it will delete at the end of the test.  If the <option>-F</option> option is specified it must reference a file of at least the size of the send ring (See <xref><xrefnodename>Global Options</xrefnodename><xrefinfoname>the global <option>-W</option> option</xrefinfoname></xref>.) multiplied by the send size (See <xref><xrefnodename>Options common to TCP UDP and SCTP tests</xrefnodename><xrefinfoname>the test-specific <option>-m</option> option</xrefinfoname></xref>.).  All other TCP-specific options remain available and optional.</para>
-      <para>In this first example:</para>
-      <example xml:space="preserve">$ netperf -H lag -F ../src/netperf -t TCP_SENDFILE -- -s 128K -S 128K
-TCP SENDFILE TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to lag.hpl.hp.com (15.4.89.214) port 0 AF_INET
-alloc_sendfile_buf_ring: specified file too small.
-file must be larger than send_width * send_size</example>
-      <para>we see what happens when the file is too small.  Here:</para>
-      <example xml:space="preserve">$ netperf -H lag -F /boot/vmlinuz-2.6.8-1-686 -t TCP_SENDFILE -- -s 128K -S 128K
-TCP SENDFILE TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to lag.hpl.hp.com (15.4.89.214) port 0 AF_INET
-Recv   Send    Send
-Socket Socket  Message  Elapsed
-Size   Size    Size     Time     Throughput
-bytes  bytes   bytes    secs.    10^6bits/sec
-
-131072 221184 221184    10.02      81.83</example>
-      <para>we resolve that issue by selecting a larger file.</para>
-    </subsection>
-  </node>
-  <node>
-    <nodename>UDP_STREAM</nodename>
-    <nodenext>XTI_TCP_STREAM</nodenext>
-    <nodeprev>TCP_SENDFILE</nodeprev>
-    <nodeup>Options common to TCP UDP and SCTP tests</nodeup>
-    <subsection>
-      <title>UDP_STREAM</title>
-      <para>A UDP_STREAM test is similar to a <xref><xrefnodename>TCP_STREAM</xrefnodename></xref> test except UDP is used as the transport rather than TCP.</para>
-      <para><indexterm index="cp">Limiting Bandwidth</indexterm>A UDP_STREAM test has no end-to-end flow control - UDP provides none and neither does netperf.  However, if you wish, you can configure netperf with <code>--enable-intervals=yes</code> to enable the global command-line <option>-b</option> and <option>-w</option> options to pace bursts of traffic onto the network.</para>
-      <para>This has a number of implications.</para>
-      <para>The biggest of these implications is the data which is sent might not be received by the remote.  For this reason, the output of a UDP_STREAM test shows both the sending and receiving throughput.  On some platforms, it may be possible for the sending throughput to be reported as a value greater than the maximum rate of the link.  This is common when the CPU(s) are faster than the network and there is no <dfn>intra-stack</dfn> flow-control.</para>
-      <para>Here is an example of a UDP_STREAM test between two systems connected by a 10 Gigabit Ethernet link:</para>
-      <example xml:space="preserve">$ netperf -t UDP_STREAM -H 192.168.2.125 -- -m 32768
-UDP UNIDIRECTIONAL SEND TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 192.168.2.125 (192.168.2.125) port 0 AF_INET
-Socket  Message  Elapsed      Messages
-Size    Size     Time         Okay Errors   Throughput
-bytes   bytes    secs            #      #   10^6bits/sec
-
-124928   32768   10.00      105672      0    2770.20
-135168           10.00      104844           2748.50
-</example>
-      <para>The first line of numbers are statistics from the sending (netperf) side. The second line of numbers are from the receiving (netserver) side.  In this case, 105672 - 104844 or 828 messages did not make it all the way to the remote netserver process.</para>
-      <para>If the value of the <option>-m</option> option is larger than the local send socket buffer size (<option>-s</option> option) netperf will likely abort with an error message about how the send call failed:</para>
-      <example xml:space="preserve">netperf -t UDP_STREAM -H 192.168.2.125
-UDP UNIDIRECTIONAL SEND TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 192.168.2.125 (192.168.2.125) port 0 AF_INET
-udp_send: data send error: Message too long</example>
-      <para>If the value of the <option>-m</option> option is larger than the remote socket receive buffer, the reported receive throughput will likely be zero as the remote UDP will discard the messages as being too large to fit into the socket buffer.</para>
-      <example xml:space="preserve">$ netperf -t UDP_STREAM -H 192.168.2.125 -- -m 65000 -S 32768
-UDP UNIDIRECTIONAL SEND TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 192.168.2.125 (192.168.2.125) port 0 AF_INET
-Socket  Message  Elapsed      Messages
-Size    Size     Time         Okay Errors   Throughput
-bytes   bytes    secs            #      #   10^6bits/sec
-
-124928   65000   10.00       53595      0    2786.99
- 65536           10.00           0              0.00</example>
-      <para>The example above was between a pair of systems running a &ldquo;Linux&rdquo; kernel. Notice that the remote Linux system returned a value larger than that passed-in to the <option>-S</option> option.  In fact, this value was larger than the message size set with the <option>-m</option> option. That the remote socket buffer size is reported as 65536 bytes would suggest to any sane person that a message of 65000 bytes would fit, but the socket isn't _really_ 65536 bytes, even though Linux is telling us so.  Go figure.</para>
-    </subsection>
-  </node>
-  <node>
-    <nodename>XTI_TCP_STREAM</nodename>
-    <nodenext>XTI_UDP_STREAM</nodenext>
-    <nodeprev>UDP_STREAM</nodeprev>
-    <nodeup>Options common to TCP UDP and SCTP tests</nodeup>
-    <subsection>
-      <title>XTI_TCP_STREAM</title>
-      <para>An XTI_TCP_STREAM test is simply a <xref><xrefnodename>TCP_STREAM</xrefnodename></xref> test using the XTI rather than BSD Sockets interface.  The test-specific <option>-X &lt;devspec&gt;</option> option can be used to specify the name of the local and/or remote XTI device files, which is required by the <code>t_open()</code> call made by netperf XTI tests.</para>
-      <para>The XTI_TCP_STREAM test is only present if netperf was configured with <code>--enable-xti=yes</code>.  The remote netserver must have also been configured with <code>--enable-xti=yes</code>.</para>
-    </subsection>
-  </node>
-  <node>
-    <nodename>XTI_UDP_STREAM</nodename>
-    <nodenext>SCTP_STREAM</nodenext>
-    <nodeprev>XTI_TCP_STREAM</nodeprev>
-    <nodeup>Options common to TCP UDP and SCTP tests</nodeup>
-    <subsection>
-      <title>XTI_UDP_STREAM</title>
-      <para>An XTI_UDP_STREAM test is simply a <xref><xrefnodename>UDP_STREAM</xrefnodename></xref> test using the XTI rather than BSD Sockets Interface.  The test-specific <option>-X &lt;devspec&gt;</option> option can be used to specify the name of the local and/or remote XTI device files, which is required by the <code>t_open()</code> call made by netperf XTI tests.</para>
-      <para>The XTI_UDP_STREAM test is only present if netperf was configured with <code>--enable-xti=yes</code>. The remote netserver must have also been configured with <code>--enable-xti=yes</code>.</para>
-    </subsection>
-  </node>
-  <node>
-    <nodename>SCTP_STREAM</nodename>
-    <nodenext>DLCO_STREAM</nodenext>
-    <nodeprev>XTI_UDP_STREAM</nodeprev>
-    <nodeup>Options common to TCP UDP and SCTP tests</nodeup>
-    <subsection>
-      <title>SCTP_STREAM</title>
-      <para>An SCTP_STREAM test is essentially a <xref><xrefnodename>TCP_STREAM</xrefnodename></xref> test using the SCTP rather than TCP.  The <option>-D</option> option will set SCTP_NODELAY, which is much like the TCP_NODELAY option for TCP.  The <option>-C</option> option is not applicable to an SCTP test as there is no corresponding SCTP_CORK option.  The author is still figuring-out what the test-specific <option>-N</option> option does :)</para>
-      <para>The SCTP_STREAM test is only present if netperf was configured with <code>--enable-sctp=yes</code>. The remote netserver must have also been configured with <code>--enable-sctp=yes</code>.</para>
-    </subsection>
-  </node>
-  <node>
-    <nodename>DLCO_STREAM</nodename>
-    <nodenext>DLCL_STREAM</nodenext>
-    <nodeprev>SCTP_STREAM</nodeprev>
-    <nodeup>Options common to TCP UDP and SCTP tests</nodeup>
-    <subsection>
-      <title>DLCO_STREAM</title>
-      <para>A DLPI Connection Oriented Stream (DLCO_STREAM) test is very similar in concept to a <xref><xrefnodename>TCP_STREAM</xrefnodename></xref> test.  Both use reliable, connection-oriented protocols.  The DLPI test differs from the TCP test in that its protocol operates only at the link-level and does not include TCP-style segmentation and reassembly.  This last difference means that the value  passed-in  with the <option>-m</option> option must be less than the interface MTU.  Otherwise, the <option>-m</option> and <option>-M</option> options are just like their TCP/UDP/SCTP counterparts.</para>
-      <para>Other DLPI-specific options include:</para>
-      <table>
-        <tableitem>
-          <tableterm><code>-D &lt;devspec&gt;</code></tableterm>
-          <item>
-            <para>This option is used to provide the fully-qualified names for the local and/or remote DLPI device files.  The syntax is otherwise identical to that of a <dfn>sizespec</dfn>.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-p &lt;ppaspec&gt;</code></tableterm>
-          <item>
-            <para>This option is used to specify the local and/or remote DLPI PPA(s). The PPA is used to identify the interface over which traffic is to be sent/received. The syntax of a <dfn>ppaspec</dfn> is otherwise the same as a <dfn>sizespec</dfn>.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-s sap</code></tableterm>
-          <item>
-            <para>This option specifies the 802.2 SAP for the test.  A SAP is somewhat like either the port field of a TCP or UDP header or the protocol field of an IP header.  The specified SAP should not conflict with any other active SAPs on the specified PPA's (<option>-p</option> option).</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-w &lt;sizespec&gt;</code></tableterm>
-          <item>
-            <para>This option specifies the local send and receive window sizes in units of frames on those platforms which support setting such things.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-W &lt;sizespec&gt;</code></tableterm>
-          <item>
-            <para>This option specifies the remote send and receive window sizes in units of frames on those platforms which support setting such things.</para>
-          </item>
-        </tableitem>
-      </table>
-      <para>The DLCO_STREAM test is only present if netperf was configured with <code>--enable-dlpi=yes</code>. The remote netserver must have also been configured with <code>--enable-dlpi=yes</code>.</para>
-    </subsection>
-  </node>
-  <node>
-    <nodename>DLCL_STREAM</nodename>
-    <nodenext>STREAM_STREAM</nodenext>
-    <nodeprev>DLCO_STREAM</nodeprev>
-    <nodeup>Options common to TCP UDP and SCTP tests</nodeup>
-    <subsection>
-      <title>DLCL_STREAM</title>
-      <para>A DLPI ConnectionLess Stream (DLCL_STREAM) test is analogous to a <xref><xrefnodename>UDP_STREAM</xrefnodename></xref> test in that both make use of unreliable/best-effort, connection-less transports.  The DLCL_STREAM test differs from the <xref><xrefnodename>UDP_STREAM</xrefnodename></xref> test in that the message size (<option>-m</option> option) must always be less than the link MTU as there is no IP-like fragmentation and reassembly available and netperf does not presume to provide one.</para>
-      <para>The test-specific command-line options for a DLCL_STREAM test are the same as those for a <xref><xrefnodename>DLCO_STREAM</xrefnodename></xref> test.</para>
-      <para>The DLCL_STREAM test is only present if netperf was configured with <code>--enable-dlpi=yes</code>. The remote netserver must have also been configured with <code>--enable-dlpi=yes</code>.</para>
-    </subsection>
-  </node>
-  <node>
-    <nodename>STREAM_STREAM</nodename>
-    <nodenext>DG_STREAM</nodenext>
-    <nodeprev>DLCL_STREAM</nodeprev>
-    <nodeup>Options common to TCP UDP and SCTP tests</nodeup>
-<!-- node-name,  next,  previous,  up -->
-    <subsection>
-      <title>STREAM_STREAM</title>
-      <para>A Unix Domain Stream Socket Stream test (STREAM_STREAM) is similar in concept to a <xref><xrefnodename>TCP_STREAM</xrefnodename></xref> test, but using Unix Domain sockets.  It is, naturally, limited to intra-machine traffic.  A STREAM_STREAM test shares the <option>-m</option>, <option>-M</option>, <option>-s</option> and <option>-S</option> options of the other _STREAM tests.  In a STREAM_STREAM test the <option>-p</option> option sets the directory in which the pipes will be created rather than setting a port number.  The default is to create the pipes in the system default for the <code>tempnam()</code> call.</para>
-      <para>The STREAM_STREAM test is only present if netperf was configured with <code>--enable-unixdomain=yes</code>. The remote netserver must have also been configured with <code>--enable-unixdomain=yes</code>.</para>
-    </subsection>
-  </node>
-  <node>
-    <nodename>DG_STREAM</nodename>
-    <nodeprev>STREAM_STREAM</nodeprev>
-    <nodeup>Options common to TCP UDP and SCTP tests</nodeup>
-<!-- node-name,  next,  previous,  up -->
-    <subsection>
-      <title>DG_STREAM</title>
-      <para>A Unix Domain Datagram Socket Stream test (SG_STREAM) is very much like a <xref><xrefnodename>TCP_STREAM</xrefnodename></xref> test except that message boundaries are preserved. In this way, it may also be considered similar to certain flavors of SCTP test which can also preserve message boundaries.</para>
-      <para>All the options of a <xref><xrefnodename>STREAM_STREAM</xrefnodename></xref> test are applicable to a DG_STREAM test.</para>
-      <para>The DG_STREAM test is only present if netperf was configured with <code>--enable-unixdomain=yes</code>. The remote netserver must have also been configured with <code>--enable-unixdomain=yes</code>.</para>
-    </subsection>
-  </node>
-  <node>
-    <nodename>Using Netperf to Measure Request/Response</nodename>
-    <nodenext>Using Netperf to Measure Aggregate Performance</nodenext>
-    <nodeprev>Using Netperf to Measure Bulk Data Transfer</nodeprev>
-    <nodeup>Top</nodeup>
-    <chapter>
-      <title>Using Netperf to Measure Request/Response</title>
-      <para>Request/response performance is often overlooked, yet it is just as important as bulk-transfer performance.  While things like larger socket buffers and TCP windows, and stateless offloads like TSO and LRO can cover a multitude of latency and even path-length sins, those sins cannot easily hide from a request/response test.  The convention for a request/response test is to have a _RR suffix.  There are however a few &ldquo;request/response&rdquo; tests that have other suffixes.</para>
-      <para>A request/response test, particularly synchronous, one transaction at a time test such as those found by default in netperf, is particularly sensitive to the path-length of the networking stack.  An _RR test can also uncover those platforms where the NICs are strapped by default with overbearing interrupt avoidance settings in an attempt to increase the bulk-transfer performance (or rather, decrease the CPU utilization of a bulk-transfer test).  This sensitivity is most acute for small request and response sizes, such as the single-byte default for a netperf _RR test.</para>
-      <para>While a bulk-transfer test reports its results in units of bits or bytes transferred per second, by default a mumble_RR test reports transactions per second where a transaction is defined as the completed exchange of a request and a response.  One can invert the transaction rate to arrive at the average round-trip latency.  If one is confident about the symmetry of the connection, the average one-way latency can be taken as one-half the average round-trip latency. As of version 2.5.0 (actually slightly before) netperf still does not do the latter, but will do the former if one sets the verbosity to 2 for a classic netperf test, or includes the appropriate <xref><xrefnodename>Omni Output Selectors</xrefnodename><xrefinfoname>output selector</xrefinfoname></xref> in an <xref><xrefnodename>The Omni Tests</xrefnodename><xrefinfoname>omni test</xrefinfoname></xref>.  It will also allow the user to switch the throughput units from transactions per second to bits or bytes per second with the global <option>-f</option> option.</para>
-      <menu>
-        <menuentry>
-          <menunode>Issues in Request/Response</menunode>
-          <menutitle>Issues in Request/Response</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-        <menuentry>
-          <menunode>Options Common to TCP UDP and SCTP _RR tests</menunode>
-          <menutitle>Options Common to TCP UDP and SCTP _RR tests</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-      </menu>
-    </chapter>
-  </node>
-  <node>
-    <nodename>Issues in Request/Response</nodename>
-    <nodenext>Options Common to TCP UDP and SCTP _RR tests</nodenext>
-    <nodeprev>Using Netperf to Measure Request/Response</nodeprev>
-    <nodeup>Using Netperf to Measure Request/Response</nodeup>
-<!-- node-name,  next,  previous,  up -->
-    <section>
-      <title>Issues in Request/Response</title>
-      <para>Most if not all the <xref><xrefnodename>Issues in Bulk Transfer</xrefnodename></xref> apply to request/response.  The issue of round-trip latency is even more important as netperf generally only has one transaction outstanding at a time.</para>
-      <para>A single instance of a one transaction outstanding _RR test should _never_ completely saturate the CPU of a system.  If testing between otherwise evenly matched systems, the symmetric nature of a _RR test with equal request and response sizes should result in equal CPU loading on both systems. However, this may not hold true on MP systems, particularly if one CPU binds the netperf and netserver differently via the global <option>-T</option> option.</para>
-      <para>For smaller request and response sizes packet loss is a bigger issue as there is no opportunity for a <dfn>fast retransmit</dfn> or retransmission prior to a retransmission timer expiring.</para>
-      <para>Virtualization may considerably increase the effective path length of a networking stack.  While this may not preclude achieving link-rate on a comparatively slow link (eg 1 Gigabit Ethernet) on a _STREAM test, it can show-up as measurably fewer transactions per second on an _RR test.  However, this may still be masked by interrupt coalescing in the NIC/driver.</para>
-      <para>Certain NICs have ways to minimize the number of interrupts sent to the host.  If these are strapped badly they can significantly reduce the performance of something like a single-byte request/response test. Such setups are distinguished by seriously low reported CPU utilization and what seems like a low (even if in the thousands) transaction per second rate.  Also, if you run such an OS/driver combination on faster or slower hardware and do not see a corresponding change in the transaction rate, chances are good that the driver is strapping the NIC with aggressive interrupt avoidance settings.  Good for bulk throughput, but bad for latency.</para>
-      <para>Some drivers may try to automagically adjust the interrupt avoidance settings.  If they are not terribly good at it, you will see considerable run-to-run variation in reported transaction rates. Particularly if you &ldquo;mix-up&rdquo; _STREAM and _RR tests.</para>
-    </section>
-  </node>
-  <node>
-    <nodename>Options Common to TCP UDP and SCTP _RR tests</nodename>
-    <nodeprev>Issues in Request/Response</nodeprev>
-    <nodeup>Using Netperf to Measure Request/Response</nodeup>
-<!-- node-name,  next,  previous,  up -->
-    <section>
-      <title>Options Common to TCP UDP and SCTP _RR tests</title>
-      <para>Many &ldquo;test-specific&rdquo; options are actually common across the different tests.  For those tests involving TCP, UDP and SCTP, whether using the BSD Sockets or the XTI interface those common options include:</para>
-      <table><indexterm index="vr">-h, Test-specific</indexterm>
-        <tableitem>
-          <tableterm><code>-h</code></tableterm>
-          <item>
-            <para>Display the test-suite-specific usage string and exit.  For a TCP_ or UDP_ test this will be the usage string from the source file <file>nettest_bsd.c</file>.  For an XTI_ test, this will be the usage string from the source file <file>src/nettest_xti.c</file>.  For an SCTP test, this will be the usage string from the source file <file>src/nettest_sctp.c</file>.</para>
-            <para><indexterm index="vr">-H, Test-specific</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-H &lt;optionspec&gt;</code></tableterm>
-          <item>
-            <para>Normally, the remote hostname|IP and address family information is inherited from the settings for the control connection (eg global command-line <option>-H</option>, <option>-4</option> and/or <option>-6</option> options. The test-specific <option>-H</option> will override those settings for the data (aka test) connection only.  Settings for the control connection are left unchanged.  This might be used to cause the control and data connections to take different paths through the network.</para>
-            <para><indexterm index="vr">-L, Test-specific</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-L &lt;optionspec&gt;</code></tableterm>
-          <item>
-            <para>The test-specific <option>-L</option> option is identical to the test-specific <option>-H</option> option except it affects the local hostname|IP and address family information.  As with its global command-line counterpart, this is generally only useful when measuring though those evil, end-to-end breaking things called firewalls.</para>
-            <para><indexterm index="vr">-P, Test-specific</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-P &lt;optionspec&gt;</code></tableterm>
-          <item>
-            <para>Set the local and/or remote port numbers for the data connection.</para>
-            <para><indexterm index="vr">-r, Test-specific</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-r &lt;sizespec&gt;</code></tableterm>
-          <item>
-            <para>This option sets the request (first value) and/or response (second value) sizes for an _RR test. By default the units are bytes, but a suffix of &ldquo;G,&rdquo; &ldquo;M,&rdquo; or &ldquo;K&rdquo; will specify the units to be 2^30 (GB), 2^20 (MB) or 2^10 (KB) respectively.  A suffix of &ldquo;g,&rdquo; &ldquo;m&rdquo; or &ldquo;k&rdquo; will specify units of 10^9, 10^6 or 10^3 bytes respectively. For example:</para>
-            <example xml:space="preserve"><code>-r 128,16K</code></example>
-            <para>Will set the request size to 128 bytes and the response size to 16 KB or 16384 bytes. [Default: 1 - a single-byte request and response ]</para>
-            <para><indexterm index="vr">-s, Test-specific</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-s &lt;sizespec&gt;</code></tableterm>
-          <item>
-            <para>This option sets the local (netperf) send and receive socket buffer sizes for the data connection to the value(s) specified.  Often, this will affect the advertised and/or effective TCP or other window, but on some platforms it may not. By default the units are bytes, but a suffix of &ldquo;G,&rdquo; &ldquo;M,&rdquo; or &ldquo;K&rdquo; will specify the units to be 2^30 (GB), 2^20 (MB) or 2^10 (KB) respectively.  A suffix of &ldquo;g,&rdquo; &ldquo;m&rdquo; or &ldquo;k&rdquo; will specify units of 10^9, 10^6 or 10^3 bytes respectively. For example:</para>
-            <example xml:space="preserve"><code>-s 128K</code></example>
-            <para>Will request the local send (netperf) and receive socket buffer sizes to be 128KB or 131072 bytes.</para>
-            <para>While the historic expectation is that setting the socket buffer size has a direct effect on say the TCP window, today that may not hold true for all stacks.  When running under Windows a value of 0 may be used which will be an indication to the stack the user wants to enable a form of copy avoidance. [Default: -1 - use the system's default socket buffer sizes]</para>
-            <para><indexterm index="vr">-S, Test-specific</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-S &lt;sizespec&gt;</code></tableterm>
-          <item>
-            <para>This option sets the remote (netserver) send and/or receive socket buffer sizes for the data connection to the value(s) specified. Often, this will affect the advertised and/or effective TCP or other window, but on some platforms it may not. By default the units are bytes, but a suffix of &ldquo;G,&rdquo; &ldquo;M,&rdquo; or &ldquo;K&rdquo; will specify the units to be 2^30 (GB), 2^20 (MB) or 2^10 (KB) respectively.  A suffix of &ldquo;g,&rdquo; &ldquo;m&rdquo; or &ldquo;k&rdquo; will specify units of 10^9, 10^6 or 10^3 bytes respectively.  For example:</para>
-            <example xml:space="preserve"><code>-s 128K</code></example>
-            <para>Will request the remote (netserver) send and receive socket buffer sizes to be 128KB or 131072 bytes.</para>
-            <para>While the historic expectation is that setting the socket buffer size has a direct effect on say the TCP window, today that may not hold true for all stacks.  When running under Windows a value of 0 may be used which will be an indication to the stack the user wants to enable a form of copy avoidance.  [Default: -1 - use the system's default socket buffer sizes]</para>
-            <para><indexterm index="vr">-4, Test-specific</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-4</code></tableterm>
-          <item>
-            <para>Set the local and remote address family for the data connection to AF_INET - ie use IPv4 addressing only.  Just as with their global command-line counterparts the last of the <option>-4</option>, <option>-6</option>, <option>-H</option> or <option>-L</option> option wins for their respective address families.</para>
-            <para><indexterm index="vr">-6 Test-specific</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-6</code></tableterm>
-          <item>
-            <para>This option is identical to its <option>-4</option> cousin, but requests IPv6 addresses for the local and remote ends of the data connection.</para>
-          </item>
-        </tableitem>
-      </table>
-      <menu>
-        <menuentry>
-          <menunode>TCP_RR</menunode>
-          <menutitle>TCP_RR</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-        <menuentry>
-          <menunode>TCP_CC</menunode>
-          <menutitle>TCP_CC</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-        <menuentry>
-          <menunode>TCP_CRR</menunode>
-          <menutitle>TCP_CRR</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-        <menuentry>
-          <menunode>UDP_RR</menunode>
-          <menutitle>UDP_RR</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-        <menuentry>
-          <menunode>XTI_TCP_RR</menunode>
-          <menutitle>XTI_TCP_RR</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-        <menuentry>
-          <menunode>XTI_TCP_CC</menunode>
-          <menutitle>XTI_TCP_CC</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-        <menuentry>
-          <menunode>XTI_TCP_CRR</menunode>
-          <menutitle>XTI_TCP_CRR</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-        <menuentry>
-          <menunode>XTI_UDP_RR</menunode>
-          <menutitle>XTI_UDP_RR</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-        <menuentry>
-          <menunode>DLCL_RR</menunode>
-          <menutitle>DLCL_RR</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-        <menuentry>
-          <menunode>DLCO_RR</menunode>
-          <menutitle>DLCO_RR</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-        <menuentry>
-          <menunode>SCTP_RR</menunode>
-          <menutitle>SCTP_RR</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-      </menu>
-    </section>
-  </node>
-  <node>
-    <nodename>TCP_RR</nodename>
-    <nodenext>TCP_CC</nodenext>
-    <nodeprev>Options Common to TCP UDP and SCTP _RR tests</nodeprev>
-    <nodeup>Options Common to TCP UDP and SCTP _RR tests</nodeup>
-    <subsection>
-      <title>TCP_RR</title>
-      <para><indexterm index="cp">Measuring Latency</indexterm><indexterm index="cp">Latency, Request-Response</indexterm> A TCP_RR (TCP Request/Response) test is requested by passing a value of &ldquo;TCP_RR&rdquo; to the global <option>-t</option> command-line option.  A TCP_RR test can be thought-of as a user-space to user-space <code>ping</code> with no think time - it is by default a synchronous, one transaction at a time, request/response test.</para>
-      <para>The transaction rate is the number of complete transactions exchanged divided by the length of time it took to perform those transactions.</para>
-      <para>If the two Systems Under Test are otherwise identical, a TCP_RR test with the same request and response size should be symmetric - it should not matter which way the test is run, and the CPU utilization measured should be virtually the same on each system.  If not, it suggests that the CPU utilization mechanism being used may have some, well, issues measuring CPU utilization completely and accurately.</para>
-      <para>Time to establish the TCP connection is not counted in the result.  If you want connection setup overheads included, you should consider the <xref><xrefnodename>TCP_CC</xrefnodename><xrefinfoname>TPC_CC</xrefinfoname></xref> or <xref><xrefnodename>TCP_CRR</xrefnodename><xrefinfoname>TCP_CRR</xrefinfoname></xref> tests.</para>
-      <para>If specifying the <option>-D</option> option to set TCP_NODELAY and disable the Nagle Algorithm increases the transaction rate reported by a TCP_RR test, it implies the stack(s) over which the TCP_RR test is running have a broken implementation of the Nagle Algorithm.  Likely as not they are interpreting Nagle on a segment by segment basis rather than a user send by user send basis.  You should contact your stack vendor(s) to report the problem to them.</para>
-      <para>Here is an example of two systems running a basic TCP_RR test over a 10 Gigabit Ethernet link:</para>
-      <example xml:space="preserve">netperf -t TCP_RR -H 192.168.2.125
-TCP REQUEST/RESPONSE TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 192.168.2.125 (192.168.2.125) port 0 AF_INET
-Local /Remote
-Socket Size   Request  Resp.   Elapsed  Trans.
-Send   Recv   Size     Size    Time     Rate
-bytes  Bytes  bytes    bytes   secs.    per sec
-
-16384  87380  1        1       10.00    29150.15
-16384  87380</example>
-      <para>In this example the request and response sizes were one byte, the socket buffers were left at their defaults, and the test ran for all of 10 seconds.  The transaction per second rate was rather good for the time :)</para>
-    </subsection>
-  </node>
-  <node>
-    <nodename>TCP_CC</nodename>
-    <nodenext>TCP_CRR</nodenext>
-    <nodeprev>TCP_RR</nodeprev>
-    <nodeup>Options Common to TCP UDP and SCTP _RR tests</nodeup>
-    <subsection>
-      <title>TCP_CC</title>
-      <para><indexterm index="cp">Connection Latency</indexterm><indexterm index="cp">Latency, Connection Establishment</indexterm> A TCP_CC (TCP Connect/Close) test is requested by passing a value of &ldquo;TCP_CC&rdquo; to the global <option>-t</option> option.  A TCP_CC test simply measures how fast the pair of systems can open and close connections between one another in a synchronous (one at a time) manner.  While this is considered an _RR test, no request or response is exchanged over the connection.</para>
-      <para><indexterm index="cp">Port Reuse</indexterm><indexterm index="cp">TIME_WAIT</indexterm>The issue of TIME_WAIT reuse is an important one for a TCP_CC test. Basically, TIME_WAIT reuse is when a pair of systems churn through connections fast enough that they wrap the 16-bit port number space in less time than the length of the TIME_WAIT state.  While it is indeed theoretically possible to &ldquo;reuse&rdquo; a connection in TIME_WAIT, the conditions under which such reuse is possible are rather rare.  An attempt to reuse a connection in TIME_WAIT can result in a non-trivial delay in connection establishment.</para>
-      <para>Basically, any time the connection churn rate approaches:</para>
-      <para>Sizeof(clientportspace) / Lengthof(TIME_WAIT)</para>
-      <para>there is the risk of TIME_WAIT reuse.  To minimize the chances of this happening, netperf will by default select its own client port numbers from the range of 5000 to 65535.  On systems with a 60 second TIME_WAIT state, this should allow roughly 1000 transactions per second.  The size of the client port space used by netperf can be controlled via the test-specific <option>-p</option> option, which takes a <dfn>sizespec</dfn> as a value setting the minimum (first value) and maximum (second value) port numbers used by netperf at the client end.</para>
-      <para>Since no requests or responses are exchanged during a TCP_CC test, only the <option>-H</option>, <option>-L</option>, <option>-4</option> and <option>-6</option> of the &ldquo;common&rdquo; test-specific options are likely to have an effect, if any, on the results.  The <option>-s</option> and <option>-S</option> options _may_ have some effect if they alter the number and/or type of options carried in the TCP SYNchronize segments, such as Window Scaling or Timestamps. The <option>-P</option> and <option>-r</option> options are utterly ignored.</para>
-      <para>Since connection establishment and tear-down for TCP is not symmetric, a TCP_CC test is not symmetric in its loading of the two systems under test.</para>
-    </subsection>
-  </node>
-  <node>
-    <nodename>TCP_CRR</nodename>
-    <nodenext>UDP_RR</nodenext>
-    <nodeprev>TCP_CC</nodeprev>
-    <nodeup>Options Common to TCP UDP and SCTP _RR tests</nodeup>
-    <subsection>
-      <title>TCP_CRR</title>
-      <para><indexterm index="cp">Latency, Connection Establishment</indexterm><indexterm index="cp">Latency, Request-Response</indexterm> The TCP Connect/Request/Response (TCP_CRR) test is requested by passing a value of &ldquo;TCP_CRR&rdquo; to the global <option>-t</option> command-line option.  A TCP_CRR test is like a merger of a <xref><xrefnodename>TCP_RR</xrefnodename></xref> and <xref><xrefnodename>TCP_CC</xrefnodename></xref> test which measures the performance of establishing a connection, exchanging a single request/response transaction, and tearing-down that connection.  This is very much like what happens in an HTTP 1.0 or HTTP 1.1 connection when HTTP Keepalives are not used. In fact, the TCP_CRR test was added to netperf to simulate just that.</para>
-      <para>Since a request and response are exchanged the <option>-r</option>, <option>-s</option> and <option>-S</option> options can have an effect on the performance.</para>
-      <para>The issue of TIME_WAIT reuse exists for the TCP_CRR test just as it does for the TCP_CC test.  Similarly, since connection establishment and tear-down is not symmetric, a TCP_CRR test is not symmetric even when the request and response sizes are the same.</para>
-    </subsection>
-  </node>
-  <node>
-    <nodename>UDP_RR</nodename>
-    <nodenext>XTI_TCP_RR</nodenext>
-    <nodeprev>TCP_CRR</nodeprev>
-    <nodeup>Options Common to TCP UDP and SCTP _RR tests</nodeup>
-    <subsection>
-      <title>UDP_RR</title>
-      <para><indexterm index="cp">Latency, Request-Response</indexterm><indexterm index="cp">Packet Loss</indexterm> A UDP Request/Response (UDP_RR) test is requested by passing a value of &ldquo;UDP_RR&rdquo; to a global <option>-t</option> option.  It is very much the same as a TCP_RR test except UDP is used rather than TCP.</para>
-      <para>UDP does not provide for retransmission of lost UDP datagrams, and netperf does not add anything for that either.  This means that if _any_ request or response is lost, the exchange of requests and responses will stop from that point until the test timer expires. Netperf will not really &ldquo;know&rdquo; this has happened - the only symptom will be a low transaction per second rate.  If <option>--enable-burst</option> was included in the <code>configure</code> command and a test-specific <option>-b</option> option used, the UDP_RR test will &ldquo;survive&rdquo; the loss of requests and responses until the sum is one more than the value passed via the <option>-b</option> option. It will though almost certainly run more slowly.</para>
-      <para>The netperf side of a UDP_RR test will call <code>connect()</code> on its data socket and thenceforth use the <code>send()</code> and <code>recv()</code> socket calls.  The netserver side of a UDP_RR test will not call <code>connect()</code> and will use <code>recvfrom()</code> and <code>sendto()</code> calls.  This means that even if the request and response sizes are the same, a UDP_RR test is _not_ symmetric in its loading of the two systems under test.</para>
-      <para>Here is an example of a UDP_RR test between two otherwise identical two-CPU systems joined via a 1 Gigabit Ethernet network:</para>
-      <example xml:space="preserve">$ netperf -T 1 -H 192.168.1.213 -t UDP_RR -c -C
-UDP REQUEST/RESPONSE TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 192.168.1.213 (192.168.1.213) port 0 AF_INET
-Local /Remote
-Socket Size   Request Resp.  Elapsed Trans.   CPU    CPU    S.dem   S.dem
-Send   Recv   Size    Size   Time    Rate     local  remote local   remote
-bytes  bytes  bytes   bytes  secs.   per sec  % I    % I    us/Tr   us/Tr
-
-65535  65535  1       1      10.01   15262.48   13.90  16.11  18.221  21.116
-65535  65535</example>
-      <para>This example includes the <option>-c</option> and <option>-C</option> options to enable CPU utilization reporting and shows the asymmetry in CPU loading.  The <option>-T</option> option was used to make sure netperf and netserver ran on a given CPU and did not move around during the test.</para>
-    </subsection>
-  </node>
-  <node>
-    <nodename>XTI_TCP_RR</nodename>
-    <nodenext>XTI_TCP_CC</nodenext>
-    <nodeprev>UDP_RR</nodeprev>
-    <nodeup>Options Common to TCP UDP and SCTP _RR tests</nodeup>
-    <subsection>
-      <title>XTI_TCP_RR</title>
-      <para><indexterm index="cp">Latency, Request-Response</indexterm> An XTI_TCP_RR test is essentially the same as a <xref><xrefnodename>TCP_RR</xrefnodename></xref> test only using the XTI rather than BSD Sockets interface. It is requested by passing a value of &ldquo;XTI_TCP_RR&rdquo; to the <option>-t</option> global command-line option.</para>
-      <para>The test-specific options for an XTI_TCP_RR test are the same as those for a TCP_RR test with the addition of the <option>-X &lt;devspec&gt;</option> option to specify the names of the local and/or remote XTI device file(s).</para>
-    </subsection>
-  </node>
-  <node>
-    <nodename>XTI_TCP_CC</nodename>
-    <nodenext>XTI_TCP_CRR</nodenext>
-    <nodeprev>XTI_TCP_RR</nodeprev>
-    <nodeup>Options Common to TCP UDP and SCTP _RR tests</nodeup>
-<!-- node-name,  next,  previous,  up -->
-    <subsection>
-      <title>XTI_TCP_CC</title>
-      <para><indexterm index="cp">Latency, Connection Establishment</indexterm> An XTI_TCP_CC test is essentially the same as a <xref><xrefnodename>TCP_CC</xrefnodename><xrefinfoname>TCP_CC</xrefinfoname></xref> test, only using the XTI rather than BSD Sockets interface.</para>
-      <para>The test-specific options for an XTI_TCP_CC test are the same as those for a TCP_CC test with the addition of the <option>-X &lt;devspec&gt;</option> option to specify the names of the local and/or remote XTI device file(s).</para>
-    </subsection>
-  </node>
-  <node>
-    <nodename>XTI_TCP_CRR</nodename>
-    <nodenext>XTI_UDP_RR</nodenext>
-    <nodeprev>XTI_TCP_CC</nodeprev>
-    <nodeup>Options Common to TCP UDP and SCTP _RR tests</nodeup>
-<!-- node-name,  next,  previous,  up -->
-    <subsection>
-      <title>XTI_TCP_CRR</title>
-      <para><indexterm index="cp">Latency, Connection Establishment</indexterm><indexterm index="cp">Latency, Request-Response</indexterm> The XTI_TCP_CRR test is essentially the same as a <xref><xrefnodename>TCP_CRR</xrefnodename><xrefinfoname>TCP_CRR</xrefinfoname></xref> test, only using the XTI rather than BSD Sockets interface.</para>
-      <para>The test-specific options for an XTI_TCP_CRR test are the same as those for a TCP_RR test with the addition of the <option>-X &lt;devspec&gt;</option> option to specify the names of the local and/or remote XTI device file(s).</para>
-    </subsection>
-  </node>
-  <node>
-    <nodename>XTI_UDP_RR</nodename>
-    <nodenext>DLCL_RR</nodenext>
-    <nodeprev>XTI_TCP_CRR</nodeprev>
-    <nodeup>Options Common to TCP UDP and SCTP _RR tests</nodeup>
-    <subsection>
-      <title>XTI_UDP_RR</title>
-      <para><indexterm index="cp">Latency, Request-Response</indexterm> An XTI_UDP_RR test is essentially the same as a UDP_RR test only using the XTI rather than BSD Sockets interface.  It is requested by passing a value of &ldquo;XTI_UDP_RR&rdquo; to the <option>-t</option> global command-line option.</para>
-      <para>The test-specific options for an XTI_UDP_RR test are the same as those for a UDP_RR test with the addition of the <option>-X &lt;devspec&gt;</option> option to specify the name of the local and/or remote XTI device file(s).</para>
-    </subsection>
-  </node>
-  <node>
-    <nodename>DLCL_RR</nodename>
-    <nodenext>DLCO_RR</nodenext>
-    <nodeprev>XTI_UDP_RR</nodeprev>
-    <nodeup>Options Common to TCP UDP and SCTP _RR tests</nodeup>
-<!-- node-name,  next,  previous,  up -->
-    <subsection>
-      <title>DLCL_RR</title>
-      <para><indexterm index="cp">Latency, Request-Response</indexterm></para>
-    </subsection>
-  </node>
-  <node>
-    <nodename>DLCO_RR</nodename>
-    <nodenext>SCTP_RR</nodenext>
-    <nodeprev>DLCL_RR</nodeprev>
-    <nodeup>Options Common to TCP UDP and SCTP _RR tests</nodeup>
-<!-- node-name,  next,  previous,  up -->
-    <subsection>
-      <title>DLCO_RR</title>
-      <para><indexterm index="cp">Latency, Request-Response</indexterm></para>
-    </subsection>
-  </node>
-  <node>
-    <nodename>SCTP_RR</nodename>
-    <nodeprev>DLCO_RR</nodeprev>
-    <nodeup>Options Common to TCP UDP and SCTP _RR tests</nodeup>
-<!-- node-name,  next,  previous,  up -->
-    <subsection>
-      <title>SCTP_RR</title>
-      <para><indexterm index="cp">Latency, Request-Response</indexterm></para>
-    </subsection>
-  </node>
-  <node>
-    <nodename>Using Netperf to Measure Aggregate Performance</nodename>
-    <nodenext>Using Netperf to Measure Bidirectional Transfer</nodenext>
-    <nodeprev>Using Netperf to Measure Request/Response</nodeprev>
-    <nodeup>Top</nodeup>
-<!-- node-name,  next,  previous,  up -->
-    <chapter>
-      <title>Using Netperf to Measure Aggregate Performance</title>
-      <para><indexterm index="cp">Aggregate Performance</indexterm><indexterm index="vr">&ndash;enable-burst, Configure</indexterm> Ultimately, <xref><xrefnodename>Netperf4</xrefnodename><xrefinfoname>Netperf4</xrefinfoname></xref> will be the preferred benchmark to use when one wants to measure aggregate performance because netperf has no support for explicit synchronization of concurrent tests. Until netperf4 is ready for prime time, one can make use of the heuristics and procedures mentioned here for the 85% solution.</para>
-      <para>There are a few ways to measure aggregate performance with netperf. The first is to run multiple, concurrent netperf tests and can be applied to any of the netperf tests.  The second is to configure netperf with <code>--enable-burst</code> and is applicable to the TCP_RR test. The third is a variation on the first.</para>
-      <menu>
-        <menuentry>
-          <menunode>Running Concurrent Netperf Tests</menunode>
-          <menutitle>Running Concurrent Netperf Tests</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-        <menuentry>
-          <menunode>Using --enable-burst</menunode>
-          <menutitle>Using &ndash;enable-burst</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-        <menuentry>
-          <menunode>Using --enable-demo</menunode>
-          <menutitle>Using &ndash;enable-demo</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-      </menu>
-    </chapter>
-  </node>
-  <node>
-    <nodename>Running Concurrent Netperf Tests</nodename>
-    <nodenext>Using --enable-burst</nodenext>
-    <nodeprev>Using Netperf to Measure Aggregate Performance</nodeprev>
-    <nodeup>Using Netperf to Measure Aggregate Performance</nodeup>
-<!-- node-name,  next,  previous,  up -->
-    <section>
-      <title>Running Concurrent Netperf Tests</title>
-      <para><xref><xrefnodename>Netperf4</xrefnodename><xrefinfoname>Netperf4</xrefinfoname></xref> is the preferred benchmark to use when one wants to measure aggregate performance because netperf has no support for explicit synchronization of concurrent tests.  This leaves netperf2 results vulnerable to <dfn>skew</dfn> errors.</para>
-      <para>However, since there are times when netperf4 is unavailable it may be necessary to run netperf. The skew error can be minimized by making use of the confidence interval functionality.  Then one simply launches multiple tests from the shell using a <code>for</code> loop or the like:</para>
-      <example xml:space="preserve">for i in 1 2 3 4
-do
-netperf -t TCP_STREAM -H tardy.cup.hp.com -i 10 -P 0 &amp;
-done</example>
-      <para>which will run four, concurrent <xref><xrefnodename>TCP_STREAM</xrefnodename><xrefinfoname>TCP_STREAM</xrefinfoname></xref> tests from the system on which it is executed to tardy.cup.hp.com.  Each concurrent netperf will iterate 10 times thanks to the <option>-i</option> option and will omit the test banners (option <option>-P</option>) for brevity.  The output looks something like this:</para>
-      <example xml:space="preserve"> 87380  16384  16384    10.03     235.15
- 87380  16384  16384    10.03     235.09
- 87380  16384  16384    10.03     235.38
- 87380  16384  16384    10.03     233.96</example>
-      <para>We can take the sum of the results and be reasonably confident that the aggregate performance was 940 Mbits/s.</para>
-      <para>If you see warnings about netperf not achieving the confidence intervals, the best thing to do is to increase the number of iterations with <option>-i</option> and/or increase the run length of each iteration with <option>-l</option>.</para>
-      <para>You can also enable local (<option>-c</option>) and/or remote (<option>-C</option>) CPU utilization:</para>
-      <example xml:space="preserve">for i in 1 2 3 4
-do
-netperf -t TCP_STREAM -H tardy.cup.hp.com -i 10 -P 0 -c -C &amp;
-done
-
-87380  16384  16384    10.03       235.47   3.67     5.09     10.226  14.180
-87380  16384  16384    10.03       234.73   3.67     5.09     10.260  14.225
-87380  16384  16384    10.03       234.64   3.67     5.10     10.263  14.231
-87380  16384  16384    10.03       234.87   3.67     5.09     10.253  14.215</example>
-      <para>If the CPU utilizations reported for the same system are the same or very very close you can be reasonably confident that skew error is minimized.  Presumably one could then omit <option>-i</option> but that is not advised, particularly when/if the CPU utilization approaches 100 percent.  In the example above we see that the CPU utilization on the local system remains the same for all four tests, and is only off by 0.01 out of 5.09 on the remote system.  As the number of CPUs in the system increases, and so too the odds of saturating a single CPU, the accuracy of similar CPU utilization implying little skew error is diminished.  This is also the case for those increasingly rare single CPU systems if the utilization is reported as 100% or very close to it.</para>
-      <quotation>
-        <para><b>NOTE: It is very important to remember that netperf is calculating system-wide CPU utilization.  When calculating the service demand (those last two columns in the output above) each netperf assumes it is the only thing running on the system.  This means that for concurrent tests the service demands reported by netperf will be wrong.  One has to compute service demands for concurrent tests by hand.</b></para>
-      </quotation>
-      <para>If you wish you can add a unique, global <option>-B</option> option to each command line to append the given string to the output:</para>
-      <example xml:space="preserve">for i in 1 2 3 4
-do
-netperf -t TCP_STREAM -H tardy.cup.hp.com -B "this is test $i" -i 10 -P 0 &amp;
-done
-
-87380  16384  16384    10.03     234.90   this is test 4
-87380  16384  16384    10.03     234.41   this is test 2
-87380  16384  16384    10.03     235.26   this is test 1
-87380  16384  16384    10.03     235.09   this is test 3</example>
-      <para>You will notice that the tests completed in an order other than they were started from the shell.  This underscores why there is a threat of skew error and why netperf4 is the preferred tool for aggregate tests.  Even if you see the Netperf Contributing Editor acting to the contrary!-)</para>
-      <menu>
-        <menuentry>
-          <menunode>Issues in Running Concurrent Tests</menunode>
-          <menutitle>Issues in Running Concurrent Tests</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-      </menu>
-    </section>
-  </node>
-  <node>
-    <nodename>Issues in Running Concurrent Tests</nodename>
-    <nodeprev>Running Concurrent Netperf Tests</nodeprev>
-    <nodeup>Running Concurrent Netperf Tests</nodeup>
-    <subsection>
-      <title>Issues in Running Concurrent Tests</title>
-      <para>In addition to the aforementioned issue of skew error, there can be other issues to consider when running concurrent netperf tests.</para>
-      <para>For example, when running concurrent tests over multiple interfaces, one is not always assured that the traffic one thinks went over a given interface actually did so.  In particular, the Linux networking stack takes a particularly strong stance on its following the so called <samp>weak end system model</samp>.  As such, it is willing to answer ARP requests for any of its local IP addresses on any of its interfaces.  If multiple interfaces are connected to the same broadcast domain, then even if they are configured into separate IP subnets there is no a priori way of knowing which interface was actually used for which connection(s).  This can be addressed by setting the <samp>arp_ignore</samp> sysctl before configuring interfaces.</para>
-      <para>As it is quite important, we will repeat that it is very important to remember that each concurrent netperf instance is calculating system-wide CPU utilization.  When calculating the service demand each netperf assumes it is the only thing running on the system.  This means that for concurrent tests the service demands reported by netperf <b>will be wrong</b>.  One has to compute service demands for concurrent tests by hand</para>
-      <para>Running concurrent tests can also become difficult when there is no one &ldquo;central&rdquo; node.  Running tests between pairs of systems may be more difficult, calling for remote shell commands in the for loop rather than netperf commands.  This introduces more skew error, which the confidence intervals may not be able to sufficiently mitigate. One possibility is to actually run three consecutive netperf tests on each node - the first being a warm-up, the last being a cool-down. The idea then is to ensure that the time it takes to get all the netperfs started is less than the length of the first netperf command in the sequence of three.  Similarly, it assumes that all &ldquo;middle&rdquo; netperfs will complete before the first of the &ldquo;last&rdquo; netperfs complete.</para>
-    </subsection>
-  </node>
-  <node>
-    <nodename>Using --enable-burst</nodename>
-    <nodenext>Using --enable-demo</nodenext>
-    <nodeprev>Running Concurrent Netperf Tests</nodeprev>
-    <nodeup>Using Netperf to Measure Aggregate Performance</nodeup>
-<!-- node-name,  next,  previous,  up -->
-    <section>
-      <title>Using - -enable-burst</title>
-      <para>Starting in version 2.5.0 <code>--enable-burst=yes</code> is the default, which means one no longer must:</para>
-      <example xml:space="preserve">configure --enable-burst</example>
-      <para>To have burst-mode functionality present in netperf.  This enables a test-specific <option>-b num</option> option in <xref><xrefnodename>TCP_RR</xrefnodename><xrefinfoname>TCP_RR</xrefinfoname></xref>, <xref><xrefnodename>UDP_RR</xrefnodename><xrefinfoname>UDP_RR</xrefinfoname></xref> and <xref><xrefnodename>The Omni Tests</xrefnodename><xrefinfoname>omni</xrefinfoname></xref> tests.</para>
-      <para>Normally, netperf will attempt to ramp-up the number of outstanding requests to <option>num</option> plus one transactions in flight at one time. The ramp-up is to avoid transactions being smashed together into a smaller number of segments when the transport's congestion window (if any) is smaller at the time than what netperf wants to have outstanding at one time. If, however, the user specifies a negative value for <option>num</option> this ramp-up is bypassed and the burst of sends is made without consideration of transport congestion window.</para>
-      <para>This burst-mode is used as an alternative to or even in conjunction with multiple-concurrent _RR tests and as a way to implement a single-connection, bidirectional bulk-transfer test.  When run with just a single instance of netperf, increasing the burst size can determine the maximum number of transactions per second which can be serviced by a single process:</para>
-      <example xml:space="preserve">for b in 0 1 2 4 8 16 32
-do
- netperf -v 0 -t TCP_RR -B "-b $b" -H hpcpc108 -P 0 -- -b $b
-done
-
-9457.59 -b 0
-9975.37 -b 1
-10000.61 -b 2
-20084.47 -b 4
-29965.31 -b 8
-71929.27 -b 16
-109718.17 -b 32</example>
-      <para>The global <option>-v</option> and <option>-P</option> options were used to minimize the output to the single figure of merit which in this case the transaction rate.  The global <code>-B</code> option was used to more clearly label the output, and the test-specific <option>-b</option> option enabled by <code>--enable-burst</code> increase the number of transactions in flight at one time.</para>
-      <para>Now, since the test-specific <option>-D</option> option was not specified to set TCP_NODELAY, the stack was free to &ldquo;bundle&rdquo; requests and/or responses into TCP segments as it saw fit, and since the default request and response size is one byte, there could have been some considerable bundling even in the absence of transport congestion window issues.  If one wants to try to achieve a closer to one-to-one correspondence between a request and response and a TCP segment, add the test-specific <option>-D</option> option:</para>
-      <example xml:space="preserve">for b in 0 1 2 4 8 16 32
-do
- netperf -v 0 -t TCP_RR -B "-b $b -D" -H hpcpc108 -P 0 -- -b $b -D
-done
-
- 8695.12 -b 0 -D
- 19966.48 -b 1 -D
- 20691.07 -b 2 -D
- 49893.58 -b 4 -D
- 62057.31 -b 8 -D
- 108416.88 -b 16 -D
- 114411.66 -b 32 -D</example>
-      <para>You can see that this has a rather large effect on the reported transaction rate.  In this particular instance, the author believes it relates to interactions between the test and interrupt coalescing settings in the driver for the NICs used.</para>
-      <quotation>
-        <para><b>NOTE: Even if you set the <option>-D</option> option that is still not a guarantee that each transaction is in its own TCP segments.  You should get into the habit of verifying the relationship between the transaction rate and the packet rate via other means.</b></para>
-      </quotation>
-      <para>You can also combine <code>--enable-burst</code> functionality with concurrent netperf tests.  This would then be an &ldquo;aggregate of aggregates&rdquo; if you like:</para>
-      <example xml:space="preserve">
-for i in 1 2 3 4
-do
- netperf -H hpcpc108 -v 0 -P 0 -i 10 -B "aggregate $i -b 8 -D" -t TCP_RR -- -b 8 -D &amp;
-done
-
- 46668.38 aggregate 4 -b 8 -D
- 44890.64 aggregate 2 -b 8 -D
- 45702.04 aggregate 1 -b 8 -D
- 46352.48 aggregate 3 -b 8 -D
-</example>
-      <para>Since each netperf did hit the confidence intervals, we can be reasonably certain that the aggregate transaction per second rate was the sum of all four concurrent tests, or something just shy of 184,000 transactions per second.  To get some idea if that was also the packet per second rate, we could bracket that <code>for</code> loop with something to gather statistics and run the results through <uref><urefurl>ftp://ftp.cup.hp.com/dist/networking/tools</urefurl><urefdesc>beforeafter</urefdesc></uref>:</para>
-      <example xml:space="preserve">/usr/sbin/ethtool -S eth2 &gt; before
-for i in 1 2 3 4
-do
- netperf -H 192.168.2.108 -l 60 -v 0 -P 0 -B "aggregate $i -b 8 -D" -t TCP_RR -- -b 8 -D &amp;
-done
-wait
-/usr/sbin/ethtool -S eth2 &gt; after
-
- 52312.62 aggregate 2 -b 8 -D
- 50105.65 aggregate 4 -b 8 -D
- 50890.82 aggregate 1 -b 8 -D
- 50869.20 aggregate 3 -b 8 -D
-
-beforeafter before after &gt; delta
-
-grep packets delta
-     rx_packets: 12251544
-     tx_packets: 12251550
-</example>
-      <para>This example uses <code>ethtool</code> because the system being used is running Linux.  Other platforms have other tools - for example HP-UX has lanadmin:</para>
-      <example xml:space="preserve">lanadmin -g mibstats &lt;ppa&gt;</example>
-      <para>and of course one could instead use <code>netstat</code>.</para>
-      <para>The <code>wait</code> is important because we are launching concurrent netperfs in the background.  Without it, the second ethtool command would be run before the tests finished and perhaps even before the last of them got started!</para>
-      <para>The sum of the reported transaction rates is 204178 over 60 seconds, which is a total of 12250680 transactions.  Each transaction is the exchange of a request and a response, so we multiply that by 2 to arrive at 24501360.</para>
-      <para>The sum of the ethtool stats is 24503094 packets which matches what netperf was reporting very well.</para>
-      <para>Had the request or response size differed, we would need to know how it compared with the <dfn>MSS</dfn> for the connection.</para>
-      <para>Just for grins, here is the exercise repeated, using <code>netstat</code> instead of <code>ethtool</code></para>
-      <example xml:space="preserve">netstat -s -t &gt; before
-for i in 1 2 3 4
-do
- netperf -l 60 -H 192.168.2.108 -v 0 -P 0 -B "aggregate $i -b 8 -D" -t TCP_RR -- -b 8 -D &amp; done
-wait
-netstat -s -t &gt; after
-
- 51305.88 aggregate 4 -b 8 -D
- 51847.73 aggregate 2 -b 8 -D
- 50648.19 aggregate 3 -b 8 -D
- 53605.86 aggregate 1 -b 8 -D
-
-beforeafter before after &gt; delta
-
-grep segments delta
-    12445708 segments received
-    12445730 segments send out
-    1 segments retransmited
-    0 bad segments received.</example>
-      <para>The sums are left as an exercise to the reader :)</para>
-      <para>Things become considerably more complicated if there are non-trvial packet losses and/or retransmissions.</para>
-      <para>Of course all this checking is unnecessary if the test is a UDP_RR test because UDP &ldquo;never&rdquo; aggregates multiple sends into the same UDP datagram, and there are no ACKnowledgements in UDP.  The loss of a single request or response will not bring a &ldquo;burst&rdquo; UDP_RR test to a screeching halt, but it will reduce the number of transactions outstanding at any one time.  A &ldquo;burst&rdquo; UDP_RR test <b>will</b> come to a halt if the sum of the lost requests and responses reaches the value specified in the test-specific <option>-b</option> option.</para>
-    </section>
-  </node>
-  <node>
-    <nodename>Using --enable-demo</nodename>
-    <nodeprev>Using --enable-burst</nodeprev>
-    <nodeup>Using Netperf to Measure Aggregate Performance</nodeup>
-    <section>
-      <title>Using - -enable-demo</title>
-      <para>One can</para>
-      <example xml:space="preserve">configure --enable-demo</example>
-      <para>and compile netperf to enable netperf to emit &ldquo;interim results&rdquo; at semi-regular intervals.  This enables a global <code>-D</code> option which takes a reporting interval as an argument.  With that specified, the output of netperf will then look something like</para>
-      <example xml:space="preserve">$ src/netperf -D 1.25
-MIGRATED TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to localhost.localdomain () port 0 AF_INET : demo
-Interim result: 25425.52 10^6bits/s over 1.25 seconds ending at 1327962078.405
-Interim result: 25486.82 10^6bits/s over 1.25 seconds ending at 1327962079.655
-Interim result: 25474.96 10^6bits/s over 1.25 seconds ending at 1327962080.905
-Interim result: 25523.49 10^6bits/s over 1.25 seconds ending at 1327962082.155
-Interim result: 25053.57 10^6bits/s over 1.27 seconds ending at 1327962083.429
-Interim result: 25349.64 10^6bits/s over 1.25 seconds ending at 1327962084.679
-Interim result: 25292.84 10^6bits/s over 1.25 seconds ending at 1327962085.932
-Recv   Send    Send
-Socket Socket  Message  Elapsed
-Size   Size    Size     Time     Throughput
-bytes  bytes   bytes    secs.    10^6bits/sec
-
- 87380  16384  16384    10.00    25375.66</example>
-      <para>The units of the &ldquo;Interim result&rdquo; lines will follow the units selected via the global <code>-f</code> option.  If the test-specific <code>-o</code> option is specified on the command line, the format will be CSV:</para>
-      <example xml:space="preserve">...
-2978.81,MBytes/s,1.25,1327962298.035
-...</example>
-      <para>If the test-specific <code>-k</code> option is used the format will be keyval with each keyval being given an index:</para>
-      <example xml:space="preserve">...
-NETPERF_INTERIM_RESULT[2]=25.00
-NETPERF_UNITS[2]=10^9bits/s
-NETPERF_INTERVAL[2]=1.25
-NETPERF_ENDING[2]=1327962357.249
-...</example>
-      <para>The expectation is it may be easier to utilize the keyvals if they have indices.</para>
-      <para>But how does this help with aggregate tests?  Well, what one can do is start the netperfs via a script, giving each a Very Long (tm) run time.  Direct the output to a file per instance.  Then, once all the netperfs have been started, take a timestamp and wait for some desired test interval.  Once that interval expires take another timestamp and then start terminating the netperfs by sending them a SIGALRM signal via the likes of the <code>kill</code> or <code>pkill</code> command.  The netperfs will terminate and emit the rest of the &ldquo;usual&rdquo; output, and you can then bring the files to a central location for post processing to find the aggregate performance over the &ldquo;test interval.&rdquo;</para>
-      <para>This method has the advantage that it does not require advance knowledge of how long it takes to get netperf tests started and/or stopped.  It does though require sufficiently synchronized clocks on all the test systems.</para>
-      <para>While calls to get the current time can be inexpensive, that neither has nor is universally true.  For that reason netperf tries to minimize the number of such &ldquo;timestamping&rdquo; calls (eg <code>gettimeofday</code>) calls it makes when in demo mode.  Rather than take a timestamp after each <code>send</code> or <code>recv</code> call completes netperf tries to guess how many units of work will be performed over the desired interval.  Only once that many units of work have been completed will netperf check the time.  If the reporting interval has passed, netperf will emit an &ldquo;interim result.&rdquo;  If the interval has not passed, netperf will update its estimate for units and continue.</para>
-      <para>After a bit of thought one can see that if things &ldquo;speed-up&rdquo; netperf will still honor the interval.  However, if things &ldquo;slow-down&rdquo; netperf may be late with an &ldquo;interim result.&rdquo;  Here is an example of both of those happening during a test - with the interval being honored while throughput increases, and then about half-way through when another netperf (not shown) is started we see things slowing down and netperf not hitting the interval as desired.</para>
-      <example xml:space="preserve">$ src/netperf -D 2 -H tardy.hpl.hp.com -l 20
-MIGRATED TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to tardy.hpl.hp.com () port 0 AF_INET : demo
-Interim result:   36.46 10^6bits/s over 2.01 seconds ending at 1327963880.565
-Interim result:   59.19 10^6bits/s over 2.00 seconds ending at 1327963882.569
-Interim result:   73.39 10^6bits/s over 2.01 seconds ending at 1327963884.576
-Interim result:   84.01 10^6bits/s over 2.03 seconds ending at 1327963886.603
-Interim result:   75.63 10^6bits/s over 2.21 seconds ending at 1327963888.814
-Interim result:   55.52 10^6bits/s over 2.72 seconds ending at 1327963891.538
-Interim result:   70.94 10^6bits/s over 2.11 seconds ending at 1327963893.650
-Interim result:   80.66 10^6bits/s over 2.13 seconds ending at 1327963895.777
-Interim result:   86.42 10^6bits/s over 2.12 seconds ending at 1327963897.901
-Recv   Send    Send
-Socket Socket  Message  Elapsed
-Size   Size    Size     Time     Throughput
-bytes  bytes   bytes    secs.    10^6bits/sec
-
- 87380  16384  16384    20.34      68.87</example>
-      <para>So long as your post-processing mechanism can account for that, there should be no problem.  As time passes there may be changes to try to improve the netperf's honoring the interval but one should not ass-u-me it will always do so.  One should not assume the precision will remain fixed - future versions may change it - perhaps going beyond tenths of seconds in reporting the interval length etc.</para>
-    </section>
-  </node>
-  <node>
-    <nodename>Using Netperf to Measure Bidirectional Transfer</nodename>
-    <nodenext>The Omni Tests</nodenext>
-    <nodeprev>Using Netperf to Measure Aggregate Performance</nodeprev>
-    <nodeup>Top</nodeup>
-<!-- node-name,  next,  previous,  up -->
-    <chapter>
-      <title>Using Netperf to Measure Bidirectional Transfer</title>
-      <para>There are two ways to use netperf to measure the performance of bidirectional transfer.  The first is to run concurrent netperf tests from the command line.  The second is to configure netperf with <code>--enable-burst</code> and use a single instance of the <xref><xrefnodename>TCP_RR</xrefnodename><xrefinfoname>TCP_RR</xrefinfoname></xref> test.</para>
-      <para>While neither method is more &ldquo;correct&rdquo; than the other, each is doing so in different ways, and that has possible implications.  For instance, using the concurrent netperf test mechanism means that multiple TCP connections and multiple processes are involved, whereas using the single instance of TCP_RR there is only one TCP connection and one process on each end.  They may behave differently, especially on an MP system.</para>
-      <menu>
-        <menuentry>
-          <menunode>Bidirectional Transfer with Concurrent Tests</menunode>
-          <menutitle>Bidirectional Transfer with Concurrent Tests</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-        <menuentry>
-          <menunode>Bidirectional Transfer with TCP_RR</menunode>
-          <menutitle>Bidirectional Transfer with TCP_RR</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-        <menuentry>
-          <menunode>Implications of Concurrent Tests vs Burst Request/Response</menunode>
-          <menutitle>Implications of Concurrent Tests vs Burst Request/Response</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-      </menu>
-    </chapter>
-  </node>
-  <node>
-    <nodename>Bidirectional Transfer with Concurrent Tests</nodename>
-    <nodenext>Bidirectional Transfer with TCP_RR</nodenext>
-    <nodeprev>Using Netperf to Measure Bidirectional Transfer</nodeprev>
-    <nodeup>Using Netperf to Measure Bidirectional Transfer</nodeup>
-<!-- node-name,  next,  previous,  up -->
-    <section>
-      <title>Bidirectional Transfer with Concurrent Tests</title>
-      <para>If we had two hosts Fred and Ethel, we could simply run a netperf <xref><xrefnodename>TCP_STREAM</xrefnodename><xrefinfoname>TCP_STREAM</xrefinfoname></xref> test on Fred pointing at Ethel, and a concurrent netperf TCP_STREAM test on Ethel pointing at Fred, but since there are no mechanisms to synchronize netperf tests and we would be starting tests from two different systems, there is a considerable risk of skew error.</para>
-      <para>Far better would be to run simultaneous TCP_STREAM and <xref><xrefnodename>TCP_MAERTS</xrefnodename><xrefinfoname>TCP_MAERTS</xrefinfoname></xref> tests from just <b>one</b> system, using the concepts and procedures outlined in <xref><xrefnodename>Running Concurrent Netperf Tests</xrefnodename><xrefinfoname>Running Concurrent Netperf Tests</xrefinfoname></xref>. Here then is an example:</para>
-      <example xml:space="preserve">for i in 1
-do
- netperf -H 192.168.2.108 -t TCP_STREAM -B "outbound" -i 10 -P 0 -v 0 \
-   -- -s 256K -S 256K &amp;
- netperf -H 192.168.2.108 -t TCP_MAERTS -B "inbound"  -i 10 -P 0 -v 0 \
-   -- -s 256K -S 256K &amp;
-done
-
- 892.66 outbound
- 891.34 inbound</example>
-      <para>We have used a <code>for</code> loop in the shell with just one iteration because that will be <b>much</b> easier to get both tests started at more or less the same time than doing it by hand.  The global <option>-P</option> and <option>-v</option> options are used because we aren't interested in anything other than the throughput, and the global <option>-B</option> option is used to tag each output so we know which was inbound and which outbound relative to the system on which we were running netperf.  Of course that sense is switched on the system running netserver :)  The use of the global <option>-i</option> option is explained in <xref><xrefnodename>Running Concurrent Netperf Tests</xrefnodename><xrefinfoname>Running Concurrent Netperf Tests</xrefinfoname></xref>.</para>
-      <para>Beginning with version 2.5.0 we can accomplish a similar result with the <xref><xrefnodename>The Omni Tests</xrefnodename><xrefinfoname>the omni tests</xrefinfoname></xref> and <xref><xrefnodename>Omni Output Selectors</xrefnodename><xrefinfoname>output selectors</xrefinfoname></xref>:</para>
-      <example xml:space="preserve">for i in 1
-do
-  netperf -H 192.168.1.3 -t omni -l 10 -P 0 -- \
-    -d stream -s 256K -S 256K -o throughput,direction &amp;
-  netperf -H 192.168.1.3 -t omni -l 10 -P 0 -- \
-    -d maerts -s 256K -S 256K -o throughput,direction &amp;
-done
-
-805.26,Receive
-828.54,Send</example>
-    </section>
-  </node>
-  <node>
-    <nodename>Bidirectional Transfer with TCP_RR</nodename>
-    <nodenext>Implications of Concurrent Tests vs Burst Request/Response</nodenext>
-    <nodeprev>Bidirectional Transfer with Concurrent Tests</nodeprev>
-    <nodeup>Using Netperf to Measure Bidirectional Transfer</nodeup>
-<!-- node-name,  next,  previous,  up -->
-    <section>
-      <title>Bidirectional Transfer with TCP_RR</title>
-      <para>Starting with version 2.5.0 the <code>--enable-burst</code> configure option defaults to <code>yes</code>, and starting some time before version 2.5.0 but after 2.4.0 the global <option>-f</option> option would affect the &ldquo;throughput&rdquo; reported by request/response tests.  If one uses the test-specific <option>-b</option> option to have several &ldquo;transactions&rdquo; in flight at one time and the test-specific <option>-r</option> option to increase their size, the test looks more and more like a single-connection bidirectional transfer than a simple request/response test.</para>
-      <para>So, putting it all together one can do something like:</para>
-      <example xml:space="preserve">netperf -f m -t TCP_RR -H 192.168.1.3 -v 2 -- -b 6 -r 32K -S 256K -S 256K
-MIGRATED TCP REQUEST/RESPONSE TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 192.168.1.3 (192.168.1.3) port 0 AF_INET : interval : first burst 6
-Local /Remote
-Socket Size   Request  Resp.   Elapsed
-Send   Recv   Size     Size    Time     Throughput
-bytes  Bytes  bytes    bytes   secs.    10^6bits/sec
-
-16384  87380  32768    32768   10.00    1821.30
-524288 524288
-Alignment      Offset         RoundTrip  Trans    Throughput
-Local  Remote  Local  Remote  Latency    Rate     10^6bits/s
-Send   Recv    Send   Recv    usec/Tran  per sec  Outbound   Inbound
-    8      0       0      0   2015.402   3473.252 910.492    910.492</example>
-      <para>to get a bidirectional bulk-throughput result. As one can see, the -v 2 output will include a number of interesting, related values.</para>
-      <quotation>
-        <para><b>NOTE: The logic behind <code>--enable-burst</code> is very simple, and there are no calls to <code>poll()</code> or <code>select()</code> which means we want to make sure that the <code>send()</code> calls will never block, or we run the risk of deadlock with each side stuck trying to call <code>send()</code> and neither calling <code>recv()</code>.</b></para>
-      </quotation>
-      <para>Fortunately, this is easily accomplished by setting a &ldquo;large enough&rdquo; socket buffer size with the test-specific <option>-s</option> and <option>-S</option> options.  Presently this must be performed by the user.  Future versions of netperf might attempt to do this automagically, but there are some issues to be worked-out.</para>
-    </section>
-  </node>
-  <node>
-    <nodename>Implications of Concurrent Tests vs Burst Request/Response</nodename>
-    <nodeprev>Bidirectional Transfer with TCP_RR</nodeprev>
-    <nodeup>Using Netperf to Measure Bidirectional Transfer</nodeup>
-    <section>
-      <title>Implications of Concurrent Tests vs Burst Request/Response</title>
-      <para>There are perhaps subtle but important differences between using concurrent unidirectional tests vs a burst-mode request to measure bidirectional performance.</para>
-      <para>Broadly speaking, a single &ldquo;connection&rdquo; or &ldquo;flow&rdquo; of traffic cannot make use of the services of more than one or two CPUs at either end.  Whether one or two CPUs will be used processing a flow will depend on the specifics of the stack(s) involved and whether or not the global <option>-T</option> option has been used to bind netperf/netserver to specific CPUs.</para>
-      <para>When using concurrent tests there will be two concurrent connections or flows, which means that upwards of four CPUs will be employed processing the packets (global <option>-T</option> used, no more than two if not), however, with just a single, bidirectional request/response test no more than two CPUs will be employed (only one if the global <option>-T</option> is not used).</para>
-      <para>If there is a CPU bottleneck on either system this may result in rather different results between the two methods.</para>
-      <para>Also, with a bidirectional request/response test there is something of a natural balance or synchronization between inbound and outbound - a response will not be sent until a request is received, and (once the burst level is reached) a subsequent request will not be sent until a response is received.  This may mask favoritism in the NIC between inbound and outbound processing.</para>
-      <para>With two concurrent unidirectional tests there is no such synchronization or balance and any favoritism in the NIC may be exposed.</para>
-    </section>
-  </node>
-  <node>
-    <nodename>The Omni Tests</nodename>
-    <nodenext>Other Netperf Tests</nodenext>
-    <nodeprev>Using Netperf to Measure Bidirectional Transfer</nodeprev>
-    <nodeup>Top</nodeup>
-    <chapter>
-      <title>The Omni Tests</title>
-      <para>Beginning with version 2.5.0, netperf begins a migration to the <samp>omni</samp> tests or &ldquo;Two routines to measure them all.&rdquo;  The code for the omni tests can be found in <file>src/nettest_omni.c</file> and the goal is to make it easier for netperf to support multiple protocols and report a great many additional things about the systems under test. Additionally, a flexible output selection mechanism is present which allows the user to chose specifically what values she wishes to have reported and in what format.</para>
-      <para>The omni tests are included by default in version 2.5.0.  To disable them, one must:</para>
-      <example xml:space="preserve">./configure --enable-omni=no ...</example>
-      <para>and remake netperf.  Remaking netserver is optional because even in 2.5.0 it has &ldquo;unmigrated&rdquo; netserver side routines for the classic (eg <file>src/nettest_bsd.c</file>) tests.</para>
-      <menu>
-        <menuentry>
-          <menunode>Native Omni Tests</menunode>
-          <menutitle>Native Omni Tests</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-        <menuentry>
-          <menunode>Migrated Tests</menunode>
-          <menutitle>Migrated Tests</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-        <menuentry>
-          <menunode>Omni Output Selection</menunode>
-          <menutitle>Omni Output Selection</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-      </menu>
-    </chapter>
-  </node>
-  <node>
-    <nodename>Native Omni Tests</nodename>
-    <nodenext>Migrated Tests</nodenext>
-    <nodeprev>The Omni Tests</nodeprev>
-    <nodeup>The Omni Tests</nodeup>
-    <section>
-      <title>Native Omni Tests</title>
-      <para>One access the omni tests &ldquo;natively&rdquo; by using a value of &ldquo;OMNI&rdquo; with the global <option>-t</option> test-selection option.  This will then cause netperf to use the code in <file>src/nettest_omni.c</file> and in particular the test-specific options parser for the omni tests.  The test-specific options for the omni tests are a superset of those for &ldquo;classic&rdquo; tests.  The options added by the omni tests are:</para>
-      <table><indexterm index="vr">-c, Test-specific</indexterm>
-        <tableitem>
-          <tableterm><code>-c</code></tableterm>
-          <item>
-            <para>This explicitly declares that the test is to include connection establishment and tear-down as in either a TCP_CRR or TCP_CC test.</para>
-            <para><indexterm index="vr">-d, Test-specific</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-d &lt;direction&gt;</code></tableterm>
-          <item>
-            <para>This option sets the direction of the test relative to the netperf process.  As of version 2.5.0 one can use the following in a case-insensitive manner:</para>
-            <table>
-              <tableitem>
-                <tableterm><code>send, stream, transmit, xmit or 2</code></tableterm>
-                <item>
-                  <para>Any of which will cause netperf to send to the netserver.</para>
-                </item>
-              </tableitem>
-              <tableitem>
-                <tableterm><code>recv, receive, maerts or 4</code></tableterm>
-                <item>
-                  <para>Any of which will cause netserver to send to netperf.</para>
-                </item>
-              </tableitem>
-              <tableitem>
-                <tableterm><code>rr or 6</code></tableterm>
-                <item>
-                  <para>Either of which will cause a request/response test.</para>
-                </item>
-              </tableitem>
-            </table>
-            <para>Additionally, one can specify two directions separated by a '|' character and they will be OR'ed together.  In this way one can use the &rdquo;Send|Recv&rdquo; that will be emitted by the <xref><xrefnodename>Omni Output Selectors</xrefnodename><xrefinfoname>DIRECTION</xrefinfoname></xref> <xref><xrefnodename>Omni Output Selection</xrefnodename><xrefinfoname>output selector</xrefinfoname></xref> when used with a request/response test.</para>
-            <para><indexterm index="vr">-k, Test-specific</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-k [<xref><xrefnodename>Omni Output Selection</xrefnodename><xrefinfoname>output selector</xrefinfoname></xref>]</code></tableterm>
-          <item>
-            <para>This option sets the style of output to &ldquo;keyval&rdquo; where each line of output has the form:</para>
-            <example xml:space="preserve">key=value</example>
-            <para>For example:</para>
-            <example xml:space="preserve">$ netperf -t omni -- -d rr -k "THROUGHPUT,THROUGHPUT_UNITS"
-OMNI TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to localhost.localdomain (127.0.0.1) port 0 AF_INET : demo
-THROUGHPUT=59092.65
-THROUGHPUT_UNITS=Trans/s</example>
-            <para>Using the <option>-k</option> option will override any previous, test-specific <option>-o</option> or <option>-O</option> option.</para>
-            <para><indexterm index="vr">-o, Test-specific</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-o [<xref><xrefnodename>Omni Output Selection</xrefnodename><xrefinfoname>output selector</xrefinfoname></xref>]</code></tableterm>
-          <item>
-            <para>This option sets the style of output to &ldquo;CSV&rdquo; where there will be one line of comma-separated values, preceded by one line of column names unless the global <option>-P</option> option is used with a value of 0:</para>
-            <example xml:space="preserve">$ netperf -t omni -- -d rr -o "THROUGHPUT,THROUGHPUT_UNITS"
-OMNI TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to localhost.localdomain (127.0.0.1) port 0 AF_INET : demo
-Throughput,Throughput Units
-60999.07,Trans/s</example>
-            <para>Using the <option>-o</option> option will override any previous, test-specific <option>-k</option> or <option>-O</option> option.</para>
-            <para><indexterm index="vr">-O, Test-specific</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-O [<xref><xrefnodename>Omni Output Selection</xrefnodename><xrefinfoname>output selector</xrefinfoname></xref>]</code></tableterm>
-          <item>
-            <para>This option sets the style of output to &ldquo;human readable&rdquo; which will look quite similar to classic netperf output:</para>
-            <example xml:space="preserve">$ netperf -t omni -- -d rr -O "THROUGHPUT,THROUGHPUT_UNITS"
-OMNI TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to localhost.localdomain (127.0.0.1) port 0 AF_INET : demo
-Throughput Throughput
-           Units
-
-
-60492.57   Trans/s</example>
-            <para>Using the <option>-O</option> option will override any previous, test-specific <option>-k</option> or <option>-o</option> option.</para>
-            <para><indexterm index="vr">-t, Test-specific</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-t</code></tableterm>
-          <item>
-            <para>This option explicitly sets the socket type for the test's data connection. As of version 2.5.0 the known socket types include &ldquo;stream&rdquo; and &ldquo;dgram&rdquo; for SOCK_STREAM and SOCK_DGRAM respectively.</para>
-            <para><indexterm index="vr">-T, Test-specific</indexterm></para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-T &lt;protocol&gt;</code></tableterm>
-          <item>
-            <para>This option is used to explicitly set the protocol used for the test. It is case-insensitive. As of version 2.5.0 the protocols known to netperf include:</para>
-            <table>
-              <tableitem>
-                <tableterm><code>TCP</code></tableterm>
-                <item>
-                  <para>Select the Transmission Control Protocol</para>
-                </item>
-              </tableitem>
-              <tableitem>
-                <tableterm><code>UDP</code></tableterm>
-                <item>
-                  <para>Select the User Datagram Protocol</para>
-                </item>
-              </tableitem>
-              <tableitem>
-                <tableterm><code>SDP</code></tableterm>
-                <item>
-                  <para>Select the Sockets Direct Protocol</para>
-                </item>
-              </tableitem>
-              <tableitem>
-                <tableterm><code>DCCP</code></tableterm>
-                <item>
-                  <para>Select the Datagram Congestion Control Protocol</para>
-                </item>
-              </tableitem>
-              <tableitem>
-                <tableterm><code>SCTP</code></tableterm>
-                <item>
-                  <para>Select the Stream Control Transport Protocol</para>
-                </item>
-              </tableitem>
-              <tableitem>
-                <tableterm><code>udplite</code></tableterm>
-                <item>
-                  <para>Select UDP Lite</para>
-                </item>
-              </tableitem>
-            </table>
-            <para>The default is implicit based on other settings.</para>
-          </item>
-        </tableitem>
-      </table>
-      <para>The omni tests also extend the interpretation of some of the classic, test-specific options for the BSD Sockets tests:</para>
-      <table>
-        <tableitem>
-          <tableterm><code>-m &lt;optionspec&gt;</code></tableterm>
-          <item>
-            <para>This can set the send size for either or both of the netperf and netserver sides of the test:</para>
-            <example xml:space="preserve">-m 32K</example>
-            <para>sets only the netperf-side send size to 32768 bytes, and or's-in transmit for the direction. This is effectively the same behaviour as for the classic tests.</para>
-            <example xml:space="preserve">-m ,32K</example>
-            <para>sets only the netserver side send size to 32768 bytes and or's-in receive for the direction.</para>
-            <example xml:space="preserve">-m 16K,32K
-sets the netperf side send size to 16284 bytes, the netserver side
-send size to 32768 bytes and the direction will be "Send|Recv."</example>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>-M &lt;optionspec&gt;</code></tableterm>
-          <item>
-            <para>This can set the receive size for either or both of the netperf and netserver sides of the test:</para>
-            <example xml:space="preserve">-M 32K</example>
-            <para>sets only the netserver side receive size to 32768 bytes and or's-in send for the test direction.</para>
-            <example xml:space="preserve">-M ,32K</example>
-            <para>sets only the netperf side receive size to 32768 bytes and or's-in receive for the test direction.</para>
-            <example xml:space="preserve">-M 16K,32K</example>
-            <para>sets the netserver side receive size to 16384 bytes and the netperf side receive size to 32768 bytes and the direction will be "Send|Recv."</para>
-          </item>
-        </tableitem>
-      </table>
-    </section>
-  </node>
-  <node>
-    <nodename>Migrated Tests</nodename>
-    <nodenext>Omni Output Selection</nodenext>
-    <nodeprev>Native Omni Tests</nodeprev>
-    <nodeup>The Omni Tests</nodeup>
-    <section>
-      <title>Migrated Tests</title>
-      <para>As of version 2.5.0 several tests have been migrated to use the omni code in <file>src/nettest_omni.c</file> for the core of their testing.  A migrated test retains all its previous output code and so should still &ldquo;look and feel&rdquo; just like a pre-2.5.0 test with one exception - the first line of the test banners will include the word &ldquo;MIGRATED&rdquo; at the beginning as in:</para>
-      <example xml:space="preserve">$ netperf
-MIGRATED TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to localhost.localdomain (127.0.0.1) port 0 AF_INET : demo
-Recv   Send    Send
-Socket Socket  Message  Elapsed
-Size   Size    Size     Time     Throughput
-bytes  bytes   bytes    secs.    10^6bits/sec
-
- 87380  16384  16384    10.00    27175.27</example>
-      <para>The tests migrated in version 2.5.0 are:</para>
-      <itemize>
-        <itemfunction>&bullet;</itemfunction>
-        <item>
-          <para>TCP_STREAM</para>
-        </item>
-        <item>
-          <para>TCP_MAERTS</para>
-        </item>
-        <item>
-          <para>TCP_RR</para>
-        </item>
-        <item>
-          <para>TCP_CRR</para>
-        </item>
-        <item>
-          <para>UDP_STREAM</para>
-        </item>
-        <item>
-          <para>UDP_RR</para>
-        </item>
-      </itemize>
-      <para>It is expected that future releases will have additional tests migrated to use the &ldquo;omni&rdquo; functionality.</para>
-      <para>If one uses &ldquo;omni-specific&rdquo; test-specific options in conjunction with a migrated test, instead of using the classic output code, the new omni output code will be used. For example if one uses the <option>-k</option> test-specific option with a value of &ldquo;MIN_LATENCY,MAX_LATENCY&rdquo; with a migrated TCP_RR test one will see:</para>
-      <example xml:space="preserve">$ netperf -t tcp_rr -- -k THROUGHPUT,THROUGHPUT_UNITS
-MIGRATED TCP REQUEST/RESPONSE TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to localhost.localdomain (127.0.0.1) port 0 AF_INET : demo
-THROUGHPUT=60074.74
-THROUGHPUT_UNITS=Trans/s</example>
-      <para>rather than:</para>
-      <example xml:space="preserve">$ netperf -t tcp_rr
-MIGRATED TCP REQUEST/RESPONSE TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to localhost.localdomain (127.0.0.1) port 0 AF_INET : demo
-Local /Remote
-Socket Size   Request  Resp.   Elapsed  Trans.
-Send   Recv   Size     Size    Time     Rate
-bytes  Bytes  bytes    bytes   secs.    per sec
-
-16384  87380  1        1       10.00    59421.52
-16384  87380</example>
-    </section>
-  </node>
-  <node>
-    <nodename>Omni Output Selection</nodename>
-    <nodeprev>Migrated Tests</nodeprev>
-    <nodeup>The Omni Tests</nodeup>
-    <section>
-      <title>Omni Output Selection</title>
-      <para>The omni test-specific <option>-k</option>, <option>-o</option> and <option>-O</option> options take an optional <code>output selector</code> by which the user can configure what values are reported.  The output selector can take several forms:</para>
-      <table>
-        <tableitem>
-          <tableterm><code><file>filename</file></code></tableterm>
-          <item>
-            <para>The output selections will be read from the named file. Within the file there can be up to four lines of comma-separated output selectors. This controls how many multi-line blocks of output are emitted when the <option>-O</option> option is used.  This output, while not identical to &ldquo;classic&rdquo; netperf output, is inspired by it.  Multiple lines have no effect for <option>-k</option> and <option>-o</option> options.  Putting output selections in a file can be useful when the list of selections is long.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>comma and/or semi-colon-separated list</code></tableterm>
-          <item>
-            <para>The output selections will be parsed from a comma and/or semi-colon-separated list of output selectors. When the list is given to a <option>-O</option> option a semi-colon specifies a new output block should be started.  Semi-colons have the same meaning as commas when used with the <option>-k</option> or <option>-o</option> options.  Depending on the command interpreter being used, the semi-colon may have to be escaped somehow to keep it from being interpreted by the command interpreter. This can often be done by enclosing the entire list in quotes.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>all</code></tableterm>
-          <item>
-            <para>If the keyword <b>all</b> is specified it means that all known output values should be displayed at the end of the test.  This can be a great deal of output.  As of version 2.5.0 there are 157 different output selectors.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>?</code></tableterm>
-          <item>
-            <para>If a &ldquo;?&rdquo; is given as the output selection, the list of all known output selectors will be displayed and no test actually run.  When passed to the <option>-O</option> option they will be listed one per line. Otherwise they will be listed as a comma-separated list.  It may be necessary to protect the &ldquo;?&rdquo; from the command interpreter by escaping it or enclosing it in quotes.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>no selector</code></tableterm>
-          <item>
-            <para>If nothing is given to the <option>-k</option>, <option>-o</option> or <option>-O</option> option then the code selects a default set of output selectors inspired by classic netperf output. The format will be the <samp>human readable</samp> format emitted by the test-specific <option>-O</option> option.</para>
-          </item>
-        </tableitem>
-      </table>
-      <para>The order of evaluation will first check for an output selection.  If none is specified with the <option>-k</option>, <option>-o</option> or <option>-O</option> option netperf will select a default based on the characteristics of the test.  If there is an output selection, the code will first check for <samp>?</samp>, then check to see if it is the magic <samp>all</samp> keyword. After that it will check for either <samp>,</samp> or <samp>;</samp> in the selection and take that to mean it is a comma and/or semi-colon-separated list. If none of those checks match, netperf will then assume the output specification is a filename and attempt to open and parse the file.</para>
-      <menu>
-        <menuentry>
-          <menunode>Omni Output Selectors</menunode>
-          <menutitle>Omni Output Selectors</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-      </menu>
-    </section>
-  </node>
-  <node>
-    <nodename>Omni Output Selectors</nodename>
-    <nodeprev>Omni Output Selection</nodeprev>
-    <nodeup>Omni Output Selection</nodeup>
-    <subsection>
-      <title>Omni Output Selectors</title>
-      <para>As of version 2.5.0 the output selectors are:</para>
-      <table>
-        <tableitem>
-          <tableterm><code>OUTPUT_NONE</code></tableterm>
-          <item>
-            <para>This is essentially a null output.  For <option>-k</option> output it will simply add a line that reads &ldquo;OUTPUT_NONE=&rdquo; to the output. For <option>-o</option> it will cause an empty &ldquo;column&rdquo; to be included. For <option>-O</option> output it will cause extra spaces to separate &ldquo;real&rdquo; output.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>SOCKET_TYPE</code></tableterm>
-          <item>
-            <para>This will cause the socket type (eg SOCK_STREAM, SOCK_DGRAM) for the data connection to be output.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>PROTOCOL</code></tableterm>
-          <item>
-            <para>This will cause the protocol used for the data connection to be displayed.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>DIRECTION</code></tableterm>
-          <item>
-            <para>This will display the data flow direction relative to the netperf process. Units: Send or Recv for a unidirectional bulk-transfer test, or Send|Recv for a request/response test.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>ELAPSED_TIME</code></tableterm>
-          <item>
-            <para>This will display the elapsed time in seconds for the test.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>THROUGHPUT</code></tableterm>
-          <item>
-            <para>This will display the throughput for the test. Units: As requested via the global <option>-f</option> option and displayed by the THROUGHPUT_UNITS output selector.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>THROUGHPUT_UNITS</code></tableterm>
-          <item>
-            <para>This will display the units for what is displayed by the <code>THROUGHPUT</code> output selector.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LSS_SIZE_REQ</code></tableterm>
-          <item>
-            <para>This will display the local (netperf) send socket buffer size (aka SO_SNDBUF) requested via the command line. Units: Bytes.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LSS_SIZE</code></tableterm>
-          <item>
-            <para>This will display the local (netperf) send socket buffer size (SO_SNDBUF) immediately after the data connection socket was created. Peculiarities of different networking stacks may lead to this differing from the size requested via the command line. Units: Bytes.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LSS_SIZE_END</code></tableterm>
-          <item>
-            <para>This will display the local (netperf) send socket buffer size (SO_SNDBUF) immediately before the data connection socket is closed. Peculiarities of different networking stacks may lead this to differ from the size requested via the command line and/or the size immediately after the data connection socket was created. Units: Bytes.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LSR_SIZE_REQ</code></tableterm>
-          <item>
-            <para>This will display the local (netperf) receive socket buffer size (aka SO_RCVBUF) requested via the command line. Units: Bytes.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LSR_SIZE</code></tableterm>
-          <item>
-            <para>This will display the local (netperf) receive socket buffer size (SO_RCVBUF) immediately after the data connection socket was created. Peculiarities of different networking stacks may lead to this differing from the size requested via the command line. Units: Bytes.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LSR_SIZE_END</code></tableterm>
-          <item>
-            <para>This will display the local (netperf) receive socket buffer size (SO_RCVBUF) immediately before the data connection socket is closed. Peculiarities of different networking stacks may lead this to differ from the size requested via the command line and/or the size immediately after the data connection socket was created. Units: Bytes.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>RSS_SIZE_REQ</code></tableterm>
-          <item>
-            <para>This will display the remote (netserver) send socket buffer size (aka SO_SNDBUF) requested via the command line. Units: Bytes.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>RSS_SIZE</code></tableterm>
-          <item>
-            <para>This will display the remote (netserver) send socket buffer size (SO_SNDBUF) immediately after the data connection socket was created. Peculiarities of different networking stacks may lead to this differing from the size requested via the command line. Units: Bytes.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>RSS_SIZE_END</code></tableterm>
-          <item>
-            <para>This will display the remote (netserver) send socket buffer size (SO_SNDBUF) immediately before the data connection socket is closed. Peculiarities of different networking stacks may lead this to differ from the size requested via the command line and/or the size immediately after the data connection socket was created. Units: Bytes.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>RSR_SIZE_REQ</code></tableterm>
-          <item>
-            <para>This will display the remote (netserver) receive socket buffer size (aka SO_RCVBUF) requested via the command line. Units: Bytes.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>RSR_SIZE</code></tableterm>
-          <item>
-            <para>This will display the remote (netserver) receive socket buffer size (SO_RCVBUF) immediately after the data connection socket was created. Peculiarities of different networking stacks may lead to this differing from the size requested via the command line. Units: Bytes.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>RSR_SIZE_END</code></tableterm>
-          <item>
-            <para>This will display the remote (netserver) receive socket buffer size (SO_RCVBUF) immediately before the data connection socket is closed. Peculiarities of different networking stacks may lead this to differ from the size requested via the command line and/or the size immediately after the data connection socket was created. Units: Bytes.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_SEND_SIZE</code></tableterm>
-          <item>
-            <para>This will display the size of the buffers netperf passed in any &ldquo;send&rdquo; calls it made on the data connection for a non-request/response test. Units: Bytes.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_RECV_SIZE</code></tableterm>
-          <item>
-            <para>This will display the size of the buffers netperf passed in any &ldquo;receive&rdquo; calls it made on the data connection for a non-request/response test. Units: Bytes.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>REMOTE_SEND_SIZE</code></tableterm>
-          <item>
-            <para>This will display the size of the buffers netserver passed in any &ldquo;send&rdquo; calls it made on the data connection for a non-request/response test. Units: Bytes.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>REMOTE_RECV_SIZE</code></tableterm>
-          <item>
-            <para>This will display the size of the buffers netserver passed in any &ldquo;receive&rdquo; calls it made on the data connection for a non-request/response test. Units: Bytes.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>REQUEST_SIZE</code></tableterm>
-          <item>
-            <para>This will display the size of the requests netperf sent in a request-response test. Units: Bytes.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>RESPONSE_SIZE</code></tableterm>
-          <item>
-            <para>This will display the size of the responses netserver sent in a request-response test. Units: Bytes.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_CPU_UTIL</code></tableterm>
-          <item>
-            <para>This will display the overall CPU utilization during the test as measured by netperf. Units: 0 to 100 percent.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_CPU_METHOD</code></tableterm>
-          <item>
-            <para>This will display the method used by netperf to measure CPU utilization. Units: single character denoting method.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_SD</code></tableterm>
-          <item>
-            <para>This will display the service demand, or units of CPU consumed per unit of work, as measured by netperf. Units: microseconds of CPU consumed per either KB (K==1024) of data transferred or request/response transaction.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>REMOTE_CPU_UTIL</code></tableterm>
-          <item>
-            <para>This will display the overall CPU utilization during the test as measured by netserver. Units 0 to 100 percent.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>REMOTE_CPU_METHOD</code></tableterm>
-          <item>
-            <para>This will display the method used by netserver to measure CPU utilization. Units: single character denoting method.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>REMOTE_SD</code></tableterm>
-          <item>
-            <para>This will display the service demand, or units of CPU consumed per unit of work, as measured by netserver. Units: microseconds of CPU consumed per either KB (K==1024) of data transferred or request/response transaction.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>SD_UNITS</code></tableterm>
-          <item>
-            <para>This will display the units for LOCAL_SD and REMOTE_SD</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>CONFIDENCE_LEVEL</code></tableterm>
-          <item>
-            <para>This will display the confidence level requested by the user either explicitly via the global <option>-I</option> option, or implicitly via the global <option>-i</option> option.  The value will be either 95 or 99 if confidence intervals have been requested or 0 if they were not. Units: Percent</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>CONFIDENCE_INTERVAL</code></tableterm>
-          <item>
-            <para>This will display the width of the confidence interval requested either explicitly via the global <option>-I</option> option or implicitly via the global <option>-i</option> option.  Units: Width in percent of mean value computed. A value of -1.0 means that confidence intervals were not requested.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>CONFIDENCE_ITERATION</code></tableterm>
-          <item>
-            <para>This will display the number of test iterations netperf undertook, perhaps while attempting to achieve the requested confidence interval and level. If confidence intervals were requested via the command line then the value will be between 3 and 30.  If confidence intervals were not requested the value will be 1.  Units: Iterations</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>THROUGHPUT_CONFID</code></tableterm>
-          <item>
-            <para>This will display the width of the confidence interval actually achieved for <code>THROUGHPUT</code> during the test.  Units: Width of interval as percentage of reported throughput value.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_CPU_CONFID</code></tableterm>
-          <item>
-            <para>This will display the width of the confidence interval actually achieved for overall CPU utilization on the system running netperf (<code>LOCAL_CPU_UTIL</code>) during the test, if CPU utilization measurement was enabled.  Units: Width of interval as percentage of reported CPU utilization.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>REMOTE_CPU_CONFID</code></tableterm>
-          <item>
-            <para>This will display the width of the confidence interval actually achieved for overall CPU utilization on the system running netserver (<code>REMOTE_CPU_UTIL</code>) during the test, if CPU utilization measurement was enabled. Units: Width of interval as percentage of reported CPU utilization.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>TRANSACTION_RATE</code></tableterm>
-          <item>
-            <para>This will display the transaction rate in transactions per second for a request/response test even if the user has requested a throughput in units of bits or bytes per second via the global <option>-f</option> option. It is undefined for a non-request/response test. Units: Transactions per second.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>RT_LATENCY</code></tableterm>
-          <item>
-            <para>This will display the average round-trip latency for a request/response test, accounting for number of transactions in flight at one time. It is undefined for a non-request/response test. Units: Microseconds per transaction</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>BURST_SIZE</code></tableterm>
-          <item>
-            <para>This will display the &ldquo;burst size&rdquo; or added transactions in flight in a request/response test as requested via a test-specific <option>-b</option> option.  The number of transactions in flight at one time will be one greater than this value.  It is undefined for a non-request/response test. Units: added Transactions in flight.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_TRANSPORT_RETRANS</code></tableterm>
-          <item>
-            <para>This will display the number of retransmissions experienced on the data connection during the test as determined by netperf.  A value of -1 means the attempt to determine the number of retransmissions failed or the concept was not valid for the given protocol or the mechanism is not known for the platform. A value of -2 means it was not attempted. As of version 2.5.0 the meaning of values are in flux and subject to change.  Units: number of retransmissions.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>REMOTE_TRANSPORT_RETRANS</code></tableterm>
-          <item>
-            <para>This will display the number of retransmissions experienced on the data connection during the test as determined by netserver.  A value of -1 means the attempt to determine the number of retransmissions failed or the concept was not valid for the given protocol or the mechanism is not known for the platform. A value of -2 means it was not attempted. As of version 2.5.0 the meaning of values are in flux and subject to change.  Units: number of retransmissions.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>TRANSPORT_MSS</code></tableterm>
-          <item>
-            <para>This will display the Maximum Segment Size (aka MSS) or its equivalent for the protocol being used during the test.  A value of -1 means either the concept of an MSS did not apply to the protocol being used, or there was an error in retrieving it. Units: Bytes.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_SEND_THROUGHPUT</code></tableterm>
-          <item>
-            <para>The throughput as measured by netperf for the successful &ldquo;send&rdquo; calls it made on the data connection. Units: as requested via the global <option>-f</option> option and displayed via the <code>THROUGHPUT_UNITS</code> output selector.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_RECV_THROUGHPUT</code></tableterm>
-          <item>
-            <para>The throughput as measured by netperf for the successful &ldquo;receive&rdquo; calls it made on the data connection. Units: as requested via the global <option>-f</option> option and displayed via the <code>THROUGHPUT_UNITS</code> output selector.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>REMOTE_SEND_THROUGHPUT</code></tableterm>
-          <item>
-            <para>The throughput as measured by netserver for the successful &ldquo;send&rdquo; calls it made on the data connection. Units: as requested via the global <option>-f</option> option and displayed via the <code>THROUGHPUT_UNITS</code> output selector.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>REMOTE_RECV_THROUGHPUT</code></tableterm>
-          <item>
-            <para>The throughput as measured by netserver for the successful &ldquo;receive&rdquo; calls it made on the data connection. Units: as requested via the global <option>-f</option> option and displayed via the <code>THROUGHPUT_UNITS</code> output selector.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_CPU_BIND</code></tableterm>
-          <item>
-            <para>The CPU to which netperf was bound, if at all, during the test. A value of -1 means that netperf was not explicitly bound to a CPU during the test. Units: CPU ID</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_CPU_COUNT</code></tableterm>
-          <item>
-            <para>The number of CPUs (cores, threads) detected by netperf. Units: CPU count.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_CPU_PEAK_UTIL</code></tableterm>
-          <item>
-            <para>The utilization of the CPU most heavily utilized during the test, as measured by netperf. This can be used to see if any one CPU of a multi-CPU system was saturated even though the overall CPU utilization as reported by <code>LOCAL_CPU_UTIL</code> was low. Units: 0 to 100%</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_CPU_PEAK_ID</code></tableterm>
-          <item>
-            <para>The id of the CPU most heavily utilized during the test as determined by netperf. Units: CPU ID.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_CPU_MODEL</code></tableterm>
-          <item>
-            <para>Model information for the processor(s) present on the system running netperf. Assumes all processors in the system (as perceived by netperf) on which netperf is running are the same model. Units: Text</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_CPU_FREQUENCY</code></tableterm>
-          <item>
-            <para>The frequency of the processor(s) on the system running netperf, at the time netperf made the call.  Assumes that all processors present in the system running netperf are running at the same frequency. Units: MHz</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>REMOTE_CPU_BIND</code></tableterm>
-          <item>
-            <para>The CPU to which netserver was bound, if at all, during the test. A value of -1 means that netperf was not explicitly bound to a CPU during the test. Units: CPU ID</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>REMOTE_CPU_COUNT</code></tableterm>
-          <item>
-            <para>The number of CPUs (cores, threads) detected by netserver. Units: CPU count.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>REMOTE_CPU_PEAK_UTIL</code></tableterm>
-          <item>
-            <para>The utilization of the CPU most heavily utilized during the test, as measured by netserver. This can be used to see if any one CPU of a multi-CPU system was saturated even though the overall CPU utilization as reported by <code>REMOTE_CPU_UTIL</code> was low. Units: 0 to 100%</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>REMOTE_CPU_PEAK_ID</code></tableterm>
-          <item>
-            <para>The id of the CPU most heavily utilized during the test as determined by netserver. Units: CPU ID.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>REMOTE_CPU_MODEL</code></tableterm>
-          <item>
-            <para>Model information for the processor(s) present on the system running netserver. Assumes all processors in the system (as perceived by netserver) on which netserver is running are the same model. Units: Text</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>REMOTE_CPU_FREQUENCY</code></tableterm>
-          <item>
-            <para>The frequency of the processor(s) on the system running netserver, at the time netserver made the call.  Assumes that all processors present in the system running netserver are running at the same frequency. Units: MHz</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>SOURCE_PORT</code></tableterm>
-          <item>
-            <para>The port ID/service name to which the data socket created by netperf was bound.  A value of 0 means the data socket was not explicitly bound to a port number. Units: ASCII text.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>SOURCE_ADDR</code></tableterm>
-          <item>
-            <para>The name/address to which the data socket created by netperf was bound. A value of 0.0.0.0 means the data socket was not explicitly bound to an address. Units: ASCII text.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>SOURCE_FAMILY</code></tableterm>
-          <item>
-            <para>The address family to which the data socket created by netperf was bound.  A value of 0 means the data socket was not explicitly bound to a given address family. Units: ASCII text.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>DEST_PORT</code></tableterm>
-          <item>
-            <para>The port ID to which the data socket created by netserver was bound. A value of 0 means the data socket was not explicitly bound to a port number.  Units: ASCII text.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>DEST_ADDR</code></tableterm>
-          <item>
-            <para>The name/address of the data socket created by netserver.  Units: ASCII text.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>DEST_FAMILY</code></tableterm>
-          <item>
-            <para>The address family to which the data socket created by netserver was bound. A value of 0 means the data socket was not explicitly bound to a given address family. Units: ASCII text.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_SEND_CALLS</code></tableterm>
-          <item>
-            <para>The number of successful &ldquo;send&rdquo; calls made by netperf against its data socket. Units: Calls.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_RECV_CALLS</code></tableterm>
-          <item>
-            <para>The number of successful &ldquo;receive&rdquo; calls made by netperf against its data socket. Units: Calls.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_BYTES_PER_RECV</code></tableterm>
-          <item>
-            <para>The average number of bytes per &ldquo;receive&rdquo; call made by netperf against its data socket. Units: Bytes.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_BYTES_PER_SEND</code></tableterm>
-          <item>
-            <para>The average number of bytes per &ldquo;send&rdquo; call made by netperf against its data socket. Units: Bytes.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_BYTES_SENT</code></tableterm>
-          <item>
-            <para>The number of bytes successfully sent by netperf through its data socket. Units: Bytes.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_BYTES_RECVD</code></tableterm>
-          <item>
-            <para>The number of bytes successfully received by netperf through its data socket. Units: Bytes.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_BYTES_XFERD</code></tableterm>
-          <item>
-            <para>The sum of bytes sent and received by netperf through its data socket. Units: Bytes.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_SEND_OFFSET</code></tableterm>
-          <item>
-            <para>The offset from the alignment of the buffers passed by netperf in its &ldquo;send&rdquo; calls. Specified via the global <option>-o</option> option and defaults to 0. Units: Bytes.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_RECV_OFFSET</code></tableterm>
-          <item>
-            <para>The offset from the alignment of the buffers passed by netperf in its &ldquo;receive&rdquo; calls. Specified via the global <option>-o</option> option and defaults to 0. Units: Bytes.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_SEND_ALIGN</code></tableterm>
-          <item>
-            <para>The alignment of the buffers passed by netperf in its &ldquo;send&rdquo; calls as specified via the global <option>-a</option> option. Defaults to 8. Units: Bytes.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_RECV_ALIGN</code></tableterm>
-          <item>
-            <para>The alignment of the buffers passed by netperf in its &ldquo;receive&rdquo; calls as specified via the global <option>-a</option> option. Defaults to 8. Units: Bytes.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_SEND_WIDTH</code></tableterm>
-          <item>
-            <para>The &ldquo;width&rdquo; of the ring of buffers through which netperf cycles as it makes its &ldquo;send&rdquo; calls.  Defaults to one more than the local send socket buffer size divided by the send size as determined at the time the data socket is created. Can be used to make netperf more processor data cache unfriendly. Units: number of buffers.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_RECV_WIDTH</code></tableterm>
-          <item>
-            <para>The &ldquo;width&rdquo; of the ring of buffers through which netperf cycles as it makes its &ldquo;receive&rdquo; calls.  Defaults to one more than the local receive socket buffer size divided by the receive size as determined at the time the data socket is created. Can be used to make netperf more processor data cache unfriendly. Units: number of buffers.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_SEND_DIRTY_COUNT</code></tableterm>
-          <item>
-            <para>The number of bytes to &ldquo;dirty&rdquo; (write to) before netperf makes a &ldquo;send&rdquo; call. Specified via the global <option>-k</option> option, which requires that &ndash;enable-dirty=yes was specified with the configure command prior to building netperf. Units: Bytes.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_RECV_DIRTY_COUNT</code></tableterm>
-          <item>
-            <para>The number of bytes to &ldquo;dirty&rdquo; (write to) before netperf makes a &ldquo;recv&rdquo; call. Specified via the global <option>-k</option> option which requires that &ndash;enable-dirty was specified with the configure command prior to building netperf. Units: Bytes.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_RECV_CLEAN_COUNT</code></tableterm>
-          <item>
-            <para>The number of bytes netperf should read &ldquo;cleanly&rdquo; before making a &ldquo;receive&rdquo; call. Specified via the global <option>-k</option> option which requires that &ndash;enable-dirty was specified with configure command prior to building netperf.  Clean reads start were dirty writes ended. Units: Bytes.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_NODELAY</code></tableterm>
-          <item>
-            <para>Indicates whether or not setting the test protocol-specific &ldquo;no delay&rdquo; (eg TCP_NODELAY) option on the data socket used by netperf was requested by the test-specific <option>-D</option> option and successful. Units: 0 means no, 1 means yes.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_CORK</code></tableterm>
-          <item>
-            <para>Indicates whether or not TCP_CORK was set on the data socket used by netperf as requested via the test-specific <option>-C</option> option. 1 means yes, 0 means no/not applicable.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>REMOTE_SEND_CALLS</code></tableterm>
-          <tableterm><code>REMOTE_RECV_CALLS</code></tableterm>
-          <tableterm><code>REMOTE_BYTES_PER_RECV</code></tableterm>
-          <tableterm><code>REMOTE_BYTES_PER_SEND</code></tableterm>
-          <tableterm><code>REMOTE_BYTES_SENT</code></tableterm>
-          <tableterm><code>REMOTE_BYTES_RECVD</code></tableterm>
-          <tableterm><code>REMOTE_BYTES_XFERD</code></tableterm>
-          <tableterm><code>REMOTE_SEND_OFFSET</code></tableterm>
-          <tableterm><code>REMOTE_RECV_OFFSET</code></tableterm>
-          <tableterm><code>REMOTE_SEND_ALIGN</code></tableterm>
-          <tableterm><code>REMOTE_RECV_ALIGN</code></tableterm>
-          <tableterm><code>REMOTE_SEND_WIDTH</code></tableterm>
-          <tableterm><code>REMOTE_RECV_WIDTH</code></tableterm>
-          <tableterm><code>REMOTE_SEND_DIRTY_COUNT</code></tableterm>
-          <tableterm><code>REMOTE_RECV_DIRTY_COUNT</code></tableterm>
-          <tableterm><code>REMOTE_RECV_CLEAN_COUNT</code></tableterm>
-          <tableterm><code>REMOTE_NODELAY</code></tableterm>
-          <tableterm><code>REMOTE_CORK</code></tableterm>
-          <item>
-            <para>These are all like their &ldquo;LOCAL_&rdquo; counterparts only for the netserver rather than netperf.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_SYSNAME</code></tableterm>
-          <item>
-            <para>The name of the OS (eg &ldquo;Linux&rdquo;) running on the system on which netperf was running. Units: ASCII Text</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_SYSTEM_MODEL</code></tableterm>
-          <item>
-            <para>The model name of the system on which netperf was running. Units: ASCII Text.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_RELEASE</code></tableterm>
-          <item>
-            <para>The release name/number of the OS running on the system on which netperf  was running. Units: ASCII Text</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_VERSION</code></tableterm>
-          <item>
-            <para>The version number of the OS running on the system on which netperf was running. Units: ASCII Text</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_MACHINE</code></tableterm>
-          <item>
-            <para>The machine architecture of the machine on which netperf was running. Units: ASCII Text.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>REMOTE_SYSNAME</code></tableterm>
-          <tableterm><code>REMOTE_SYSTEM_MODEL</code></tableterm>
-          <tableterm><code>REMOTE_RELEASE</code></tableterm>
-          <tableterm><code>REMOTE_VERSION</code></tableterm>
-          <tableterm><code>REMOTE_MACHINE</code></tableterm>
-          <item>
-            <para>These are all like their &ldquo;LOCAL_&rdquo; counterparts only for the netserver rather than netperf.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_INTERFACE_NAME</code></tableterm>
-          <item>
-            <para>The name of the probable egress interface through which the data connection went on the system running netperf. Example: eth0. Units: ASCII Text.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_INTERFACE_VENDOR</code></tableterm>
-          <item>
-            <para>The vendor ID of the probable egress interface through which traffic on the data connection went on the system running netperf. Units: Hexadecimal IDs as might be found in a <file>pci.ids</file> file or at <uref><urefurl>http://pciids.sourceforge.net/</urefurl><urefdesc>the PCI ID Repository</urefdesc></uref>.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_INTERFACE_DEVICE</code></tableterm>
-          <item>
-            <para>The device ID of the probable egress interface through which traffic on the data connection went on the system running netperf. Units: Hexadecimal IDs as might be found in a <file>pci.ids</file> file or at <uref><urefurl>http://pciids.sourceforge.net/</urefurl><urefdesc>the PCI ID Repository</urefdesc></uref>.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_INTERFACE_SUBVENDOR</code></tableterm>
-          <item>
-            <para>The sub-vendor ID of the probable egress interface through which traffic on the data connection went on the system running netperf. Units: Hexadecimal IDs as might be found in a <file>pci.ids</file> file or at <uref><urefurl>http://pciids.sourceforge.net/</urefurl><urefdesc>the PCI ID Repository</urefdesc></uref>.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_INTERFACE_SUBDEVICE</code></tableterm>
-          <item>
-            <para>The sub-device ID of the probable egress interface through which traffic on the data connection went on the system running netperf. Units: Hexadecimal IDs as might be found in a <file>pci.ids</file> file or at <uref><urefurl>http://pciids.sourceforge.net/</urefurl><urefdesc>the PCI ID Repository</urefdesc></uref>.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_DRIVER_NAME</code></tableterm>
-          <item>
-            <para>The name of the driver used for the probable egress interface through which traffic on the data connection went on the system running netperf. Units: ASCII Text.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_DRIVER_VERSION</code></tableterm>
-          <item>
-            <para>The version string for the driver used for the probable egress interface through which traffic on the data connection went on the system running netperf. Units: ASCII Text.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_DRIVER_FIRMWARE</code></tableterm>
-          <item>
-            <para>The firmware version for the driver used for the probable egress interface through which traffic on the data connection went on the system running netperf. Units: ASCII Text.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_DRIVER_BUS</code></tableterm>
-          <item>
-            <para>The bus address of the probable egress interface through which traffic on the data connection went on the system running netperf. Units: ASCII Text.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_INTERFACE_SLOT</code></tableterm>
-          <item>
-            <para>The slot ID of the probable egress interface through which traffic on the data connection went on the system running netperf. Units: ASCII Text.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>REMOTE_INTERFACE_NAME</code></tableterm>
-          <tableterm><code>REMOTE_INTERFACE_VENDOR</code></tableterm>
-          <tableterm><code>REMOTE_INTERFACE_DEVICE</code></tableterm>
-          <tableterm><code>REMOTE_INTERFACE_SUBVENDOR</code></tableterm>
-          <tableterm><code>REMOTE_INTERFACE_SUBDEVICE</code></tableterm>
-          <tableterm><code>REMOTE_DRIVER_NAME</code></tableterm>
-          <tableterm><code>REMOTE_DRIVER_VERSION</code></tableterm>
-          <tableterm><code>REMOTE_DRIVER_FIRMWARE</code></tableterm>
-          <tableterm><code>REMOTE_DRIVER_BUS</code></tableterm>
-          <tableterm><code>REMOTE_INTERFACE_SLOT</code></tableterm>
-          <item>
-            <para>These are all like their &ldquo;LOCAL_&rdquo; counterparts only for the netserver rather than netperf.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_INTERVAL_USECS</code></tableterm>
-          <item>
-            <para>The interval at which bursts of operations (sends, receives, transactions) were attempted by netperf.  Specified by the global <option>-w</option> option which requires &ndash;enable-intervals to have been specified with the configure command prior to building netperf. Units: Microseconds (though specified by default in milliseconds on the command line)</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_INTERVAL_BURST</code></tableterm>
-          <item>
-            <para>The number of operations (sends, receives, transactions depending on the test) which were attempted by netperf each LOCAL_INTERVAL_USECS units of time. Specified by the global <option>-b</option> option which requires &ndash;enable-intervals to have been specified with the configure command prior to building netperf.  Units: number of operations per burst.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>REMOTE_INTERVAL_USECS</code></tableterm>
-          <item>
-            <para>The interval at which bursts of operations (sends, receives, transactions) were attempted by netserver.  Specified by the global <option>-w</option> option which requires &ndash;enable-intervals to have been specified with the configure command prior to building netperf. Units: Microseconds (though specified by default in milliseconds on the command line)</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>REMOTE_INTERVAL_BURST</code></tableterm>
-          <item>
-            <para>The number of operations (sends, receives, transactions depending on the test) which were attempted by netperf each LOCAL_INTERVAL_USECS units of time. Specified by the global <option>-b</option> option which requires &ndash;enable-intervals to have been specified with the configure command prior to building netperf.  Units: number of operations per burst.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>LOCAL_SECURITY_TYPE_ID</code></tableterm>
-          <tableterm><code>LOCAL_SECURITY_TYPE</code></tableterm>
-          <tableterm><code>LOCAL_SECURITY_ENABLED_NUM</code></tableterm>
-          <tableterm><code>LOCAL_SECURITY_ENABLED</code></tableterm>
-          <tableterm><code>LOCAL_SECURITY_SPECIFIC</code></tableterm>
-          <tableterm><code>REMOTE_SECURITY_TYPE_ID</code></tableterm>
-          <tableterm><code>REMOTE_SECURITY_TYPE</code></tableterm>
-          <tableterm><code>REMOTE_SECURITY_ENABLED_NUM</code></tableterm>
-          <tableterm><code>REMOTE_SECURITY_ENABLED</code></tableterm>
-          <tableterm><code>REMOTE_SECURITY_SPECIFIC</code></tableterm>
-          <item>
-            <para>A bunch of stuff related to what sort of security mechanisms (eg SELINUX) were enabled on the systems during the test.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>RESULT_BRAND</code></tableterm>
-          <item>
-            <para>The string specified by the user with the global <option>-B</option> option. Units: ASCII Text.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>UUID</code></tableterm>
-          <item>
-            <para>The universally unique identifier associated with this test, either generated automagically by netperf, or passed to netperf via an omni test-specific <option>-u</option> option. Note: Future versions may make this a global command-line option. Units: ASCII Text.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>MIN_LATENCY</code></tableterm>
-          <item>
-            <para>The minimum &ldquo;latency&rdquo; or operation time (send, receive or request/response exchange depending on the test) as measured on the netperf side when the global <option>-j</option> option was specified. Units: Microseconds.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>MAX_LATENCY</code></tableterm>
-          <item>
-            <para>The maximum &ldquo;latency&rdquo; or operation time (send, receive or request/response exchange depending on the test) as measured on the netperf side when the global <option>-j</option> option was specified. Units: Microseconds.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>P50_LATENCY</code></tableterm>
-          <item>
-            <para>The 50th percentile value of &ldquo;latency&rdquo; or operation time (send, receive or request/response exchange depending on the test) as measured on the netperf side when the global <option>-j</option> option was specified. Units: Microseconds.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>P90_LATENCY</code></tableterm>
-          <item>
-            <para>The 90th percentile value of &ldquo;latency&rdquo; or operation time (send, receive or request/response exchange depending on the test) as measured on the netperf side when the global <option>-j</option> option was specified. Units: Microseconds.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>P99_LATENCY</code></tableterm>
-          <item>
-            <para>The 99th percentile value of &ldquo;latency&rdquo; or operation time (send, receive or request/response exchange depending on the test) as measured on the netperf side when the global <option>-j</option> option was specified. Units: Microseconds.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>MEAN_LATENCY</code></tableterm>
-          <item>
-            <para>The average &ldquo;latency&rdquo; or operation time (send, receive or request/response exchange depending on the test) as measured on the netperf side when the global <option>-j</option> option was specified. Units: Microseconds.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>STDDEV_LATENCY</code></tableterm>
-          <item>
-            <para>The standard deviation of &ldquo;latency&rdquo; or operation time (send, receive or request/response exchange depending on the test) as measured on the netperf side when the global <option>-j</option> option was specified. Units: Microseconds.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>COMMAND_LINE</code></tableterm>
-          <item>
-            <para>The full command line used when invoking netperf. Units: ASCII Text.</para>
-          </item>
-        </tableitem>
-        <tableitem>
-          <tableterm><code>OUTPUT_END</code></tableterm>
-          <item>
-            <para>While emitted with the list of output selectors, it is ignored when specified as an output selector.</para>
-          </item>
-        </tableitem>
-      </table>
-    </subsection>
-  </node>
-  <node>
-    <nodename>Other Netperf Tests</nodename>
-    <nodenext>Address Resolution</nodenext>
-    <nodeprev>The Omni Tests</nodeprev>
-    <nodeup>Top</nodeup>
-    <chapter>
-      <title>Other Netperf Tests</title>
-      <para>Apart from the typical performance tests, netperf contains some tests which can be used to streamline measurements and reporting.  These include CPU rate calibration (present) and host identification (future enhancement).</para>
-      <menu>
-        <menuentry>
-          <menunode>CPU rate calibration</menunode>
-          <menutitle>CPU rate calibration</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-        <menuentry>
-          <menunode>UUID Generation</menunode>
-          <menutitle>UUID Generation</menutitle>
-          <menucomment></menucomment>
-        </menuentry>
-      </menu>
-    </chapter>
-  </node>
-  <node>
-    <nodename>CPU rate calibration</nodename>
-    <nodenext>UUID Generation</nodenext>
-    <nodeprev>Other Netperf Tests</nodeprev>
-    <nodeup>Other Netperf Tests</nodeup>
-    <section>
-      <title>CPU rate calibration</title>
-      <para>Some of the CPU utilization measurement mechanisms of netperf work by comparing the rate at which some counter increments when the system is idle with the rate at which that same counter increments when the system is running a netperf test.  The ratio of those rates is used to arrive at a CPU utilization percentage.</para>
-      <para>This means that netperf must know the rate at which the counter increments when the system is presumed to be &ldquo;idle.&rdquo;  If it does not know the rate, netperf will measure it before starting a data transfer test.  This calibration step takes 40 seconds for each of the local or remote systems, and if repeated for each netperf test would make taking repeated measurements rather slow.</para>
-      <para>Thus, the netperf CPU utilization options <option>-c</option> and and <option>-C</option> can take an optional calibration value.  This value is used as the &ldquo;idle rate&rdquo; and the calibration step is not performed. To determine the idle rate, netperf can be used to run special tests which only report the value of the calibration - they are the LOC_CPU and REM_CPU tests.  These return the calibration value for the local and remote system respectively.  A common way to use these tests is to store their results into an environment variable and use that in subsequent netperf commands:</para>
-      <example xml:space="preserve">LOC_RATE=`netperf -t LOC_CPU`
-REM_RATE=`netperf -H &lt;remote&gt; -t REM_CPU`
-netperf -H &lt;remote&gt; -c $LOC_RATE -C $REM_RATE ... -- ...
-...
-netperf -H &lt;remote&gt; -c $LOC_RATE -C $REM_RATE ... -- ...</example>
-      <para>If you are going to use netperf to measure aggregate results, it is important to use the LOC_CPU and REM_CPU tests to get the calibration values first to avoid issues with some of the aggregate netperf tests transferring data while others are &ldquo;idle&rdquo; and getting bogus calibration values.  When running aggregate tests, it is very important to remember that any one instance of netperf does not know about the other instances of netperf.  It will report global CPU utilization and will calculate service demand believing it was the only thing causing that CPU utilization.  So, you can use the CPU utilization reported by netperf in an aggregate test, but you have to calculate service demands by hand.</para>
-    </section>
-  </node>
-  <node>
-    <nodename>UUID Generation</nodename>
-    <nodeprev>CPU rate calibration</nodeprev>
-    <nodeup>Other Netperf Tests</nodeup>
-    <section>
-      <title>UUID Generation</title>
-      <para>Beginning with version 2.5.0 netperf can generate Universally Unique IDentifiers (UUIDs).  This can be done explicitly via the &ldquo;UUID&rdquo; test:</para>
-      <example xml:space="preserve">$ netperf -t UUID
-2c8561ae-9ebd-11e0-a297-0f5bfa0349d0</example>
-      <para>In and of itself, this is not terribly useful, but used in conjunction with the test-specific <option>-u</option> option of an &ldquo;omni&rdquo; test to set the UUID emitted by the <xref><xrefnodename>Omni Output Selectors</xrefnodename><xrefinfoname>UUID</xrefinfoname></xref> output selector, it can be used to tie-together the separate instances of an aggregate netperf test.  Say, for instance if they were inserted into a database of some sort.</para>
-    </section>
-  </node>
-  <node>
-    <nodename>Address Resolution</nodename>
-    <nodenext>Enhancing Netperf</nodenext>
-    <nodeprev>Other Netperf Tests</nodeprev>
-    <nodeup>Top</nodeup>
-<!-- node-name,  next,  previous,  up -->
-    <chapter>
-      <title>Address Resolution</title>
-      <para>Netperf versions 2.4.0 and later have merged IPv4 and IPv6 tests so the functionality of the tests in <file>src/nettest_ipv6.c</file> has been subsumed into the tests in <file>src/nettest_bsd.c</file>  This has been accomplished in part by switching from <code>gethostbyname()</code>to <code>getaddrinfo()</code> exclusively.  While it was theoretically possible to get multiple results for a hostname from <code>gethostbyname()</code> it was generally unlikely and netperf's ignoring of the second and later results was not much of an issue.</para>
-      <para>Now with <code>getaddrinfo</code> and particularly with AF_UNSPEC it is increasingly likely that a given hostname will have multiple associated addresses.  The <code>establish_control()</code> routine of <file>src/netlib.c</file> will indeed attempt to chose from among all the matching IP addresses when establishing the control connection. Netperf does not _really_ care if the control connection is IPv4 or IPv6 or even mixed on either end.</para>
-      <para>However, the individual tests still ass-u-me that the first result in the address list is the one to be used.  Whether or not this will turn-out to be an issue has yet to be determined.</para>
-      <para>If you do run into problems with this, the easiest workaround is to specify IP addresses for the data connection explicitly in the test-specific <option>-H</option> and <option>-L</option> options.  At some point, the netperf tests _may_ try to be more sophisticated in their parsing of returns from <code>getaddrinfo()</code> - straw-man patches to <email><emailaddress>netperf-feedback@netperf.org</emailaddress></email> would of course be most welcome :)</para>
-      <para>Netperf has leveraged code from other open-source projects with amenable licensing to provide a replacement <code>getaddrinfo()</code> call on those platforms where the <command>configure</command> script believes there is no native getaddrinfo call.  As of this writing, the replacement <code>getaddrinfo()</code> as been tested on HP-UX 11.0 and then presumed to run elsewhere.</para>
-    </chapter>
-  </node>
-  <node>
-    <nodename>Enhancing Netperf</nodename>
-    <nodenext>Netperf4</nodenext>
-    <nodeprev>Address Resolution</nodeprev>
-    <nodeup>Top</nodeup>
-<!-- node-name,  next,  previous,  up -->
-    <chapter>
-      <title>Enhancing Netperf</title>
-      <para>Netperf is constantly evolving.  If you find you want to make enhancements to netperf, by all means do so.  If you wish to add a new &ldquo;suite&rdquo; of tests to netperf the general idea is to:</para>
-      <enumerate first="1">
-        <item>
-          <para>Add files <file>src/nettest_mumble.c</file> and <file>src/nettest_mumble.h</file> where mumble is replaced with something meaningful for the test-suite.</para>
-        </item>
-        <item>
-          <para>Add support for an appropriate <option>--enable-mumble</option> option in <file>configure.ac</file>.</para>
-        </item>
-        <item>
-          <para>Edit <file>src/netperf.c</file>, <file>netsh.c</file>, and <file>netserver.c</file> as required, using #ifdef WANT_MUMBLE.</para>
-        </item>
-        <item>
-          <para>Compile and test</para>
-        </item>
-      </enumerate>
-      <para>However, with the addition of the &ldquo;omni&rdquo; tests in version 2.5.0 it is preferred that one attempt to make the necessary changes to <file>src/nettest_omni.c</file> rather than adding new source files, unless this would make the omni tests entirely too complicated.</para>
-      <para>If you wish to submit your changes for possible inclusion into the mainline sources, please try to base your changes on the latest available sources. (See <xref><xrefnodename>Getting Netperf Bits</xrefnodename></xref>.) and then send email describing the changes at a high level to <email><emailaddress>netperf-feedback@netperf.org</emailaddress></email> or perhaps <email><emailaddress>netperf-talk@netperf.org</emailaddress></email>.  If the consensus is positive, then sending context <command>diff</command> results to <email><emailaddress>netperf-feedback@netperf.org</emailaddress></email> is the next step.  From that point, it is a matter of pestering the Netperf Contributing Editor until he gets the changes incorporated :)</para>
-    </chapter>
-  </node>
-  <node>
-    <nodename>Netperf4</nodename>
-    <nodenext>Concept Index</nodenext>
-    <nodeprev>Enhancing Netperf</nodeprev>
-    <nodeup>Top</nodeup>
-<!-- node-name,  next,  previous,  up -->
-    <chapter>
-      <title>Netperf4</title>
-      <para>Netperf4 is the shorthand name given to version 4.X.X of netperf. This is really a separate benchmark more than a newer version of netperf, but it is a descendant of netperf so the netperf name is kept.  The facetious way to describe netperf4 is to say it is the egg-laying-woolly-milk-pig version of netperf :)  The more respectful way to describe it is to say it is the version of netperf with support for synchronized, multiple-thread, multiple-test, multiple-system, network-oriented benchmarking.</para>
-      <para>Netperf4 is still undergoing evolution. Those wishing to work with or on netperf4 are encouraged to join the <uref><urefurl>http://www.netperf.org/cgi-bin/mailman/listinfo/netperf-dev</urefurl><urefdesc>netperf-dev</urefdesc></uref> mailing list and/or peruse the <uref><urefurl>http://www.netperf.org/svn/netperf4/trunk</urefurl><urefdesc>current sources</urefdesc></uref>.</para>
-    </chapter>
-  </node>
-  <node>
-    <nodename>Concept Index</nodename>
-    <nodenext>Option Index</nodenext>
-    <nodeprev>Netperf4</nodeprev>
-    <nodeup>Top</nodeup>
-    <unnumbered>
-      <title>Concept Index</title>
-      <printindex>cp</printindex>
-    </unnumbered>
-  </node>
-  <node>
-    <nodename>Option Index</nodename>
-    <nodeprev>Concept Index</nodeprev>
-    <nodeup>Top</nodeup>
-<!-- node-name,  next,  previous,  up -->
-    <unnumbered>
-      <title>Option Index</title>
-      <printindex>vr</printindex>
-    </unnumbered>
-  </node>
-</texinfo>
-<!-- Keep this comment at the end of the file
-Local variables:
-mode: sgml
-sgml-indent-step:1
-sgml-indent-data:nil
-End:
--->
diff --git a/src/hist.h b/src/hist.h
index ebe6f9a..c2c75b2 100644
--- a/src/hist.h
+++ b/src/hist.h
@@ -67,7 +67,7 @@
 #endif
 
 #ifndef HIST_NUM_OF_BUCKET
-#define HIST_NUM_OF_BUCKET 100
+#define HIST_NUM_OF_BUCKET 10000
 #endif
 
 struct histogram_struct {
diff --git a/src/netlib.c b/src/netlib.c
index 5783e9a..0cbf1cd 100644
--- a/src/netlib.c
+++ b/src/netlib.c
@@ -21,6 +21,10 @@
 # USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
 
+#include <unistd.h>
+#include <stdio.h>
+#include <limits.h>
+
 char    netlib_id[]="\
 @(#)netlib.c (c) Copyright 1993-2012 Hewlett-Packard Company, 2021 Hewlett Packard Enterprise Development LP. Version 2.6.0";
 
@@ -188,6 +192,12 @@ char    netlib_id[]="\
 #include "netcpu.h"
 #include "netperf_version.h"
 
+
+int LOG[MAX_LOG_SIZE];
+int log_counter = 0;
+
+FILE *log_file;
+
 /****************************************************************/
 /*                                                              */
 /*      Global constants, macros and variables                  */
@@ -1425,6 +1435,19 @@ netlib_init_cpu_map() {
 void
 netlib_init()
 {
+  for(int k=0;k<MAX_LOG_SIZE;k++){
+    LOG[k] = 0;
+  }
+  char filename[100];
+  sprintf(filename,"netserver.log");
+  log_file = fopen(filename,"w+");
+  char cwd[PATH_MAX];
+   if (getcwd(cwd, sizeof(cwd)) != NULL) {
+       printf("Current working dir: %s\n", cwd);
+   } else {
+       perror("getcwd() error");
+       return 1;
+   }
   int i;
 
   where = stdout;
@@ -4286,6 +4309,8 @@ HIST_purge(HIST h) {
 
 void
 HIST_add(register HIST h, int time_delta){
+  LOG[log_counter % MAX_LOG_SIZE] = time_delta;
+  log_counter++;
    register float val;
    register int base = HIST_NUM_OF_BUCKET / 10;
 
diff --git a/src/netlib.h b/src/netlib.h
index b1f4199..e0797b6 100644
--- a/src/netlib.h
+++ b/src/netlib.h
@@ -386,6 +386,7 @@ struct cpu_stats_struct {
  XENIX errors that errno covers.  So on NT this is redefined to be
  Perror and it expands all GetLastError texts. */
 
+#define MAX_LOG_SIZE 1000000
 
 #ifdef WIN32
 /* INVALID_SOCKET == INVALID_HANDLE_VALUE == (unsigned int)(~0) */
diff --git a/src/nettest_omni.c b/src/nettest_omni.c
index 5d63f02..dcdc12b 100644
--- a/src/nettest_omni.c
+++ b/src/nettest_omni.c
@@ -167,6 +167,11 @@ char nettest_omni_id[]="\
 #include "netsh.h"
 #include "nettest_bsd.h"
 
+extern int LOG[MAX_LOG_SIZE];
+// extern int log_counter = 0;
+
+extern FILE *log_file;
+
 /* we only really use this once, but the initial patch to
    src/nettest_bsd.c used it in several places. keep it as a macro
    just for kicks and just in case we do end-up needing to use it
@@ -445,7 +450,7 @@ int         receive_timeout = -1;
 /* min and max "latency" */
 int         min_latency = -1, max_latency = -1;
 /* the percentiles */
-int         p50_latency = -1, p90_latency = -1, p99_latency = -1;
+int         p50_latency = -1, p90_latency = -1, p99_latency = -1, p999_latency = -1, p9999_latency = -1;
 /* mean and stddev - while the mean is reduntant with the *_RR test we
    keep it because it won't be for other tests */
 double      mean_latency = -1.0, stddev_latency = -1.0;
@@ -678,6 +683,8 @@ enum netperf_output_name {
   P50_LATENCY,
   P90_LATENCY,
   P99_LATENCY,
+  P999_LATENCY,
+  P9999_LATENCY,
   MEAN_LATENCY,
   STDDEV_LATENCY,
   LOCAL_SOCKET_PRIO,
@@ -1390,6 +1397,10 @@ netperf_output_enum_to_str(enum netperf_output_name output_name)
     return "P90_LATENCY";
   case P99_LATENCY:
     return "P99_LATENCY";
+  case P999_LATENCY:
+    return "P999_LATENCY";
+  case P9999_LATENCY:
+    return "P9999_LATENCY";
   case MEAN_LATENCY:
     return "MEAN_LATENCY";
   case STDDEV_LATENCY:
@@ -2456,6 +2467,12 @@ print_omni_init_list() {
   set_output_elt(P99_LATENCY, "99th", "Percentile", "Latency", "Microseconds",
 		 "%d", &p99_latency, 0, OMNI_WANT_STATS, NETPERF_TYPE_INT32);
 
+  set_output_elt(P999_LATENCY, "99.9th", "Percentile", "Latency", "Microseconds",
+		 "%d", &p999_latency, 0, OMNI_WANT_STATS, NETPERF_TYPE_INT32);
+
+  set_output_elt(P9999_LATENCY, "99.99th", "Percentile", "Latency", "Microseconds",
+		 "%d", &p9999_latency, 0, OMNI_WANT_STATS, NETPERF_TYPE_INT32);
+
   set_output_elt(MEAN_LATENCY, "Mean", "Latency", "Microseconds", "", "%.2f",
 		 &mean_latency, 0, OMNI_WANT_STATS, NETPERF_TYPE_DOUBLE);
 
@@ -5063,6 +5080,14 @@ send_omni_inner(char remote_host[], unsigned int legacy_caller, char header_str[
     p50_latency = HIST_get_percentile(time_hist, 0.50);
     p90_latency = HIST_get_percentile(time_hist, 0.90);
     p99_latency = HIST_get_percentile(time_hist, 0.99);
+    p999_latency = HIST_get_percentile(time_hist, 0.999);
+    p9999_latency = HIST_get_percentile(time_hist, 0.9999);
+
+    //flush the log to a file
+    for(int i=0;i<MAX_LOG_SIZE;i++){
+      fprintf(log_file,"%d\n",LOG[i]);
+      // printf("%d\n",LOG[i]);
+    }
 
   }
 
